

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Aug  8 01:33:50 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    77  0000                     
    78                           	psect	idataBANK1
    79  004946                     __pidataBANK1:
    80                           	opt stack 0
    81                           
    82                           ;initializer for _VKD
    83  004946  00                 	db	0
    84  004947  48                 	db	72
    85  004948  42                 	db	66
    86  004949  00                 	db	0
    87  00494A  8C                 	db	140
    88  00494B  42                 	db	66
    89  00494C  00                 	db	0
    90  00494D  F0                 	db	240
    91  00494E  41                 	db	65
    92  00494F  00                 	db	0
    93  004950  48                 	db	72
    94  004951  42                 	db	66
    95  004952  00                 	db	0
    96  004953  48                 	db	72
    97  004954  42                 	db	66
    98  004955  00                 	db	0
    99  004956  8C                 	db	140
   100  004957  42                 	db	66
   101                           
   102                           ;initializer for _VKP
   103  004958  00                 	db	0
   104  004959  A0                 	db	160
   105  00495A  40                 	db	64
   106  00495B  00                 	db	0
   107  00495C  E0                 	db	224
   108  00495D  40                 	db	64
   109  00495E  00                 	db	0
   110  00495F  C0                 	db	192
   111  004960  40                 	db	64
   112  004961  00                 	db	0
   113  004962  C0                 	db	192
   114  004963  40                 	db	64
   115  004964  00                 	db	0
   116  004965  C0                 	db	192
   117  004966  40                 	db	64
   118  004967  00                 	db	0
   119  004968  C0                 	db	192
   120  004969  40                 	db	64
   121                           
   122                           ;initializer for _VEL
   123  00496A  01C2               	dw	450
   124  00496C  0320               	dw	800
   125  00496E  01A4               	dw	420
   126  004970  03E8               	dw	1000
   127  004972  FC18               	dw	64536
   128  004974  01E5               	dw	485
   129                           
   130                           ;initializer for _fw
   131  004976  0006               	dw	6
   132  004978  0005               	dw	5
   133  00497A  0004               	dw	4
   134  00497C  0003               	dw	3
   135  00497E  0002               	dw	2
   136                           
   137                           ;initializer for _pd
   138  004980  FF38               	dw	65336
   139  004982  FF9C               	dw	65436
   140  004984  0000               	dw	0
   141  004986  0064               	dw	100
   142  004988  00C8               	dw	200
   143                           
   144                           ;initializer for _sd
   145  00498A  0001               	dw	1
   146  00498C  0007               	dw	7
   147  00498E  00                 	db	0
   148  00498F  00                 	db	0
   149  004990  00                 	db	0
   150  004991  00                 	db	0
   151  004992  00                 	db	0
   152  004993  00                 	db	0
   153                           
   154                           ;initializer for _TIMEFRENO
   155  004994  00C8               	dw	200
   156  004996  0000               	dw	0
   157                           
   158                           ;initializer for _test_kd
   159  004998  00                 	db	0
   160  004999  A0                 	db	160
   161  00499A  41                 	db	65
   162                           
   163                           ;initializer for _test_kp
   164  00499B  00                 	db	0
   165  00499C  E0                 	db	224
   166  00499D  40                 	db	64
   167                           
   168                           ;initializer for _CURVE_ACEL_TIME
   169  00499E  01F4               	dw	500
   170                           
   171                           ;initializer for _LOW_SPEED
   172  0049A0  0208               	dw	520
   173                           
   174                           ;initializer for _RECT_ACEL_TIME
   175  0049A2  000A               	dw	10
   176                           
   177                           ;initializer for _RECT_STOP_TIME
   178  0049A4  0032               	dw	50
   179                           
   180                           	psect	mediumconst
   181  007A70                     __pmediumconst:
   182                           	opt stack 0
   183  007A70  00                 	db	0
   184  007A71                     _dpowers:
   185                           	opt stack 0
   186  007A71  0001               	dw	1
   187  007A73  000A               	dw	10
   188  007A75  0064               	dw	100
   189  007A77  03E8               	dw	1000
   190  007A79  2710               	dw	10000
   191  007A7B                     __end_of_dpowers:
   192                           	opt stack 0
   193  007A7B                     exp@coeff:
   194                           	opt stack 0
   195  007A7B  00                 	db	0
   196  007A7C  80                 	db	128
   197  007A7D  3F                 	db	63
   198  007A7E  72                 	db	114
   199  007A7F  31                 	db	49
   200  007A80  3F                 	db	63
   201  007A81  FE                 	db	254
   202  007A82  75                 	db	117
   203  007A83  3E                 	db	62
   204  007A84  58                 	db	88
   205  007A85  63                 	db	99
   206  007A86  3D                 	db	61
   207  007A87  95                 	db	149
   208  007A88  1D                 	db	29
   209  007A89  3C                 	db	60
   210  007A8A  C5                 	db	197
   211  007A8B  AE                 	db	174
   212  007A8C  3A                 	db	58
   213  007A8D  79                 	db	121
   214  007A8E  21                 	db	33
   215  007A8F  39                 	db	57
   216  007A90  94                 	db	148
   217  007A91  80                 	db	128
   218  007A92  37                 	db	55
   219  007A93  93                 	db	147
   220  007A94  A7                 	db	167
   221  007A95  35                 	db	53
   222  007A96  56                 	db	86
   223  007A97  15                 	db	21
   224  007A98  34                 	db	52
   225  007A99                     __end_ofexp@coeff:
   226                           	opt stack 0
   227  007A99                     log@coeff:
   228                           	opt stack 0
   229  007A99  00                 	db	0
   230  007A9A  00                 	db	0
   231  007A9B  00                 	db	0
   232  007A9C  00                 	db	0
   233  007A9D  80                 	db	128
   234  007A9E  3F                 	db	63
   235  007A9F  F0                 	db	240
   236  007AA0  FF                 	db	255
   237  007AA1  BE                 	db	190
   238  007AA2  E2                 	db	226
   239  007AA3  A9                 	db	169
   240  007AA4  3E                 	db	62
   241  007AA5  83                 	db	131
   242  007AA6  76                 	db	118
   243  007AA7  BE                 	db	190
   244  007AA8  AE                 	db	174
   245  007AA9  2B                 	db	43
   246  007AAA  3E                 	db	62
   247  007AAB  3C                 	db	60
   248  007AAC  C3                 	db	195
   249  007AAD  BD                 	db	189
   250  007AAE  D2                 	db	210
   251  007AAF  13                 	db	19
   252  007AB0  3D                 	db	61
   253  007AB1  78                 	db	120
   254  007AB2  D3                 	db	211
   255  007AB3  BB                 	db	187
   256  007AB4                     __end_oflog@coeff:
   257                           	opt stack 0
   258  0000                     _ADCON0bits	set	4034
   259  0000                     _ADCON1bits	set	4033
   260  0000                     _ADCON2bits	set	4032
   261  0000                     _ADRESH	set	4036
   262  0000                     _ADRESL	set	4035
   263  0000                     _BAUDCONbits	set	4024
   264  0000                     _CCP1CONbits	set	4029
   265  0000                     _CCP2CONbits	set	4026
   266  0000                     _CCPR1L	set	4030
   267  0000                     _CCPR2L	set	4027
   268  0000                     _CMCON	set	4020
   269  0000                     _EEADR	set	4009
   270  0000                     _EECON1bits	set	4006
   271  0000                     _EECON2	set	4007
   272  0000                     _EEDATA	set	4008
   273  0000                     _INTCON2bits	set	4081
   274  0000                     _INTCONbits	set	4082
   275  0000                     _OSCCONbits	set	4051
   276  0000                     _PORTAbits	set	3968
   277  0000                     _PORTBbits	set	3969
   278  0000                     _PORTDbits	set	3971
   279  0000                     _PORTEbits	set	3972
   280  0000                     _PR2	set	4043
   281  0000                     _RCONbits	set	4048
   282  0000                     _RCSTAbits	set	4011
   283  0000                     _SPBRG	set	4015
   284  0000                     _SPBRGH	set	4016
   285  0000                     _T0CONbits	set	4053
   286  0000                     _T1CONbits	set	4045
   287  0000                     _T2CONbits	set	4042
   288  0000                     _TMR0H	set	4055
   289  0000                     _TMR0L	set	4054
   290  0000                     _TMR1H	set	4047
   291  0000                     _TMR1L	set	4046
   292  0000                     _TRISAbits	set	3986
   293  0000                     _TRISBbits	set	3987
   294  0000                     _TRISCbits	set	3988
   295  0000                     _TRISDbits	set	3989
   296  0000                     _TRISEbits	set	3990
   297  0000                     _TXREG	set	4013
   298  0000                     _TXSTAbits	set	4012
   299  0000                     _UCFGbits	set	3951
   300  0000                     _UCONbits	set	3949
   301  0000                     _T2CKPS0	set	32336
   302  0000                     _T2CKPS1	set	32337
   303  0000                     _T2OUTPS0	set	32339
   304  0000                     _T2OUTPS1	set	32340
   305  0000                     _T2OUTPS2	set	32341
   306  0000                     _T2OUTPS3	set	32342
   307  0000                     _TMR0IF	set	32658
   308  0000                     _TMR2ON	set	32338
   309  0000                     _TXIF	set	31988
   310  007AB4                     STR_27:
   311  007AB4  7B                 	db	123
   312  007AB5  27                 	db	39
   313  007AB6  43                 	db	67	;'C'
   314  007AB7  4F                 	db	79	;'O'
   315  007AB8  4D                 	db	77	;'M'
   316  007AB9  27                 	db	39
   317  007ABA  3A                 	db	58	;':'
   318  007ABB  27                 	db	39
   319  007ABC  6C                 	db	108	;'l'
   320  007ABD  69                 	db	105	;'i'
   321  007ABE  6E                 	db	110	;'n'
   322  007ABF  65                 	db	101	;'e'
   323  007AC0  27                 	db	39
   324  007AC1  2C                 	db	44
   325  007AC2  27                 	db	39
   326  007AC3  76                 	db	118	;'v'
   327  007AC4  61                 	db	97	;'a'
   328  007AC5  6C                 	db	108	;'l'
   329  007AC6  75                 	db	117	;'u'
   330  007AC7  65                 	db	101	;'e'
   331  007AC8  27                 	db	39
   332  007AC9  3A                 	db	58	;':'
   333  007ACA  27                 	db	39
   334  007ACB  45                 	db	69	;'E'
   335  007ACC  6E                 	db	110	;'n'
   336  007ACD  74                 	db	116	;'t'
   337  007ACE  65                 	db	101	;'e'
   338  007ACF  72                 	db	114	;'r'
   339  007AD0  69                 	db	105	;'i'
   340  007AD1  6E                 	db	110	;'n'
   341  007AD2  67                 	db	103	;'g'
   342  007AD3  20                 	db	32
   343  007AD4  72                 	db	114	;'r'
   344  007AD5  65                 	db	101	;'e'
   345  007AD6  63                 	db	99	;'c'
   346  007AD7  74                 	db	116	;'t'
   347  007AD8  20                 	db	32
   348  007AD9  66                 	db	102	;'f'
   349  007ADA  28                 	db	40
   350  007ADB  25                 	db	37
   351  007ADC  69                 	db	105	;'i'
   352  007ADD  29                 	db	41
   353  007ADE  20                 	db	32
   354  007ADF  3D                 	db	61	;'='
   355  007AE0  20                 	db	32
   356  007AE1  28                 	db	40
   357  007AE2  25                 	db	37
   358  007AE3  69                 	db	105	;'i'
   359  007AE4  29                 	db	41
   360  007AE5  20                 	db	32
   361  007AE6  28                 	db	40
   362  007AE7  25                 	db	37
   363  007AE8  69                 	db	105	;'i'
   364  007AE9  29                 	db	41
   365  007AEA  20                 	db	32
   366  007AEB  28                 	db	40
   367  007AEC  25                 	db	37
   368  007AED  69                 	db	105	;'i'
   369  007AEE  29                 	db	41
   370  007AEF  27                 	db	39
   371  007AF0  7D                 	db	125
   372  007AF1  0A                 	db	10
   373  007AF2  00                 	db	0
   374  007AF3                     STR_1:
   375  007AF3  7B                 	db	123
   376  007AF4  27                 	db	39
   377  007AF5  43                 	db	67	;'C'
   378  007AF6  4F                 	db	79	;'O'
   379  007AF7  4D                 	db	77	;'M'
   380  007AF8  27                 	db	39
   381  007AF9  3A                 	db	58	;':'
   382  007AFA  27                 	db	39
   383  007AFB  70                 	db	112	;'p'
   384  007AFC  6C                 	db	108	;'l'
   385  007AFD  6F                 	db	111	;'o'
   386  007AFE  74                 	db	116	;'t'
   387  007AFF  27                 	db	39
   388  007B00  2C                 	db	44
   389  007B01  27                 	db	39
   390  007B02  6E                 	db	110	;'n'
   391  007B03  61                 	db	97	;'a'
   392  007B04  6D                 	db	109	;'m'
   393  007B05  65                 	db	101	;'e'
   394  007B06  27                 	db	39
   395  007B07  3A                 	db	58	;':'
   396  007B08  27                 	db	39
   397  007B09  50                 	db	80	;'P'
   398  007B0A  4F                 	db	79	;'O'
   399  007B0B  57                 	db	87	;'W'
   400  007B0C  33                 	db	51	;'3'
   401  007B0D  27                 	db	39
   402  007B0E  2C                 	db	44
   403  007B0F  27                 	db	39
   404  007B10  76                 	db	118	;'v'
   405  007B11  61                 	db	97	;'a'
   406  007B12  6C                 	db	108	;'l'
   407  007B13  75                 	db	117	;'u'
   408  007B14  65                 	db	101	;'e'
   409  007B15  27                 	db	39
   410  007B16  3A                 	db	58	;':'
   411  007B17  25                 	db	37
   412  007B18  69                 	db	105	;'i'
   413  007B19  2C                 	db	44
   414  007B1A  27                 	db	39
   415  007B1B  63                 	db	99	;'c'
   416  007B1C  6F                 	db	111	;'o'
   417  007B1D  6C                 	db	108	;'l'
   418  007B1E  6F                 	db	111	;'o'
   419  007B1F  72                 	db	114	;'r'
   420  007B20  27                 	db	39
   421  007B21  3A                 	db	58	;':'
   422  007B22  28                 	db	40
   423  007B23  32                 	db	50	;'2'
   424  007B24  30                 	db	48	;'0'
   425  007B25  30                 	db	48	;'0'
   426  007B26  2C                 	db	44
   427  007B27  31                 	db	49	;'1'
   428  007B28  30                 	db	48	;'0'
   429  007B29  30                 	db	48	;'0'
   430  007B2A  2C                 	db	44
   431  007B2B  31                 	db	49	;'1'
   432  007B2C  30                 	db	48	;'0'
   433  007B2D  30                 	db	48	;'0'
   434  007B2E  29                 	db	41
   435  007B2F  7D                 	db	125
   436  007B30  0A                 	db	10
   437  007B31  00                 	db	0
   438  007B32                     STR_16:
   439  007B32  7B                 	db	123
   440  007B33  27                 	db	39
   441  007B34  43                 	db	67	;'C'
   442  007B35  4F                 	db	79	;'O'
   443  007B36  4D                 	db	77	;'M'
   444  007B37  27                 	db	39
   445  007B38  3A                 	db	58	;':'
   446  007B39  27                 	db	39
   447  007B3A  70                 	db	112	;'p'
   448  007B3B  6C                 	db	108	;'l'
   449  007B3C  6F                 	db	111	;'o'
   450  007B3D  74                 	db	116	;'t'
   451  007B3E  27                 	db	39
   452  007B3F  2C                 	db	44
   453  007B40  27                 	db	39
   454  007B41  6E                 	db	110	;'n'
   455  007B42  61                 	db	97	;'a'
   456  007B43  6D                 	db	109	;'m'
   457  007B44  65                 	db	101	;'e'
   458  007B45  27                 	db	39
   459  007B46  3A                 	db	58	;':'
   460  007B47  27                 	db	39
   461  007B48  6C                 	db	108	;'l'
   462  007B49  69                 	db	105	;'i'
   463  007B4A  6E                 	db	110	;'n'
   464  007B4B  65                 	db	101	;'e'
   465  007B4C  27                 	db	39
   466  007B4D  2C                 	db	44
   467  007B4E  27                 	db	39
   468  007B4F  76                 	db	118	;'v'
   469  007B50  61                 	db	97	;'a'
   470  007B51  6C                 	db	108	;'l'
   471  007B52  75                 	db	117	;'u'
   472  007B53  65                 	db	101	;'e'
   473  007B54  27                 	db	39
   474  007B55  3A                 	db	58	;':'
   475  007B56  25                 	db	37
   476  007B57  69                 	db	105	;'i'
   477  007B58  2C                 	db	44
   478  007B59  27                 	db	39
   479  007B5A  63                 	db	99	;'c'
   480  007B5B  6F                 	db	111	;'o'
   481  007B5C  6C                 	db	108	;'l'
   482  007B5D  6F                 	db	111	;'o'
   483  007B5E  72                 	db	114	;'r'
   484  007B5F  27                 	db	39
   485  007B60  3A                 	db	58	;':'
   486  007B61  28                 	db	40
   487  007B62  30                 	db	48	;'0'
   488  007B63  2C                 	db	44
   489  007B64  31                 	db	49	;'1'
   490  007B65  30                 	db	48	;'0'
   491  007B66  30                 	db	48	;'0'
   492  007B67  2C                 	db	44
   493  007B68  32                 	db	50	;'2'
   494  007B69  30                 	db	48	;'0'
   495  007B6A  30                 	db	48	;'0'
   496  007B6B  29                 	db	41
   497  007B6C  7D                 	db	125
   498  007B6D  0A                 	db	10
   499  007B6E  00                 	db	0
   500  007B6F                     STR_15:
   501  007B6F  7B                 	db	123
   502  007B70  27                 	db	39
   503  007B71  43                 	db	67	;'C'
   504  007B72  4F                 	db	79	;'O'
   505  007B73  4D                 	db	77	;'M'
   506  007B74  27                 	db	39
   507  007B75  3A                 	db	58	;':'
   508  007B76  27                 	db	39
   509  007B77  70                 	db	112	;'p'
   510  007B78  6C                 	db	108	;'l'
   511  007B79  6F                 	db	111	;'o'
   512  007B7A  74                 	db	116	;'t'
   513  007B7B  27                 	db	39
   514  007B7C  2C                 	db	44
   515  007B7D  27                 	db	39
   516  007B7E  6E                 	db	110	;'n'
   517  007B7F  61                 	db	97	;'a'
   518  007B80  6D                 	db	109	;'m'
   519  007B81  65                 	db	101	;'e'
   520  007B82  27                 	db	39
   521  007B83  3A                 	db	58	;':'
   522  007B84  27                 	db	39
   523  007B85  53                 	db	83	;'S'
   524  007B86  25                 	db	37
   525  007B87  69                 	db	105	;'i'
   526  007B88  27                 	db	39
   527  007B89  2C                 	db	44
   528  007B8A  27                 	db	39
   529  007B8B  76                 	db	118	;'v'
   530  007B8C  61                 	db	97	;'a'
   531  007B8D  6C                 	db	108	;'l'
   532  007B8E  75                 	db	117	;'u'
   533  007B8F  65                 	db	101	;'e'
   534  007B90  27                 	db	39
   535  007B91  3A                 	db	58	;':'
   536  007B92  25                 	db	37
   537  007B93  69                 	db	105	;'i'
   538  007B94  2C                 	db	44
   539  007B95  20                 	db	32
   540  007B96  27                 	db	39
   541  007B97  63                 	db	99	;'c'
   542  007B98  6F                 	db	111	;'o'
   543  007B99  6C                 	db	108	;'l'
   544  007B9A  6F                 	db	111	;'o'
   545  007B9B  72                 	db	114	;'r'
   546  007B9C  27                 	db	39
   547  007B9D  3A                 	db	58	;':'
   548  007B9E  28                 	db	40
   549  007B9F  25                 	db	37
   550  007BA0  64                 	db	100	;'d'
   551  007BA1  2C                 	db	44
   552  007BA2  25                 	db	37
   553  007BA3  64                 	db	100	;'d'
   554  007BA4  2C                 	db	44
   555  007BA5  25                 	db	37
   556  007BA6  64                 	db	100	;'d'
   557  007BA7  29                 	db	41
   558  007BA8  7D                 	db	125
   559  007BA9  0A                 	db	10
   560  007BAA  00                 	db	0
   561  007BAB                     STR_30:
   562  007BAB  7B                 	db	123
   563  007BAC  27                 	db	39
   564  007BAD  43                 	db	67	;'C'
   565  007BAE  4F                 	db	79	;'O'
   566  007BAF  4D                 	db	77	;'M'
   567  007BB0  27                 	db	39
   568  007BB1  3A                 	db	58	;':'
   569  007BB2  27                 	db	39
   570  007BB3  53                 	db	83	;'S'
   571  007BB4  65                 	db	101	;'e'
   572  007BB5  74                 	db	116	;'t'
   573  007BB6  74                 	db	116	;'t'
   574  007BB7  6C                 	db	108	;'l'
   575  007BB8  65                 	db	101	;'e'
   576  007BB9  27                 	db	39
   577  007BBA  2C                 	db	44
   578  007BBB  27                 	db	39
   579  007BBC  6E                 	db	110	;'n'
   580  007BBD  61                 	db	97	;'a'
   581  007BBE  6D                 	db	109	;'m'
   582  007BBF  65                 	db	101	;'e'
   583  007BC0  27                 	db	39
   584  007BC1  3A                 	db	58	;':'
   585  007BC2  27                 	db	39
   586  007BC3  41                 	db	65	;'A'
   587  007BC4  72                 	db	114	;'r'
   588  007BC5  65                 	db	101	;'e'
   589  007BC6  61                 	db	97	;'a'
   590  007BC7  20                 	db	32
   591  007BC8  25                 	db	37
   592  007BC9  69                 	db	105	;'i'
   593  007BCA  27                 	db	39
   594  007BCB  2C                 	db	44
   595  007BCC  27                 	db	39
   596  007BCD  63                 	db	99	;'c'
   597  007BCE  6F                 	db	111	;'o'
   598  007BCF  6C                 	db	108	;'l'
   599  007BD0  6F                 	db	111	;'o'
   600  007BD1  72                 	db	114	;'r'
   601  007BD2  27                 	db	39
   602  007BD3  3A                 	db	58	;':'
   603  007BD4  28                 	db	40
   604  007BD5  31                 	db	49	;'1'
   605  007BD6  30                 	db	48	;'0'
   606  007BD7  30                 	db	48	;'0'
   607  007BD8  2C                 	db	44
   608  007BD9  31                 	db	49	;'1'
   609  007BDA  30                 	db	48	;'0'
   610  007BDB  30                 	db	48	;'0'
   611  007BDC  2C                 	db	44
   612  007BDD  32                 	db	50	;'2'
   613  007BDE  35                 	db	53	;'5'
   614  007BDF  35                 	db	53	;'5'
   615  007BE0  29                 	db	41
   616  007BE1  7D                 	db	125
   617  007BE2  0A                 	db	10
   618  007BE3  00                 	db	0
   619  007BE4                     STR_14:
   620  007BE4  7B                 	db	123
   621  007BE5  27                 	db	39
   622  007BE6  43                 	db	67	;'C'
   623  007BE7  4F                 	db	79	;'O'
   624  007BE8  4D                 	db	77	;'M'
   625  007BE9  27                 	db	39
   626  007BEA  3A                 	db	58	;':'
   627  007BEB  27                 	db	39
   628  007BEC  6C                 	db	108	;'l'
   629  007BED  69                 	db	105	;'i'
   630  007BEE  6E                 	db	110	;'n'
   631  007BEF  65                 	db	101	;'e'
   632  007BF0  27                 	db	39
   633  007BF1  2C                 	db	44
   634  007BF2  27                 	db	39
   635  007BF3  76                 	db	118	;'v'
   636  007BF4  61                 	db	97	;'a'
   637  007BF5  6C                 	db	108	;'l'
   638  007BF6  75                 	db	117	;'u'
   639  007BF7  65                 	db	101	;'e'
   640  007BF8  27                 	db	39
   641  007BF9  3A                 	db	58	;':'
   642  007BFA  27                 	db	39
   643  007BFB  53                 	db	83	;'S'
   644  007BFC  5B                 	db	91	;'['
   645  007BFD  20                 	db	32
   646  007BFE  25                 	db	37
   647  007BFF  30                 	db	48	;'0'
   648  007C00  34                 	db	52	;'4'
   649  007C01  75                 	db	117	;'u'
   650  007C02  20                 	db	32
   651  007C03  5D                 	db	93	;']'
   652  007C04  20                 	db	32
   653  007C05  3A                 	db	58	;':'
   654  007C06  20                 	db	32
   655  007C07  5B                 	db	91	;'['
   656  007C08  25                 	db	37
   657  007C09  30                 	db	48	;'0'
   658  007C0A  34                 	db	52	;'4'
   659  007C0B  75                 	db	117	;'u'
   660  007C0C  20                 	db	32
   661  007C0D  2C                 	db	44
   662  007C0E  20                 	db	32
   663  007C0F  25                 	db	37
   664  007C10  30                 	db	48	;'0'
   665  007C11  34                 	db	52	;'4'
   666  007C12  75                 	db	117	;'u'
   667  007C13  20                 	db	32
   668  007C14  5D                 	db	93	;']'
   669  007C15  27                 	db	39
   670  007C16  7D                 	db	125
   671  007C17  0A                 	db	10
   672  007C18  00                 	db	0
   673  007C19                     STR_21:
   674  007C19  7B                 	db	123
   675  007C1A  27                 	db	39
   676  007C1B  43                 	db	67	;'C'
   677  007C1C  4F                 	db	79	;'O'
   678  007C1D  4D                 	db	77	;'M'
   679  007C1E  27                 	db	39
   680  007C1F  3A                 	db	58	;':'
   681  007C20  27                 	db	39
   682  007C21  6C                 	db	108	;'l'
   683  007C22  69                 	db	105	;'i'
   684  007C23  6E                 	db	110	;'n'
   685  007C24  65                 	db	101	;'e'
   686  007C25  27                 	db	39
   687  007C26  2C                 	db	44
   688  007C27  27                 	db	39
   689  007C28  76                 	db	118	;'v'
   690  007C29  61                 	db	97	;'a'
   691  007C2A  6C                 	db	108	;'l'
   692  007C2B  75                 	db	117	;'u'
   693  007C2C  65                 	db	101	;'e'
   694  007C2D  27                 	db	39
   695  007C2E  3A                 	db	58	;':'
   696  007C2F  27                 	db	39
   697  007C30  53                 	db	83	;'S'
   698  007C31  65                 	db	101	;'e'
   699  007C32  6C                 	db	108	;'l'
   700  007C33  65                 	db	101	;'e'
   701  007C34  63                 	db	99	;'c'
   702  007C35  74                 	db	116	;'t'
   703  007C36  69                 	db	105	;'i'
   704  007C37  6E                 	db	110	;'n'
   705  007C38  67                 	db	103	;'g'
   706  007C39  20                 	db	32
   707  007C3A  47                 	db	71	;'G'
   708  007C3B  52                 	db	82	;'R'
   709  007C3C  45                 	db	69	;'E'
   710  007C3D  45                 	db	69	;'E'
   711  007C3E  4E                 	db	78	;'N'
   712  007C3F  20                 	db	32
   713  007C40  6D                 	db	109	;'m'
   714  007C41  65                 	db	101	;'e'
   715  007C42  6D                 	db	109	;'m'
   716  007C43  6F                 	db	111	;'o'
   717  007C44  72                 	db	114	;'r'
   718  007C45  79                 	db	121	;'y'
   719  007C46  27                 	db	39
   720  007C47  7D                 	db	125
   721  007C48  0A                 	db	10
   722  007C49  00                 	db	0
   723  007C4A                     STR_10:
   724  007C4A  7B                 	db	123
   725  007C4B  27                 	db	39
   726  007C4C  43                 	db	67	;'C'
   727  007C4D  4F                 	db	79	;'O'
   728  007C4E  4D                 	db	77	;'M'
   729  007C4F  27                 	db	39
   730  007C50  3A                 	db	58	;':'
   731  007C51  27                 	db	39
   732  007C52  6C                 	db	108	;'l'
   733  007C53  69                 	db	105	;'i'
   734  007C54  6E                 	db	110	;'n'
   735  007C55  65                 	db	101	;'e'
   736  007C56  27                 	db	39
   737  007C57  2C                 	db	44
   738  007C58  27                 	db	39
   739  007C59  76                 	db	118	;'v'
   740  007C5A  61                 	db	97	;'a'
   741  007C5B  6C                 	db	108	;'l'
   742  007C5C  75                 	db	117	;'u'
   743  007C5D  65                 	db	101	;'e'
   744  007C5E  27                 	db	39
   745  007C5F  3A                 	db	58	;':'
   746  007C60  27                 	db	39
   747  007C61  57                 	db	87	;'W'
   748  007C62  72                 	db	114	;'r'
   749  007C63  69                 	db	105	;'i'
   750  007C64  74                 	db	116	;'t'
   751  007C65  74                 	db	116	;'t'
   752  007C66  69                 	db	105	;'i'
   753  007C67  6E                 	db	110	;'n'
   754  007C68  67                 	db	103	;'g'
   755  007C69  20                 	db	32
   756  007C6A  47                 	db	71	;'G'
   757  007C6B  52                 	db	82	;'R'
   758  007C6C  45                 	db	69	;'E'
   759  007C6D  45                 	db	69	;'E'
   760  007C6E  4E                 	db	78	;'N'
   761  007C6F  20                 	db	32
   762  007C70  4D                 	db	77	;'M'
   763  007C71  65                 	db	101	;'e'
   764  007C72  6D                 	db	109	;'m'
   765  007C73  6F                 	db	111	;'o'
   766  007C74  72                 	db	114	;'r'
   767  007C75  79                 	db	121	;'y'
   768  007C76  27                 	db	39
   769  007C77  7D                 	db	125
   770  007C78  0A                 	db	10
   771  007C79  00                 	db	0
   772  007C7A                     STR_11:
   773  007C7A  7B                 	db	123
   774  007C7B  27                 	db	39
   775  007C7C  43                 	db	67	;'C'
   776  007C7D  4F                 	db	79	;'O'
   777  007C7E  4D                 	db	77	;'M'
   778  007C7F  27                 	db	39
   779  007C80  3A                 	db	58	;':'
   780  007C81  27                 	db	39
   781  007C82  6C                 	db	108	;'l'
   782  007C83  69                 	db	105	;'i'
   783  007C84  6E                 	db	110	;'n'
   784  007C85  65                 	db	101	;'e'
   785  007C86  27                 	db	39
   786  007C87  2C                 	db	44
   787  007C88  27                 	db	39
   788  007C89  76                 	db	118	;'v'
   789  007C8A  61                 	db	97	;'a'
   790  007C8B  6C                 	db	108	;'l'
   791  007C8C  75                 	db	117	;'u'
   792  007C8D  65                 	db	101	;'e'
   793  007C8E  27                 	db	39
   794  007C8F  3A                 	db	58	;':'
   795  007C90  27                 	db	39
   796  007C91  45                 	db	69	;'E'
   797  007C92  6E                 	db	110	;'n'
   798  007C93  74                 	db	116	;'t'
   799  007C94  65                 	db	101	;'e'
   800  007C95  72                 	db	114	;'r'
   801  007C96  69                 	db	105	;'i'
   802  007C97  6E                 	db	110	;'n'
   803  007C98  67                 	db	103	;'g'
   804  007C99  20                 	db	32
   805  007C9A  63                 	db	99	;'c'
   806  007C9B  61                 	db	97	;'a'
   807  007C9C  6C                 	db	108	;'l'
   808  007C9D  69                 	db	105	;'i'
   809  007C9E  62                 	db	98	;'b'
   810  007C9F  72                 	db	114	;'r'
   811  007CA0  61                 	db	97	;'a'
   812  007CA1  74                 	db	116	;'t'
   813  007CA2  69                 	db	105	;'i'
   814  007CA3  6F                 	db	111	;'o'
   815  007CA4  6E                 	db	110	;'n'
   816  007CA5  27                 	db	39
   817  007CA6  7D                 	db	125
   818  007CA7  0A                 	db	10
   819  007CA8  00                 	db	0
   820  007CA9                     STR_18:
   821  007CA9  7B                 	db	123
   822  007CAA  27                 	db	39
   823  007CAB  43                 	db	67	;'C'
   824  007CAC  4F                 	db	79	;'O'
   825  007CAD  4D                 	db	77	;'M'
   826  007CAE  27                 	db	39
   827  007CAF  3A                 	db	58	;':'
   828  007CB0  27                 	db	39
   829  007CB1  6C                 	db	108	;'l'
   830  007CB2  69                 	db	105	;'i'
   831  007CB3  6E                 	db	110	;'n'
   832  007CB4  65                 	db	101	;'e'
   833  007CB5  27                 	db	39
   834  007CB6  2C                 	db	44
   835  007CB7  27                 	db	39
   836  007CB8  76                 	db	118	;'v'
   837  007CB9  61                 	db	97	;'a'
   838  007CBA  6C                 	db	108	;'l'
   839  007CBB  75                 	db	117	;'u'
   840  007CBC  65                 	db	101	;'e'
   841  007CBD  27                 	db	39
   842  007CBE  3A                 	db	58	;':'
   843  007CBF  27                 	db	39
   844  007CC0  53                 	db	83	;'S'
   845  007CC1  65                 	db	101	;'e'
   846  007CC2  6C                 	db	108	;'l'
   847  007CC3  65                 	db	101	;'e'
   848  007CC4  63                 	db	99	;'c'
   849  007CC5  74                 	db	116	;'t'
   850  007CC6  69                 	db	105	;'i'
   851  007CC7  6E                 	db	110	;'n'
   852  007CC8  67                 	db	103	;'g'
   853  007CC9  20                 	db	32
   854  007CCA  52                 	db	82	;'R'
   855  007CCB  45                 	db	69	;'E'
   856  007CCC  44                 	db	68	;'D'
   857  007CCD  20                 	db	32
   858  007CCE  6D                 	db	109	;'m'
   859  007CCF  65                 	db	101	;'e'
   860  007CD0  6D                 	db	109	;'m'
   861  007CD1  6F                 	db	111	;'o'
   862  007CD2  72                 	db	114	;'r'
   863  007CD3  79                 	db	121	;'y'
   864  007CD4  27                 	db	39
   865  007CD5  7D                 	db	125
   866  007CD6  0A                 	db	10
   867  007CD7  00                 	db	0
   868  007CD8                     STR_20:
   869  007CD8  7B                 	db	123
   870  007CD9  27                 	db	39
   871  007CDA  43                 	db	67	;'C'
   872  007CDB  4F                 	db	79	;'O'
   873  007CDC  4D                 	db	77	;'M'
   874  007CDD  27                 	db	39
   875  007CDE  3A                 	db	58	;':'
   876  007CDF  27                 	db	39
   877  007CE0  6C                 	db	108	;'l'
   878  007CE1  69                 	db	105	;'i'
   879  007CE2  6E                 	db	110	;'n'
   880  007CE3  65                 	db	101	;'e'
   881  007CE4  27                 	db	39
   882  007CE5  2C                 	db	44
   883  007CE6  27                 	db	39
   884  007CE7  76                 	db	118	;'v'
   885  007CE8  61                 	db	97	;'a'
   886  007CE9  6C                 	db	108	;'l'
   887  007CEA  75                 	db	117	;'u'
   888  007CEB  65                 	db	101	;'e'
   889  007CEC  27                 	db	39
   890  007CED  3A                 	db	58	;':'
   891  007CEE  27                 	db	39
   892  007CEF  57                 	db	87	;'W'
   893  007CF0  72                 	db	114	;'r'
   894  007CF1  69                 	db	105	;'i'
   895  007CF2  74                 	db	116	;'t'
   896  007CF3  69                 	db	105	;'i'
   897  007CF4  6E                 	db	110	;'n'
   898  007CF5  67                 	db	103	;'g'
   899  007CF6  20                 	db	32
   900  007CF7  47                 	db	71	;'G'
   901  007CF8  52                 	db	82	;'R'
   902  007CF9  45                 	db	69	;'E'
   903  007CFA  45                 	db	69	;'E'
   904  007CFB  4E                 	db	78	;'N'
   905  007CFC  20                 	db	32
   906  007CFD  6D                 	db	109	;'m'
   907  007CFE  65                 	db	101	;'e'
   908  007CFF  6D                 	db	109	;'m'
   909  007D00  6F                 	db	111	;'o'
   910  007D01  72                 	db	114	;'r'
   911  007D02  79                 	db	121	;'y'
   912  007D03  27                 	db	39
   913  007D04  7D                 	db	125
   914  007D05  0A                 	db	10
   915  007D06  00                 	db	0
   916  007D07                     STR_17:
   917  007D07  7B                 	db	123
   918  007D08  27                 	db	39
   919  007D09  43                 	db	67	;'C'
   920  007D0A  4F                 	db	79	;'O'
   921  007D0B  4D                 	db	77	;'M'
   922  007D0C  27                 	db	39
   923  007D0D  3A                 	db	58	;':'
   924  007D0E  27                 	db	39
   925  007D0F  6C                 	db	108	;'l'
   926  007D10  69                 	db	105	;'i'
   927  007D11  6E                 	db	110	;'n'
   928  007D12  65                 	db	101	;'e'
   929  007D13  27                 	db	39
   930  007D14  2C                 	db	44
   931  007D15  27                 	db	39
   932  007D16  76                 	db	118	;'v'
   933  007D17  61                 	db	97	;'a'
   934  007D18  6C                 	db	108	;'l'
   935  007D19  75                 	db	117	;'u'
   936  007D1A  65                 	db	101	;'e'
   937  007D1B  27                 	db	39
   938  007D1C  3A                 	db	58	;':'
   939  007D1D  27                 	db	39
   940  007D1E  57                 	db	87	;'W'
   941  007D1F  72                 	db	114	;'r'
   942  007D20  69                 	db	105	;'i'
   943  007D21  74                 	db	116	;'t'
   944  007D22  69                 	db	105	;'i'
   945  007D23  6E                 	db	110	;'n'
   946  007D24  67                 	db	103	;'g'
   947  007D25  20                 	db	32
   948  007D26  52                 	db	82	;'R'
   949  007D27  45                 	db	69	;'E'
   950  007D28  44                 	db	68	;'D'
   951  007D29  20                 	db	32
   952  007D2A  6D                 	db	109	;'m'
   953  007D2B  65                 	db	101	;'e'
   954  007D2C  6D                 	db	109	;'m'
   955  007D2D  6F                 	db	111	;'o'
   956  007D2E  72                 	db	114	;'r'
   957  007D2F  79                 	db	121	;'y'
   958  007D30  27                 	db	39
   959  007D31  7D                 	db	125
   960  007D32  0A                 	db	10
   961  007D33  00                 	db	0
   962  007D34                     STR_6:
   963  007D34  7B                 	db	123
   964  007D35  27                 	db	39
   965  007D36  43                 	db	67	;'C'
   966  007D37  4F                 	db	79	;'O'
   967  007D38  4D                 	db	77	;'M'
   968  007D39  27                 	db	39
   969  007D3A  3A                 	db	58	;':'
   970  007D3B  27                 	db	39
   971  007D3C  6C                 	db	108	;'l'
   972  007D3D  69                 	db	105	;'i'
   973  007D3E  6E                 	db	110	;'n'
   974  007D3F  65                 	db	101	;'e'
   975  007D40  27                 	db	39
   976  007D41  2C                 	db	44
   977  007D42  27                 	db	39
   978  007D43  76                 	db	118	;'v'
   979  007D44  61                 	db	97	;'a'
   980  007D45  6C                 	db	108	;'l'
   981  007D46  75                 	db	117	;'u'
   982  007D47  65                 	db	101	;'e'
   983  007D48  27                 	db	39
   984  007D49  3A                 	db	58	;':'
   985  007D4A  27                 	db	39
   986  007D4B  47                 	db	71	;'G'
   987  007D4C  72                 	db	114	;'r'
   988  007D4D  65                 	db	101	;'e'
   989  007D4E  65                 	db	101	;'e'
   990  007D4F  6E                 	db	110	;'n'
   991  007D50  20                 	db	32
   992  007D51  6D                 	db	109	;'m'
   993  007D52  65                 	db	101	;'e'
   994  007D53  6D                 	db	109	;'m'
   995  007D54  6F                 	db	111	;'o'
   996  007D55  72                 	db	114	;'r'
   997  007D56  79                 	db	121	;'y'
   998  007D57  20                 	db	32
   999  007D58  65                 	db	101	;'e'
  1000  007D59  6D                 	db	109	;'m'
  1001  007D5A  70                 	db	112	;'p'
  1002  007D5B  74                 	db	116	;'t'
  1003  007D5C  79                 	db	121	;'y'
  1004  007D5D  27                 	db	39
  1005  007D5E  7D                 	db	125
  1006  007D5F  0A                 	db	10
  1007  007D60  00                 	db	0
  1008  007D61                     STR_12:
  1009  007D61  7B                 	db	123
  1010  007D62  27                 	db	39
  1011  007D63  43                 	db	67	;'C'
  1012  007D64  4F                 	db	79	;'O'
  1013  007D65  4D                 	db	77	;'M'
  1014  007D66  27                 	db	39
  1015  007D67  3A                 	db	58	;':'
  1016  007D68  27                 	db	39
  1017  007D69  6C                 	db	108	;'l'
  1018  007D6A  69                 	db	105	;'i'
  1019  007D6B  6E                 	db	110	;'n'
  1020  007D6C  65                 	db	101	;'e'
  1021  007D6D  27                 	db	39
  1022  007D6E  2C                 	db	44
  1023  007D6F  27                 	db	39
  1024  007D70  76                 	db	118	;'v'
  1025  007D71  61                 	db	97	;'a'
  1026  007D72  6C                 	db	108	;'l'
  1027  007D73  75                 	db	117	;'u'
  1028  007D74  65                 	db	101	;'e'
  1029  007D75  27                 	db	39
  1030  007D76  3A                 	db	58	;':'
  1031  007D77  27                 	db	39
  1032  007D78  52                 	db	82	;'R'
  1033  007D79  65                 	db	101	;'e'
  1034  007D7A  73                 	db	115	;'s'
  1035  007D7B  65                 	db	101	;'e'
  1036  007D7C  74                 	db	116	;'t'
  1037  007D7D  20                 	db	32
  1038  007D7E  63                 	db	99	;'c'
  1039  007D7F  61                 	db	97	;'a'
  1040  007D80  6C                 	db	108	;'l'
  1041  007D81  69                 	db	105	;'i'
  1042  007D82  62                 	db	98	;'b'
  1043  007D83  72                 	db	114	;'r'
  1044  007D84  61                 	db	97	;'a'
  1045  007D85  74                 	db	116	;'t'
  1046  007D86  69                 	db	105	;'i'
  1047  007D87  6F                 	db	111	;'o'
  1048  007D88  6E                 	db	110	;'n'
  1049  007D89  27                 	db	39
  1050  007D8A  7D                 	db	125
  1051  007D8B  0A                 	db	10
  1052  007D8C  00                 	db	0
  1053  007D8D                     STR_31:
  1054  007D8D  7B                 	db	123
  1055  007D8E  27                 	db	39
  1056  007D8F  43                 	db	67	;'C'
  1057  007D90  4F                 	db	79	;'O'
  1058  007D91  4D                 	db	77	;'M'
  1059  007D92  27                 	db	39
  1060  007D93  3A                 	db	58	;':'
  1061  007D94  27                 	db	39
  1062  007D95  6C                 	db	108	;'l'
  1063  007D96  69                 	db	105	;'i'
  1064  007D97  6E                 	db	110	;'n'
  1065  007D98  65                 	db	101	;'e'
  1066  007D99  27                 	db	39
  1067  007D9A  2C                 	db	44
  1068  007D9B  27                 	db	39
  1069  007D9C  76                 	db	118	;'v'
  1070  007D9D  61                 	db	97	;'a'
  1071  007D9E  6C                 	db	108	;'l'
  1072  007D9F  75                 	db	117	;'u'
  1073  007DA0  65                 	db	101	;'e'
  1074  007DA1  27                 	db	39
  1075  007DA2  3A                 	db	58	;':'
  1076  007DA3  27                 	db	39
  1077  007DA4  54                 	db	84	;'T'
  1078  007DA5  69                 	db	105	;'i'
  1079  007DA6  6D                 	db	109	;'m'
  1080  007DA7  65                 	db	101	;'e'
  1081  007DA8  20                 	db	32
  1082  007DA9  3D                 	db	61	;'='
  1083  007DAA  20                 	db	32
  1084  007DAB  25                 	db	37
  1085  007DAC  30                 	db	48	;'0'
  1086  007DAD  32                 	db	50	;'2'
  1087  007DAE  75                 	db	117	;'u'
  1088  007DAF  3A                 	db	58	;':'
  1089  007DB0  25                 	db	37
  1090  007DB1  30                 	db	48	;'0'
  1091  007DB2  32                 	db	50	;'2'
  1092  007DB3  75                 	db	117	;'u'
  1093  007DB4  27                 	db	39
  1094  007DB5  7D                 	db	125
  1095  007DB6  0A                 	db	10
  1096  007DB7  00                 	db	0
  1097  007DB8                     STR_8:
  1098  007DB8  7B                 	db	123
  1099  007DB9  27                 	db	39
  1100  007DBA  43                 	db	67	;'C'
  1101  007DBB  4F                 	db	79	;'O'
  1102  007DBC  4D                 	db	77	;'M'
  1103  007DBD  27                 	db	39
  1104  007DBE  3A                 	db	58	;':'
  1105  007DBF  27                 	db	39
  1106  007DC0  6C                 	db	108	;'l'
  1107  007DC1  69                 	db	105	;'i'
  1108  007DC2  6E                 	db	110	;'n'
  1109  007DC3  65                 	db	101	;'e'
  1110  007DC4  27                 	db	39
  1111  007DC5  2C                 	db	44
  1112  007DC6  27                 	db	39
  1113  007DC7  76                 	db	118	;'v'
  1114  007DC8  61                 	db	97	;'a'
  1115  007DC9  6C                 	db	108	;'l'
  1116  007DCA  75                 	db	117	;'u'
  1117  007DCB  65                 	db	101	;'e'
  1118  007DCC  27                 	db	39
  1119  007DCD  3A                 	db	58	;':'
  1120  007DCE  27                 	db	39
  1121  007DCF  52                 	db	82	;'R'
  1122  007DD0  65                 	db	101	;'e'
  1123  007DD1  64                 	db	100	;'d'
  1124  007DD2  20                 	db	32
  1125  007DD3  6D                 	db	109	;'m'
  1126  007DD4  65                 	db	101	;'e'
  1127  007DD5  6D                 	db	109	;'m'
  1128  007DD6  6F                 	db	111	;'o'
  1129  007DD7  72                 	db	114	;'r'
  1130  007DD8  79                 	db	121	;'y'
  1131  007DD9  20                 	db	32
  1132  007DDA  65                 	db	101	;'e'
  1133  007DDB  6D                 	db	109	;'m'
  1134  007DDC  70                 	db	112	;'p'
  1135  007DDD  74                 	db	116	;'t'
  1136  007DDE  79                 	db	121	;'y'
  1137  007DDF  27                 	db	39
  1138  007DE0  7D                 	db	125
  1139  007DE1  0A                 	db	10
  1140  007DE2  00                 	db	0
  1141  007DE3                     STR_25:
  1142  007DE3  7B                 	db	123
  1143  007DE4  27                 	db	39
  1144  007DE5  43                 	db	67	;'C'
  1145  007DE6  4F                 	db	79	;'O'
  1146  007DE7  4D                 	db	77	;'M'
  1147  007DE8  27                 	db	39
  1148  007DE9  3A                 	db	58	;':'
  1149  007DEA  27                 	db	39
  1150  007DEB  6C                 	db	108	;'l'
  1151  007DEC  69                 	db	105	;'i'
  1152  007DED  6E                 	db	110	;'n'
  1153  007DEE  65                 	db	101	;'e'
  1154  007DEF  27                 	db	39
  1155  007DF0  2C                 	db	44
  1156  007DF1  27                 	db	39
  1157  007DF2  76                 	db	118	;'v'
  1158  007DF3  61                 	db	97	;'a'
  1159  007DF4  6C                 	db	108	;'l'
  1160  007DF5  75                 	db	117	;'u'
  1161  007DF6  65                 	db	101	;'e'
  1162  007DF7  27                 	db	39
  1163  007DF8  3A                 	db	58	;':'
  1164  007DF9  27                 	db	39
  1165  007DFA  57                 	db	87	;'W'
  1166  007DFB  72                 	db	114	;'r'
  1167  007DFC  69                 	db	105	;'i'
  1168  007DFD  74                 	db	116	;'t'
  1169  007DFE  69                 	db	105	;'i'
  1170  007DFF  6E                 	db	110	;'n'
  1171  007E00  67                 	db	103	;'g'
  1172  007E01  20                 	db	32
  1173  007E02  72                 	db	114	;'r'
  1174  007E03  65                 	db	101	;'e'
  1175  007E04  63                 	db	99	;'c'
  1176  007E05  74                 	db	116	;'t'
  1177  007E06  20                 	db	32
  1178  007E07  25                 	db	37
  1179  007E08  69                 	db	105	;'i'
  1180  007E09  27                 	db	39
  1181  007E0A  7D                 	db	125
  1182  007E0B  0A                 	db	10
  1183  007E0C  00                 	db	0
  1184  007E0D                     STR_28:
  1185  007E0D  7B                 	db	123
  1186  007E0E  27                 	db	39
  1187  007E0F  43                 	db	67	;'C'
  1188  007E10  4F                 	db	79	;'O'
  1189  007E11  4D                 	db	77	;'M'
  1190  007E12  27                 	db	39
  1191  007E13  3A                 	db	58	;':'
  1192  007E14  27                 	db	39
  1193  007E15  6C                 	db	108	;'l'
  1194  007E16  69                 	db	105	;'i'
  1195  007E17  6E                 	db	110	;'n'
  1196  007E18  65                 	db	101	;'e'
  1197  007E19  27                 	db	39
  1198  007E1A  2C                 	db	44
  1199  007E1B  27                 	db	39
  1200  007E1C  76                 	db	118	;'v'
  1201  007E1D  61                 	db	97	;'a'
  1202  007E1E  6C                 	db	108	;'l'
  1203  007E1F  75                 	db	117	;'u'
  1204  007E20  65                 	db	101	;'e'
  1205  007E21  27                 	db	39
  1206  007E22  3A                 	db	58	;':'
  1207  007E23  27                 	db	39
  1208  007E24  45                 	db	69	;'E'
  1209  007E25  6E                 	db	110	;'n'
  1210  007E26  74                 	db	116	;'t'
  1211  007E27  65                 	db	101	;'e'
  1212  007E28  72                 	db	114	;'r'
  1213  007E29  69                 	db	105	;'i'
  1214  007E2A  6E                 	db	110	;'n'
  1215  007E2B  67                 	db	103	;'g'
  1216  007E2C  20                 	db	32
  1217  007E2D  63                 	db	99	;'c'
  1218  007E2E  75                 	db	117	;'u'
  1219  007E2F  72                 	db	114	;'r'
  1220  007E30  76                 	db	118	;'v'
  1221  007E31  65                 	db	101	;'e'
  1222  007E32  27                 	db	39
  1223  007E33  7D                 	db	125
  1224  007E34  0A                 	db	10
  1225  007E35  00                 	db	0
  1226  007E36                     STR_5:
  1227  007E36  7B                 	db	123
  1228  007E37  27                 	db	39
  1229  007E38  43                 	db	67	;'C'
  1230  007E39  4F                 	db	79	;'O'
  1231  007E3A  4D                 	db	77	;'M'
  1232  007E3B  27                 	db	39
  1233  007E3C  3A                 	db	58	;':'
  1234  007E3D  27                 	db	39
  1235  007E3E  6C                 	db	108	;'l'
  1236  007E3F  69                 	db	105	;'i'
  1237  007E40  6E                 	db	110	;'n'
  1238  007E41  65                 	db	101	;'e'
  1239  007E42  27                 	db	39
  1240  007E43  2C                 	db	44
  1241  007E44  27                 	db	39
  1242  007E45  76                 	db	118	;'v'
  1243  007E46  61                 	db	97	;'a'
  1244  007E47  6C                 	db	108	;'l'
  1245  007E48  75                 	db	117	;'u'
  1246  007E49  65                 	db	101	;'e'
  1247  007E4A  27                 	db	39
  1248  007E4B  3A                 	db	58	;':'
  1249  007E4C  27                 	db	39
  1250  007E4D  4C                 	db	76	;'L'
  1251  007E4E  6F                 	db	111	;'o'
  1252  007E4F  61                 	db	97	;'a'
  1253  007E50  64                 	db	100	;'d'
  1254  007E51  69                 	db	105	;'i'
  1255  007E52  6E                 	db	110	;'n'
  1256  007E53  67                 	db	103	;'g'
  1257  007E54  20                 	db	32
  1258  007E55  65                 	db	101	;'e'
  1259  007E56  65                 	db	101	;'e'
  1260  007E57  70                 	db	112	;'p'
  1261  007E58  72                 	db	114	;'r'
  1262  007E59  6F                 	db	111	;'o'
  1263  007E5A  6D                 	db	109	;'m'
  1264  007E5B  27                 	db	39
  1265  007E5C  7D                 	db	125
  1266  007E5D  0A                 	db	10
  1267  007E5E  00                 	db	0
  1268  007E5F                     STR_22:
  1269  007E5F  7B                 	db	123
  1270  007E60  27                 	db	39
  1271  007E61  43                 	db	67	;'C'
  1272  007E62  4F                 	db	79	;'O'
  1273  007E63  4D                 	db	77	;'M'
  1274  007E64  27                 	db	39
  1275  007E65  3A                 	db	58	;':'
  1276  007E66  27                 	db	39
  1277  007E67  6C                 	db	108	;'l'
  1278  007E68  69                 	db	105	;'i'
  1279  007E69  6E                 	db	110	;'n'
  1280  007E6A  65                 	db	101	;'e'
  1281  007E6B  27                 	db	39
  1282  007E6C  2C                 	db	44
  1283  007E6D  27                 	db	39
  1284  007E6E  76                 	db	118	;'v'
  1285  007E6F  61                 	db	97	;'a'
  1286  007E70  6C                 	db	108	;'l'
  1287  007E71  75                 	db	117	;'u'
  1288  007E72  65                 	db	101	;'e'
  1289  007E73  27                 	db	39
  1290  007E74  3A                 	db	58	;':'
  1291  007E75  27                 	db	39
  1292  007E76  47                 	db	71	;'G'
  1293  007E77  52                 	db	82	;'R'
  1294  007E78  45                 	db	69	;'E'
  1295  007E79  45                 	db	69	;'E'
  1296  007E7A  4E                 	db	78	;'N'
  1297  007E7B  20                 	db	32
  1298  007E7C  6D                 	db	109	;'m'
  1299  007E7D  65                 	db	101	;'e'
  1300  007E7E  6D                 	db	109	;'m'
  1301  007E7F  6F                 	db	111	;'o'
  1302  007E80  72                 	db	114	;'r'
  1303  007E81  79                 	db	121	;'y'
  1304  007E82  3A                 	db	58	;':'
  1305  007E83  27                 	db	39
  1306  007E84  7D                 	db	125
  1307  007E85  0A                 	db	10
  1308  007E86  00                 	db	0
  1309  007E87                     STR_24:
  1310  007E87  7B                 	db	123
  1311  007E88  27                 	db	39
  1312  007E89  43                 	db	67	;'C'
  1313  007E8A  4F                 	db	79	;'O'
  1314  007E8B  4D                 	db	77	;'M'
  1315  007E8C  27                 	db	39
  1316  007E8D  3A                 	db	58	;':'
  1317  007E8E  27                 	db	39
  1318  007E8F  6C                 	db	108	;'l'
  1319  007E90  69                 	db	105	;'i'
  1320  007E91  6E                 	db	110	;'n'
  1321  007E92  65                 	db	101	;'e'
  1322  007E93  27                 	db	39
  1323  007E94  2C                 	db	44
  1324  007E95  27                 	db	39
  1325  007E96  76                 	db	118	;'v'
  1326  007E97  61                 	db	97	;'a'
  1327  007E98  6C                 	db	108	;'l'
  1328  007E99  75                 	db	117	;'u'
  1329  007E9A  65                 	db	101	;'e'
  1330  007E9B  27                 	db	39
  1331  007E9C  3A                 	db	58	;':'
  1332  007E9D  27                 	db	39
  1333  007E9E  4D                 	db	77	;'M'
  1334  007E9F  65                 	db	101	;'e'
  1335  007EA0  6D                 	db	109	;'m'
  1336  007EA1  6F                 	db	111	;'o'
  1337  007EA2  72                 	db	114	;'r'
  1338  007EA3  79                 	db	121	;'y'
  1339  007EA4  20                 	db	32
  1340  007EA5  65                 	db	101	;'e'
  1341  007EA6  72                 	db	114	;'r'
  1342  007EA7  61                 	db	97	;'a'
  1343  007EA8  73                 	db	115	;'s'
  1344  007EA9  65                 	db	101	;'e'
  1345  007EAA  64                 	db	100	;'d'
  1346  007EAB  27                 	db	39
  1347  007EAC  7D                 	db	125
  1348  007EAD  0A                 	db	10
  1349  007EAE  00                 	db	0
  1350  007EAF                     STR_13:
  1351  007EAF  7B                 	db	123
  1352  007EB0  27                 	db	39
  1353  007EB1  43                 	db	67	;'C'
  1354  007EB2  4F                 	db	79	;'O'
  1355  007EB3  4D                 	db	77	;'M'
  1356  007EB4  27                 	db	39
  1357  007EB5  3A                 	db	58	;':'
  1358  007EB6  27                 	db	39
  1359  007EB7  6C                 	db	108	;'l'
  1360  007EB8  69                 	db	105	;'i'
  1361  007EB9  6E                 	db	110	;'n'
  1362  007EBA  65                 	db	101	;'e'
  1363  007EBB  27                 	db	39
  1364  007EBC  2C                 	db	44
  1365  007EBD  27                 	db	39
  1366  007EBE  76                 	db	118	;'v'
  1367  007EBF  61                 	db	97	;'a'
  1368  007EC0  6C                 	db	108	;'l'
  1369  007EC1  75                 	db	117	;'u'
  1370  007EC2  65                 	db	101	;'e'
  1371  007EC3  27                 	db	39
  1372  007EC4  3A                 	db	58	;':'
  1373  007EC5  27                 	db	39
  1374  007EC6  69                 	db	105	;'i'
  1375  007EC7  6E                 	db	110	;'n'
  1376  007EC8  69                 	db	105	;'i'
  1377  007EC9  74                 	db	116	;'t'
  1378  007ECA  69                 	db	105	;'i'
  1379  007ECB  61                 	db	97	;'a'
  1380  007ECC  6C                 	db	108	;'l'
  1381  007ECD  20                 	db	32
  1382  007ECE  6D                 	db	109	;'m'
  1383  007ECF  6F                 	db	111	;'o'
  1384  007ED0  64                 	db	100	;'d'
  1385  007ED1  65                 	db	101	;'e'
  1386  007ED2  27                 	db	39
  1387  007ED3  7D                 	db	125
  1388  007ED4  0A                 	db	10
  1389  007ED5  00                 	db	0
  1390  007ED6                     STR_7:
  1391  007ED6  7B                 	db	123
  1392  007ED7  27                 	db	39
  1393  007ED8  43                 	db	67	;'C'
  1394  007ED9  4F                 	db	79	;'O'
  1395  007EDA  4D                 	db	77	;'M'
  1396  007EDB  27                 	db	39
  1397  007EDC  3A                 	db	58	;':'
  1398  007EDD  27                 	db	39
  1399  007EDE  6C                 	db	108	;'l'
  1400  007EDF  69                 	db	105	;'i'
  1401  007EE0  6E                 	db	110	;'n'
  1402  007EE1  65                 	db	101	;'e'
  1403  007EE2  27                 	db	39
  1404  007EE3  2C                 	db	44
  1405  007EE4  27                 	db	39
  1406  007EE5  76                 	db	118	;'v'
  1407  007EE6  61                 	db	97	;'a'
  1408  007EE7  6C                 	db	108	;'l'
  1409  007EE8  75                 	db	117	;'u'
  1410  007EE9  65                 	db	101	;'e'
  1411  007EEA  27                 	db	39
  1412  007EEB  3A                 	db	58	;':'
  1413  007EEC  27                 	db	39
  1414  007EED  47                 	db	71	;'G'
  1415  007EEE  72                 	db	114	;'r'
  1416  007EEF  65                 	db	101	;'e'
  1417  007EF0  65                 	db	101	;'e'
  1418  007EF1  6E                 	db	110	;'n'
  1419  007EF2  20                 	db	32
  1420  007EF3  6D                 	db	109	;'m'
  1421  007EF4  65                 	db	101	;'e'
  1422  007EF5  6D                 	db	109	;'m'
  1423  007EF6  6F                 	db	111	;'o'
  1424  007EF7  72                 	db	114	;'r'
  1425  007EF8  79                 	db	121	;'y'
  1426  007EF9  27                 	db	39
  1427  007EFA  7D                 	db	125
  1428  007EFB  0A                 	db	10
  1429  007EFC  00                 	db	0
  1430  007EFD                     STR_19:
  1431  007EFD  7B                 	db	123
  1432  007EFE  27                 	db	39
  1433  007EFF  43                 	db	67	;'C'
  1434  007F00  4F                 	db	79	;'O'
  1435  007F01  4D                 	db	77	;'M'
  1436  007F02  27                 	db	39
  1437  007F03  3A                 	db	58	;':'
  1438  007F04  27                 	db	39
  1439  007F05  6C                 	db	108	;'l'
  1440  007F06  69                 	db	105	;'i'
  1441  007F07  6E                 	db	110	;'n'
  1442  007F08  65                 	db	101	;'e'
  1443  007F09  27                 	db	39
  1444  007F0A  2C                 	db	44
  1445  007F0B  27                 	db	39
  1446  007F0C  76                 	db	118	;'v'
  1447  007F0D  61                 	db	97	;'a'
  1448  007F0E  6C                 	db	108	;'l'
  1449  007F0F  75                 	db	117	;'u'
  1450  007F10  65                 	db	101	;'e'
  1451  007F11  27                 	db	39
  1452  007F12  3A                 	db	58	;':'
  1453  007F13  27                 	db	39
  1454  007F14  52                 	db	82	;'R'
  1455  007F15  45                 	db	69	;'E'
  1456  007F16  44                 	db	68	;'D'
  1457  007F17  20                 	db	32
  1458  007F18  6D                 	db	109	;'m'
  1459  007F19  65                 	db	101	;'e'
  1460  007F1A  6D                 	db	109	;'m'
  1461  007F1B  6F                 	db	111	;'o'
  1462  007F1C  72                 	db	114	;'r'
  1463  007F1D  79                 	db	121	;'y'
  1464  007F1E  3A                 	db	58	;':'
  1465  007F1F  27                 	db	39
  1466  007F20  7D                 	db	125
  1467  007F21  0A                 	db	10
  1468  007F22  00                 	db	0
  1469  007F23                     STR_9:
  1470  007F23  7B                 	db	123
  1471  007F24  27                 	db	39
  1472  007F25  43                 	db	67	;'C'
  1473  007F26  4F                 	db	79	;'O'
  1474  007F27  4D                 	db	77	;'M'
  1475  007F28  27                 	db	39
  1476  007F29  3A                 	db	58	;':'
  1477  007F2A  27                 	db	39
  1478  007F2B  6C                 	db	108	;'l'
  1479  007F2C  69                 	db	105	;'i'
  1480  007F2D  6E                 	db	110	;'n'
  1481  007F2E  65                 	db	101	;'e'
  1482  007F2F  27                 	db	39
  1483  007F30  2C                 	db	44
  1484  007F31  27                 	db	39
  1485  007F32  76                 	db	118	;'v'
  1486  007F33  61                 	db	97	;'a'
  1487  007F34  6C                 	db	108	;'l'
  1488  007F35  75                 	db	117	;'u'
  1489  007F36  65                 	db	101	;'e'
  1490  007F37  27                 	db	39
  1491  007F38  3A                 	db	58	;':'
  1492  007F39  27                 	db	39
  1493  007F3A  52                 	db	82	;'R'
  1494  007F3B  65                 	db	101	;'e'
  1495  007F3C  64                 	db	100	;'d'
  1496  007F3D  20                 	db	32
  1497  007F3E  6D                 	db	109	;'m'
  1498  007F3F  65                 	db	101	;'e'
  1499  007F40  6D                 	db	109	;'m'
  1500  007F41  6F                 	db	111	;'o'
  1501  007F42  72                 	db	114	;'r'
  1502  007F43  79                 	db	121	;'y'
  1503  007F44  3A                 	db	58	;':'
  1504  007F45  27                 	db	39
  1505  007F46  7D                 	db	125
  1506  007F47  0A                 	db	10
  1507  007F48  00                 	db	0
  1508  007F49                     STR_4:
  1509  007F49  7B                 	db	123
  1510  007F4A  27                 	db	39
  1511  007F4B  43                 	db	67	;'C'
  1512  007F4C  4F                 	db	79	;'O'
  1513  007F4D  4D                 	db	77	;'M'
  1514  007F4E  27                 	db	39
  1515  007F4F  3A                 	db	58	;':'
  1516  007F50  27                 	db	39
  1517  007F51  6C                 	db	108	;'l'
  1518  007F52  69                 	db	105	;'i'
  1519  007F53  6E                 	db	110	;'n'
  1520  007F54  65                 	db	101	;'e'
  1521  007F55  27                 	db	39
  1522  007F56  2C                 	db	44
  1523  007F57  27                 	db	39
  1524  007F58  76                 	db	118	;'v'
  1525  007F59  61                 	db	97	;'a'
  1526  007F5A  6C                 	db	108	;'l'
  1527  007F5B  75                 	db	117	;'u'
  1528  007F5C  65                 	db	101	;'e'
  1529  007F5D  27                 	db	39
  1530  007F5E  3A                 	db	58	;':'
  1531  007F5F  27                 	db	39
  1532  007F60  52                 	db	82	;'R'
  1533  007F61  61                 	db	97	;'a'
  1534  007F62  79                 	db	121	;'y'
  1535  007F63  69                 	db	105	;'i'
  1536  007F64  74                 	db	116	;'t'
  1537  007F65  6F                 	db	111	;'o'
  1538  007F66  20                 	db	32
  1539  007F67  32                 	db	50	;'2'
  1540  007F68  2E                 	db	46
  1541  007F69  30                 	db	48	;'0'
  1542  007F6A  27                 	db	39
  1543  007F6B  7D                 	db	125
  1544  007F6C  0A                 	db	10
  1545  007F6D  00                 	db	0
  1546  007F6E                     STR_3:
  1547  007F6E  7B                 	db	123
  1548  007F6F  27                 	db	39
  1549  007F70  43                 	db	67	;'C'
  1550  007F71  4F                 	db	79	;'O'
  1551  007F72  4D                 	db	77	;'M'
  1552  007F73  27                 	db	39
  1553  007F74  3A                 	db	58	;':'
  1554  007F75  27                 	db	39
  1555  007F76  6C                 	db	108	;'l'
  1556  007F77  69                 	db	105	;'i'
  1557  007F78  6E                 	db	110	;'n'
  1558  007F79  65                 	db	101	;'e'
  1559  007F7A  27                 	db	39
  1560  007F7B  2C                 	db	44
  1561  007F7C  27                 	db	39
  1562  007F7D  76                 	db	118	;'v'
  1563  007F7E  61                 	db	97	;'a'
  1564  007F7F  6C                 	db	108	;'l'
  1565  007F80  75                 	db	117	;'u'
  1566  007F81  65                 	db	101	;'e'
  1567  007F82  27                 	db	39
  1568  007F83  3A                 	db	58	;':'
  1569  007F84  27                 	db	39
  1570  007F85  4D                 	db	77	;'M'
  1571  007F86  6F                 	db	111	;'o'
  1572  007F87  74                 	db	116	;'t'
  1573  007F88  6F                 	db	111	;'o'
  1574  007F89  72                 	db	114	;'r'
  1575  007F8A  20                 	db	32
  1576  007F8B  74                 	db	116	;'t'
  1577  007F8C  65                 	db	101	;'e'
  1578  007F8D  73                 	db	115	;'s'
  1579  007F8E  74                 	db	116	;'t'
  1580  007F8F  27                 	db	39
  1581  007F90  7D                 	db	125
  1582  007F91  0A                 	db	10
  1583  007F92  00                 	db	0
  1584  007F93                     STR_26:
  1585  007F93  7B                 	db	123
  1586  007F94  27                 	db	39
  1587  007F95  43                 	db	67	;'C'
  1588  007F96  4F                 	db	79	;'O'
  1589  007F97  4D                 	db	77	;'M'
  1590  007F98  27                 	db	39
  1591  007F99  3A                 	db	58	;':'
  1592  007F9A  27                 	db	39
  1593  007F9B  6C                 	db	108	;'l'
  1594  007F9C  69                 	db	105	;'i'
  1595  007F9D  6E                 	db	110	;'n'
  1596  007F9E  65                 	db	101	;'e'
  1597  007F9F  27                 	db	39
  1598  007FA0  2C                 	db	44
  1599  007FA1  27                 	db	39
  1600  007FA2  76                 	db	118	;'v'
  1601  007FA3  61                 	db	97	;'a'
  1602  007FA4  6C                 	db	108	;'l'
  1603  007FA5  75                 	db	117	;'u'
  1604  007FA6  65                 	db	101	;'e'
  1605  007FA7  27                 	db	39
  1606  007FA8  3A                 	db	58	;':'
  1607  007FA9  27                 	db	39
  1608  007FAA  53                 	db	83	;'S'
  1609  007FAB  61                 	db	97	;'a'
  1610  007FAC  76                 	db	118	;'v'
  1611  007FAD  65                 	db	101	;'e'
  1612  007FAE  20                 	db	32
  1613  007FAF  64                 	db	100	;'d'
  1614  007FB0  61                 	db	97	;'a'
  1615  007FB1  74                 	db	116	;'t'
  1616  007FB2  61                 	db	97	;'a'
  1617  007FB3  27                 	db	39
  1618  007FB4  7D                 	db	125
  1619  007FB5  0A                 	db	10
  1620  007FB6  00                 	db	0
  1621  007FB7                     STR_2:
  1622  007FB7  7B                 	db	123
  1623  007FB8  27                 	db	39
  1624  007FB9  43                 	db	67	;'C'
  1625  007FBA  4F                 	db	79	;'O'
  1626  007FBB  4D                 	db	77	;'M'
  1627  007FBC  27                 	db	39
  1628  007FBD  3A                 	db	58	;':'
  1629  007FBE  27                 	db	39
  1630  007FBF  6C                 	db	108	;'l'
  1631  007FC0  69                 	db	105	;'i'
  1632  007FC1  6E                 	db	110	;'n'
  1633  007FC2  65                 	db	101	;'e'
  1634  007FC3  27                 	db	39
  1635  007FC4  2C                 	db	44
  1636  007FC5  27                 	db	39
  1637  007FC6  76                 	db	118	;'v'
  1638  007FC7  61                 	db	97	;'a'
  1639  007FC8  6C                 	db	108	;'l'
  1640  007FC9  75                 	db	117	;'u'
  1641  007FCA  65                 	db	101	;'e'
  1642  007FCB  27                 	db	39
  1643  007FCC  3A                 	db	58	;':'
  1644  007FCD  27                 	db	39
  1645  007FCE  5B                 	db	91	;'['
  1646  007FCF  25                 	db	37
  1647  007FD0  69                 	db	105	;'i'
  1648  007FD1  5D                 	db	93	;']'
  1649  007FD2  20                 	db	32
  1650  007FD3  3D                 	db	61	;'='
  1651  007FD4  20                 	db	32
  1652  007FD5  25                 	db	37
  1653  007FD6  69                 	db	105	;'i'
  1654  007FD7  27                 	db	39
  1655  007FD8  7D                 	db	125
  1656  007FD9  0A                 	db	10
  1657  007FDA  00                 	db	0
  1658  007FDB                     STR_23:
  1659  007FDB  7B                 	db	123
  1660  007FDC  27                 	db	39
  1661  007FDD  43                 	db	67	;'C'
  1662  007FDE  4F                 	db	79	;'O'
  1663  007FDF  4D                 	db	77	;'M'
  1664  007FE0  27                 	db	39
  1665  007FE1  3A                 	db	58	;':'
  1666  007FE2  27                 	db	39
  1667  007FE3  52                 	db	82	;'R'
  1668  007FE4  65                 	db	101	;'e'
  1669  007FE5  6C                 	db	108	;'l'
  1670  007FE6  65                 	db	101	;'e'
  1671  007FE7  61                 	db	97	;'a'
  1672  007FE8  73                 	db	115	;'s'
  1673  007FE9  65                 	db	101	;'e'
  1674  007FEA  27                 	db	39
  1675  007FEB  7D                 	db	125
  1676  007FEC  0A                 	db	10
  1677  007FED  00                 	db	0
  1678  007FEE                     STR_32:
  1679  007FEE  7B                 	db	123
  1680  007FEF  27                 	db	39
  1681  007FF0  43                 	db	67	;'C'
  1682  007FF1  4F                 	db	79	;'O'
  1683  007FF2  4D                 	db	77	;'M'
  1684  007FF3  27                 	db	39
  1685  007FF4  3A                 	db	58	;':'
  1686  007FF5  27                 	db	39
  1687  007FF6  48                 	db	72	;'H'
  1688  007FF7  6F                 	db	111	;'o'
  1689  007FF8  6C                 	db	108	;'l'
  1690  007FF9  64                 	db	100	;'d'
  1691  007FFA  27                 	db	39
  1692  007FFB  7D                 	db	125
  1693  007FFC  0A                 	db	10
  1694  007FFD  00                 	db	0
  1695  0000                     
  1696                           ; #config settings
  1697  007FFE  00                 	db	0	; dummy byte at the end
  1698  0000                     
  1699                           	psect	cinit
  1700  004804                     __pcinit:
  1701                           	opt stack 0
  1702  004804                     start_initialization:
  1703                           	opt stack 0
  1704  004804                     __initialization:
  1705                           	opt stack 0
  1706                           
  1707                           ; Clear objects allocated to BIGRAM (630 bytes)
  1708  004804  EE03  F04B         	lfsr	0,__pbssBIGRAM
  1709  004808  EE12 F076          	lfsr	1,630
  1710  00480C                     clear_0:
  1711  00480C  6AEE               	clrf	postinc0,c
  1712  00480E  50E5               	movf	postdec1,w,c
  1713  004810  50E1               	movf	fsr1l,w,c
  1714  004812  E1FC               	bnz	clear_0
  1715  004814  50E2               	movf	fsr1h,w,c
  1716  004816  E1FA               	bnz	clear_0
  1717                           
  1718                           ; Clear objects allocated to BANK2 (232 bytes)
  1719  004818  EE02  F000         	lfsr	0,__pbssBANK2
  1720  00481C  0EE8               	movlw	232
  1721  00481E                     clear_1:
  1722  00481E  6AEE               	clrf	postinc0,c
  1723  004820  06E8               	decf	wreg,f,c
  1724  004822  E1FD               	bnz	clear_1
  1725                           
  1726                           ; Clear objects allocated to BANK1 (156 bytes)
  1727  004824  EE01  F000         	lfsr	0,__pbssBANK1
  1728  004828  0E9C               	movlw	156
  1729  00482A                     clear_2:
  1730  00482A  6AEE               	clrf	postinc0,c
  1731  00482C  06E8               	decf	wreg,f,c
  1732  00482E  E1FD               	bnz	clear_2
  1733                           
  1734                           ; Clear objects allocated to BANK0 (18 bytes)
  1735  004830  EE00  F0B1         	lfsr	0,__pbssBANK0
  1736  004834  0E12               	movlw	18
  1737  004836                     clear_3:
  1738  004836  6AEE               	clrf	postinc0,c
  1739  004838  06E8               	decf	wreg,f,c
  1740  00483A  E1FD               	bnz	clear_3
  1741                           
  1742                           ; Clear objects allocated to COMRAM (14 bytes)
  1743  00483C  EE00  F044         	lfsr	0,__pbssCOMRAM
  1744  004840  0E0E               	movlw	14
  1745  004842                     clear_4:
  1746  004842  6AEE               	clrf	postinc0,c
  1747  004844  06E8               	decf	wreg,f,c
  1748  004846  E1FD               	bnz	clear_4
  1749                           
  1750                           ; Initialize objects allocated to BANK1 (96 bytes)
  1751                           ; load TBLPTR registers with __pidataBANK1
  1752  004848  0E46               	movlw	low __pidataBANK1
  1753  00484A  6EF6               	movwf	tblptrl,c
  1754  00484C  0E49               	movlw	high __pidataBANK1
  1755  00484E  6EF7               	movwf	tblptrh,c
  1756  004850  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1757  004852  6EF8               	movwf	tblptru,c
  1758  004854  EE01  F09C         	lfsr	0,__pdataBANK1
  1759  004858  EE10 F060          	lfsr	1,96
  1760  00485C                     copy_data0:
  1761  00485C  0009               	tblrd		*+
  1762  00485E  CFF5 FFEE          	movff	tablat,postinc0
  1763  004862  50E5               	movf	postdec1,w,c
  1764  004864  50E1               	movf	fsr1l,w,c
  1765  004866  E1FA               	bnz	copy_data0
  1766  004868                     end_of_initialization:
  1767                           	opt stack 0
  1768  004868                     __end_of__initialization:
  1769                           	opt stack 0
  1770  004868  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1771  00486A  6EF8               	movwf	tblptru,c
  1772  00486C  0100               	movlb	0
  1773  00486E  EF0E  F000         	goto	_main	;jump to C main() function
  1774                           tblptru	equ	0xFF8
  1775                           tblptrh	equ	0xFF7
  1776                           tblptrl	equ	0xFF6
  1777                           tablat	equ	0xFF5
  1778                           postinc0	equ	0xFEE
  1779                           wreg	equ	0xFE8
  1780                           postdec1	equ	0xFE5
  1781                           fsr1h	equ	0xFE2
  1782                           fsr1l	equ	0xFE1
  1783                           
  1784                           	psect	bssCOMRAM
  1785  000044                     __pbssCOMRAM:
  1786                           	opt stack 0
  1787  000044                     _f:
  1788                           	opt stack 0
  1789  000044                     	ds	2
  1790  000046                     _flag_line:
  1791                           	opt stack 0
  1792  000046                     	ds	2
  1793  000048                     _formula:
  1794                           	opt stack 0
  1795  000048                     	ds	2
  1796  00004A                     _line:
  1797                           	opt stack 0
  1798  00004A                     	ds	2
  1799  00004C                     _speed:
  1800                           	opt stack 0
  1801  00004C                     	ds	2
  1802  00004E                     _x:
  1803                           	opt stack 0
  1804  00004E                     	ds	2
  1805  000050                     _MF:
  1806                           	opt stack 0
  1807  000050                     	ds	1
  1808  000051                     _RWM:
  1809                           	opt stack 0
  1810  000051                     	ds	1
  1811                           tblptru	equ	0xFF8
  1812                           tblptrh	equ	0xFF7
  1813                           tblptrl	equ	0xFF6
  1814                           tablat	equ	0xFF5
  1815                           postinc0	equ	0xFEE
  1816                           wreg	equ	0xFE8
  1817                           postdec1	equ	0xFE5
  1818                           fsr1h	equ	0xFE2
  1819                           fsr1l	equ	0xFE1
  1820                           
  1821                           	psect	bssBANK0
  1822  0000B1                     __pbssBANK0:
  1823                           	opt stack 0
  1824  0000B1                     _TIME:
  1825                           	opt stack 0
  1826  0000B1                     	ds	4
  1827  0000B5                     _TIME4:
  1828                           	opt stack 0
  1829  0000B5                     	ds	4
  1830  0000B9                     _fns:
  1831                           	opt stack 0
  1832  0000B9                     	ds	2
  1833  0000BB                     _ma:
  1834                           	opt stack 0
  1835  0000BB                     	ds	2
  1836  0000BD                     _mb:
  1837                           	opt stack 0
  1838  0000BD                     	ds	2
  1839  0000BF                     _rcount:
  1840                           	opt stack 0
  1841  0000BF                     	ds	2
  1842  0000C1                     _TOTAL:
  1843                           	opt stack 0
  1844  0000C1                     	ds	2
  1845                           tblptru	equ	0xFF8
  1846                           tblptrh	equ	0xFF7
  1847                           tblptrl	equ	0xFF6
  1848                           tablat	equ	0xFF5
  1849                           postinc0	equ	0xFEE
  1850                           wreg	equ	0xFE8
  1851                           postdec1	equ	0xFE5
  1852                           fsr1h	equ	0xFE2
  1853                           fsr1l	equ	0xFE1
  1854                           
  1855                           	psect	bssBANK1
  1856  000100                     __pbssBANK1:
  1857                           	opt stack 0
  1858  000100                     _P:
  1859                           	opt stack 0
  1860  000100                     	ds	32
  1861  000120                     _amax:
  1862                           	opt stack 0
  1863  000120                     	ds	32
  1864  000140                     _amin:
  1865                           	opt stack 0
  1866  000140                     	ds	32
  1867  000160                     _TIME2:
  1868                           	opt stack 0
  1869  000160                     	ds	4
  1870  000164                     _TIME3:
  1871                           	opt stack 0
  1872  000164                     	ds	4
  1873  000168                     _TIME5:
  1874                           	opt stack 0
  1875  000168                     	ds	4
  1876  00016C                     _TIME6:
  1877                           	opt stack 0
  1878  00016C                     	ds	4
  1879  000170                     _WAITFRENAR:
  1880                           	opt stack 0
  1881  000170                     	ds	4
  1882  000174                     _WAITIME:
  1883                           	opt stack 0
  1884  000174                     	ds	4
  1885  000178                     _kd:
  1886                           	opt stack 0
  1887  000178                     	ds	3
  1888  00017B                     _kp:
  1889                           	opt stack 0
  1890  00017B                     	ds	3
  1891  00017E                     _ca:
  1892                           	opt stack 0
  1893  00017E                     	ds	2
  1894  000180                     _cb:
  1895                           	opt stack 0
  1896  000180                     	ds	2
  1897  000182                     _cox:
  1898                           	opt stack 0
  1899  000182                     	ds	2
  1900  000184                     _der:
  1901                           	opt stack 0
  1902  000184                     	ds	2
  1903  000186                     _errno:
  1904                           	opt stack 0
  1905  000186                     	ds	2
  1906  000188                     _fa:
  1907                           	opt stack 0
  1908  000188                     	ds	2
  1909  00018A                     _fb:
  1910                           	opt stack 0
  1911  00018A                     	ds	2
  1912  00018C                     _gf:
  1913                           	opt stack 0
  1914  00018C                     	ds	2
  1915  00018E                     _last:
  1916                           	opt stack 0
  1917  00018E                     	ds	2
  1918  000190                     _mod:
  1919                           	opt stack 0
  1920  000190                     	ds	2
  1921  000192                     _pasada:
  1922                           	opt stack 0
  1923  000192                     	ds	2
  1924  000194                     _rf:
  1925                           	opt stack 0
  1926  000194                     	ds	2
  1927  000196                     _speedMode:
  1928                           	opt stack 0
  1929  000196                     	ds	2
  1930  000198                     _status:
  1931                           	opt stack 0
  1932  000198                     	ds	2
  1933  00019A                     _b2:
  1934                           	opt stack 0
  1935  00019A                     	ds	1
  1936  00019B                     _mm:
  1937                           	opt stack 0
  1938  00019B                     	ds	1
  1939                           tblptru	equ	0xFF8
  1940                           tblptrh	equ	0xFF7
  1941                           tblptrl	equ	0xFF6
  1942                           tablat	equ	0xFF5
  1943                           postinc0	equ	0xFEE
  1944                           wreg	equ	0xFE8
  1945                           postdec1	equ	0xFE5
  1946                           fsr1h	equ	0xFE2
  1947                           fsr1l	equ	0xFE1
  1948                           
  1949                           	psect	dataBANK1
  1950  00019C                     __pdataBANK1:
  1951                           	opt stack 0
  1952  00019C                     _VKD:
  1953                           	opt stack 0
  1954  00019C                     	ds	18
  1955  0001AE                     _VKP:
  1956                           	opt stack 0
  1957  0001AE                     	ds	18
  1958  0001C0                     _VEL:
  1959                           	opt stack 0
  1960  0001C0                     	ds	12
  1961  0001CC                     _fw:
  1962                           	opt stack 0
  1963  0001CC                     	ds	10
  1964  0001D6                     _pd:
  1965                           	opt stack 0
  1966  0001D6                     	ds	10
  1967  0001E0                     _sd:
  1968                           	opt stack 0
  1969  0001E0                     	ds	10
  1970  0001EA                     _TIMEFRENO:
  1971                           	opt stack 0
  1972  0001EA                     	ds	4
  1973  0001EE                     _test_kd:
  1974                           	opt stack 0
  1975  0001EE                     	ds	3
  1976  0001F1                     _test_kp:
  1977                           	opt stack 0
  1978  0001F1                     	ds	3
  1979  0001F4                     _CURVE_ACEL_TIME:
  1980                           	opt stack 0
  1981  0001F4                     	ds	2
  1982  0001F6                     _LOW_SPEED:
  1983                           	opt stack 0
  1984  0001F6                     	ds	2
  1985  0001F8                     _RECT_ACEL_TIME:
  1986                           	opt stack 0
  1987  0001F8                     	ds	2
  1988  0001FA                     _RECT_STOP_TIME:
  1989                           	opt stack 0
  1990  0001FA                     	ds	2
  1991                           tblptru	equ	0xFF8
  1992                           tblptrh	equ	0xFF7
  1993                           tblptrl	equ	0xFF6
  1994                           tablat	equ	0xFF5
  1995                           postinc0	equ	0xFEE
  1996                           wreg	equ	0xFE8
  1997                           postdec1	equ	0xFE5
  1998                           fsr1h	equ	0xFE2
  1999                           fsr1l	equ	0xFE1
  2000                           
  2001                           	psect	bssBANK2
  2002  000200                     __pbssBANK2:
  2003                           	opt stack 0
  2004  000200                     _LEN:
  2005                           	opt stack 0
  2006  000200                     	ds	200
  2007  0002C8                     _V:
  2008                           	opt stack 0
  2009  0002C8                     	ds	32
  2010                           tblptru	equ	0xFF8
  2011                           tblptrh	equ	0xFF7
  2012                           tblptrl	equ	0xFF6
  2013                           tablat	equ	0xFF5
  2014                           postinc0	equ	0xFEE
  2015                           wreg	equ	0xFE8
  2016                           postdec1	equ	0xFE5
  2017                           fsr1h	equ	0xFE2
  2018                           fsr1l	equ	0xFE1
  2019                           
  2020                           	psect	bssBIGRAM
  2021  00034B                     __pbssBIGRAM:
  2022                           	opt stack 0
  2023  00034B                     _ACEL:
  2024                           	opt stack 0
  2025  00034B                     	ds	315
  2026  000486                     _ICEL:
  2027                           	opt stack 0
  2028  000486                     	ds	315
  2029                           tblptru	equ	0xFF8
  2030                           tblptrh	equ	0xFF7
  2031                           tblptrl	equ	0xFF6
  2032                           tablat	equ	0xFF5
  2033                           postinc0	equ	0xFEE
  2034                           wreg	equ	0xFE8
  2035                           postdec1	equ	0xFE5
  2036                           fsr1h	equ	0xFE2
  2037                           fsr1l	equ	0xFE1
  2038                           
  2039                           	psect	cstackBANK3
  2040  000300                     __pcstackBANK3:
  2041                           	opt stack 0
  2042  000300                     main@kp:
  2043                           	opt stack 0
  2044                           
  2045                           ; 3 bytes @ 0x0
  2046  000300                     	ds	3
  2047  000303                     main@kd:
  2048                           	opt stack 0
  2049                           
  2050                           ; 3 bytes @ 0x3
  2051  000303                     	ds	3
  2052  000306                     main@v:
  2053                           	opt stack 0
  2054                           
  2055                           ; 2 bytes @ 0x6
  2056  000306                     	ds	2
  2057  000308                     main@ms:
  2058                           	opt stack 0
  2059                           
  2060                           ; 2 bytes @ 0x8
  2061  000308                     	ds	2
  2062  00030A                     main@s:
  2063                           	opt stack 0
  2064                           
  2065                           ; 2 bytes @ 0xA
  2066  00030A                     	ds	2
  2067  00030C                     _main$2567:
  2068                           	opt stack 0
  2069                           
  2070                           ; 2 bytes @ 0xC
  2071  00030C                     	ds	2
  2072  00030E                     _main$2568:
  2073                           	opt stack 0
  2074                           
  2075                           ; 2 bytes @ 0xE
  2076  00030E                     	ds	2
  2077  000310                     _main$2569:
  2078                           	opt stack 0
  2079                           
  2080                           ; 2 bytes @ 0x10
  2081  000310                     	ds	2
  2082  000312                     _main$2570:
  2083                           	opt stack 0
  2084                           
  2085                           ; 2 bytes @ 0x12
  2086  000312                     	ds	2
  2087  000314                     _main$2571:
  2088                           	opt stack 0
  2089                           
  2090                           ; 2 bytes @ 0x14
  2091  000314                     	ds	2
  2092  000316                     _main$2572:
  2093                           	opt stack 0
  2094                           
  2095                           ; 2 bytes @ 0x16
  2096  000316                     	ds	2
  2097  000318                     _main$1877:
  2098                           	opt stack 0
  2099                           
  2100                           ; 2 bytes @ 0x18
  2101  000318                     	ds	2
  2102  00031A                     _main$1878:
  2103                           	opt stack 0
  2104                           
  2105                           ; 2 bytes @ 0x1A
  2106  00031A                     	ds	2
  2107  00031C                     _main$1879:
  2108                           	opt stack 0
  2109                           
  2110                           ; 2 bytes @ 0x1C
  2111  00031C                     	ds	2
  2112  00031E                     _main$1880:
  2113                           	opt stack 0
  2114                           
  2115                           ; 2 bytes @ 0x1E
  2116  00031E                     	ds	2
  2117  000320                     _main$1884:
  2118                           	opt stack 0
  2119                           
  2120                           ; 2 bytes @ 0x20
  2121  000320                     	ds	2
  2122  000322                     _main$1885:
  2123                           	opt stack 0
  2124                           
  2125                           ; 2 bytes @ 0x22
  2126  000322                     	ds	2
  2127  000324                     _main$1897:
  2128                           	opt stack 0
  2129                           
  2130                           ; 2 bytes @ 0x24
  2131  000324                     	ds	2
  2132  000326                     _main$1898:
  2133                           	opt stack 0
  2134                           
  2135                           ; 2 bytes @ 0x26
  2136  000326                     	ds	2
  2137  000328                     main@old_1863:
  2138                           	opt stack 0
  2139                           
  2140                           ; 1 bytes @ 0x28
  2141  000328                     	ds	1
  2142  000329                     main@old_1868:
  2143                           	opt stack 0
  2144                           
  2145                           ; 1 bytes @ 0x29
  2146  000329                     	ds	1
  2147  00032A                     _main$2574:
  2148                           	opt stack 0
  2149                           
  2150                           ; 3 bytes @ 0x2A
  2151  00032A                     	ds	3
  2152  00032D                     _main$2575:
  2153                           	opt stack 0
  2154                           
  2155                           ; 3 bytes @ 0x2D
  2156  00032D                     	ds	3
  2157  000330                     main@old_1860:
  2158                           	opt stack 0
  2159                           
  2160                           ; 1 bytes @ 0x30
  2161  000330                     	ds	1
  2162  000331                     main@old_1865:
  2163                           	opt stack 0
  2164                           
  2165                           ; 1 bytes @ 0x31
  2166  000331                     	ds	1
  2167  000332                     _main$1848:
  2168                           	opt stack 0
  2169                           
  2170                           ; 2 bytes @ 0x32
  2171  000332                     	ds	2
  2172  000334                     _main$1854:
  2173                           	opt stack 0
  2174                           
  2175                           ; 2 bytes @ 0x34
  2176  000334                     	ds	2
  2177  000336                     main@j_1852:
  2178                           	opt stack 0
  2179                           
  2180                           ; 2 bytes @ 0x36
  2181  000336                     	ds	2
  2182  000338                     main@i:
  2183                           	opt stack 0
  2184                           
  2185                           ; 2 bytes @ 0x38
  2186  000338                     	ds	2
  2187  00033A                     main@i_1851:
  2188                           	opt stack 0
  2189                           
  2190                           ; 2 bytes @ 0x3A
  2191  00033A                     	ds	2
  2192  00033C                     main@j_1857:
  2193                           	opt stack 0
  2194                           
  2195                           ; 2 bytes @ 0x3C
  2196  00033C                     	ds	2
  2197  00033E                     main@mod:
  2198                           	opt stack 0
  2199                           
  2200                           ; 2 bytes @ 0x3E
  2201  00033E                     	ds	2
  2202  000340                     _main$2573:
  2203                           	opt stack 0
  2204                           
  2205                           ; 4 bytes @ 0x40
  2206  000340                     	ds	4
  2207  000344                     main@speed:
  2208                           	opt stack 0
  2209                           
  2210                           ; 2 bytes @ 0x44
  2211  000344                     	ds	2
  2212  000346                     main@old:
  2213                           	opt stack 0
  2214                           
  2215                           ; 1 bytes @ 0x46
  2216  000346                     	ds	1
  2217  000347                     main@j:
  2218                           	opt stack 0
  2219                           
  2220                           ; 2 bytes @ 0x47
  2221  000347                     	ds	2
  2222  000349                     main@i_1856:
  2223                           	opt stack 0
  2224                           
  2225                           ; 2 bytes @ 0x49
  2226  000349                     	ds	2
  2227                           tblptru	equ	0xFF8
  2228                           tblptrh	equ	0xFF7
  2229                           tblptrl	equ	0xFF6
  2230                           tablat	equ	0xFF5
  2231                           postinc0	equ	0xFEE
  2232                           wreg	equ	0xFE8
  2233                           postdec1	equ	0xFE5
  2234                           fsr1h	equ	0xFE2
  2235                           fsr1l	equ	0xFE1
  2236                           
  2237                           	psect	cstackBANK0
  2238  000060                     __pcstackBANK0:
  2239                           	opt stack 0
  2240  000060                     ?___ftadd:
  2241                           	opt stack 0
  2242  000060                     ___ftadd@f1:
  2243                           	opt stack 0
  2244  000060                     Line@w:
  2245                           	opt stack 0
  2246                           
  2247                           ; 4 bytes @ 0x0
  2248  000060                     	ds	3
  2249  000063                     ___ftadd@f2:
  2250                           	opt stack 0
  2251                           
  2252                           ; 3 bytes @ 0x3
  2253  000063                     	ds	1
  2254  000064                     Line@a:
  2255                           	opt stack 0
  2256                           
  2257                           ; 4 bytes @ 0x4
  2258  000064                     	ds	2
  2259  000066                     ??___ftadd:
  2260                           
  2261                           ; 0 bytes @ 0x6
  2262  000066                     	ds	2
  2263  000068                     Line@b:
  2264                           	opt stack 0
  2265                           
  2266                           ; 4 bytes @ 0x8
  2267  000068                     	ds	1
  2268  000069                     ___ftadd@sign:
  2269                           	opt stack 0
  2270                           
  2271                           ; 1 bytes @ 0x9
  2272  000069                     	ds	1
  2273  00006A                     ___ftadd@exp2:
  2274                           	opt stack 0
  2275                           
  2276                           ; 1 bytes @ 0xA
  2277  00006A                     	ds	1
  2278  00006B                     ___ftadd@exp1:
  2279                           	opt stack 0
  2280                           
  2281                           ; 1 bytes @ 0xB
  2282  00006B                     	ds	1
  2283  00006C                     ?___ftsub:
  2284                           	opt stack 0
  2285  00006C                     ?_eval_poly:
  2286                           	opt stack 0
  2287  00006C                     ?___fttol:
  2288                           	opt stack 0
  2289  00006C                     Line@g:
  2290                           	opt stack 0
  2291  00006C                     ___ftge@ff1:
  2292                           	opt stack 0
  2293  00006C                     ___ftsub@f1:
  2294                           	opt stack 0
  2295  00006C                     ___fttol@f1:
  2296                           	opt stack 0
  2297  00006C                     eval_poly@x:
  2298                           	opt stack 0
  2299                           
  2300                           ; 3 bytes @ 0xC
  2301  00006C                     	ds	1
  2302  00006D                     Line@j_1803:
  2303                           	opt stack 0
  2304                           
  2305                           ; 2 bytes @ 0xD
  2306  00006D                     	ds	2
  2307  00006F                     Line@j:
  2308                           	opt stack 0
  2309  00006F                     eval_poly@d:
  2310                           	opt stack 0
  2311  00006F                     ___ftge@ff2:
  2312                           	opt stack 0
  2313  00006F                     ___ftsub@f2:
  2314                           	opt stack 0
  2315                           
  2316                           ; 3 bytes @ 0xF
  2317  00006F                     	ds	1
  2318  000070                     ??___fttol:
  2319                           
  2320                           ; 0 bytes @ 0x10
  2321  000070                     	ds	1
  2322  000071                     Line@i:
  2323                           	opt stack 0
  2324  000071                     eval_poly@n:
  2325                           	opt stack 0
  2326                           
  2327                           ; 2 bytes @ 0x11
  2328  000071                     	ds	1
  2329  000072                     ??___ftge:
  2330                           
  2331                           ; 0 bytes @ 0x12
  2332  000072                     	ds	1
  2333  000073                     Line@i_1804:
  2334                           	opt stack 0
  2335  000073                     eval_poly@res:
  2336                           	opt stack 0
  2337                           
  2338                           ; 3 bytes @ 0x13
  2339  000073                     	ds	2
  2340  000075                     ___fttol@sign1:
  2341                           	opt stack 0
  2342  000075                     Line@v:
  2343                           	opt stack 0
  2344                           
  2345                           ; 4 bytes @ 0x15
  2346  000075                     	ds	1
  2347  000076                     ?_log:
  2348                           	opt stack 0
  2349  000076                     ?_ldexp:
  2350                           	opt stack 0
  2351  000076                     ldexp@value:
  2352                           	opt stack 0
  2353  000076                     log@x:
  2354                           	opt stack 0
  2355  000076                     ___fttol@lval:
  2356                           	opt stack 0
  2357                           
  2358                           ; 4 bytes @ 0x16
  2359  000076                     	ds	3
  2360  000079                     ldexp@newexp:
  2361                           	opt stack 0
  2362  000079                     log@exponent:
  2363                           	opt stack 0
  2364                           
  2365                           ; 2 bytes @ 0x19
  2366  000079                     	ds	1
  2367  00007A                     ___fttol@exp1:
  2368                           	opt stack 0
  2369                           
  2370                           ; 1 bytes @ 0x1A
  2371  00007A                     	ds	1
  2372  00007B                     ??_ldexp:
  2373  00007B                     ?_Interval:
  2374                           	opt stack 0
  2375  00007B                     ?_floor:
  2376                           	opt stack 0
  2377  00007B                     MotorsSpeed@A:
  2378                           	opt stack 0
  2379  00007B                     Interval@start:
  2380                           	opt stack 0
  2381  00007B                     floor@x:
  2382                           	opt stack 0
  2383                           
  2384                           ; 3 bytes @ 0x1B
  2385  00007B                     	ds	2
  2386  00007D                     MotorsSpeed@B:
  2387                           	opt stack 0
  2388  00007D                     Interval@end:
  2389                           	opt stack 0
  2390                           
  2391                           ; 2 bytes @ 0x1D
  2392  00007D                     	ds	1
  2393  00007E                     floor@i:
  2394                           	opt stack 0
  2395                           
  2396                           ; 3 bytes @ 0x1E
  2397  00007E                     	ds	1
  2398  00007F                     _MotorsSpeed$1455:
  2399                           	opt stack 0
  2400  00007F                     Interval@t:
  2401                           	opt stack 0
  2402                           
  2403                           ; 2 bytes @ 0x1F
  2404  00007F                     	ds	2
  2405  000081                     _MotorsSpeed$1457:
  2406                           	opt stack 0
  2407  000081                     Interval@total:
  2408                           	opt stack 0
  2409  000081                     floor@expon:
  2410                           	opt stack 0
  2411                           
  2412                           ; 2 bytes @ 0x21
  2413  000081                     	ds	2
  2414  000083                     ?_exp:
  2415                           	opt stack 0
  2416  000083                     Interval@a:
  2417                           	opt stack 0
  2418  000083                     AdvanceLow@kp:
  2419                           	opt stack 0
  2420  000083                     exp@x:
  2421                           	opt stack 0
  2422                           
  2423                           ; 3 bytes @ 0x23
  2424  000083                     	ds	2
  2425  000085                     ?_printf:
  2426                           	opt stack 0
  2427  000085                     printf@f:
  2428                           	opt stack 0
  2429                           
  2430                           ; 2 bytes @ 0x25
  2431  000085                     	ds	1
  2432  000086                     AdvanceLow@kd:
  2433                           	opt stack 0
  2434  000086                     _exp$2578:
  2435                           	opt stack 0
  2436                           
  2437                           ; 3 bytes @ 0x26
  2438  000086                     	ds	3
  2439  000089                     AdvanceLow@speed:
  2440                           	opt stack 0
  2441  000089                     exp@exponent:
  2442                           	opt stack 0
  2443                           
  2444                           ; 2 bytes @ 0x29
  2445  000089                     	ds	2
  2446  00008B                     exp@sign:
  2447                           	opt stack 0
  2448                           
  2449                           ; 1 bytes @ 0x2B
  2450  00008B                     	ds	1
  2451  00008C                     ?_pow:
  2452                           	opt stack 0
  2453  00008C                     pow@x:
  2454                           	opt stack 0
  2455                           
  2456                           ; 3 bytes @ 0x2C
  2457  00008C                     	ds	3
  2458  00008F                     pow@y:
  2459                           	opt stack 0
  2460                           
  2461                           ; 3 bytes @ 0x2F
  2462  00008F                     	ds	2
  2463  000091                     ??_printf:
  2464                           
  2465                           ; 0 bytes @ 0x31
  2466  000091                     	ds	1
  2467  000092                     _pow$2576:
  2468                           	opt stack 0
  2469                           
  2470                           ; 3 bytes @ 0x32
  2471  000092                     	ds	3
  2472  000095                     printf@prec:
  2473                           	opt stack 0
  2474  000095                     _pow$2577:
  2475                           	opt stack 0
  2476                           
  2477                           ; 3 bytes @ 0x35
  2478  000095                     	ds	1
  2479  000096                     printf@ap:
  2480                           	opt stack 0
  2481                           
  2482                           ; 2 bytes @ 0x36
  2483  000096                     	ds	2
  2484  000098                     pow@sign:
  2485                           	opt stack 0
  2486  000098                     printf@val:
  2487                           	opt stack 0
  2488                           
  2489                           ; 2 bytes @ 0x38
  2490  000098                     	ds	1
  2491  000099                     pow@yi:
  2492                           	opt stack 0
  2493                           
  2494                           ; 4 bytes @ 0x39
  2495  000099                     	ds	1
  2496  00009A                     printf@flag:
  2497                           	opt stack 0
  2498                           
  2499                           ; 1 bytes @ 0x3A
  2500  00009A                     	ds	1
  2501  00009B                     printf@width:
  2502                           	opt stack 0
  2503                           
  2504                           ; 2 bytes @ 0x3B
  2505  00009B                     	ds	2
  2506  00009D                     ??_Compute:
  2507  00009D                     printf@c:
  2508                           	opt stack 0
  2509                           
  2510                           ; 1 bytes @ 0x3D
  2511  00009D                     	ds	1
  2512  00009E                     ??_ShowMem:
  2513  00009E                     PlotCompute@x:
  2514                           	opt stack 0
  2515                           
  2516                           ; 2 bytes @ 0x3E
  2517  00009E                     	ds	1
  2518  00009F                     ShowMem@x:
  2519                           	opt stack 0
  2520  00009F                     _Compute$2565:
  2521                           	opt stack 0
  2522                           
  2523                           ; 3 bytes @ 0x3F
  2524  00009F                     	ds	2
  2525  0000A1                     ??_Save:
  2526                           
  2527                           ; 0 bytes @ 0x41
  2528  0000A1                     	ds	1
  2529  0000A2                     _Save$1775:
  2530                           	opt stack 0
  2531  0000A2                     _Compute$2566:
  2532                           	opt stack 0
  2533                           
  2534                           ; 3 bytes @ 0x42
  2535  0000A2                     	ds	2
  2536  0000A4                     Save@sum:
  2537                           	opt stack 0
  2538                           
  2539                           ; 1 bytes @ 0x44
  2540  0000A4                     	ds	1
  2541  0000A5                     Compute@x:
  2542                           	opt stack 0
  2543  0000A5                     Save@x:
  2544                           	opt stack 0
  2545                           
  2546                           ; 2 bytes @ 0x45
  2547  0000A5                     	ds	2
  2548  0000A7                     
  2549                           ; 2 bytes @ 0x47
  2550  0000A7                     	ds	2
  2551  0000A9                     
  2552                           ; 3 bytes @ 0x49
  2553  0000A9                     	ds	3
  2554  0000AC                     ??_main:
  2555                           
  2556                           ; 0 bytes @ 0x4C
  2557  0000AC                     	ds	5
  2558                           tblptru	equ	0xFF8
  2559                           tblptrh	equ	0xFF7
  2560                           tblptrl	equ	0xFF6
  2561                           tablat	equ	0xFF5
  2562                           postinc0	equ	0xFEE
  2563                           wreg	equ	0xFE8
  2564                           postdec1	equ	0xFE5
  2565                           fsr1h	equ	0xFE2
  2566                           fsr1l	equ	0xFE1
  2567                           
  2568                           	psect	cstackCOMRAM
  2569  000001                     __pcstackCOMRAM:
  2570                           	opt stack 0
  2571  000001                     ??_enc:
  2572  000001                     
  2573                           ; 0 bytes @ 0x0
  2574  000001                     	ds	14
  2575  00000F                     ??_isdigit:
  2576  00000F                     ?___awdiv:
  2577                           	opt stack 0
  2578  00000F                     ?___lwdiv:
  2579                           	opt stack 0
  2580  00000F                     ?___ftpack:
  2581                           	opt stack 0
  2582  00000F                     ?_frexp:
  2583                           	opt stack 0
  2584  00000F                     ?___aldiv:
  2585                           	opt stack 0
  2586  00000F                     ?___almod:
  2587                           	opt stack 0
  2588  00000F                     putch@data:
  2589                           	opt stack 0
  2590  00000F                     WriteMem@data:
  2591                           	opt stack 0
  2592  00000F                     ReadMem@data:
  2593                           	opt stack 0
  2594  00000F                     ___awdiv@dividend:
  2595                           	opt stack 0
  2596  00000F                     ___lwdiv@dividend:
  2597                           	opt stack 0
  2598  00000F                     ___ftpack@arg:
  2599                           	opt stack 0
  2600  00000F                     frexp@value:
  2601                           	opt stack 0
  2602  00000F                     ___aldiv@dividend:
  2603                           	opt stack 0
  2604  00000F                     ___almod@dividend:
  2605                           	opt stack 0
  2606                           
  2607                           ; 4 bytes @ 0xE
  2608  00000F                     	ds	1
  2609  000010                     WriteMem@addr:
  2610                           	opt stack 0
  2611  000010                     _isdigit$2200:
  2612                           	opt stack 0
  2613                           
  2614                           ; 1 bytes @ 0xF
  2615  000010                     	ds	1
  2616  000011                     ReadMem@addr:
  2617                           	opt stack 0
  2618  000011                     isdigit@c:
  2619                           	opt stack 0
  2620  000011                     ___awdiv@divisor:
  2621                           	opt stack 0
  2622  000011                     ___lwdiv@divisor:
  2623                           	opt stack 0
  2624                           
  2625                           ; 2 bytes @ 0x10
  2626  000011                     	ds	1
  2627  000012                     ___ftpack@exp:
  2628                           	opt stack 0
  2629  000012                     CheckMem@data:
  2630                           	opt stack 0
  2631  000012                     Length@data:
  2632                           	opt stack 0
  2633  000012                     GetValue@item:
  2634                           	opt stack 0
  2635  000012                     frexp@eptr:
  2636                           	opt stack 0
  2637                           
  2638                           ; 2 bytes @ 0x11
  2639  000012                     	ds	1
  2640  000013                     ___awdiv@counter:
  2641                           	opt stack 0
  2642  000013                     ___ftpack@sign:
  2643                           	opt stack 0
  2644  000013                     ___lwdiv@counter:
  2645                           	opt stack 0
  2646  000013                     ___aldiv@divisor:
  2647                           	opt stack 0
  2648  000013                     ___almod@divisor:
  2649                           	opt stack 0
  2650                           
  2651                           ; 4 bytes @ 0x12
  2652  000013                     	ds	1
  2653  000014                     ??___ftpack:
  2654  000014                     ??_frexp:
  2655  000014                     ??_Length:
  2656  000014                     _CheckMem$1772:
  2657                           	opt stack 0
  2658  000014                     ___awdiv@sign:
  2659                           	opt stack 0
  2660  000014                     GetValue@data:
  2661                           	opt stack 0
  2662  000014                     ___lwdiv@quotient:
  2663                           	opt stack 0
  2664                           
  2665                           ; 2 bytes @ 0x13
  2666  000014                     	ds	1
  2667  000015                     CheckMem@rta:
  2668                           	opt stack 0
  2669  000015                     ___awdiv@quotient:
  2670                           	opt stack 0
  2671                           
  2672                           ; 2 bytes @ 0x14
  2673  000015                     	ds	1
  2674  000016                     ??_GetValue:
  2675  000016                     ?___lwmod:
  2676                           	opt stack 0
  2677  000016                     Length@add:
  2678                           	opt stack 0
  2679  000016                     ___lwmod@dividend:
  2680                           	opt stack 0
  2681                           
  2682                           ; 2 bytes @ 0x15
  2683  000016                     	ds	1
  2684  000017                     ??_EnhancedRead:
  2685  000017                     ?___wmul:
  2686                           	opt stack 0
  2687  000017                     ?___lltoft:
  2688                           	opt stack 0
  2689  000017                     ___aldiv@counter:
  2690                           	opt stack 0
  2691  000017                     ___almod@counter:
  2692                           	opt stack 0
  2693  000017                     MotorASpeed@S:
  2694                           	opt stack 0
  2695  000017                     MotorBSpeed@S:
  2696                           	opt stack 0
  2697  000017                     _Length$1781:
  2698                           	opt stack 0
  2699  000017                     ___wmul@multiplier:
  2700                           	opt stack 0
  2701  000017                     ___lltoft@c:
  2702                           	opt stack 0
  2703                           
  2704                           ; 4 bytes @ 0x16
  2705  000017                     	ds	1
  2706  000018                     GetValue@add:
  2707                           	opt stack 0
  2708  000018                     ___aldiv@sign:
  2709                           	opt stack 0
  2710  000018                     ___almod@sign:
  2711                           	opt stack 0
  2712  000018                     EnhancedRead@aux:
  2713                           	opt stack 0
  2714  000018                     ___lwmod@divisor:
  2715                           	opt stack 0
  2716                           
  2717                           ; 2 bytes @ 0x17
  2718  000018                     	ds	1
  2719  000019                     ??_MotorASpeed:
  2720  000019                     ??_MotorBSpeed:
  2721  000019                     Length@rta:
  2722                           	opt stack 0
  2723  000019                     _GetValue$1791:
  2724                           	opt stack 0
  2725  000019                     ___wmul@multiplicand:
  2726                           	opt stack 0
  2727  000019                     ___aldiv@quotient:
  2728                           	opt stack 0
  2729                           
  2730                           ; 4 bytes @ 0x18
  2731  000019                     	ds	1
  2732  00001A                     EnhancedRead@i:
  2733                           	opt stack 0
  2734  00001A                     ___lwmod@counter:
  2735                           	opt stack 0
  2736                           
  2737                           ; 1 bytes @ 0x19
  2738  00001A                     	ds	1
  2739  00001B                     ??___lltoft:
  2740  00001B                     GetValue@rta:
  2741                           	opt stack 0
  2742  00001B                     ___wmul@product:
  2743                           	opt stack 0
  2744                           
  2745                           ; 2 bytes @ 0x1A
  2746  00001B                     	ds	1
  2747  00001C                     ??_Load:
  2748                           
  2749                           ; 0 bytes @ 0x1B
  2750  00001C                     	ds	1
  2751  00001D                     ?___altoft:
  2752                           	opt stack 0
  2753  00001D                     ?___awtoft:
  2754                           	opt stack 0
  2755  00001D                     ?___lmul:
  2756                           	opt stack 0
  2757  00001D                     ___awtoft@c:
  2758                           	opt stack 0
  2759  00001D                     ___lmul@multiplier:
  2760                           	opt stack 0
  2761  00001D                     ___altoft@c:
  2762                           	opt stack 0
  2763                           
  2764                           ; 4 bytes @ 0x1C
  2765  00001D                     	ds	1
  2766  00001E                     Load@x:
  2767                           	opt stack 0
  2768                           
  2769                           ; 2 bytes @ 0x1D
  2770  00001E                     	ds	1
  2771  00001F                     ___lltoft@exp:
  2772                           	opt stack 0
  2773                           
  2774                           ; 1 bytes @ 0x1E
  2775  00001F                     	ds	1
  2776  000020                     ___awtoft@sign:
  2777                           	opt stack 0
  2778                           
  2779                           ; 1 bytes @ 0x1F
  2780  000020                     	ds	1
  2781  000021                     ??___altoft:
  2782  000021                     ?___ftdiv:
  2783                           	opt stack 0
  2784  000021                     ___ftdiv@f1:
  2785                           	opt stack 0
  2786  000021                     ___lmul@multiplicand:
  2787                           	opt stack 0
  2788                           
  2789                           ; 4 bytes @ 0x20
  2790  000021                     	ds	3
  2791  000024                     ___ftdiv@f2:
  2792                           	opt stack 0
  2793                           
  2794                           ; 3 bytes @ 0x23
  2795  000024                     	ds	1
  2796  000025                     ___altoft@exp:
  2797                           	opt stack 0
  2798  000025                     ___lmul@product:
  2799                           	opt stack 0
  2800                           
  2801                           ; 4 bytes @ 0x24
  2802  000025                     	ds	1
  2803  000026                     ___altoft@sign:
  2804                           	opt stack 0
  2805                           
  2806                           ; 1 bytes @ 0x25
  2807  000026                     	ds	1
  2808  000027                     ??___ftdiv:
  2809                           
  2810                           ; 0 bytes @ 0x26
  2811  000027                     	ds	2
  2812  000029                     ??_Line:
  2813                           
  2814                           ; 0 bytes @ 0x28
  2815  000029                     	ds	1
  2816  00002A                     ___ftdiv@cntr:
  2817                           	opt stack 0
  2818                           
  2819                           ; 1 bytes @ 0x29
  2820  00002A                     	ds	1
  2821  00002B                     ___ftdiv@f3:
  2822                           	opt stack 0
  2823                           
  2824                           ; 3 bytes @ 0x2A
  2825  00002B                     	ds	3
  2826  00002E                     ___ftdiv@exp:
  2827                           	opt stack 0
  2828                           
  2829                           ; 1 bytes @ 0x2D
  2830  00002E                     	ds	1
  2831  00002F                     ___ftdiv@sign:
  2832                           	opt stack 0
  2833                           
  2834                           ; 1 bytes @ 0x2E
  2835  00002F                     	ds	1
  2836  000030                     ?___ftmul:
  2837                           	opt stack 0
  2838  000030                     ___ftmul@f1:
  2839                           	opt stack 0
  2840                           
  2841                           ; 3 bytes @ 0x2F
  2842  000030                     	ds	3
  2843  000033                     ___ftmul@f2:
  2844                           	opt stack 0
  2845                           
  2846                           ; 3 bytes @ 0x32
  2847  000033                     	ds	3
  2848  000036                     ??___ftmul:
  2849                           
  2850                           ; 0 bytes @ 0x35
  2851  000036                     	ds	3
  2852  000039                     ___ftmul@exp:
  2853                           	opt stack 0
  2854                           
  2855                           ; 1 bytes @ 0x38
  2856  000039                     	ds	1
  2857  00003A                     ___ftmul@f3_as_product:
  2858                           	opt stack 0
  2859                           
  2860                           ; 3 bytes @ 0x39
  2861  00003A                     	ds	3
  2862  00003D                     ___ftmul@cntr:
  2863                           	opt stack 0
  2864                           
  2865                           ; 1 bytes @ 0x3C
  2866  00003D                     	ds	1
  2867  00003E                     ___ftmul@sign:
  2868                           	opt stack 0
  2869                           
  2870                           ; 1 bytes @ 0x3D
  2871  00003E                     	ds	1
  2872  00003F                     ?___ftneg:
  2873                           	opt stack 0
  2874  00003F                     ___ftneg@f1:
  2875                           	opt stack 0
  2876                           
  2877                           ; 3 bytes @ 0x3E
  2878  00003F                     	ds	3
  2879  000042                     ??_Interval:
  2880  000042                     ??_eval_poly:
  2881  000042                     ??_UpdateDir:
  2882  000042                     ??_AdvanceLow:
  2883  000042                     
  2884                           ; 0 bytes @ 0x41
  2885  000042                     	ds	2
  2886  000044                     tblptru	equ	0xFF8
  2887                           tblptrh	equ	0xFF7
  2888                           tblptrl	equ	0xFF6
  2889                           tablat	equ	0xFF5
  2890                           postinc0	equ	0xFEE
  2891                           wreg	equ	0xFE8
  2892                           postdec1	equ	0xFE5
  2893                           fsr1h	equ	0xFE2
  2894                           fsr1l	equ	0xFE1
  2895                           
  2896                           ; 0 bytes @ 0x43
  2897 ;;
  2898 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  2899 ;;
  2900 ;; *************** function _main *****************
  2901 ;; Defined at:
  2902 ;;		line 357 in file "../main.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;  argc            2   71[BANK0 ] int 
  2905 ;;  argv            3   73[BANK0 ] PTR PTR unsigned char 
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;  v               2    6[BANK3 ] int 
  2908 ;;  s               2   10[BANK3 ] int 
  2909 ;;  ms              2    8[BANK3 ] int 
  2910 ;;  old             1   41[BANK3 ] unsigned char 
  2911 ;;  old             1   40[BANK3 ] unsigned char 
  2912 ;;  kd              3    3[BANK3 ] unsigned char 
  2913 ;;  kp              3    0[BANK3 ] unsigned char 
  2914 ;;  speed           2   68[BANK3 ] int 
  2915 ;;  mod             2   62[BANK3 ] int 
  2916 ;;  old             1   49[BANK3 ] unsigned char 
  2917 ;;  old             1   48[BANK3 ] unsigned char 
  2918 ;;  i               2   73[BANK3 ] int 
  2919 ;;  j               2   60[BANK3 ] int 
  2920 ;;  i               2   58[BANK3 ] int 
  2921 ;;  j               2   54[BANK3 ] int 
  2922 ;;  old             1   70[BANK3 ] unsigned char 
  2923 ;;  j               2   71[BANK3 ] int 
  2924 ;;  i               2   56[BANK3 ] int 
  2925 ;; Return value:  Size  Location     Type
  2926 ;;                  2   71[BANK0 ] int 
  2927 ;; Registers used:
  2928 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2929 ;; Tracked objects:
  2930 ;;		On entry : 0/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2934 ;;      Params:         0       5       0       0       0       0       0       0       0
  2935 ;;      Locals:         0       0       0       0      75       0       0       0       0
  2936 ;;      Temps:          0       5       0       0       0       0       0       0       0
  2937 ;;      Totals:         0      10       0       0      75       0       0       0       0
  2938 ;;Total ram usage:       85 bytes
  2939 ;; Hardware stack levels required when called:    7
  2940 ;; This function calls:
  2941 ;;		_AdvanceLow
  2942 ;;		_CheckMem
  2943 ;;		_Compute
  2944 ;;		_EnhancedRead
  2945 ;;		_EreaseAll
  2946 ;;		_Line
  2947 ;;		_Load
  2948 ;;		_MotorsSpeed
  2949 ;;		_PlotCompute
  2950 ;;		_Save
  2951 ;;		_ShowMem
  2952 ;;		_UpdateDir
  2953 ;;		_Wixel
  2954 ;;		___aldiv
  2955 ;;		___almod
  2956 ;;		___altoft
  2957 ;;		___awdiv
  2958 ;;		___awtoft
  2959 ;;		___ftadd
  2960 ;;		___ftge
  2961 ;;		___ftmul
  2962 ;;		___ftneg
  2963 ;;		___fttol
  2964 ;;		___lmul
  2965 ;;		___wmul
  2966 ;;		_initLED
  2967 ;;		_initYBOT
  2968 ;;		_printf
  2969 ;; This function is called by:
  2970 ;;		Startup code after reset
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           	psect	text0
  2975  00001C                     __ptext0:
  2976                           	opt stack 0
  2977  00001C                     _main:
  2978                           	opt stack 24
  2979                           
  2980                           ;main.c: 358: initYBOT();
  2981                           
  2982                           ;incstack = 0
  2983  00001C  ECE8  F026         	call	_initYBOT	;wreg free
  2984                           
  2985                           ;main.c: 359: ma = 0;
  2986  000020  0E00               	movlw	0
  2987  000022  0100               	movlb	0	; () banked
  2988  000024  6FBC               	movwf	(_ma+1)& (0+255),b
  2989  000026  0E00               	movlw	0
  2990  000028  6FBB               	movwf	_ma& (0+255),b
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;main.c: 360: mb = 0;
  2994  00002A  0E00               	movlw	0
  2995  00002C  0100               	movlb	0	; () banked
  2996  00002E  6FBE               	movwf	(_mb+1)& (0+255),b
  2997  000030  0E00               	movlw	0
  2998  000032  6FBD               	movwf	_mb& (0+255),b
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;main.c: 362: TIME = 0;
  3002  000034  0E00               	movlw	0
  3003  000036  0100               	movlb	0	; () banked
  3004  000038  6FB1               	movwf	_TIME& (0+255),b
  3005  00003A  0E00               	movlw	0
  3006  00003C  6FB2               	movwf	(_TIME+1)& (0+255),b
  3007  00003E  0E00               	movlw	0
  3008  000040  6FB3               	movwf	(_TIME+2)& (0+255),b
  3009  000042  0E00               	movlw	0
  3010  000044  6FB4               	movwf	(_TIME+3)& (0+255),b
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;main.c: 363: Wixel();
  3014  000046  EC24  F027         	call	_Wixel	;wreg free
  3015                           
  3016                           ;main.c: 365: MotorsSpeed(0,0);
  3017  00004A  0E00               	movlw	0
  3018  00004C  0100               	movlb	0	; () banked
  3019  00004E  6F7C               	movwf	(MotorsSpeed@A+1)& (0+255),b
  3020  000050  0E00               	movlw	0
  3021  000052  6F7B               	movwf	MotorsSpeed@A& (0+255),b
  3022  000054  0E00               	movlw	0
  3023  000056  0100               	movlb	0	; () banked
  3024  000058  6F7E               	movwf	(MotorsSpeed@B+1)& (0+255),b
  3025  00005A  0E00               	movlw	0
  3026  00005C  6F7D               	movwf	MotorsSpeed@B& (0+255),b
  3027  00005E  EC53  F026         	call	_MotorsSpeed	;wreg free
  3028                           
  3029                           ;main.c: 366: PORTDbits.RD3 = 1;
  3030  000062  8683               	bsf	3971,3,c	;volatile
  3031                           
  3032                           ;main.c: 368: status = ST;
  3033  000064  0E00               	movlw	0
  3034  000066  0101               	movlb	1	; () banked
  3035  000068  6F99               	movwf	(_status+1)& (0+255),b
  3036  00006A  0E07               	movlw	7
  3037  00006C  6F98               	movwf	_status& (0+255),b
  3038                           
  3039                           ;main.c: 369: while (TIME < 1000)
  3040  00006E  D003               	goto	l6702
  3041  000070                     l6700:
  3042                           
  3043                           ;main.c: 370: Compute();
  3044  000070  EC75  F018         	call	_Compute	;wreg free
  3045  000074  D000               	goto	l6702
  3046  000076                     l6702:
  3047  000076  0100               	movlb	0	; () banked
  3048  000078  BFB4               	btfsc	(_TIME+3)& (0+255),7,b
  3049  00007A  D7FA               	goto	l6700
  3050  00007C  0100               	movlb	0	; () banked
  3051  00007E  51B4               	movf	(_TIME+3)& (0+255),w,b
  3052  000080  0100               	movlb	0	; () banked
  3053  000082  11B3               	iorwf	(_TIME+2)& (0+255),w,b
  3054  000084  E10A               	bnz	l6704
  3055  000086  0EE8               	movlw	232
  3056  000088  0100               	movlb	0	; () banked
  3057  00008A  5DB1               	subwf	_TIME& (0+255),w,b
  3058  00008C  0E03               	movlw	3
  3059  00008E  0100               	movlb	0	; () banked
  3060  000090  59B2               	subwfb	(_TIME+1)& (0+255),w,b
  3061  000092  B0D8               	btfsc	status,0,c
  3062  000094  D002               	goto	l6704
  3063  000096  D7EC               	goto	l6700
  3064  000098  D000               	goto	l6704
  3065  00009A                     l6704:
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;main.c: 371: PlotCompute();
  3069  00009A  ECCA  F023         	call	_PlotCompute	;wreg free
  3070                           
  3071                           ;main.c: 375: fns = 1;
  3072  00009E  0E00               	movlw	0
  3073  0000A0  0100               	movlb	0	; () banked
  3074  0000A2  6FBA               	movwf	(_fns+1)& (0+255),b
  3075  0000A4  0E01               	movlw	1
  3076  0000A6  6FB9               	movwf	_fns& (0+255),b
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;main.c: 381: switch (status){
  3080                           
  3081                           ;main.c: 376: while (1){
  3082  0000A8  EFCF  F010         	goto	l7296
  3083  0000AC                     l6708:
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;main.c: 383: PORTAbits.RA4 = TIME % 1000 > 500;
  3087  0000AC  C0B1  F00F         	movff	_TIME,___almod@dividend
  3088  0000B0  C0B2  F010         	movff	_TIME+1,___almod@dividend+1
  3089  0000B4  C0B3  F011         	movff	_TIME+2,___almod@dividend+2
  3090  0000B8  C0B4  F012         	movff	_TIME+3,___almod@dividend+3
  3091  0000BC  0EE8               	movlw	232
  3092  0000BE  6E13               	movwf	___almod@divisor,c
  3093  0000C0  0E03               	movlw	3
  3094  0000C2  6E14               	movwf	___almod@divisor+1,c
  3095  0000C4  0E00               	movlw	0
  3096  0000C6  6E15               	movwf	___almod@divisor+2,c
  3097  0000C8  0E00               	movlw	0
  3098  0000CA  6E16               	movwf	___almod@divisor+3,c
  3099  0000CC  EC69  F021         	call	___almod	;wreg free
  3100  0000D0  BE12               	btfsc	?___almod+3,7,c
  3101  0000D2  D00D               	goto	u8140
  3102  0000D4  5012               	movf	?___almod+3,w,c
  3103  0000D6  1011               	iorwf	?___almod+2,w,c
  3104  0000D8  E106               	bnz	u8141
  3105  0000DA  0EF5               	movlw	245
  3106  0000DC  5C0F               	subwf	?___almod,w,c
  3107  0000DE  0E01               	movlw	1
  3108  0000E0  5810               	subwfb	?___almod+1,w,c
  3109  0000E2  A0D8               	btfss	status,0,c
  3110  0000E4  D004               	goto	u8140
  3111  0000E6                     u8141:
  3112  0000E6  0100               	movlb	0	; () banked
  3113  0000E8  6BAC               	clrf	??_main& (0+255),b
  3114  0000EA  2BAC               	incf	??_main& (0+255),f,b
  3115  0000EC  D002               	goto	u8158
  3116  0000EE                     u8140:
  3117  0000EE  0100               	movlb	0	; () banked
  3118  0000F0  6BAC               	clrf	??_main& (0+255),b
  3119  0000F2                     u8158:
  3120  0000F2  0100               	movlb	0	; () banked
  3121  0000F4  3BAC               	swapf	??_main& (0+255),f,b
  3122  0000F6  5080               	movf	3968,w,c	;volatile
  3123  0000F8  0100               	movlb	0	; () banked
  3124  0000FA  19AC               	xorwf	??_main& (0+255),w,b
  3125  0000FC  0BEF               	andlw	-17
  3126  0000FE  19AC               	xorwf	??_main& (0+255),w,b
  3127  000100  6E80               	movwf	3968,c	;volatile
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;main.c: 384: if (ma == 0){
  3131  000102  0100               	movlb	0	; () banked
  3132  000104  51BB               	movf	_ma& (0+255),w,b
  3133  000106  0100               	movlb	0	; () banked
  3134  000108  11BC               	iorwf	(_ma+1)& (0+255),w,b
  3135  00010A  A4D8               	btfss	status,2,c
  3136  00010C  D002               	goto	l6714
  3137                           
  3138                           ; BSR set to: 0
  3139                           ;main.c: 385: PORTBbits.RB5 = 0;
  3140  00010E  9A81               	bcf	3969,5,c	;volatile
  3141                           
  3142                           ;main.c: 386: }else if(ma == 1){
  3143  000110  D03C               	goto	l6722
  3144  000112                     l6714:
  3145                           
  3146                           ; BSR set to: 0
  3147  000112  0100               	movlb	0	; () banked
  3148  000114  05BB               	decf	_ma& (0+255),w,b
  3149  000116  0100               	movlb	0	; () banked
  3150  000118  11BC               	iorwf	(_ma+1)& (0+255),w,b
  3151  00011A  A4D8               	btfss	status,2,c
  3152  00011C  D002               	goto	l6718
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;main.c: 387: PORTBbits.RB5 = 1;
  3156  00011E  8A81               	bsf	3969,5,c	;volatile
  3157                           
  3158                           ;main.c: 388: }else if(ma == -1){
  3159  000120  D034               	goto	l6722
  3160  000122                     l6718:
  3161                           
  3162                           ; BSR set to: 0
  3163  000122  0100               	movlb	0	; () banked
  3164  000124  29BB               	incf	_ma& (0+255),w,b
  3165  000126  E131               	bnz	l6722
  3166  000128  0100               	movlb	0	; () banked
  3167  00012A  29BC               	incf	(_ma+1)& (0+255),w,b
  3168  00012C  A4D8               	btfss	status,2,c
  3169  00012E  D02D               	goto	l6722
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;main.c: 389: PORTBbits.RB5 = TIME % 1000 > 500;
  3173  000130  C0B1  F00F         	movff	_TIME,___almod@dividend
  3174  000134  C0B2  F010         	movff	_TIME+1,___almod@dividend+1
  3175  000138  C0B3  F011         	movff	_TIME+2,___almod@dividend+2
  3176  00013C  C0B4  F012         	movff	_TIME+3,___almod@dividend+3
  3177  000140  0EE8               	movlw	232
  3178  000142  6E13               	movwf	___almod@divisor,c
  3179  000144  0E03               	movlw	3
  3180  000146  6E14               	movwf	___almod@divisor+1,c
  3181  000148  0E00               	movlw	0
  3182  00014A  6E15               	movwf	___almod@divisor+2,c
  3183  00014C  0E00               	movlw	0
  3184  00014E  6E16               	movwf	___almod@divisor+3,c
  3185  000150  EC69  F021         	call	___almod	;wreg free
  3186  000154  BE12               	btfsc	?___almod+3,7,c
  3187  000156  D00D               	goto	u8190
  3188  000158  5012               	movf	?___almod+3,w,c
  3189  00015A  1011               	iorwf	?___almod+2,w,c
  3190  00015C  E106               	bnz	u8191
  3191  00015E  0EF5               	movlw	245
  3192  000160  5C0F               	subwf	?___almod,w,c
  3193  000162  0E01               	movlw	1
  3194  000164  5810               	subwfb	?___almod+1,w,c
  3195  000166  A0D8               	btfss	status,0,c
  3196  000168  D004               	goto	u8190
  3197  00016A                     u8191:
  3198  00016A  0100               	movlb	0	; () banked
  3199  00016C  6BAC               	clrf	??_main& (0+255),b
  3200  00016E  2BAC               	incf	??_main& (0+255),f,b
  3201  000170  D002               	goto	u8208
  3202  000172                     u8190:
  3203  000172  0100               	movlb	0	; () banked
  3204  000174  6BAC               	clrf	??_main& (0+255),b
  3205  000176                     u8208:
  3206  000176  0100               	movlb	0	; () banked
  3207  000178  3BAC               	swapf	??_main& (0+255),f,b
  3208  00017A  47AC               	rlncf	??_main& (0+255),f,b
  3209  00017C  5081               	movf	3969,w,c	;volatile
  3210  00017E  0100               	movlb	0	; () banked
  3211  000180  19AC               	xorwf	??_main& (0+255),w,b
  3212  000182  0BDF               	andlw	-33
  3213  000184  19AC               	xorwf	??_main& (0+255),w,b
  3214  000186  6E81               	movwf	3969,c	;volatile
  3215                           
  3216                           ; BSR set to: 0
  3217                           
  3218                           ; BSR set to: 0
  3219  000188  D000               	goto	l6722
  3220  00018A                     l6722:
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;main.c: 390: }
  3224                           ;main.c: 391: if (mb == 0){
  3225  00018A  0100               	movlb	0	; () banked
  3226  00018C  51BD               	movf	_mb& (0+255),w,b
  3227  00018E  0100               	movlb	0	; () banked
  3228  000190  11BE               	iorwf	(_mb+1)& (0+255),w,b
  3229  000192  A4D8               	btfss	status,2,c
  3230  000194  D002               	goto	l6726
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;main.c: 392: PORTBbits.RB0 = 0;
  3234  000196  9081               	bcf	3969,0,c	;volatile
  3235                           
  3236                           ;main.c: 393: }else if(mb == 1){
  3237  000198  D039               	goto	l6734
  3238  00019A                     l6726:
  3239                           
  3240                           ; BSR set to: 0
  3241  00019A  0100               	movlb	0	; () banked
  3242  00019C  05BD               	decf	_mb& (0+255),w,b
  3243  00019E  0100               	movlb	0	; () banked
  3244  0001A0  11BE               	iorwf	(_mb+1)& (0+255),w,b
  3245  0001A2  A4D8               	btfss	status,2,c
  3246  0001A4  D002               	goto	l6730
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;main.c: 394: PORTBbits.RB0 = 1;
  3250  0001A6  8081               	bsf	3969,0,c	;volatile
  3251                           
  3252                           ;main.c: 395: }else if(mb == -1){
  3253  0001A8  D031               	goto	l6734
  3254  0001AA                     l6730:
  3255                           
  3256                           ; BSR set to: 0
  3257  0001AA  0100               	movlb	0	; () banked
  3258  0001AC  29BD               	incf	_mb& (0+255),w,b
  3259  0001AE  E12E               	bnz	l6734
  3260  0001B0  0100               	movlb	0	; () banked
  3261  0001B2  29BE               	incf	(_mb+1)& (0+255),w,b
  3262  0001B4  A4D8               	btfss	status,2,c
  3263  0001B6  D02A               	goto	l6734
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;main.c: 396: PORTBbits.RB0 = TIME % 1000 > 500;
  3267  0001B8  C0B1  F00F         	movff	_TIME,___almod@dividend
  3268  0001BC  C0B2  F010         	movff	_TIME+1,___almod@dividend+1
  3269  0001C0  C0B3  F011         	movff	_TIME+2,___almod@dividend+2
  3270  0001C4  C0B4  F012         	movff	_TIME+3,___almod@dividend+3
  3271  0001C8  0EE8               	movlw	232
  3272  0001CA  6E13               	movwf	___almod@divisor,c
  3273  0001CC  0E03               	movlw	3
  3274  0001CE  6E14               	movwf	___almod@divisor+1,c
  3275  0001D0  0E00               	movlw	0
  3276  0001D2  6E15               	movwf	___almod@divisor+2,c
  3277  0001D4  0E00               	movlw	0
  3278  0001D6  6E16               	movwf	___almod@divisor+3,c
  3279  0001D8  EC69  F021         	call	___almod	;wreg free
  3280  0001DC  BE12               	btfsc	?___almod+3,7,c
  3281  0001DE  D00D               	goto	u8240
  3282  0001E0  5012               	movf	?___almod+3,w,c
  3283  0001E2  1011               	iorwf	?___almod+2,w,c
  3284  0001E4  E106               	bnz	u8241
  3285  0001E6  0EF5               	movlw	245
  3286  0001E8  5C0F               	subwf	?___almod,w,c
  3287  0001EA  0E01               	movlw	1
  3288  0001EC  5810               	subwfb	?___almod+1,w,c
  3289  0001EE  A0D8               	btfss	status,0,c
  3290  0001F0  D004               	goto	u8240
  3291  0001F2                     u8241:
  3292  0001F2  0100               	movlb	0	; () banked
  3293  0001F4  6BAC               	clrf	??_main& (0+255),b
  3294  0001F6  2BAC               	incf	??_main& (0+255),f,b
  3295  0001F8  D002               	goto	u8258
  3296  0001FA                     u8240:
  3297  0001FA  0100               	movlb	0	; () banked
  3298  0001FC  6BAC               	clrf	??_main& (0+255),b
  3299  0001FE                     u8258:
  3300  0001FE  5081               	movf	3969,w,c	;volatile
  3301  000200  0100               	movlb	0	; () banked
  3302  000202  19AC               	xorwf	??_main& (0+255),w,b
  3303  000204  0BFE               	andlw	-2
  3304  000206  19AC               	xorwf	??_main& (0+255),w,b
  3305  000208  6E81               	movwf	3969,c	;volatile
  3306                           
  3307                           ; BSR set to: 0
  3308                           
  3309                           ; BSR set to: 0
  3310  00020A  D000               	goto	l6734
  3311  00020C                     l6734:
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;main.c: 397: }
  3315                           ;main.c: 399: if (fns){
  3316  00020C  0100               	movlb	0	; () banked
  3317  00020E  51B9               	movf	_fns& (0+255),w,b
  3318  000210  0100               	movlb	0	; () banked
  3319  000212  11BA               	iorwf	(_fns+1)& (0+255),w,b
  3320  000214  B4D8               	btfsc	status,2,c
  3321  000216  D00E               	goto	l6740
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;main.c: 400: fns = 0;
  3325  000218  0E00               	movlw	0
  3326  00021A  0100               	movlb	0	; () banked
  3327  00021C  6FBA               	movwf	(_fns+1)& (0+255),b
  3328  00021E  0E00               	movlw	0
  3329  000220  6FB9               	movwf	_fns& (0+255),b
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;main.c: 401: printf("{'COM':'line','value':'Motor test'}\n");
  3333  000222  0E6E               	movlw	low STR_3
  3334  000224  0100               	movlb	0	; () banked
  3335  000226  6F85               	movwf	printf@f& (0+255),b
  3336  000228  0E7F               	movlw	high STR_3
  3337  00022A  0100               	movlb	0	; () banked
  3338  00022C  6F86               	movwf	(printf@f+1)& (0+255),b
  3339  00022E  EC8A  F014         	call	_printf	;wreg free
  3340  000232  D000               	goto	l6740
  3341  000234                     l6740:
  3342                           
  3343                           ;main.c: 402: }
  3344                           ;main.c: 404: if (PORTDbits.RD6 == 0 && fa == 0){
  3345  000234  BC83               	btfsc	3971,6,c	;volatile
  3346  000236  D020               	goto	l463
  3347  000238  0101               	movlb	1	; () banked
  3348  00023A  5188               	movf	_fa& (0+255),w,b
  3349  00023C  0101               	movlb	1	; () banked
  3350  00023E  1189               	iorwf	(_fa+1)& (0+255),w,b
  3351  000240  A4D8               	btfss	status,2,c
  3352  000242  D01A               	goto	l463
  3353                           
  3354                           ; BSR set to: 1
  3355                           ;main.c: 405: fa = 1;
  3356  000244  0E00               	movlw	0
  3357  000246  0101               	movlb	1	; () banked
  3358  000248  6F89               	movwf	(_fa+1)& (0+255),b
  3359  00024A  0E01               	movlw	1
  3360  00024C  6F88               	movwf	_fa& (0+255),b
  3361                           
  3362                           ; BSR set to: 1
  3363                           ;main.c: 406: ma = ma == 1 ? -1 : (ma + 1);
  3364  00024E  0100               	movlb	0	; () banked
  3365  000250  05BB               	decf	_ma& (0+255),w,b
  3366  000252  0100               	movlb	0	; () banked
  3367  000254  11BC               	iorwf	(_ma+1)& (0+255),w,b
  3368  000256  B4D8               	btfsc	status,2,c
  3369  000258  D00B               	goto	l465
  3370                           
  3371                           ; BSR set to: 0
  3372  00025A  0E01               	movlw	1
  3373  00025C  0100               	movlb	0	; () banked
  3374  00025E  25BB               	addwf	_ma& (0+255),w,b
  3375  000260  0100               	movlb	0	; () banked
  3376  000262  6FBB               	movwf	_ma& (0+255),b
  3377  000264  0E00               	movlw	0
  3378  000266  0100               	movlb	0	; () banked
  3379  000268  21BC               	addwfc	(_ma+1)& (0+255),w,b
  3380  00026A  0100               	movlb	0	; () banked
  3381  00026C  6FBC               	movwf	(_ma+1)& (0+255),b
  3382  00026E  D004               	goto	l463
  3383  000270                     l465:
  3384                           
  3385                           ; BSR set to: 0
  3386  000270  0100               	movlb	0	; () banked
  3387  000272  69BB               	setf	_ma& (0+255),b
  3388  000274  69BC               	setf	(_ma+1)& (0+255),b
  3389  000276  D000               	goto	l463
  3390  000278                     l463:
  3391                           
  3392                           ;main.c: 407: }
  3393                           ;main.c: 408: if (PORTDbits.RD4 == 0 && fb == 0){
  3394  000278  B883               	btfsc	3971,4,c	;volatile
  3395  00027A  D020               	goto	l468
  3396  00027C  0101               	movlb	1	; () banked
  3397  00027E  518A               	movf	_fb& (0+255),w,b
  3398  000280  0101               	movlb	1	; () banked
  3399  000282  118B               	iorwf	(_fb+1)& (0+255),w,b
  3400  000284  A4D8               	btfss	status,2,c
  3401  000286  D01A               	goto	l468
  3402                           
  3403                           ; BSR set to: 1
  3404                           ;main.c: 409: fb = 1;
  3405  000288  0E00               	movlw	0
  3406  00028A  0101               	movlb	1	; () banked
  3407  00028C  6F8B               	movwf	(_fb+1)& (0+255),b
  3408  00028E  0E01               	movlw	1
  3409  000290  6F8A               	movwf	_fb& (0+255),b
  3410                           
  3411                           ; BSR set to: 1
  3412                           ;main.c: 410: mb = mb == 1 ? -1 : (mb + 1);
  3413  000292  0100               	movlb	0	; () banked
  3414  000294  05BD               	decf	_mb& (0+255),w,b
  3415  000296  0100               	movlb	0	; () banked
  3416  000298  11BE               	iorwf	(_mb+1)& (0+255),w,b
  3417  00029A  B4D8               	btfsc	status,2,c
  3418  00029C  D00B               	goto	l470
  3419                           
  3420                           ; BSR set to: 0
  3421  00029E  0E01               	movlw	1
  3422  0002A0  0100               	movlb	0	; () banked
  3423  0002A2  25BD               	addwf	_mb& (0+255),w,b
  3424  0002A4  0100               	movlb	0	; () banked
  3425  0002A6  6FBD               	movwf	_mb& (0+255),b
  3426  0002A8  0E00               	movlw	0
  3427  0002AA  0100               	movlb	0	; () banked
  3428  0002AC  21BE               	addwfc	(_mb+1)& (0+255),w,b
  3429  0002AE  0100               	movlb	0	; () banked
  3430  0002B0  6FBE               	movwf	(_mb+1)& (0+255),b
  3431  0002B2  D004               	goto	l468
  3432  0002B4                     l470:
  3433                           
  3434                           ; BSR set to: 0
  3435  0002B4  0100               	movlb	0	; () banked
  3436  0002B6  69BD               	setf	_mb& (0+255),b
  3437  0002B8  69BE               	setf	(_mb+1)& (0+255),b
  3438  0002BA  D000               	goto	l468
  3439  0002BC                     l468:
  3440                           
  3441                           ;main.c: 411: }
  3442                           ;main.c: 412: if (PORTDbits.RD6 == 1) fa = 0;
  3443  0002BC  AC83               	btfss	3971,6,c	;volatile
  3444  0002BE  D006               	goto	l6760
  3445  0002C0  0E00               	movlw	0
  3446  0002C2  0101               	movlb	1	; () banked
  3447  0002C4  6F89               	movwf	(_fa+1)& (0+255),b
  3448  0002C6  0E00               	movlw	0
  3449  0002C8  6F88               	movwf	_fa& (0+255),b
  3450  0002CA  D000               	goto	l6760
  3451  0002CC                     l6760:
  3452                           
  3453                           ;main.c: 413: if (PORTDbits.RD4 == 1) fb = 0;
  3454  0002CC  A883               	btfss	3971,4,c	;volatile
  3455  0002CE  D006               	goto	l6764
  3456  0002D0  0E00               	movlw	0
  3457  0002D2  0101               	movlb	1	; () banked
  3458  0002D4  6F8B               	movwf	(_fb+1)& (0+255),b
  3459  0002D6  0E00               	movlw	0
  3460  0002D8  6F8A               	movwf	_fb& (0+255),b
  3461  0002DA  D000               	goto	l6764
  3462  0002DC                     l6764:
  3463                           
  3464                           ;main.c: 415: MotorsSpeed( ma * 1000.0 , mb * 1000.0);
  3465  0002DC  0E00               	movlw	0
  3466  0002DE  6E33               	movwf	___ftmul@f2,c
  3467  0002E0  0E7A               	movlw	122
  3468  0002E2  6E34               	movwf	___ftmul@f2+1,c
  3469  0002E4  0E44               	movlw	68
  3470  0002E6  6E35               	movwf	___ftmul@f2+2,c
  3471  0002E8  C0BB  F01D         	movff	_ma,___awtoft@c
  3472  0002EC  C0BC  F01E         	movff	_ma+1,___awtoft@c+1
  3473  0002F0  ECB5  F026         	call	___awtoft	;wreg free
  3474  0002F4  C01D  F030         	movff	?___awtoft,___ftmul@f1
  3475  0002F8  C01E  F031         	movff	?___awtoft+1,___ftmul@f1+1
  3476  0002FC  C01F  F032         	movff	?___awtoft+2,___ftmul@f1+2
  3477  000300  EC70  F01E         	call	___ftmul	;wreg free
  3478  000304  C030  F06C         	movff	?___ftmul,___fttol@f1
  3479  000308  C031  F06D         	movff	?___ftmul+1,___fttol@f1+1
  3480  00030C  C032  F06E         	movff	?___ftmul+2,___fttol@f1+2
  3481  000310  EC1C  F01B         	call	___fttol	;wreg free
  3482  000314  C06C  F07B         	movff	?___fttol,MotorsSpeed@A
  3483  000318  C06D  F07C         	movff	?___fttol+1,MotorsSpeed@A+1
  3484  00031C  0E00               	movlw	0
  3485  00031E  6E33               	movwf	___ftmul@f2,c
  3486  000320  0E7A               	movlw	122
  3487  000322  6E34               	movwf	___ftmul@f2+1,c
  3488  000324  0E44               	movlw	68
  3489  000326  6E35               	movwf	___ftmul@f2+2,c
  3490  000328  C0BD  F01D         	movff	_mb,___awtoft@c
  3491  00032C  C0BE  F01E         	movff	_mb+1,___awtoft@c+1
  3492  000330  ECB5  F026         	call	___awtoft	;wreg free
  3493  000334  C01D  F030         	movff	?___awtoft,___ftmul@f1
  3494  000338  C01E  F031         	movff	?___awtoft+1,___ftmul@f1+1
  3495  00033C  C01F  F032         	movff	?___awtoft+2,___ftmul@f1+2
  3496  000340  EC70  F01E         	call	___ftmul	;wreg free
  3497  000344  C030  F06C         	movff	?___ftmul,___fttol@f1
  3498  000348  C031  F06D         	movff	?___ftmul+1,___fttol@f1+1
  3499  00034C  C032  F06E         	movff	?___ftmul+2,___fttol@f1+2
  3500  000350  EC1C  F01B         	call	___fttol	;wreg free
  3501  000354  C06C  F07D         	movff	?___fttol,MotorsSpeed@B
  3502  000358  C06D  F07E         	movff	?___fttol+1,MotorsSpeed@B+1
  3503  00035C  EC53  F026         	call	_MotorsSpeed	;wreg free
  3504                           
  3505                           ;main.c: 416: break;
  3506  000360  EFCF  F010         	goto	l7296
  3507  000364                     l6766:
  3508                           
  3509                           ;main.c: 418: EnhancedRead();
  3510  000364  EC39  F024         	call	_EnhancedRead	;wreg free
  3511                           
  3512                           ;main.c: 419: if (fns){
  3513  000368  0100               	movlb	0	; () banked
  3514  00036A  51B9               	movf	_fns& (0+255),w,b
  3515  00036C  0100               	movlb	0	; () banked
  3516  00036E  11BA               	iorwf	(_fns+1)& (0+255),w,b
  3517  000370  B4D8               	btfsc	status,2,c
  3518  000372  D064               	goto	l6802
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;main.c: 420: fns = 0;
  3522  000374  0E00               	movlw	0
  3523  000376  0100               	movlb	0	; () banked
  3524  000378  6FBA               	movwf	(_fns+1)& (0+255),b
  3525  00037A  0E00               	movlw	0
  3526  00037C  6FB9               	movwf	_fns& (0+255),b
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;main.c: 421: printf("{'COM':'line','value':'Rayito 2.0'}\n");
  3530  00037E  0E49               	movlw	low STR_4
  3531  000380  0100               	movlb	0	; () banked
  3532  000382  6F85               	movwf	printf@f& (0+255),b
  3533  000384  0E7F               	movlw	high STR_4
  3534  000386  0100               	movlb	0	; () banked
  3535  000388  6F86               	movwf	(printf@f+1)& (0+255),b
  3536  00038A  EC8A  F014         	call	_printf	;wreg free
  3537                           
  3538                           ;main.c: 422: printf("{'COM':'line','value':'Loading eeprom'}\n");
  3539  00038E  0E36               	movlw	low STR_5
  3540  000390  0100               	movlb	0	; () banked
  3541  000392  6F85               	movwf	printf@f& (0+255),b
  3542  000394  0E7E               	movlw	high STR_5
  3543  000396  0100               	movlb	0	; () banked
  3544  000398  6F86               	movwf	(printf@f+1)& (0+255),b
  3545  00039A  EC8A  F014         	call	_printf	;wreg free
  3546                           
  3547                           ;main.c: 423: MF = 1; uc old; CheckMem(&old);
  3548  00039E  0E01               	movlw	1
  3549  0003A0  6E50               	movwf	_MF,c
  3550  0003A2  0E46               	movlw	low main@old
  3551  0003A4  6E12               	movwf	CheckMem@data,c
  3552  0003A6  0E03               	movlw	high main@old
  3553  0003A8  6E13               	movwf	CheckMem@data+1,c
  3554  0003AA  ECE1  F025         	call	_CheckMem	;wreg free
  3555                           
  3556                           ;main.c: 424: if (old == 0){
  3557  0003AE  0103               	movlb	3	; () banked
  3558  0003B0  5146               	movf	main@old& (0+255),w,b
  3559  0003B2  0103               	movlb	3	; () banked
  3560  0003B4  A4D8               	btfss	status,2,c
  3561  0003B6  D009               	goto	l6782
  3562                           
  3563                           ; BSR set to: 3
  3564                           ;main.c: 425: printf("{'COM':'line','value':'Green memory empty'}\n");
  3565  0003B8  0E34               	movlw	low STR_6
  3566  0003BA  0100               	movlb	0	; () banked
  3567  0003BC  6F85               	movwf	printf@f& (0+255),b
  3568  0003BE  0E7D               	movlw	high STR_6
  3569  0003C0  0100               	movlb	0	; () banked
  3570  0003C2  6F86               	movwf	(printf@f+1)& (0+255),b
  3571  0003C4  EC8A  F014         	call	_printf	;wreg free
  3572                           
  3573                           ;main.c: 426: }else{
  3574  0003C8  D00D               	goto	l6788
  3575  0003CA                     l6782:
  3576                           
  3577                           ;main.c: 427: Load();
  3578  0003CA  EC31  F025         	call	_Load	;wreg free
  3579                           
  3580                           ;main.c: 428: printf("{'COM':'line','value':'Green memory'}\n");
  3581  0003CE  0ED6               	movlw	low STR_7
  3582  0003D0  0100               	movlb	0	; () banked
  3583  0003D2  6F85               	movwf	printf@f& (0+255),b
  3584  0003D4  0E7E               	movlw	high STR_7
  3585  0003D6  0100               	movlb	0	; () banked
  3586  0003D8  6F86               	movwf	(printf@f+1)& (0+255),b
  3587  0003DA  EC8A  F014         	call	_printf	;wreg free
  3588                           
  3589                           ;main.c: 429: ShowMem();
  3590  0003DE  EC8E  F023         	call	_ShowMem	;wreg free
  3591  0003E2  D000               	goto	l6788
  3592  0003E4                     l6788:
  3593                           
  3594                           ;main.c: 430: }
  3595                           ;main.c: 431: MF = 0; uc old; CheckMem(&old);
  3596  0003E4  0E00               	movlw	0
  3597  0003E6  6E50               	movwf	_MF,c
  3598  0003E8  0E46               	movlw	low main@old
  3599  0003EA  6E12               	movwf	CheckMem@data,c
  3600  0003EC  0E03               	movlw	high main@old
  3601  0003EE  6E13               	movwf	CheckMem@data+1,c
  3602  0003F0  ECE1  F025         	call	_CheckMem	;wreg free
  3603                           
  3604                           ;main.c: 432: if (old == 0){
  3605  0003F4  0103               	movlb	3	; () banked
  3606  0003F6  5146               	movf	main@old& (0+255),w,b
  3607  0003F8  0103               	movlb	3	; () banked
  3608  0003FA  A4D8               	btfss	status,2,c
  3609  0003FC  D009               	goto	l6794
  3610                           
  3611                           ; BSR set to: 3
  3612                           ;main.c: 433: printf("{'COM':'line','value':'Red memory empty'}\n");
  3613  0003FE  0EB8               	movlw	low STR_8
  3614  000400  0100               	movlb	0	; () banked
  3615  000402  6F85               	movwf	printf@f& (0+255),b
  3616  000404  0E7D               	movlw	high STR_8
  3617  000406  0100               	movlb	0	; () banked
  3618  000408  6F86               	movwf	(printf@f+1)& (0+255),b
  3619  00040A  EC8A  F014         	call	_printf	;wreg free
  3620                           
  3621                           ;main.c: 434: }else{
  3622  00040E  D00D               	goto	l6800
  3623  000410                     l6794:
  3624                           
  3625                           ;main.c: 435: Load();
  3626  000410  EC31  F025         	call	_Load	;wreg free
  3627                           
  3628                           ;main.c: 436: printf("{'COM':'line','value':'Red memory:'}\n");
  3629  000414  0E23               	movlw	low STR_9
  3630  000416  0100               	movlb	0	; () banked
  3631  000418  6F85               	movwf	printf@f& (0+255),b
  3632  00041A  0E7F               	movlw	high STR_9
  3633  00041C  0100               	movlb	0	; () banked
  3634  00041E  6F86               	movwf	(printf@f+1)& (0+255),b
  3635  000420  EC8A  F014         	call	_printf	;wreg free
  3636                           
  3637                           ;main.c: 437: ShowMem();
  3638  000424  EC8E  F023         	call	_ShowMem	;wreg free
  3639  000428  D000               	goto	l6800
  3640  00042A                     l6800:
  3641                           
  3642                           ;main.c: 438: }
  3643                           ;main.c: 440: printf("{'COM':'line','value':'Writting GREEN Memory'}\n");
  3644  00042A  0E4A               	movlw	low STR_10
  3645  00042C  0100               	movlb	0	; () banked
  3646  00042E  6F85               	movwf	printf@f& (0+255),b
  3647  000430  0E7C               	movlw	high STR_10
  3648  000432  0100               	movlb	0	; () banked
  3649  000434  6F86               	movwf	(printf@f+1)& (0+255),b
  3650  000436  EC8A  F014         	call	_printf	;wreg free
  3651  00043A  D000               	goto	l6802
  3652  00043C                     l6802:
  3653                           
  3654                           ;main.c: 452: }
  3655                           ;main.c: 456: PORTBbits.RB0 = 0;
  3656  00043C  9081               	bcf	3969,0,c	;volatile
  3657                           
  3658                           ;main.c: 457: PORTAbits.RA4 = TIME % 2000 > 1000;
  3659  00043E  C0B1  F00F         	movff	_TIME,___almod@dividend
  3660  000442  C0B2  F010         	movff	_TIME+1,___almod@dividend+1
  3661  000446  C0B3  F011         	movff	_TIME+2,___almod@dividend+2
  3662  00044A  C0B4  F012         	movff	_TIME+3,___almod@dividend+3
  3663  00044E  0ED0               	movlw	208
  3664  000450  6E13               	movwf	___almod@divisor,c
  3665  000452  0E07               	movlw	7
  3666  000454  6E14               	movwf	___almod@divisor+1,c
  3667  000456  0E00               	movlw	0
  3668  000458  6E15               	movwf	___almod@divisor+2,c
  3669  00045A  0E00               	movlw	0
  3670  00045C  6E16               	movwf	___almod@divisor+3,c
  3671  00045E  EC69  F021         	call	___almod	;wreg free
  3672  000462  BE12               	btfsc	?___almod+3,7,c
  3673  000464  D00D               	goto	u8380
  3674  000466  5012               	movf	?___almod+3,w,c
  3675  000468  1011               	iorwf	?___almod+2,w,c
  3676  00046A  E106               	bnz	u8381
  3677  00046C  0EE9               	movlw	233
  3678  00046E  5C0F               	subwf	?___almod,w,c
  3679  000470  0E03               	movlw	3
  3680  000472  5810               	subwfb	?___almod+1,w,c
  3681  000474  A0D8               	btfss	status,0,c
  3682  000476  D004               	goto	u8380
  3683  000478                     u8381:
  3684  000478  0100               	movlb	0	; () banked
  3685  00047A  6BAC               	clrf	??_main& (0+255),b
  3686  00047C  2BAC               	incf	??_main& (0+255),f,b
  3687  00047E  D002               	goto	u8398
  3688  000480                     u8380:
  3689  000480  0100               	movlb	0	; () banked
  3690  000482  6BAC               	clrf	??_main& (0+255),b
  3691  000484                     u8398:
  3692  000484  0100               	movlb	0	; () banked
  3693  000486  3BAC               	swapf	??_main& (0+255),f,b
  3694  000488  5080               	movf	3968,w,c	;volatile
  3695  00048A  0100               	movlb	0	; () banked
  3696  00048C  19AC               	xorwf	??_main& (0+255),w,b
  3697  00048E  0BEF               	andlw	-17
  3698  000490  19AC               	xorwf	??_main& (0+255),w,b
  3699  000492  6E80               	movwf	3968,c	;volatile
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;main.c: 458: PORTBbits.RB5 = 0;
  3703  000494  9A81               	bcf	3969,5,c	;volatile
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;main.c: 459: if (PORTDbits.RD5 == 0){
  3707  000496  BA83               	btfsc	3971,5,c	;volatile
  3708  000498  EFCF  F010         	goto	l7296
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;main.c: 460: printf("{'COM':'line','value':'Entering calibration'}\n");
  3712  00049C  0E7A               	movlw	low STR_11
  3713  00049E  0100               	movlb	0	; () banked
  3714  0004A0  6F85               	movwf	printf@f& (0+255),b
  3715  0004A2  0E7C               	movlw	high STR_11
  3716  0004A4  0100               	movlb	0	; () banked
  3717  0004A6  6F86               	movwf	(printf@f+1)& (0+255),b
  3718  0004A8  EC8A  F014         	call	_printf	;wreg free
  3719                           
  3720                           ;main.c: 461: status = CALIBRATION;
  3721  0004AC  0E00               	movlw	0
  3722  0004AE  0101               	movlb	1	; () banked
  3723  0004B0  6F99               	movwf	(_status+1)& (0+255),b
  3724  0004B2  0E09               	movlw	9
  3725  0004B4  6F98               	movwf	_status& (0+255),b
  3726                           
  3727                           ; BSR set to: 1
  3728                           ;main.c: 462: TIME = 0;
  3729  0004B6  0E00               	movlw	0
  3730  0004B8  0100               	movlb	0	; () banked
  3731  0004BA  6FB1               	movwf	_TIME& (0+255),b
  3732  0004BC  0E00               	movlw	0
  3733  0004BE  6FB2               	movwf	(_TIME+1)& (0+255),b
  3734  0004C0  0E00               	movlw	0
  3735  0004C2  6FB3               	movwf	(_TIME+2)& (0+255),b
  3736  0004C4  0E00               	movlw	0
  3737  0004C6  6FB4               	movwf	(_TIME+3)& (0+255),b
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;main.c: 463: initLED();
  3741  0004C8  EC5F  F025         	call	_initLED	;wreg free
  3742                           
  3743                           ;main.c: 464: }
  3744                           ;main.c: 465: int i,j;
  3745                           ;main.c: 475: break;
  3746  0004CC  EFCF  F010         	goto	l7296
  3747  0004D0                     l483:
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;main.c: 477: PORTBbits.RB5 = 1;
  3751  0004D0  8A81               	bsf	3969,5,c	;volatile
  3752                           
  3753                           ;main.c: 478: PORTAbits.RA4 = 0;
  3754  0004D2  9880               	bcf	3968,4,c	;volatile
  3755                           
  3756                           ;main.c: 479: PORTBbits.RB0 = 0;
  3757  0004D4  9081               	bcf	3969,0,c	;volatile
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;main.c: 480: if (TIME > 2000) status = ST;
  3761  0004D6  0100               	movlb	0	; () banked
  3762  0004D8  BFB4               	btfsc	(_TIME+3)& (0+255),7,b
  3763  0004DA  EFCF  F010         	goto	l7296
  3764  0004DE  0100               	movlb	0	; () banked
  3765  0004E0  51B4               	movf	(_TIME+3)& (0+255),w,b
  3766  0004E2  0100               	movlb	0	; () banked
  3767  0004E4  11B3               	iorwf	(_TIME+2)& (0+255),w,b
  3768  0004E6  E109               	bnz	u8410
  3769  0004E8  0ED1               	movlw	209
  3770  0004EA  0100               	movlb	0	; () banked
  3771  0004EC  5DB1               	subwf	_TIME& (0+255),w,b
  3772  0004EE  0E07               	movlw	7
  3773  0004F0  0100               	movlb	0	; () banked
  3774  0004F2  59B2               	subwfb	(_TIME+1)& (0+255),w,b
  3775  0004F4  A0D8               	btfss	status,0,c
  3776  0004F6  EFCF  F010         	goto	l7296
  3777  0004FA                     u8410:
  3778                           
  3779                           ; BSR set to: 0
  3780  0004FA  0E00               	movlw	0
  3781  0004FC  0101               	movlb	1	; () banked
  3782  0004FE  6F99               	movwf	(_status+1)& (0+255),b
  3783  000500  0E07               	movlw	7
  3784  000502  EFF2  F00E         	goto	L9
  3785                           
  3786                           ; BSR set to: 1
  3787                           ;main.c: 481: break;
  3788  000506  EFCF  F010         	goto	l7296
  3789  00050A                     l6822:
  3790                           
  3791                           ;main.c: 483: EnhancedRead();
  3792  00050A  EC39  F024         	call	_EnhancedRead	;wreg free
  3793                           
  3794                           ;main.c: 484: int i,j;
  3795                           ;main.c: 497: int i, j;
  3796                           ;main.c: 498: for (i = 0;i < 11;i++){
  3797  00050E  0E00               	movlw	0
  3798  000510  0103               	movlb	3	; () banked
  3799  000512  6F39               	movwf	(main@i+1)& (0+255),b
  3800  000514  0E00               	movlw	0
  3801  000516  6F38               	movwf	main@i& (0+255),b
  3802                           
  3803                           ; BSR set to: 3
  3804  000518  0103               	movlb	3	; () banked
  3805  00051A  BF39               	btfsc	(main@i+1)& (0+255),7,b
  3806  00051C  D00A               	goto	l486
  3807  00051E  0103               	movlb	3	; () banked
  3808  000520  5139               	movf	(main@i+1)& (0+255),w,b
  3809  000522  E106               	bnz	u8420
  3810  000524  0E0B               	movlw	11
  3811  000526  0103               	movlb	3	; () banked
  3812  000528  5D38               	subwf	main@i& (0+255),w,b
  3813  00052A  B0D8               	btfsc	status,0,c
  3814  00052C  D07F               	goto	l6842
  3815  00052E  D001               	goto	l486
  3816  000530                     u8420:
  3817                           
  3818                           ; BSR set to: 3
  3819  000530  D07D               	goto	l6842
  3820  000532                     l486:
  3821                           
  3822                           ; BSR set to: 3
  3823                           ;main.c: 501: j = i;
  3824  000532  C338  F347         	movff	main@i,main@j
  3825  000536  C339  F348         	movff	main@i+1,main@j+1
  3826                           
  3827                           ; BSR set to: 3
  3828                           ;main.c: 502: if (V[j] > amax[j]){
  3829  00053A  90D8               	bcf	status,0,c
  3830  00053C  0103               	movlb	3	; () banked
  3831  00053E  3547               	rlcf	main@j& (0+255),w,b
  3832  000540  6ED9               	movwf	fsr2l,c
  3833  000542  0103               	movlb	3	; () banked
  3834  000544  3548               	rlcf	(main@j+1)& (0+255),w,b
  3835  000546  6EDA               	movwf	fsr2h,c
  3836  000548  0EC8               	movlw	low _V
  3837  00054A  26D9               	addwf	fsr2l,f,c
  3838  00054C  0E02               	movlw	high _V
  3839  00054E  22DA               	addwfc	fsr2h,f,c
  3840  000550  90D8               	bcf	status,0,c
  3841  000552  0103               	movlb	3	; () banked
  3842  000554  3547               	rlcf	main@j& (0+255),w,b
  3843  000556  6EE1               	movwf	fsr1l,c
  3844  000558  0103               	movlb	3	; () banked
  3845  00055A  3548               	rlcf	(main@j+1)& (0+255),w,b
  3846  00055C  6EE2               	movwf	fsr1h,c
  3847  00055E  0E20               	movlw	low _amax
  3848  000560  26E1               	addwf	fsr1l,f,c
  3849  000562  0E01               	movlw	high _amax
  3850  000564  22E2               	addwfc	fsr1h,f,c
  3851  000566  50DE               	movf	postinc2,w,c
  3852  000568  5CE6               	subwf	postinc1,w,c
  3853  00056A  50DE               	movf	postinc2,w,c
  3854  00056C  58E6               	subwfb	postinc1,w,c
  3855  00056E  B0D8               	btfsc	status,0,c
  3856  000570  D01B               	goto	l6834
  3857                           
  3858                           ; BSR set to: 3
  3859                           ;main.c: 503: amax[j] = V[j];
  3860  000572  90D8               	bcf	status,0,c
  3861  000574  0103               	movlb	3	; () banked
  3862  000576  3547               	rlcf	main@j& (0+255),w,b
  3863  000578  6ED9               	movwf	fsr2l,c
  3864  00057A  0103               	movlb	3	; () banked
  3865  00057C  3548               	rlcf	(main@j+1)& (0+255),w,b
  3866  00057E  6EDA               	movwf	fsr2h,c
  3867  000580  0EC8               	movlw	low _V
  3868  000582  26D9               	addwf	fsr2l,f,c
  3869  000584  0E02               	movlw	high _V
  3870  000586  22DA               	addwfc	fsr2h,f,c
  3871  000588  90D8               	bcf	status,0,c
  3872  00058A  0103               	movlb	3	; () banked
  3873  00058C  3547               	rlcf	main@j& (0+255),w,b
  3874  00058E  6EE1               	movwf	fsr1l,c
  3875  000590  0103               	movlb	3	; () banked
  3876  000592  3548               	rlcf	(main@j+1)& (0+255),w,b
  3877  000594  6EE2               	movwf	fsr1h,c
  3878  000596  0E20               	movlw	low _amax
  3879  000598  26E1               	addwf	fsr1l,f,c
  3880  00059A  0E01               	movlw	high _amax
  3881  00059C  22E2               	addwfc	fsr1h,f,c
  3882  00059E  CFDE FFE6          	movff	postinc2,postinc1
  3883  0005A2  CFDD FFE5          	movff	postdec2,postdec1
  3884  0005A6  D000               	goto	l6834
  3885  0005A8                     l6834:
  3886                           
  3887                           ; BSR set to: 3
  3888                           ;main.c: 504: }
  3889                           ;main.c: 505: if (V[j] < amin[j]){
  3890  0005A8  90D8               	bcf	status,0,c
  3891  0005AA  0103               	movlb	3	; () banked
  3892  0005AC  3547               	rlcf	main@j& (0+255),w,b
  3893  0005AE  6ED9               	movwf	fsr2l,c
  3894  0005B0  0103               	movlb	3	; () banked
  3895  0005B2  3548               	rlcf	(main@j+1)& (0+255),w,b
  3896  0005B4  6EDA               	movwf	fsr2h,c
  3897  0005B6  0E40               	movlw	low _amin
  3898  0005B8  26D9               	addwf	fsr2l,f,c
  3899  0005BA  0E01               	movlw	high _amin
  3900  0005BC  22DA               	addwfc	fsr2h,f,c
  3901  0005BE  90D8               	bcf	status,0,c
  3902  0005C0  0103               	movlb	3	; () banked
  3903  0005C2  3547               	rlcf	main@j& (0+255),w,b
  3904  0005C4  6EE1               	movwf	fsr1l,c
  3905  0005C6  0103               	movlb	3	; () banked
  3906  0005C8  3548               	rlcf	(main@j+1)& (0+255),w,b
  3907  0005CA  6EE2               	movwf	fsr1h,c
  3908  0005CC  0EC8               	movlw	low _V
  3909  0005CE  26E1               	addwf	fsr1l,f,c
  3910  0005D0  0E02               	movlw	high _V
  3911  0005D2  22E2               	addwfc	fsr1h,f,c
  3912  0005D4  50DE               	movf	postinc2,w,c
  3913  0005D6  5CE6               	subwf	postinc1,w,c
  3914  0005D8  50DE               	movf	postinc2,w,c
  3915  0005DA  58E6               	subwfb	postinc1,w,c
  3916  0005DC  B0D8               	btfsc	status,0,c
  3917  0005DE  D01B               	goto	l6838
  3918                           
  3919                           ; BSR set to: 3
  3920                           ;main.c: 506: amin[j] = V[j];
  3921  0005E0  90D8               	bcf	status,0,c
  3922  0005E2  0103               	movlb	3	; () banked
  3923  0005E4  3547               	rlcf	main@j& (0+255),w,b
  3924  0005E6  6ED9               	movwf	fsr2l,c
  3925  0005E8  0103               	movlb	3	; () banked
  3926  0005EA  3548               	rlcf	(main@j+1)& (0+255),w,b
  3927  0005EC  6EDA               	movwf	fsr2h,c
  3928  0005EE  0EC8               	movlw	low _V
  3929  0005F0  26D9               	addwf	fsr2l,f,c
  3930  0005F2  0E02               	movlw	high _V
  3931  0005F4  22DA               	addwfc	fsr2h,f,c
  3932  0005F6  90D8               	bcf	status,0,c
  3933  0005F8  0103               	movlb	3	; () banked
  3934  0005FA  3547               	rlcf	main@j& (0+255),w,b
  3935  0005FC  6EE1               	movwf	fsr1l,c
  3936  0005FE  0103               	movlb	3	; () banked
  3937  000600  3548               	rlcf	(main@j+1)& (0+255),w,b
  3938  000602  6EE2               	movwf	fsr1h,c
  3939  000604  0E40               	movlw	low _amin
  3940  000606  26E1               	addwf	fsr1l,f,c
  3941  000608  0E01               	movlw	high _amin
  3942  00060A  22E2               	addwfc	fsr1h,f,c
  3943  00060C  CFDE FFE6          	movff	postinc2,postinc1
  3944  000610  CFDD FFE5          	movff	postdec2,postdec1
  3945  000614  D000               	goto	l6838
  3946  000616                     l6838:
  3947                           
  3948                           ; BSR set to: 3
  3949  000616  0103               	movlb	3	; () banked
  3950  000618  4B38               	infsnz	main@i& (0+255),f,b
  3951  00061A  2B39               	incf	(main@i+1)& (0+255),f,b
  3952                           
  3953                           ; BSR set to: 3
  3954  00061C  0103               	movlb	3	; () banked
  3955  00061E  BF39               	btfsc	(main@i+1)& (0+255),7,b
  3956  000620  D788               	goto	l486
  3957  000622  0103               	movlb	3	; () banked
  3958  000624  5139               	movf	(main@i+1)& (0+255),w,b
  3959  000626  E102               	bnz	l6842
  3960  000628  D77D               	goto	L2
  3961  00062A  D000               	goto	l6842
  3962  00062C                     l6842:
  3963                           
  3964                           ; BSR set to: 3
  3965                           ;main.c: 507: }
  3966                           ;main.c: 508: }
  3967                           ;main.c: 510: PORTAbits.RA4 = TIME % 300 > 200;
  3968  00062C  C0B1  F00F         	movff	_TIME,___almod@dividend
  3969  000630  C0B2  F010         	movff	_TIME+1,___almod@dividend+1
  3970  000634  C0B3  F011         	movff	_TIME+2,___almod@dividend+2
  3971  000638  C0B4  F012         	movff	_TIME+3,___almod@dividend+3
  3972  00063C  0E2C               	movlw	44
  3973  00063E  6E13               	movwf	___almod@divisor,c
  3974  000640  0E01               	movlw	1
  3975  000642  6E14               	movwf	___almod@divisor+1,c
  3976  000644  0E00               	movlw	0
  3977  000646  6E15               	movwf	___almod@divisor+2,c
  3978  000648  0E00               	movlw	0
  3979  00064A  6E16               	movwf	___almod@divisor+3,c
  3980  00064C  EC69  F021         	call	___almod	;wreg free
  3981  000650  BE12               	btfsc	?___almod+3,7,c
  3982  000652  D00C               	goto	u8460
  3983  000654  5012               	movf	?___almod+3,w,c
  3984  000656  1011               	iorwf	?___almod+2,w,c
  3985  000658  1010               	iorwf	?___almod+1,w,c
  3986  00065A  E104               	bnz	u8461
  3987  00065C  0EC9               	movlw	201
  3988  00065E  5C0F               	subwf	?___almod,w,c
  3989  000660  A0D8               	btfss	status,0,c
  3990  000662  D004               	goto	u8460
  3991  000664                     u8461:
  3992  000664  0100               	movlb	0	; () banked
  3993  000666  6BAC               	clrf	??_main& (0+255),b
  3994  000668  2BAC               	incf	??_main& (0+255),f,b
  3995  00066A  D002               	goto	u8478
  3996  00066C                     u8460:
  3997  00066C  0100               	movlb	0	; () banked
  3998  00066E  6BAC               	clrf	??_main& (0+255),b
  3999  000670                     u8478:
  4000  000670  0100               	movlb	0	; () banked
  4001  000672  3BAC               	swapf	??_main& (0+255),f,b
  4002  000674  5080               	movf	3968,w,c	;volatile
  4003  000676  0100               	movlb	0	; () banked
  4004  000678  19AC               	xorwf	??_main& (0+255),w,b
  4005  00067A  0BEF               	andlw	-17
  4006  00067C  19AC               	xorwf	??_main& (0+255),w,b
  4007  00067E  6E80               	movwf	3968,c	;volatile
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;main.c: 511: PORTBbits.RB5 = TIME % 300 > 100 && TIME % 300 < 200;
  4011  000680  0E00               	movlw	0
  4012  000682  0103               	movlb	3	; () banked
  4013  000684  6F32               	movwf	_main$1848& (0+255),b
  4014                           
  4015                           ; BSR set to: 3
  4016  000686  C0B1  F00F         	movff	_TIME,___almod@dividend
  4017  00068A  C0B2  F010         	movff	_TIME+1,___almod@dividend+1
  4018  00068E  C0B3  F011         	movff	_TIME+2,___almod@dividend+2
  4019  000692  C0B4  F012         	movff	_TIME+3,___almod@dividend+3
  4020  000696  0E2C               	movlw	44
  4021  000698  6E13               	movwf	___almod@divisor,c
  4022  00069A  0E01               	movlw	1
  4023  00069C  6E14               	movwf	___almod@divisor+1,c
  4024  00069E  0E00               	movlw	0
  4025  0006A0  6E15               	movwf	___almod@divisor+2,c
  4026  0006A2  0E00               	movlw	0
  4027  0006A4  6E16               	movwf	___almod@divisor+3,c
  4028  0006A6  EC69  F021         	call	___almod	;wreg free
  4029  0006AA  BE12               	btfsc	?___almod+3,7,c
  4030  0006AC  D028               	goto	l6852
  4031  0006AE  5012               	movf	?___almod+3,w,c
  4032  0006B0  1011               	iorwf	?___almod+2,w,c
  4033  0006B2  1010               	iorwf	?___almod+1,w,c
  4034  0006B4  E104               	bnz	u8480
  4035  0006B6  0E65               	movlw	101
  4036  0006B8  5C0F               	subwf	?___almod,w,c
  4037  0006BA  A0D8               	btfss	status,0,c
  4038  0006BC  D020               	goto	l6852
  4039  0006BE                     u8480:
  4040  0006BE  C0B1  F00F         	movff	_TIME,___almod@dividend
  4041  0006C2  C0B2  F010         	movff	_TIME+1,___almod@dividend+1
  4042  0006C6  C0B3  F011         	movff	_TIME+2,___almod@dividend+2
  4043  0006CA  C0B4  F012         	movff	_TIME+3,___almod@dividend+3
  4044  0006CE  0E2C               	movlw	44
  4045  0006D0  6E13               	movwf	___almod@divisor,c
  4046  0006D2  0E01               	movlw	1
  4047  0006D4  6E14               	movwf	___almod@divisor+1,c
  4048  0006D6  0E00               	movlw	0
  4049  0006D8  6E15               	movwf	___almod@divisor+2,c
  4050  0006DA  0E00               	movlw	0
  4051  0006DC  6E16               	movwf	___almod@divisor+3,c
  4052  0006DE  EC69  F021         	call	___almod	;wreg free
  4053  0006E2  BE12               	btfsc	?___almod+3,7,c
  4054  0006E4  D008               	goto	l6850
  4055  0006E6  5012               	movf	?___almod+3,w,c
  4056  0006E8  1011               	iorwf	?___almod+2,w,c
  4057  0006EA  1010               	iorwf	?___almod+1,w,c
  4058  0006EC  E108               	bnz	l6852
  4059  0006EE  0EC8               	movlw	200
  4060  0006F0  5C0F               	subwf	?___almod,w,c
  4061  0006F2  B0D8               	btfsc	status,0,c
  4062  0006F4  D004               	goto	l6852
  4063  0006F6                     l6850:
  4064  0006F6  0E01               	movlw	1
  4065  0006F8  0103               	movlb	3	; () banked
  4066  0006FA  6F32               	movwf	_main$1848& (0+255),b
  4067  0006FC  D000               	goto	l6852
  4068  0006FE                     l6852:
  4069  0006FE  0103               	movlb	3	; () banked
  4070  000700  B132               	btfsc	_main$1848& (0+255),0,b
  4071  000702  D002               	bra	u8505
  4072  000704  9A81               	bcf	3969,5,c	;volatile
  4073  000706  D001               	bra	u8506
  4074  000708                     u8505:
  4075  000708  8A81               	bsf	3969,5,c	;volatile
  4076  00070A                     u8506:
  4077                           
  4078                           ;main.c: 512: PORTBbits.RB0 = TIME % 300 < 100;
  4079  00070A  C0B1  F00F         	movff	_TIME,___almod@dividend
  4080  00070E  C0B2  F010         	movff	_TIME+1,___almod@dividend+1
  4081  000712  C0B3  F011         	movff	_TIME+2,___almod@dividend+2
  4082  000716  C0B4  F012         	movff	_TIME+3,___almod@dividend+3
  4083  00071A  0E2C               	movlw	44
  4084  00071C  6E13               	movwf	___almod@divisor,c
  4085  00071E  0E01               	movlw	1
  4086  000720  6E14               	movwf	___almod@divisor+1,c
  4087  000722  0E00               	movlw	0
  4088  000724  6E15               	movwf	___almod@divisor+2,c
  4089  000726  0E00               	movlw	0
  4090  000728  6E16               	movwf	___almod@divisor+3,c
  4091  00072A  EC69  F021         	call	___almod	;wreg free
  4092  00072E  BE12               	btfsc	?___almod+3,7,c
  4093  000730  D008               	goto	u8511
  4094  000732  5012               	movf	?___almod+3,w,c
  4095  000734  1011               	iorwf	?___almod+2,w,c
  4096  000736  1010               	iorwf	?___almod+1,w,c
  4097  000738  E108               	bnz	u8510
  4098  00073A  0E64               	movlw	100
  4099  00073C  5C0F               	subwf	?___almod,w,c
  4100  00073E  B0D8               	btfsc	status,0,c
  4101  000740  D004               	goto	u8510
  4102  000742                     u8511:
  4103  000742  0100               	movlb	0	; () banked
  4104  000744  6BAC               	clrf	??_main& (0+255),b
  4105  000746  2BAC               	incf	??_main& (0+255),f,b
  4106  000748  D002               	goto	u8528
  4107  00074A                     u8510:
  4108  00074A  0100               	movlb	0	; () banked
  4109  00074C  6BAC               	clrf	??_main& (0+255),b
  4110  00074E                     u8528:
  4111  00074E  5081               	movf	3969,w,c	;volatile
  4112  000750  0100               	movlb	0	; () banked
  4113  000752  19AC               	xorwf	??_main& (0+255),w,b
  4114  000754  0BFE               	andlw	-2
  4115  000756  19AC               	xorwf	??_main& (0+255),w,b
  4116  000758  6E81               	movwf	3969,c	;volatile
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;main.c: 514: if (PORTDbits.RD6 == 0){
  4120  00075A  BC83               	btfsc	3971,6,c	;volatile
  4121  00075C  D017               	goto	l6864
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;main.c: 515: printf("{'COM':'line','value':'Reset calibration'}\n");
  4125  00075E  0E61               	movlw	low STR_12
  4126  000760  0100               	movlb	0	; () banked
  4127  000762  6F85               	movwf	printf@f& (0+255),b
  4128  000764  0E7D               	movlw	high STR_12
  4129  000766  0100               	movlb	0	; () banked
  4130  000768  6F86               	movwf	(printf@f+1)& (0+255),b
  4131  00076A  EC8A  F014         	call	_printf	;wreg free
  4132                           
  4133                           ;main.c: 516: TIME = 0;
  4134  00076E  0E00               	movlw	0
  4135  000770  0100               	movlb	0	; () banked
  4136  000772  6FB1               	movwf	_TIME& (0+255),b
  4137  000774  0E00               	movlw	0
  4138  000776  6FB2               	movwf	(_TIME+1)& (0+255),b
  4139  000778  0E00               	movlw	0
  4140  00077A  6FB3               	movwf	(_TIME+2)& (0+255),b
  4141  00077C  0E00               	movlw	0
  4142  00077E  6FB4               	movwf	(_TIME+3)& (0+255),b
  4143                           
  4144                           ; BSR set to: 0
  4145                           ;main.c: 517: status = RED_ST;
  4146  000780  0E00               	movlw	0
  4147  000782  0101               	movlb	1	; () banked
  4148  000784  6F99               	movwf	(_status+1)& (0+255),b
  4149  000786  0E06               	movlw	6
  4150  000788  6F98               	movwf	_status& (0+255),b
  4151  00078A  D000               	goto	l6864
  4152  00078C                     l6864:
  4153                           
  4154                           ;main.c: 518: }
  4155                           ;main.c: 519: if (PORTDbits.RD4 == 0){
  4156  00078C  B883               	btfsc	3971,4,c	;volatile
  4157  00078E  EFCF  F010         	goto	l7296
  4158                           
  4159                           ;main.c: 520: printf("{'COM':'line','value':'initial mode'}\n");
  4160  000792  0EAF               	movlw	low STR_13
  4161  000794  0100               	movlb	0	; () banked
  4162  000796  6F85               	movwf	printf@f& (0+255),b
  4163  000798  0E7E               	movlw	high STR_13
  4164  00079A  0100               	movlb	0	; () banked
  4165  00079C  6F86               	movwf	(printf@f+1)& (0+255),b
  4166  00079E  EC8A  F014         	call	_printf	;wreg free
  4167                           
  4168                           ;main.c: 521: TIME = 0;
  4169  0007A2  0E00               	movlw	0
  4170  0007A4  0100               	movlb	0	; () banked
  4171  0007A6  6FB1               	movwf	_TIME& (0+255),b
  4172  0007A8  0E00               	movlw	0
  4173  0007AA  6FB2               	movwf	(_TIME+1)& (0+255),b
  4174  0007AC  0E00               	movlw	0
  4175  0007AE  6FB3               	movwf	(_TIME+2)& (0+255),b
  4176  0007B0  0E00               	movlw	0
  4177  0007B2  6FB4               	movwf	(_TIME+3)& (0+255),b
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;main.c: 522: fns = 1;
  4181  0007B4  0E00               	movlw	0
  4182  0007B6  0100               	movlb	0	; () banked
  4183  0007B8  6FBA               	movwf	(_fns+1)& (0+255),b
  4184  0007BA  0E01               	movlw	1
  4185  0007BC  6FB9               	movwf	_fns& (0+255),b
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;main.c: 523: status = GREEN_RELEASE_INITIAL;
  4189  0007BE  0E00               	movlw	0
  4190  0007C0  0101               	movlb	1	; () banked
  4191  0007C2  6F99               	movwf	(_status+1)& (0+255),b
  4192  0007C4  0E01               	movlw	1
  4193  0007C6  6F98               	movwf	_status& (0+255),b
  4194                           
  4195                           ; BSR set to: 1
  4196                           ;main.c: 524: int i,j;
  4197                           ;main.c: 525: for (i = 0;i < 5;i++){
  4198  0007C8  0E00               	movlw	0
  4199  0007CA  0103               	movlb	3	; () banked
  4200  0007CC  6F3B               	movwf	(main@i_1851+1)& (0+255),b
  4201  0007CE  0E00               	movlw	0
  4202  0007D0  6F3A               	movwf	main@i_1851& (0+255),b
  4203                           
  4204                           ; BSR set to: 3
  4205  0007D2  0103               	movlb	3	; () banked
  4206  0007D4  BF3B               	btfsc	(main@i_1851+1)& (0+255),7,b
  4207  0007D6  D00C               	goto	l6880
  4208  0007D8  0103               	movlb	3	; () banked
  4209  0007DA  513B               	movf	(main@i_1851+1)& (0+255),w,b
  4210  0007DC  E107               	bnz	u8550
  4211  0007DE  0E05               	movlw	5
  4212  0007E0  0103               	movlb	3	; () banked
  4213  0007E2  5D3A               	subwf	main@i_1851& (0+255),w,b
  4214  0007E4  B0D8               	btfsc	status,0,c
  4215  0007E6  EFCF  F010         	goto	l7296
  4216  0007EA  D002               	goto	l6880
  4217  0007EC                     u8550:
  4218                           
  4219                           ; BSR set to: 3
  4220  0007EC  EFCF  F010         	goto	l7296
  4221  0007F0                     l6880:
  4222                           
  4223                           ; BSR set to: 3
  4224                           ;main.c: 526: j = fw[i];
  4225  0007F0  90D8               	bcf	status,0,c
  4226  0007F2  0103               	movlb	3	; () banked
  4227  0007F4  353A               	rlcf	main@i_1851& (0+255),w,b
  4228  0007F6  6ED9               	movwf	fsr2l,c
  4229  0007F8  0103               	movlb	3	; () banked
  4230  0007FA  353B               	rlcf	(main@i_1851+1)& (0+255),w,b
  4231  0007FC  6EDA               	movwf	fsr2h,c
  4232  0007FE  0ECC               	movlw	low _fw
  4233  000800  26D9               	addwf	fsr2l,f,c
  4234  000802  0E01               	movlw	high _fw
  4235  000804  22DA               	addwfc	fsr2h,f,c
  4236  000806  CFDE F336          	movff	postinc2,main@j_1852
  4237  00080A  CFDD F337          	movff	postdec2,main@j_1852+1
  4238                           
  4239                           ; BSR set to: 3
  4240                           ;main.c: 527: printf("{'COM':'line','value':'S[ %04u ] : [%04u , %04u ]'}\n" ,j,amin[j],
      +                          amax[j] );
  4241  00080E  0EE4               	movlw	low STR_14
  4242  000810  0100               	movlb	0	; () banked
  4243  000812  6F85               	movwf	printf@f& (0+255),b
  4244  000814  0E7B               	movlw	high STR_14
  4245  000816  0100               	movlb	0	; () banked
  4246  000818  6F86               	movwf	(printf@f+1)& (0+255),b
  4247  00081A  C336  F087         	movff	main@j_1852,?_printf+2
  4248  00081E  C337  F088         	movff	main@j_1852+1,?_printf+3
  4249  000822  90D8               	bcf	status,0,c
  4250  000824  0103               	movlb	3	; () banked
  4251  000826  3536               	rlcf	main@j_1852& (0+255),w,b
  4252  000828  6ED9               	movwf	fsr2l,c
  4253  00082A  0103               	movlb	3	; () banked
  4254  00082C  3537               	rlcf	(main@j_1852+1)& (0+255),w,b
  4255  00082E  6EDA               	movwf	fsr2h,c
  4256  000830  0E40               	movlw	low _amin
  4257  000832  26D9               	addwf	fsr2l,f,c
  4258  000834  0E01               	movlw	high _amin
  4259  000836  22DA               	addwfc	fsr2h,f,c
  4260  000838  CFDE F089          	movff	postinc2,?_printf+4
  4261  00083C  CFDD F08A          	movff	postdec2,?_printf+5
  4262  000840  90D8               	bcf	status,0,c
  4263  000842  0103               	movlb	3	; () banked
  4264  000844  3536               	rlcf	main@j_1852& (0+255),w,b
  4265  000846  6ED9               	movwf	fsr2l,c
  4266  000848  0103               	movlb	3	; () banked
  4267  00084A  3537               	rlcf	(main@j_1852+1)& (0+255),w,b
  4268  00084C  6EDA               	movwf	fsr2h,c
  4269  00084E  0E20               	movlw	low _amax
  4270  000850  26D9               	addwf	fsr2l,f,c
  4271  000852  0E01               	movlw	high _amax
  4272  000854  22DA               	addwfc	fsr2h,f,c
  4273  000856  CFDE F08B          	movff	postinc2,?_printf+6
  4274  00085A  CFDD F08C          	movff	postdec2,?_printf+7
  4275  00085E  EC8A  F014         	call	_printf	;wreg free
  4276  000862  0103               	movlb	3	; () banked
  4277  000864  4B3A               	infsnz	main@i_1851& (0+255),f,b
  4278  000866  2B3B               	incf	(main@i_1851+1)& (0+255),f,b
  4279                           
  4280                           ; BSR set to: 3
  4281  000868  0103               	movlb	3	; () banked
  4282  00086A  BF3B               	btfsc	(main@i_1851+1)& (0+255),7,b
  4283  00086C  D7C1               	goto	l6880
  4284  00086E  0103               	movlb	3	; () banked
  4285  000870  513B               	movf	(main@i_1851+1)& (0+255),w,b
  4286  000872  E101               	bnz	u8560
  4287  000874  D7B4               	goto	L3
  4288  000876                     u8560:
  4289                           
  4290                           ; BSR set to: 3
  4291                           ;main.c: 528: }
  4292                           ;main.c: 529: }
  4293                           ;main.c: 530: break;
  4294                           
  4295                           ; BSR set to: 3
  4296  000876  EFCF  F010         	goto	l7296
  4297  00087A                     l496:
  4298                           
  4299                           ; BSR set to: 0
  4300                           ;main.c: 532: PORTBbits.RB0 = 1;
  4301  00087A  8081               	bsf	3969,0,c	;volatile
  4302                           
  4303                           ;main.c: 533: PORTAbits.RA4 = 0;
  4304  00087C  9880               	bcf	3968,4,c	;volatile
  4305                           
  4306                           ;main.c: 534: PORTBbits.RB5 = 0;
  4307  00087E  9A81               	bcf	3969,5,c	;volatile
  4308                           
  4309                           ;main.c: 535: if (PORTDbits.RD4 == 1){
  4310  000880  A883               	btfss	3971,4,c	;volatile
  4311  000882  EFCF  F010         	goto	l7296
  4312  000886  EFEE  F00E         	goto	l7216
  4313                           
  4314                           ; BSR set to: 1
  4315                           ;main.c: 537: }
  4316                           ;main.c: 538: break;
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;main.c: 536: status = INITIAL;
  4320  00088A  EFCF  F010         	goto	l7296
  4321  00088E                     l6890:
  4322                           
  4323                           ;main.c: 540: if (fns){
  4324  00088E  0100               	movlb	0	; () banked
  4325  000890  51B9               	movf	_fns& (0+255),w,b
  4326  000892  0100               	movlb	0	; () banked
  4327  000894  11BA               	iorwf	(_fns+1)& (0+255),w,b
  4328  000896  B4D8               	btfsc	status,2,c
  4329  000898  D010               	goto	l6894
  4330                           
  4331                           ; BSR set to: 0
  4332                           ;main.c: 541: rf = 1;
  4333  00089A  0E00               	movlw	0
  4334  00089C  0101               	movlb	1	; () banked
  4335  00089E  6F95               	movwf	(_rf+1)& (0+255),b
  4336  0008A0  0E01               	movlw	1
  4337  0008A2  6F94               	movwf	_rf& (0+255),b
  4338                           
  4339                           ;main.c: 542: gf = 1;
  4340  0008A4  0E00               	movlw	0
  4341  0008A6  0101               	movlb	1	; () banked
  4342  0008A8  6F8D               	movwf	(_gf+1)& (0+255),b
  4343  0008AA  0E01               	movlw	1
  4344  0008AC  6F8C               	movwf	_gf& (0+255),b
  4345                           
  4346                           ;main.c: 543: fns = 0;
  4347  0008AE  0E00               	movlw	0
  4348  0008B0  0100               	movlb	0	; () banked
  4349  0008B2  6FBA               	movwf	(_fns+1)& (0+255),b
  4350  0008B4  0E00               	movlw	0
  4351  0008B6  6FB9               	movwf	_fns& (0+255),b
  4352  0008B8  D000               	goto	l6894
  4353  0008BA                     l6894:
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;main.c: 544: }
  4357                           ;main.c: 545: PORTBbits.RB0 = MF == 1;
  4358  0008BA  0450               	decf	_MF,w,c
  4359  0008BC  A4D8               	btfss	status,2,c
  4360  0008BE  D004               	goto	u8590
  4361  0008C0  0100               	movlb	0	; () banked
  4362  0008C2  6BAC               	clrf	??_main& (0+255),b
  4363  0008C4  2BAC               	incf	??_main& (0+255),f,b
  4364  0008C6  D002               	goto	u8608
  4365  0008C8                     u8590:
  4366  0008C8  0100               	movlb	0	; () banked
  4367  0008CA  6BAC               	clrf	??_main& (0+255),b
  4368  0008CC                     u8608:
  4369  0008CC  5081               	movf	3969,w,c	;volatile
  4370  0008CE  0100               	movlb	0	; () banked
  4371  0008D0  19AC               	xorwf	??_main& (0+255),w,b
  4372  0008D2  0BFE               	andlw	-2
  4373  0008D4  19AC               	xorwf	??_main& (0+255),w,b
  4374  0008D6  6E81               	movwf	3969,c	;volatile
  4375                           
  4376                           ; BSR set to: 0
  4377                           ;main.c: 546: PORTAbits.RA4 = (P[sd[1]] > 500 && ((line>0?line:-(line))<50)) || (P[sd[0]
      +                          ] > 500 && ((line>0?line:-(line))<50));
  4378  0008D8  0E01               	movlw	1
  4379  0008DA  0103               	movlb	3	; () banked
  4380  0008DC  6F34               	movwf	_main$1854& (0+255),b
  4381                           
  4382                           ; BSR set to: 3
  4383  0008DE  90D8               	bcf	status,0,c
  4384  0008E0  0101               	movlb	1	; () banked
  4385  0008E2  35E2               	rlcf	(_sd+2)& (0+255),w,b
  4386  0008E4  6ED9               	movwf	fsr2l,c
  4387  0008E6  0101               	movlb	1	; () banked
  4388  0008E8  35E3               	rlcf	(_sd+3)& (0+255),w,b
  4389  0008EA  6EDA               	movwf	fsr2h,c
  4390  0008EC  0E00               	movlw	low _P
  4391  0008EE  26D9               	addwf	fsr2l,f,c
  4392  0008F0  0E01               	movlw	high _P
  4393  0008F2  22DA               	addwfc	fsr2h,f,c
  4394  0008F4  0E01               	movlw	1
  4395  0008F6  BEDB               	btfsc	plusw2,7,c
  4396  0008F8  D02D               	goto	l6906
  4397  0008FA  0EF5               	movlw	245
  4398  0008FC  5CDE               	subwf	postinc2,w,c
  4399  0008FE  0E01               	movlw	1
  4400  000900  58DE               	subwfb	postinc2,w,c
  4401  000902  A0D8               	btfss	status,0,c
  4402  000904  D027               	goto	l6906
  4403                           
  4404                           ; BSR set to: 1
  4405  000906  BE4B               	btfsc	_line+1,7,c
  4406  000908  D005               	goto	l6902
  4407  00090A  504B               	movf	_line+1,w,c
  4408  00090C  E111               	bnz	l5384
  4409  00090E  044A               	decf	_line,w,c
  4410  000910  B0D8               	btfsc	status,0,c
  4411  000912  D00E               	goto	l5384
  4412  000914                     l6902:
  4413                           
  4414                           ; BSR set to: 1
  4415  000914  C04A  F0AC         	movff	_line,??_main
  4416  000918  C04B  F0AD         	movff	_line+1,??_main+1
  4417  00091C  0100               	movlb	0	; () banked
  4418  00091E  1FAC               	comf	??_main& (0+255),f,b
  4419  000920  1FAD               	comf	(??_main+1)& (0+255),f,b
  4420  000922  4BAC               	infsnz	??_main& (0+255),f,b
  4421  000924  2BAD               	incf	(??_main+1)& (0+255),f,b
  4422  000926  C0AC  F332         	movff	??_main,_main$1848
  4423  00092A  C0AD  F333         	movff	??_main+1,_main$1848+1
  4424  00092E  D005               	goto	l6904
  4425  000930                     l5384:
  4426                           
  4427                           ; BSR set to: 1
  4428  000930  C04A  F332         	movff	_line,_main$1848
  4429  000934  C04B  F333         	movff	_line+1,_main$1848+1
  4430  000938  D000               	goto	l6904
  4431  00093A                     l6904:
  4432  00093A  0103               	movlb	3	; () banked
  4433  00093C  BF33               	btfsc	(_main$1848+1)& (0+255),7,b
  4434  00093E  D049               	goto	l6916
  4435  000940  0103               	movlb	3	; () banked
  4436  000942  5133               	movf	(_main$1848+1)& (0+255),w,b
  4437  000944  E107               	bnz	l6906
  4438  000946  0E32               	movlw	50
  4439  000948  0103               	movlb	3	; () banked
  4440  00094A  5D32               	subwf	_main$1848& (0+255),w,b
  4441  00094C  B0D8               	btfsc	status,0,c
  4442  00094E  D002               	goto	l6906
  4443  000950  D040               	goto	l6916
  4444  000952  D000               	goto	l6906
  4445  000954                     l6906:
  4446  000954  90D8               	bcf	status,0,c
  4447  000956  0101               	movlb	1	; () banked
  4448  000958  35E0               	rlcf	_sd& (0+255),w,b
  4449  00095A  6ED9               	movwf	fsr2l,c
  4450  00095C  0101               	movlb	1	; () banked
  4451  00095E  35E1               	rlcf	(_sd+1)& (0+255),w,b
  4452  000960  6EDA               	movwf	fsr2h,c
  4453  000962  0E00               	movlw	low _P
  4454  000964  26D9               	addwf	fsr2l,f,c
  4455  000966  0E01               	movlw	high _P
  4456  000968  22DA               	addwfc	fsr2h,f,c
  4457  00096A  0E01               	movlw	1
  4458  00096C  BEDB               	btfsc	plusw2,7,c
  4459  00096E  D02D               	goto	l6914
  4460  000970  0EF5               	movlw	245
  4461  000972  5CDE               	subwf	postinc2,w,c
  4462  000974  0E01               	movlw	1
  4463  000976  58DE               	subwfb	postinc2,w,c
  4464  000978  A0D8               	btfss	status,0,c
  4465  00097A  D027               	goto	l6914
  4466                           
  4467                           ; BSR set to: 1
  4468  00097C  BE4B               	btfsc	_line+1,7,c
  4469  00097E  D005               	goto	l6910
  4470  000980  504B               	movf	_line+1,w,c
  4471  000982  E111               	bnz	l5390
  4472  000984  044A               	decf	_line,w,c
  4473  000986  B0D8               	btfsc	status,0,c
  4474  000988  D00E               	goto	l5390
  4475  00098A                     l6910:
  4476                           
  4477                           ; BSR set to: 1
  4478  00098A  C04A  F0AC         	movff	_line,??_main
  4479  00098E  C04B  F0AD         	movff	_line+1,??_main+1
  4480  000992  0100               	movlb	0	; () banked
  4481  000994  1FAC               	comf	??_main& (0+255),f,b
  4482  000996  1FAD               	comf	(??_main+1)& (0+255),f,b
  4483  000998  4BAC               	infsnz	??_main& (0+255),f,b
  4484  00099A  2BAD               	incf	(??_main+1)& (0+255),f,b
  4485  00099C  C0AC  F334         	movff	??_main,_main$1854
  4486  0009A0  C0AD  F335         	movff	??_main+1,_main$1854+1
  4487  0009A4  D005               	goto	l6912
  4488  0009A6                     l5390:
  4489                           
  4490                           ; BSR set to: 1
  4491  0009A6  C04A  F334         	movff	_line,_main$1854
  4492  0009AA  C04B  F335         	movff	_line+1,_main$1854+1
  4493  0009AE  D000               	goto	l6912
  4494  0009B0                     l6912:
  4495  0009B0  0103               	movlb	3	; () banked
  4496  0009B2  BF35               	btfsc	(_main$1854+1)& (0+255),7,b
  4497  0009B4  D00E               	goto	l6916
  4498  0009B6  0103               	movlb	3	; () banked
  4499  0009B8  5135               	movf	(_main$1854+1)& (0+255),w,b
  4500  0009BA  E107               	bnz	l6914
  4501  0009BC  0E32               	movlw	50
  4502  0009BE  0103               	movlb	3	; () banked
  4503  0009C0  5D34               	subwf	_main$1854& (0+255),w,b
  4504  0009C2  B0D8               	btfsc	status,0,c
  4505  0009C4  D002               	goto	l6914
  4506  0009C6  D005               	goto	l6916
  4507  0009C8  D000               	goto	l6914
  4508  0009CA                     l6914:
  4509  0009CA  0E00               	movlw	0
  4510  0009CC  0103               	movlb	3	; () banked
  4511  0009CE  6F34               	movwf	_main$1854& (0+255),b
  4512  0009D0  D000               	goto	l6916
  4513  0009D2                     l6916:
  4514                           
  4515                           ; BSR set to: 3
  4516  0009D2  0103               	movlb	3	; () banked
  4517  0009D4  B134               	btfsc	_main$1854& (0+255),0,b
  4518  0009D6  D002               	bra	u8675
  4519  0009D8  9880               	bcf	3968,4,c	;volatile
  4520  0009DA  D001               	bra	u8676
  4521  0009DC                     u8675:
  4522  0009DC  8880               	bsf	3968,4,c	;volatile
  4523  0009DE                     u8676:
  4524                           
  4525                           ;main.c: 547: PORTBbits.RB5 = MF == 0;
  4526  0009DE  5050               	movf	_MF,w,c
  4527  0009E0  A4D8               	btfss	status,2,c
  4528  0009E2  D004               	goto	u8680
  4529  0009E4  0100               	movlb	0	; () banked
  4530  0009E6  6BAC               	clrf	??_main& (0+255),b
  4531  0009E8  2BAC               	incf	??_main& (0+255),f,b
  4532  0009EA  D002               	goto	u8698
  4533  0009EC                     u8680:
  4534  0009EC  0100               	movlb	0	; () banked
  4535  0009EE  6BAC               	clrf	??_main& (0+255),b
  4536  0009F0                     u8698:
  4537  0009F0  0100               	movlb	0	; () banked
  4538  0009F2  3BAC               	swapf	??_main& (0+255),f,b
  4539  0009F4  47AC               	rlncf	??_main& (0+255),f,b
  4540  0009F6  5081               	movf	3969,w,c	;volatile
  4541  0009F8  0100               	movlb	0	; () banked
  4542  0009FA  19AC               	xorwf	??_main& (0+255),w,b
  4543  0009FC  0BDF               	andlw	-33
  4544  0009FE  19AC               	xorwf	??_main& (0+255),w,b
  4545  000A00  6E81               	movwf	3969,c	;volatile
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;main.c: 550: MotorsSpeed(0,0);
  4549  000A02  0E00               	movlw	0
  4550  000A04  0100               	movlb	0	; () banked
  4551  000A06  6F7C               	movwf	(MotorsSpeed@A+1)& (0+255),b
  4552  000A08  0E00               	movlw	0
  4553  000A0A  6F7B               	movwf	MotorsSpeed@A& (0+255),b
  4554  000A0C  0E00               	movlw	0
  4555  000A0E  0100               	movlb	0	; () banked
  4556  000A10  6F7E               	movwf	(MotorsSpeed@B+1)& (0+255),b
  4557  000A12  0E00               	movlw	0
  4558  000A14  6F7D               	movwf	MotorsSpeed@B& (0+255),b
  4559  000A16  EC53  F026         	call	_MotorsSpeed	;wreg free
  4560                           
  4561                           ;main.c: 552: EnhancedRead();
  4562  000A1A  EC39  F024         	call	_EnhancedRead	;wreg free
  4563                           
  4564                           ;main.c: 553: Line();
  4565  000A1E  EC0C  F011         	call	_Line	;wreg free
  4566                           
  4567                           ;main.c: 554: if (TIME > 500){
  4568  000A22  0100               	movlb	0	; () banked
  4569  000A24  BFB4               	btfsc	(_TIME+3)& (0+255),7,b
  4570  000A26  D0CA               	goto	l6956
  4571  000A28  0100               	movlb	0	; () banked
  4572  000A2A  51B4               	movf	(_TIME+3)& (0+255),w,b
  4573  000A2C  0100               	movlb	0	; () banked
  4574  000A2E  11B3               	iorwf	(_TIME+2)& (0+255),w,b
  4575  000A30  E108               	bnz	u8700
  4576  000A32  0EF5               	movlw	245
  4577  000A34  0100               	movlb	0	; () banked
  4578  000A36  5DB1               	subwf	_TIME& (0+255),w,b
  4579  000A38  0E01               	movlw	1
  4580  000A3A  0100               	movlb	0	; () banked
  4581  000A3C  59B2               	subwfb	(_TIME+1)& (0+255),w,b
  4582  000A3E  A0D8               	btfss	status,0,c
  4583  000A40  D0BD               	goto	l6956
  4584  000A42                     u8700:
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;main.c: 555: TIME = 0;
  4588  000A42  0E00               	movlw	0
  4589  000A44  0100               	movlb	0	; () banked
  4590  000A46  6FB1               	movwf	_TIME& (0+255),b
  4591  000A48  0E00               	movlw	0
  4592  000A4A  6FB2               	movwf	(_TIME+1)& (0+255),b
  4593  000A4C  0E00               	movlw	0
  4594  000A4E  6FB3               	movwf	(_TIME+2)& (0+255),b
  4595  000A50  0E00               	movlw	0
  4596  000A52  6FB4               	movwf	(_TIME+3)& (0+255),b
  4597                           
  4598                           ;main.c: 556: int i,j;
  4599                           ;main.c: 561: for (j = 0;j < 2;j++){
  4600  000A54  0E00               	movlw	0
  4601  000A56  0103               	movlb	3	; () banked
  4602  000A58  6F3D               	movwf	(main@j_1857+1)& (0+255),b
  4603  000A5A  0E00               	movlw	0
  4604  000A5C  6F3C               	movwf	main@j_1857& (0+255),b
  4605                           
  4606                           ; BSR set to: 3
  4607  000A5E  0103               	movlb	3	; () banked
  4608  000A60  BF3D               	btfsc	(main@j_1857+1)& (0+255),7,b
  4609  000A62  D00A               	goto	l6934
  4610  000A64  0103               	movlb	3	; () banked
  4611  000A66  513D               	movf	(main@j_1857+1)& (0+255),w,b
  4612  000A68  E106               	bnz	u8710
  4613  000A6A  0E02               	movlw	2
  4614  000A6C  0103               	movlb	3	; () banked
  4615  000A6E  5D3C               	subwf	main@j_1857& (0+255),w,b
  4616  000A70  B0D8               	btfsc	status,0,c
  4617  000A72  D097               	goto	l6954
  4618  000A74  D001               	goto	l6934
  4619  000A76                     u8710:
  4620                           
  4621                           ; BSR set to: 3
  4622  000A76  D095               	goto	l6954
  4623  000A78                     l6934:
  4624                           
  4625                           ; BSR set to: 3
  4626                           ;main.c: 562: i = sd[j];
  4627  000A78  90D8               	bcf	status,0,c
  4628  000A7A  0103               	movlb	3	; () banked
  4629  000A7C  353C               	rlcf	main@j_1857& (0+255),w,b
  4630  000A7E  6ED9               	movwf	fsr2l,c
  4631  000A80  0103               	movlb	3	; () banked
  4632  000A82  353D               	rlcf	(main@j_1857+1)& (0+255),w,b
  4633  000A84  6EDA               	movwf	fsr2h,c
  4634  000A86  0EE0               	movlw	low _sd
  4635  000A88  26D9               	addwf	fsr2l,f,c
  4636  000A8A  0E01               	movlw	high _sd
  4637  000A8C  22DA               	addwfc	fsr2h,f,c
  4638  000A8E  CFDE F349          	movff	postinc2,main@i_1856
  4639  000A92  CFDD F34A          	movff	postdec2,main@i_1856+1
  4640                           
  4641                           ; BSR set to: 3
  4642                           ;main.c: 563: printf("{'COM':'plot','name':'S%i','value':%i, 'color':(%d,%d,%d)}\n",i,P[
      +                          i],( ( (i*i)*(5*5)*36 )%256),( ( (i*i)*(1*1)*36 )%256),( ( (i*i)*(3*3)*36 )%256));
  4643  000A96  C349  F017         	movff	main@i_1856,___wmul@multiplier
  4644  000A9A  C34A  F018         	movff	main@i_1856+1,___wmul@multiplier+1
  4645  000A9E  C349  F019         	movff	main@i_1856,___wmul@multiplicand
  4646  000AA2  C34A  F01A         	movff	main@i_1856+1,___wmul@multiplicand+1
  4647  000AA6  EC10  F027         	call	___wmul	;wreg free
  4648  000AAA  C017  F30C         	movff	?___wmul,_main$2567
  4649  000AAE  C018  F30D         	movff	?___wmul+1,_main$2567+1
  4650                           
  4651                           ;main.c: 563: printf("{'COM':'plot','name':'S%i','value':%i, 'color':(%d,%d,%d)}\n",i,P[
      +                          i],( ( (i*i)*(5*5)*36 )%256),( ( (i*i)*(1*1)*36 )%256),( ( (i*i)*(3*3)*36 )%256));
  4652  000AB2  C349  F017         	movff	main@i_1856,___wmul@multiplier
  4653  000AB6  C34A  F018         	movff	main@i_1856+1,___wmul@multiplier+1
  4654  000ABA  C349  F019         	movff	main@i_1856,___wmul@multiplicand
  4655  000ABE  C34A  F01A         	movff	main@i_1856+1,___wmul@multiplicand+1
  4656  000AC2  EC10  F027         	call	___wmul	;wreg free
  4657  000AC6  C017  F30E         	movff	?___wmul,_main$2568
  4658  000ACA  C018  F30F         	movff	?___wmul+1,_main$2568+1
  4659                           
  4660                           ;main.c: 563: printf("{'COM':'plot','name':'S%i','value':%i, 'color':(%d,%d,%d)}\n",i,P[
      +                          i],( ( (i*i)*(5*5)*36 )%256),( ( (i*i)*(1*1)*36 )%256),( ( (i*i)*(3*3)*36 )%256));
  4661  000ACE  C349  F017         	movff	main@i_1856,___wmul@multiplier
  4662  000AD2  C34A  F018         	movff	main@i_1856+1,___wmul@multiplier+1
  4663  000AD6  C349  F019         	movff	main@i_1856,___wmul@multiplicand
  4664  000ADA  C34A  F01A         	movff	main@i_1856+1,___wmul@multiplicand+1
  4665  000ADE  EC10  F027         	call	___wmul	;wreg free
  4666  000AE2  C017  F310         	movff	?___wmul,_main$2569
  4667  000AE6  C018  F311         	movff	?___wmul+1,_main$2569+1
  4668                           
  4669                           ;main.c: 563: printf("{'COM':'plot','name':'S%i','value':%i, 'color':(%d,%d,%d)}\n",i,P[
      +                          i],( ( (i*i)*(5*5)*36 )%256),( ( (i*i)*(1*1)*36 )%256),( ( (i*i)*(3*3)*36 )%256));
  4670  000AEA  C30C  F017         	movff	_main$2567,___wmul@multiplier
  4671  000AEE  C30D  F018         	movff	_main$2567+1,___wmul@multiplier+1
  4672  000AF2  0E03               	movlw	3
  4673  000AF4  6E1A               	movwf	___wmul@multiplicand+1,c
  4674  000AF6  0E84               	movlw	132
  4675  000AF8  6E19               	movwf	___wmul@multiplicand,c
  4676  000AFA  EC10  F027         	call	___wmul	;wreg free
  4677  000AFE  5017               	movf	?___wmul,w,c
  4678  000B00  0103               	movlb	3	; () banked
  4679  000B02  6F12               	movwf	_main$2570& (0+255),b
  4680  000B04  6B13               	clrf	(_main$2570+1)& (0+255),b
  4681                           
  4682                           ; BSR set to: 3
  4683                           ;main.c: 563: printf("{'COM':'plot','name':'S%i','value':%i, 'color':(%d,%d,%d)}\n",i,P[
      +                          i],( ( (i*i)*(5*5)*36 )%256),( ( (i*i)*(1*1)*36 )%256),( ( (i*i)*(3*3)*36 )%256));
  4684  000B06  C30E  F017         	movff	_main$2568,___wmul@multiplier
  4685  000B0A  C30F  F018         	movff	_main$2568+1,___wmul@multiplier+1
  4686  000B0E  0E00               	movlw	0
  4687  000B10  6E1A               	movwf	___wmul@multiplicand+1,c
  4688  000B12  0E24               	movlw	36
  4689  000B14  6E19               	movwf	___wmul@multiplicand,c
  4690  000B16  EC10  F027         	call	___wmul	;wreg free
  4691  000B1A  5017               	movf	?___wmul,w,c
  4692  000B1C  0103               	movlb	3	; () banked
  4693  000B1E  6F14               	movwf	_main$2571& (0+255),b
  4694  000B20  6B15               	clrf	(_main$2571+1)& (0+255),b
  4695                           
  4696                           ; BSR set to: 3
  4697                           ;main.c: 563: printf("{'COM':'plot','name':'S%i','value':%i, 'color':(%d,%d,%d)}\n",i,P[
      +                          i],( ( (i*i)*(5*5)*36 )%256),( ( (i*i)*(1*1)*36 )%256),( ( (i*i)*(3*3)*36 )%256));
  4698  000B22  C310  F017         	movff	_main$2569,___wmul@multiplier
  4699  000B26  C311  F018         	movff	_main$2569+1,___wmul@multiplier+1
  4700  000B2A  0E01               	movlw	1
  4701  000B2C  6E1A               	movwf	___wmul@multiplicand+1,c
  4702  000B2E  0E44               	movlw	68
  4703  000B30  6E19               	movwf	___wmul@multiplicand,c
  4704  000B32  EC10  F027         	call	___wmul	;wreg free
  4705  000B36  5017               	movf	?___wmul,w,c
  4706  000B38  0103               	movlb	3	; () banked
  4707  000B3A  6F16               	movwf	_main$2572& (0+255),b
  4708  000B3C  6B17               	clrf	(_main$2572+1)& (0+255),b
  4709                           
  4710                           ; BSR set to: 3
  4711                           ;main.c: 563: printf("{'COM':'plot','name':'S%i','value':%i, 'color':(%d,%d,%d)}\n",i,P[
      +                          i],( ( (i*i)*(5*5)*36 )%256),( ( (i*i)*(1*1)*36 )%256),( ( (i*i)*(3*3)*36 )%256));
  4712  000B3E  0E6F               	movlw	low STR_15
  4713  000B40  0100               	movlb	0	; () banked
  4714  000B42  6F85               	movwf	printf@f& (0+255),b
  4715  000B44  0E7B               	movlw	high STR_15
  4716  000B46  0100               	movlb	0	; () banked
  4717  000B48  6F86               	movwf	(printf@f+1)& (0+255),b
  4718  000B4A  C349  F087         	movff	main@i_1856,?_printf+2
  4719  000B4E  C34A  F088         	movff	main@i_1856+1,?_printf+3
  4720  000B52  90D8               	bcf	status,0,c
  4721  000B54  0103               	movlb	3	; () banked
  4722  000B56  3549               	rlcf	main@i_1856& (0+255),w,b
  4723  000B58  6ED9               	movwf	fsr2l,c
  4724  000B5A  0103               	movlb	3	; () banked
  4725  000B5C  354A               	rlcf	(main@i_1856+1)& (0+255),w,b
  4726  000B5E  6EDA               	movwf	fsr2h,c
  4727  000B60  0E00               	movlw	low _P
  4728  000B62  26D9               	addwf	fsr2l,f,c
  4729  000B64  0E01               	movlw	high _P
  4730  000B66  22DA               	addwfc	fsr2h,f,c
  4731  000B68  CFDE F089          	movff	postinc2,?_printf+4
  4732  000B6C  CFDD F08A          	movff	postdec2,?_printf+5
  4733  000B70  C312  F08B         	movff	_main$2570,?_printf+6
  4734  000B74  C313  F08C         	movff	_main$2570+1,?_printf+7
  4735  000B78  C314  F08D         	movff	_main$2571,?_printf+8
  4736  000B7C  C315  F08E         	movff	_main$2571+1,?_printf+9
  4737  000B80  C316  F08F         	movff	_main$2572,?_printf+10
  4738  000B84  C317  F090         	movff	_main$2572+1,?_printf+11
  4739  000B88  EC8A  F014         	call	_printf	;wreg free
  4740  000B8C  0103               	movlb	3	; () banked
  4741  000B8E  4B3C               	infsnz	main@j_1857& (0+255),f,b
  4742  000B90  2B3D               	incf	(main@j_1857+1)& (0+255),f,b
  4743                           
  4744                           ; BSR set to: 3
  4745  000B92  0103               	movlb	3	; () banked
  4746  000B94  BF3D               	btfsc	(main@j_1857+1)& (0+255),7,b
  4747  000B96  D770               	goto	l6934
  4748  000B98  0103               	movlb	3	; () banked
  4749  000B9A  513D               	movf	(main@j_1857+1)& (0+255),w,b
  4750  000B9C  E102               	bnz	l6954
  4751  000B9E  D765               	goto	L5
  4752  000BA0  D000               	goto	l6954
  4753  000BA2                     l6954:
  4754                           
  4755                           ; BSR set to: 3
  4756                           ;main.c: 564: }
  4757                           ;main.c: 565: printf("{'COM':'plot','name':'line','value':%i,'color':(0,100,200)}\n",lin
      +                          e);
  4758  000BA2  0E32               	movlw	low STR_16
  4759  000BA4  0100               	movlb	0	; () banked
  4760  000BA6  6F85               	movwf	printf@f& (0+255),b
  4761  000BA8  0E7B               	movlw	high STR_16
  4762  000BAA  0100               	movlb	0	; () banked
  4763  000BAC  6F86               	movwf	(printf@f+1)& (0+255),b
  4764  000BAE  C04A  F087         	movff	_line,?_printf+2
  4765  000BB2  C04B  F088         	movff	_line+1,?_printf+3
  4766  000BB6  EC8A  F014         	call	_printf	;wreg free
  4767  000BBA  D000               	goto	l6956
  4768  000BBC                     l6956:
  4769                           
  4770                           ;main.c: 566: }
  4771                           ;main.c: 567: if (PORTDbits.RD5 == 0){
  4772  000BBC  BA83               	btfsc	3971,5,c	;volatile
  4773  000BBE  D006               	goto	l6960
  4774                           
  4775                           ;main.c: 568: status = WAIT;
  4776  000BC0  0E00               	movlw	0
  4777  000BC2  0101               	movlb	1	; () banked
  4778  000BC4  6F99               	movwf	(_status+1)& (0+255),b
  4779  000BC6  0E0A               	movlw	10
  4780  000BC8  6F98               	movwf	_status& (0+255),b
  4781  000BCA  D000               	goto	l6960
  4782  000BCC                     l6960:
  4783                           
  4784                           ;main.c: 569: }
  4785                           ;main.c: 570: if (PORTDbits.RD6 == 0){
  4786  000BCC  BC83               	btfsc	3971,6,c	;volatile
  4787  000BCE  D03F               	goto	l6984
  4788                           
  4789                           ;main.c: 571: MF = 0;
  4790  000BD0  0E00               	movlw	0
  4791  000BD2  6E50               	movwf	_MF,c
  4792                           
  4793                           ;main.c: 572: uc old; CheckMem( &old );
  4794  000BD4  0E30               	movlw	low main@old_1860
  4795  000BD6  6E12               	movwf	CheckMem@data,c
  4796  000BD8  0E03               	movlw	high main@old_1860
  4797  000BDA  6E13               	movwf	CheckMem@data+1,c
  4798  000BDC  ECE1  F025         	call	_CheckMem	;wreg free
  4799                           
  4800                           ;main.c: 573: if (old == 0){
  4801  000BE0  0103               	movlb	3	; () banked
  4802  000BE2  5130               	movf	main@old_1860& (0+255),w,b
  4803  000BE4  0103               	movlb	3	; () banked
  4804  000BE6  A4D8               	btfss	status,2,c
  4805  000BE8  D015               	goto	l6972
  4806                           
  4807                           ; BSR set to: 3
  4808                           ;main.c: 574: RWM = 0;
  4809  000BEA  0E00               	movlw	0
  4810  000BEC  6E51               	movwf	_RWM,c
  4811                           
  4812                           ;main.c: 575: rcount = 0;
  4813  000BEE  0E00               	movlw	0
  4814  000BF0  0100               	movlb	0	; () banked
  4815  000BF2  6FC0               	movwf	(_rcount+1)& (0+255),b
  4816  000BF4  0E00               	movlw	0
  4817  000BF6  6FBF               	movwf	_rcount& (0+255),b
  4818                           
  4819                           ;main.c: 576: status = WAIT_FRONT;
  4820  000BF8  0E00               	movlw	0
  4821  000BFA  0101               	movlb	1	; () banked
  4822  000BFC  6F99               	movwf	(_status+1)& (0+255),b
  4823  000BFE  0E04               	movlw	4
  4824  000C00  6F98               	movwf	_status& (0+255),b
  4825                           
  4826                           ; BSR set to: 1
  4827                           ;main.c: 577: printf("{'COM':'line','value':'Writing RED memory'}\n");
  4828  000C02  0E07               	movlw	low STR_17
  4829  000C04  0100               	movlb	0	; () banked
  4830  000C06  6F85               	movwf	printf@f& (0+255),b
  4831  000C08  0E7D               	movlw	high STR_17
  4832  000C0A  0100               	movlb	0	; () banked
  4833  000C0C  6F86               	movwf	(printf@f+1)& (0+255),b
  4834  000C0E  EC8A  F014         	call	_printf	;wreg free
  4835                           
  4836                           ;main.c: 578: }else{
  4837  000C12  D01D               	goto	l6984
  4838  000C14                     l6972:
  4839                           
  4840                           ;main.c: 579: printf("{'COM':'line','value':'Selecting RED memory'}\n");
  4841  000C14  0EA9               	movlw	low STR_18
  4842  000C16  0100               	movlb	0	; () banked
  4843  000C18  6F85               	movwf	printf@f& (0+255),b
  4844  000C1A  0E7C               	movlw	high STR_18
  4845  000C1C  0100               	movlb	0	; () banked
  4846  000C1E  6F86               	movwf	(printf@f+1)& (0+255),b
  4847  000C20  EC8A  F014         	call	_printf	;wreg free
  4848                           
  4849                           ;main.c: 580: MF = 0; uc old; CheckMem(&old);
  4850  000C24  0E00               	movlw	0
  4851  000C26  6E50               	movwf	_MF,c
  4852  000C28  0E28               	movlw	low main@old_1863
  4853  000C2A  6E12               	movwf	CheckMem@data,c
  4854  000C2C  0E03               	movlw	high main@old_1863
  4855  000C2E  6E13               	movwf	CheckMem@data+1,c
  4856  000C30  ECE1  F025         	call	_CheckMem	;wreg free
  4857                           
  4858                           ;main.c: 581: Load();
  4859  000C34  EC31  F025         	call	_Load	;wreg free
  4860                           
  4861                           ;main.c: 582: printf("{'COM':'line','value':'RED memory:'}\n");
  4862  000C38  0EFD               	movlw	low STR_19
  4863  000C3A  0100               	movlb	0	; () banked
  4864  000C3C  6F85               	movwf	printf@f& (0+255),b
  4865  000C3E  0E7E               	movlw	high STR_19
  4866  000C40  0100               	movlb	0	; () banked
  4867  000C42  6F86               	movwf	(printf@f+1)& (0+255),b
  4868  000C44  EC8A  F014         	call	_printf	;wreg free
  4869                           
  4870                           ;main.c: 583: ShowMem();
  4871  000C48  EC8E  F023         	call	_ShowMem	;wreg free
  4872  000C4C  D000               	goto	l6984
  4873  000C4E                     l6984:
  4874                           
  4875                           ;main.c: 584: }
  4876                           ;main.c: 586: }
  4877                           ;main.c: 587: if (PORTDbits.RD4 == 0){
  4878  000C4E  B883               	btfsc	3971,4,c	;volatile
  4879  000C50  EFCF  F010         	goto	l7296
  4880                           
  4881                           ;main.c: 588: MF = 1;
  4882  000C54  0E01               	movlw	1
  4883  000C56  6E50               	movwf	_MF,c
  4884                           
  4885                           ;main.c: 589: uc old; CheckMem( &old );
  4886  000C58  0E31               	movlw	low main@old_1865
  4887  000C5A  6E12               	movwf	CheckMem@data,c
  4888  000C5C  0E03               	movlw	high main@old_1865
  4889  000C5E  6E13               	movwf	CheckMem@data+1,c
  4890  000C60  ECE1  F025         	call	_CheckMem	;wreg free
  4891                           
  4892                           ;main.c: 590: if (old == 0){
  4893  000C64  0103               	movlb	3	; () banked
  4894  000C66  5131               	movf	main@old_1865& (0+255),w,b
  4895  000C68  0103               	movlb	3	; () banked
  4896  000C6A  A4D8               	btfss	status,2,c
  4897  000C6C  D016               	goto	l6996
  4898                           
  4899                           ; BSR set to: 3
  4900                           ;main.c: 591: RWM = 0;
  4901  000C6E  0E00               	movlw	0
  4902  000C70  6E51               	movwf	_RWM,c
  4903                           
  4904                           ;main.c: 592: rcount = 0;
  4905  000C72  0E00               	movlw	0
  4906  000C74  0100               	movlb	0	; () banked
  4907  000C76  6FC0               	movwf	(_rcount+1)& (0+255),b
  4908  000C78  0E00               	movlw	0
  4909  000C7A  6FBF               	movwf	_rcount& (0+255),b
  4910                           
  4911                           ;main.c: 593: status = WAIT_FRONT;
  4912  000C7C  0E00               	movlw	0
  4913  000C7E  0101               	movlb	1	; () banked
  4914  000C80  6F99               	movwf	(_status+1)& (0+255),b
  4915  000C82  0E04               	movlw	4
  4916  000C84  6F98               	movwf	_status& (0+255),b
  4917                           
  4918                           ; BSR set to: 1
  4919                           ;main.c: 594: printf("{'COM':'line','value':'Writing GREEN memory'}\n");
  4920  000C86  0ED8               	movlw	low STR_20
  4921  000C88  0100               	movlb	0	; () banked
  4922  000C8A  6F85               	movwf	printf@f& (0+255),b
  4923  000C8C  0E7C               	movlw	high STR_20
  4924  000C8E  0100               	movlb	0	; () banked
  4925  000C90  6F86               	movwf	(printf@f+1)& (0+255),b
  4926  000C92  EC8A  F014         	call	_printf	;wreg free
  4927                           
  4928                           ;main.c: 595: }else{
  4929  000C96  EFCF  F010         	goto	l7296
  4930  000C9A                     l6996:
  4931                           
  4932                           ;main.c: 596: printf("{'COM':'line','value':'Selecting GREEN memory'}\n");
  4933  000C9A  0E19               	movlw	low STR_21
  4934  000C9C  0100               	movlb	0	; () banked
  4935  000C9E  6F85               	movwf	printf@f& (0+255),b
  4936  000CA0  0E7C               	movlw	high STR_21
  4937  000CA2  0100               	movlb	0	; () banked
  4938  000CA4  6F86               	movwf	(printf@f+1)& (0+255),b
  4939  000CA6  EC8A  F014         	call	_printf	;wreg free
  4940                           
  4941                           ;main.c: 597: uc old; CheckMem(&old);
  4942  000CAA  0E29               	movlw	low main@old_1868
  4943  000CAC  6E12               	movwf	CheckMem@data,c
  4944  000CAE  0E03               	movlw	high main@old_1868
  4945  000CB0  6E13               	movwf	CheckMem@data+1,c
  4946  000CB2  ECE1  F025         	call	_CheckMem	;wreg free
  4947                           
  4948                           ;main.c: 598: Load();
  4949  000CB6  EC31  F025         	call	_Load	;wreg free
  4950                           
  4951                           ;main.c: 599: printf("{'COM':'line','value':'GREEN memory:'}\n");
  4952  000CBA  0E5F               	movlw	low STR_22
  4953  000CBC  0100               	movlb	0	; () banked
  4954  000CBE  6F85               	movwf	printf@f& (0+255),b
  4955  000CC0  0E7E               	movlw	high STR_22
  4956  000CC2  0100               	movlb	0	; () banked
  4957  000CC4  6F86               	movwf	(printf@f+1)& (0+255),b
  4958  000CC6  EC8A  F014         	call	_printf	;wreg free
  4959                           
  4960                           ;main.c: 600: ShowMem();
  4961  000CCA  EC8E  F023         	call	_ShowMem	;wreg free
  4962                           
  4963                           ;main.c: 601: }
  4964                           ;main.c: 603: }
  4965                           ;main.c: 616: break;
  4966  000CCE  EFCF  F010         	goto	l7296
  4967  000CD2                     l512:
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;main.c: 618: PORTBbits.RB0 = 1;
  4971  000CD2  8081               	bsf	3969,0,c	;volatile
  4972                           
  4973                           ;main.c: 619: PORTAbits.RA4 = 1;
  4974  000CD4  8880               	bsf	3968,4,c	;volatile
  4975                           
  4976                           ;main.c: 620: PORTBbits.RB5 = 1;
  4977  000CD6  8A81               	bsf	3969,5,c	;volatile
  4978                           
  4979                           ;main.c: 621: if (PORTDbits.RD5 == 1){
  4980  000CD8  AA83               	btfss	3971,5,c	;volatile
  4981  000CDA  D052               	goto	l7006
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;main.c: 622: status = NEW_AVANZAR;
  4985  000CDC  0E00               	movlw	0
  4986  000CDE  0101               	movlb	1	; () banked
  4987  000CE0  6F99               	movwf	(_status+1)& (0+255),b
  4988  000CE2  0E02               	movlw	2
  4989  000CE4  6F98               	movwf	_status& (0+255),b
  4990                           
  4991                           ;main.c: 623: fns = 1;
  4992  000CE6  0E00               	movlw	0
  4993  000CE8  0100               	movlb	0	; () banked
  4994  000CEA  6FBA               	movwf	(_fns+1)& (0+255),b
  4995  000CEC  0E01               	movlw	1
  4996  000CEE  6FB9               	movwf	_fns& (0+255),b
  4997                           
  4998                           ;main.c: 624: TIME = 0;
  4999  000CF0  0E00               	movlw	0
  5000  000CF2  0100               	movlb	0	; () banked
  5001  000CF4  6FB1               	movwf	_TIME& (0+255),b
  5002  000CF6  0E00               	movlw	0
  5003  000CF8  6FB2               	movwf	(_TIME+1)& (0+255),b
  5004  000CFA  0E00               	movlw	0
  5005  000CFC  6FB3               	movwf	(_TIME+2)& (0+255),b
  5006  000CFE  0E00               	movlw	0
  5007  000D00  6FB4               	movwf	(_TIME+3)& (0+255),b
  5008                           
  5009                           ;main.c: 625: TIME2 = 0;
  5010  000D02  0E00               	movlw	0
  5011  000D04  0101               	movlb	1	; () banked
  5012  000D06  6F60               	movwf	_TIME2& (0+255),b
  5013  000D08  0E00               	movlw	0
  5014  000D0A  6F61               	movwf	(_TIME2+1)& (0+255),b
  5015  000D0C  0E00               	movlw	0
  5016  000D0E  6F62               	movwf	(_TIME2+2)& (0+255),b
  5017  000D10  0E00               	movlw	0
  5018  000D12  6F63               	movwf	(_TIME2+3)& (0+255),b
  5019                           
  5020                           ;main.c: 626: TIME3 = 0;
  5021  000D14  0E00               	movlw	0
  5022  000D16  0101               	movlb	1	; () banked
  5023  000D18  6F64               	movwf	_TIME3& (0+255),b
  5024  000D1A  0E00               	movlw	0
  5025  000D1C  6F65               	movwf	(_TIME3+1)& (0+255),b
  5026  000D1E  0E00               	movlw	0
  5027  000D20  6F66               	movwf	(_TIME3+2)& (0+255),b
  5028  000D22  0E00               	movlw	0
  5029  000D24  6F67               	movwf	(_TIME3+3)& (0+255),b
  5030                           
  5031                           ;main.c: 627: TIME4 = 0;
  5032  000D26  0E00               	movlw	0
  5033  000D28  0100               	movlb	0	; () banked
  5034  000D2A  6FB5               	movwf	_TIME4& (0+255),b
  5035  000D2C  0E00               	movlw	0
  5036  000D2E  6FB6               	movwf	(_TIME4+1)& (0+255),b
  5037  000D30  0E00               	movlw	0
  5038  000D32  6FB7               	movwf	(_TIME4+2)& (0+255),b
  5039  000D34  0E00               	movlw	0
  5040  000D36  6FB8               	movwf	(_TIME4+3)& (0+255),b
  5041                           
  5042                           ;main.c: 628: TIME5 = 0;
  5043  000D38  0E00               	movlw	0
  5044  000D3A  0101               	movlb	1	; () banked
  5045  000D3C  6F68               	movwf	_TIME5& (0+255),b
  5046  000D3E  0E00               	movlw	0
  5047  000D40  6F69               	movwf	(_TIME5+1)& (0+255),b
  5048  000D42  0E00               	movlw	0
  5049  000D44  6F6A               	movwf	(_TIME5+2)& (0+255),b
  5050  000D46  0E00               	movlw	0
  5051  000D48  6F6B               	movwf	(_TIME5+3)& (0+255),b
  5052                           
  5053                           ;main.c: 629: TIME6 = 0;
  5054  000D4A  0E00               	movlw	0
  5055  000D4C  0101               	movlb	1	; () banked
  5056  000D4E  6F6C               	movwf	_TIME6& (0+255),b
  5057  000D50  0E00               	movlw	0
  5058  000D52  6F6D               	movwf	(_TIME6+1)& (0+255),b
  5059  000D54  0E00               	movlw	0
  5060  000D56  6F6E               	movwf	(_TIME6+2)& (0+255),b
  5061  000D58  0E00               	movlw	0
  5062  000D5A  6F6F               	movwf	(_TIME6+3)& (0+255),b
  5063                           
  5064                           ;main.c: 630: rcount = 0;
  5065  000D5C  0E00               	movlw	0
  5066  000D5E  0100               	movlb	0	; () banked
  5067  000D60  6FC0               	movwf	(_rcount+1)& (0+255),b
  5068  000D62  0E00               	movlw	0
  5069  000D64  6FBF               	movwf	_rcount& (0+255),b
  5070                           
  5071                           ;main.c: 631: flag_line = 0;
  5072  000D66  0E00               	movlw	0
  5073  000D68  6E47               	movwf	_flag_line+1,c
  5074  000D6A  0E00               	movlw	0
  5075  000D6C  6E46               	movwf	_flag_line,c
  5076                           
  5077                           ; BSR set to: 0
  5078                           ;main.c: 633: printf("{'COM':'Release'}\n");
  5079  000D6E  0EDB               	movlw	low STR_23
  5080  000D70  0100               	movlb	0	; () banked
  5081  000D72  6F85               	movwf	printf@f& (0+255),b
  5082  000D74  0E7F               	movlw	high STR_23
  5083  000D76  0100               	movlb	0	; () banked
  5084  000D78  6F86               	movwf	(printf@f+1)& (0+255),b
  5085  000D7A  EC8A  F014         	call	_printf	;wreg free
  5086  000D7E  D000               	goto	l7006
  5087  000D80                     l7006:
  5088                           
  5089                           ;main.c: 634: }
  5090                           ;main.c: 635: if (PORTDbits.RD4 == 0){
  5091  000D80  B883               	btfsc	3971,4,c	;volatile
  5092  000D82  EFCF  F010         	goto	l7296
  5093                           
  5094                           ;main.c: 636: EreaseAll();
  5095  000D86  EC69  F027         	call	_EreaseAll	;wreg free
  5096                           
  5097                           ;main.c: 637: printf("{'COM':'line','value':'Memory erased'}\n");
  5098  000D8A  0E87               	movlw	low STR_24
  5099  000D8C  0100               	movlb	0	; () banked
  5100  000D8E  6F85               	movwf	printf@f& (0+255),b
  5101  000D90  0E7E               	movlw	high STR_24
  5102  000D92  0100               	movlb	0	; () banked
  5103  000D94  6F86               	movwf	(printf@f+1)& (0+255),b
  5104  000D96  EC8A  F014         	call	_printf	;wreg free
  5105                           
  5106                           ;main.c: 638: status = GREEN_RELEASE_INITIAL;
  5107  000D9A  0E00               	movlw	0
  5108  000D9C  0101               	movlb	1	; () banked
  5109  000D9E  6F99               	movwf	(_status+1)& (0+255),b
  5110  000DA0  0E01               	movlw	1
  5111  000DA2  EFF2  F00E         	goto	L9
  5112                           
  5113                           ; BSR set to: 1
  5114                           ;main.c: 639: }
  5115                           ;main.c: 640: break;
  5116  000DA6  EFCF  F010         	goto	l7296
  5117  000DAA                     l7014:
  5118                           
  5119                           ;main.c: 642: PORTBbits.RB0 = MF == 1;
  5120  000DAA  0450               	decf	_MF,w,c
  5121  000DAC  A4D8               	btfss	status,2,c
  5122  000DAE  D004               	goto	u8800
  5123  000DB0  0100               	movlb	0	; () banked
  5124  000DB2  6BAC               	clrf	??_main& (0+255),b
  5125  000DB4  2BAC               	incf	??_main& (0+255),f,b
  5126  000DB6  D002               	goto	u8818
  5127  000DB8                     u8800:
  5128  000DB8  0100               	movlb	0	; () banked
  5129  000DBA  6BAC               	clrf	??_main& (0+255),b
  5130  000DBC                     u8818:
  5131  000DBC  5081               	movf	3969,w,c	;volatile
  5132  000DBE  0100               	movlb	0	; () banked
  5133  000DC0  19AC               	xorwf	??_main& (0+255),w,b
  5134  000DC2  0BFE               	andlw	-2
  5135  000DC4  19AC               	xorwf	??_main& (0+255),w,b
  5136  000DC6  6E81               	movwf	3969,c	;volatile
  5137                           
  5138                           ; BSR set to: 0
  5139                           ;main.c: 643: PORTAbits.RA4 = TIME % 6000 > 3000;
  5140  000DC8  C0B1  F00F         	movff	_TIME,___almod@dividend
  5141  000DCC  C0B2  F010         	movff	_TIME+1,___almod@dividend+1
  5142  000DD0  C0B3  F011         	movff	_TIME+2,___almod@dividend+2
  5143  000DD4  C0B4  F012         	movff	_TIME+3,___almod@dividend+3
  5144  000DD8  0E70               	movlw	112
  5145  000DDA  6E13               	movwf	___almod@divisor,c
  5146  000DDC  0E17               	movlw	23
  5147  000DDE  6E14               	movwf	___almod@divisor+1,c
  5148  000DE0  0E00               	movlw	0
  5149  000DE2  6E15               	movwf	___almod@divisor+2,c
  5150  000DE4  0E00               	movlw	0
  5151  000DE6  6E16               	movwf	___almod@divisor+3,c
  5152  000DE8  EC69  F021         	call	___almod	;wreg free
  5153  000DEC  BE12               	btfsc	?___almod+3,7,c
  5154  000DEE  D00D               	goto	u8820
  5155  000DF0  5012               	movf	?___almod+3,w,c
  5156  000DF2  1011               	iorwf	?___almod+2,w,c
  5157  000DF4  E106               	bnz	u8821
  5158  000DF6  0EB9               	movlw	185
  5159  000DF8  5C0F               	subwf	?___almod,w,c
  5160  000DFA  0E0B               	movlw	11
  5161  000DFC  5810               	subwfb	?___almod+1,w,c
  5162  000DFE  A0D8               	btfss	status,0,c
  5163  000E00  D004               	goto	u8820
  5164  000E02                     u8821:
  5165  000E02  0100               	movlb	0	; () banked
  5166  000E04  6BAC               	clrf	??_main& (0+255),b
  5167  000E06  2BAC               	incf	??_main& (0+255),f,b
  5168  000E08  D002               	goto	u8838
  5169  000E0A                     u8820:
  5170  000E0A  0100               	movlb	0	; () banked
  5171  000E0C  6BAC               	clrf	??_main& (0+255),b
  5172  000E0E                     u8838:
  5173  000E0E  0100               	movlb	0	; () banked
  5174  000E10  3BAC               	swapf	??_main& (0+255),f,b
  5175  000E12  5080               	movf	3968,w,c	;volatile
  5176  000E14  0100               	movlb	0	; () banked
  5177  000E16  19AC               	xorwf	??_main& (0+255),w,b
  5178  000E18  0BEF               	andlw	-17
  5179  000E1A  19AC               	xorwf	??_main& (0+255),w,b
  5180  000E1C  6E80               	movwf	3968,c	;volatile
  5181                           
  5182                           ; BSR set to: 0
  5183                           ;main.c: 644: PORTBbits.RB5 = MF == 0;
  5184  000E1E  5050               	movf	_MF,w,c
  5185  000E20  A4D8               	btfss	status,2,c
  5186  000E22  D004               	goto	u8840
  5187  000E24  0100               	movlb	0	; () banked
  5188  000E26  6BAC               	clrf	??_main& (0+255),b
  5189  000E28  2BAC               	incf	??_main& (0+255),f,b
  5190  000E2A  D002               	goto	u8858
  5191  000E2C                     u8840:
  5192  000E2C  0100               	movlb	0	; () banked
  5193  000E2E  6BAC               	clrf	??_main& (0+255),b
  5194  000E30                     u8858:
  5195  000E30  0100               	movlb	0	; () banked
  5196  000E32  3BAC               	swapf	??_main& (0+255),f,b
  5197  000E34  47AC               	rlncf	??_main& (0+255),f,b
  5198  000E36  5081               	movf	3969,w,c	;volatile
  5199  000E38  0100               	movlb	0	; () banked
  5200  000E3A  19AC               	xorwf	??_main& (0+255),w,b
  5201  000E3C  0BDF               	andlw	-33
  5202  000E3E  19AC               	xorwf	??_main& (0+255),w,b
  5203  000E40  6E81               	movwf	3969,c	;volatile
  5204                           
  5205                           ;main.c: 645: MotorsSpeed(0,0);
  5206  000E42  0E00               	movlw	0
  5207  000E44  0100               	movlb	0	; () banked
  5208  000E46  6F7C               	movwf	(MotorsSpeed@A+1)& (0+255),b
  5209  000E48  0E00               	movlw	0
  5210  000E4A  6F7B               	movwf	MotorsSpeed@A& (0+255),b
  5211  000E4C  0E00               	movlw	0
  5212  000E4E  0100               	movlb	0	; () banked
  5213  000E50  6F7E               	movwf	(MotorsSpeed@B+1)& (0+255),b
  5214  000E52  0E00               	movlw	0
  5215  000E54  6F7D               	movwf	MotorsSpeed@B& (0+255),b
  5216  000E56  EC53  F026         	call	_MotorsSpeed	;wreg free
  5217                           
  5218                           ;main.c: 646: if (PORTDbits.RD5 == 0){
  5219  000E5A  BA83               	btfsc	3971,5,c	;volatile
  5220  000E5C  D029               	goto	l7032
  5221                           
  5222                           ;main.c: 647: printf("{'COM':'line','value':'Writing rect %i'}\n",rcount);
  5223  000E5E  0EE3               	movlw	low STR_25
  5224  000E60  0100               	movlb	0	; () banked
  5225  000E62  6F85               	movwf	printf@f& (0+255),b
  5226  000E64  0E7D               	movlw	high STR_25
  5227  000E66  0100               	movlb	0	; () banked
  5228  000E68  6F86               	movwf	(printf@f+1)& (0+255),b
  5229  000E6A  C0BF  F087         	movff	_rcount,?_printf+2
  5230  000E6E  C0C0  F088         	movff	_rcount+1,?_printf+3
  5231  000E72  EC8A  F014         	call	_printf	;wreg free
  5232                           
  5233                           ;main.c: 648: status = RECT_FRONT;
  5234  000E76  0E00               	movlw	0
  5235  000E78  0101               	movlb	1	; () banked
  5236  000E7A  6F99               	movwf	(_status+1)& (0+255),b
  5237  000E7C  0E05               	movlw	5
  5238  000E7E  6F98               	movwf	_status& (0+255),b
  5239                           
  5240                           ; BSR set to: 1
  5241                           ;main.c: 649: TIME4 = 0;
  5242  000E80  0E00               	movlw	0
  5243  000E82  0100               	movlb	0	; () banked
  5244  000E84  6FB5               	movwf	_TIME4& (0+255),b
  5245  000E86  0E00               	movlw	0
  5246  000E88  6FB6               	movwf	(_TIME4+1)& (0+255),b
  5247  000E8A  0E00               	movlw	0
  5248  000E8C  6FB7               	movwf	(_TIME4+2)& (0+255),b
  5249  000E8E  0E00               	movlw	0
  5250  000E90  6FB8               	movwf	(_TIME4+3)& (0+255),b
  5251                           
  5252                           ; BSR set to: 0
  5253                           ;main.c: 650: TIME3 = 0;
  5254  000E92  0E00               	movlw	0
  5255  000E94  0101               	movlb	1	; () banked
  5256  000E96  6F64               	movwf	_TIME3& (0+255),b
  5257  000E98  0E00               	movlw	0
  5258  000E9A  6F65               	movwf	(_TIME3+1)& (0+255),b
  5259  000E9C  0E00               	movlw	0
  5260  000E9E  6F66               	movwf	(_TIME3+2)& (0+255),b
  5261  000EA0  0E00               	movlw	0
  5262  000EA2  6F67               	movwf	(_TIME3+3)& (0+255),b
  5263                           
  5264                           ; BSR set to: 1
  5265                           ;main.c: 651: fns = 1;
  5266  000EA4  0E00               	movlw	0
  5267  000EA6  0100               	movlb	0	; () banked
  5268  000EA8  6FBA               	movwf	(_fns+1)& (0+255),b
  5269  000EAA  0E01               	movlw	1
  5270  000EAC  6FB9               	movwf	_fns& (0+255),b
  5271  000EAE  D000               	goto	l7032
  5272  000EB0                     l7032:
  5273                           
  5274                           ;main.c: 652: }
  5275                           ;main.c: 653: if (PORTDbits.RD6 == 0 && rcount > 0){
  5276  000EB0  BC83               	btfsc	3971,6,c	;volatile
  5277  000EB2  EFCF  F010         	goto	l7296
  5278  000EB6  0100               	movlb	0	; () banked
  5279  000EB8  BFC0               	btfsc	(_rcount+1)& (0+255),7,b
  5280  000EBA  EFCF  F010         	goto	l7296
  5281  000EBE  0100               	movlb	0	; () banked
  5282  000EC0  51C0               	movf	(_rcount+1)& (0+255),w,b
  5283  000EC2  E105               	bnz	u8880
  5284  000EC4  0100               	movlb	0	; () banked
  5285  000EC6  05BF               	decf	_rcount& (0+255),w,b
  5286  000EC8  A0D8               	btfss	status,0,c
  5287  000ECA  EFCF  F010         	goto	l7296
  5288  000ECE                     u8880:
  5289                           
  5290                           ; BSR set to: 0
  5291                           ;main.c: 654: printf("{'COM':'line','value':'Save data'}\n");
  5292  000ECE  0E93               	movlw	low STR_26
  5293  000ED0  0100               	movlb	0	; () banked
  5294  000ED2  6F85               	movwf	printf@f& (0+255),b
  5295  000ED4  0E7F               	movlw	high STR_26
  5296  000ED6  0100               	movlb	0	; () banked
  5297  000ED8  6F86               	movwf	(printf@f+1)& (0+255),b
  5298  000EDA  EC8A  F014         	call	_printf	;wreg free
  5299                           
  5300                           ;main.c: 655: TOTAL = rcount;
  5301  000EDE  C0BF  F0C1         	movff	_rcount,_TOTAL
  5302  000EE2  C0C0  F0C2         	movff	_rcount+1,_TOTAL+1
  5303                           
  5304                           ;main.c: 656: Save();
  5305  000EE6  ECBD  F022         	call	_Save	;wreg free
  5306                           
  5307                           ;main.c: 657: status = RELEASE_INIT;
  5308  000EEA  0E00               	movlw	0
  5309  000EEC  0101               	movlb	1	; () banked
  5310  000EEE  6F99               	movwf	(_status+1)& (0+255),b
  5311  000EF0  0E03               	movlw	3
  5312  000EF2  EFF2  F00E         	goto	L9
  5313                           
  5314                           ; BSR set to: 1
  5315                           ;main.c: 658: }
  5316                           ;main.c: 659: break;
  5317  000EF6  EFCF  F010         	goto	l7296
  5318  000EFA                     l518:
  5319                           
  5320                           ; BSR set to: 0
  5321                           ;main.c: 661: PORTBbits.RB0 = 1;
  5322  000EFA  8081               	bsf	3969,0,c	;volatile
  5323                           
  5324                           ;main.c: 662: PORTAbits.RA4 = 1;
  5325  000EFC  8880               	bsf	3968,4,c	;volatile
  5326                           
  5327                           ;main.c: 663: PORTBbits.RB5 = 1;
  5328  000EFE  8A81               	bsf	3969,5,c	;volatile
  5329                           
  5330                           ;main.c: 664: if (PORTDbits.RD6 == 1){
  5331  000F00  AC83               	btfss	3971,6,c	;volatile
  5332  000F02  EFCF  F010         	goto	l7296
  5333  000F06  EFEE  F00E         	goto	l7216
  5334                           
  5335                           ; BSR set to: 1
  5336                           ;main.c: 666: }
  5337                           ;main.c: 667: break;
  5338                           
  5339                           ; BSR set to: 0
  5340                           ;main.c: 665: status = INITIAL;
  5341  000F0A  EFCF  F010         	goto	l7296
  5342  000F0E                     l7044:
  5343                           
  5344                           ;main.c: 669: if (fns){
  5345  000F0E  0100               	movlb	0	; () banked
  5346  000F10  51B9               	movf	_fns& (0+255),w,b
  5347  000F12  0100               	movlb	0	; () banked
  5348  000F14  11BA               	iorwf	(_fns+1)& (0+255),w,b
  5349  000F16  B4D8               	btfsc	status,2,c
  5350  000F18  D00A               	goto	l7048
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;main.c: 670: fns = 0;
  5354  000F1A  0E00               	movlw	0
  5355  000F1C  0100               	movlb	0	; () banked
  5356  000F1E  6FBA               	movwf	(_fns+1)& (0+255),b
  5357  000F20  0E00               	movlw	0
  5358  000F22  6FB9               	movwf	_fns& (0+255),b
  5359                           
  5360                           ;main.c: 671: f = 0;
  5361  000F24  0E00               	movlw	0
  5362  000F26  6E45               	movwf	_f+1,c
  5363  000F28  0E00               	movlw	0
  5364  000F2A  6E44               	movwf	_f,c
  5365  000F2C  D000               	goto	l7048
  5366  000F2E                     l7048:
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;main.c: 672: }
  5370                           ;main.c: 673: PORTBbits.RB5 = MF == 1;
  5371  000F2E  0450               	decf	_MF,w,c
  5372  000F30  A4D8               	btfss	status,2,c
  5373  000F32  D004               	goto	u8910
  5374  000F34  0100               	movlb	0	; () banked
  5375  000F36  6BAC               	clrf	??_main& (0+255),b
  5376  000F38  2BAC               	incf	??_main& (0+255),f,b
  5377  000F3A  D002               	goto	u8928
  5378  000F3C                     u8910:
  5379  000F3C  0100               	movlb	0	; () banked
  5380  000F3E  6BAC               	clrf	??_main& (0+255),b
  5381  000F40                     u8928:
  5382  000F40  0100               	movlb	0	; () banked
  5383  000F42  3BAC               	swapf	??_main& (0+255),f,b
  5384  000F44  47AC               	rlncf	??_main& (0+255),f,b
  5385  000F46  5081               	movf	3969,w,c	;volatile
  5386  000F48  0100               	movlb	0	; () banked
  5387  000F4A  19AC               	xorwf	??_main& (0+255),w,b
  5388  000F4C  0BDF               	andlw	-33
  5389  000F4E  19AC               	xorwf	??_main& (0+255),w,b
  5390  000F50  6E81               	movwf	3969,c	;volatile
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;main.c: 674: PORTAbits.RA4 = f != 0;
  5394  000F52  5044               	movf	_f,w,c
  5395  000F54  1045               	iorwf	_f+1,w,c
  5396  000F56  B4D8               	btfsc	status,2,c
  5397  000F58  D004               	goto	u8930
  5398  000F5A  0100               	movlb	0	; () banked
  5399  000F5C  6BAC               	clrf	??_main& (0+255),b
  5400  000F5E  2BAC               	incf	??_main& (0+255),f,b
  5401  000F60  D002               	goto	u8948
  5402  000F62                     u8930:
  5403  000F62  0100               	movlb	0	; () banked
  5404  000F64  6BAC               	clrf	??_main& (0+255),b
  5405  000F66                     u8948:
  5406  000F66  0100               	movlb	0	; () banked
  5407  000F68  3BAC               	swapf	??_main& (0+255),f,b
  5408  000F6A  5080               	movf	3968,w,c	;volatile
  5409  000F6C  0100               	movlb	0	; () banked
  5410  000F6E  19AC               	xorwf	??_main& (0+255),w,b
  5411  000F70  0BEF               	andlw	-17
  5412  000F72  19AC               	xorwf	??_main& (0+255),w,b
  5413  000F74  6E80               	movwf	3968,c	;volatile
  5414                           
  5415                           ; BSR set to: 0
  5416                           ;main.c: 675: PORTBbits.RB0 = MF == 0;
  5417  000F76  5050               	movf	_MF,w,c
  5418  000F78  A4D8               	btfss	status,2,c
  5419  000F7A  D004               	goto	u8950
  5420  000F7C  0100               	movlb	0	; () banked
  5421  000F7E  6BAC               	clrf	??_main& (0+255),b
  5422  000F80  2BAC               	incf	??_main& (0+255),f,b
  5423  000F82  D002               	goto	u8968
  5424  000F84                     u8950:
  5425  000F84  0100               	movlb	0	; () banked
  5426  000F86  6BAC               	clrf	??_main& (0+255),b
  5427  000F88                     u8968:
  5428  000F88  5081               	movf	3969,w,c	;volatile
  5429  000F8A  0100               	movlb	0	; () banked
  5430  000F8C  19AC               	xorwf	??_main& (0+255),w,b
  5431  000F8E  0BFE               	andlw	-2
  5432  000F90  19AC               	xorwf	??_main& (0+255),w,b
  5433  000F92  6E81               	movwf	3969,c	;volatile
  5434                           
  5435                           ; BSR set to: 0
  5436                           ;main.c: 677: if (TIME3 > 5){
  5437  000F94  0101               	movlb	1	; () banked
  5438  000F96  BF67               	btfsc	(_TIME3+3)& (0+255),7,b
  5439  000F98  EFCF  F010         	goto	l7296
  5440  000F9C  0101               	movlb	1	; () banked
  5441  000F9E  5167               	movf	(_TIME3+3)& (0+255),w,b
  5442  000FA0  0101               	movlb	1	; () banked
  5443  000FA2  1166               	iorwf	(_TIME3+2)& (0+255),w,b
  5444  000FA4  0101               	movlb	1	; () banked
  5445  000FA6  1165               	iorwf	(_TIME3+1)& (0+255),w,b
  5446  000FA8  E106               	bnz	u8970
  5447  000FAA  0E06               	movlw	6
  5448  000FAC  0101               	movlb	1	; () banked
  5449  000FAE  5D64               	subwf	_TIME3& (0+255),w,b
  5450  000FB0  A0D8               	btfss	status,0,c
  5451  000FB2  EFCF  F010         	goto	l7296
  5452  000FB6                     u8970:
  5453                           
  5454                           ; BSR set to: 1
  5455                           ;main.c: 678: EnhancedRead();
  5456  000FB6  EC39  F024         	call	_EnhancedRead	;wreg free
  5457                           
  5458                           ;main.c: 679: Line();
  5459  000FBA  EC0C  F011         	call	_Line	;wreg free
  5460                           
  5461                           ;main.c: 680: TIME3 = 0;
  5462  000FBE  0E00               	movlw	0
  5463  000FC0  0101               	movlb	1	; () banked
  5464  000FC2  6F64               	movwf	_TIME3& (0+255),b
  5465  000FC4  0E00               	movlw	0
  5466  000FC6  6F65               	movwf	(_TIME3+1)& (0+255),b
  5467  000FC8  0E00               	movlw	0
  5468  000FCA  6F66               	movwf	(_TIME3+2)& (0+255),b
  5469  000FCC  0E00               	movlw	0
  5470  000FCE  6F67               	movwf	(_TIME3+3)& (0+255),b
  5471                           
  5472                           ; BSR set to: 1
  5473                           ;main.c: 681: AdvanceLow();
  5474  000FD0  EC4D  F01C         	call	_AdvanceLow	;wreg free
  5475                           
  5476                           ;main.c: 683: if (f == 0 && ((P[sd[1]] > 500 && ((line>0?line:-(line))<50)) || (P[sd[0]]
      +                           > 500 && ((line>0?line:-(line))<50)))){
  5477  000FD4  5044               	movf	_f,w,c
  5478  000FD6  1045               	iorwf	_f+1,w,c
  5479  000FD8  A4D8               	btfss	status,2,c
  5480  000FDA  D08B               	goto	l7084
  5481  000FDC  90D8               	bcf	status,0,c
  5482  000FDE  0101               	movlb	1	; () banked
  5483  000FE0  35E2               	rlcf	(_sd+2)& (0+255),w,b
  5484  000FE2  6ED9               	movwf	fsr2l,c
  5485  000FE4  0101               	movlb	1	; () banked
  5486  000FE6  35E3               	rlcf	(_sd+3)& (0+255),w,b
  5487  000FE8  6EDA               	movwf	fsr2h,c
  5488  000FEA  0E00               	movlw	low _P
  5489  000FEC  26D9               	addwf	fsr2l,f,c
  5490  000FEE  0E01               	movlw	high _P
  5491  000FF0  22DA               	addwfc	fsr2h,f,c
  5492  000FF2  0E01               	movlw	1
  5493  000FF4  BEDB               	btfsc	plusw2,7,c
  5494  000FF6  D02D               	goto	l7074
  5495  000FF8  0EF5               	movlw	245
  5496  000FFA  5CDE               	subwf	postinc2,w,c
  5497  000FFC  0E01               	movlw	1
  5498  000FFE  58DE               	subwfb	postinc2,w,c
  5499  001000  A0D8               	btfss	status,0,c
  5500  001002  D027               	goto	l7074
  5501                           
  5502                           ; BSR set to: 1
  5503  001004  BE4B               	btfsc	_line+1,7,c
  5504  001006  D005               	goto	l7070
  5505  001008  504B               	movf	_line+1,w,c
  5506  00100A  E111               	bnz	l529
  5507  00100C  044A               	decf	_line,w,c
  5508  00100E  B0D8               	btfsc	status,0,c
  5509  001010  D00E               	goto	l529
  5510  001012                     l7070:
  5511                           
  5512                           ; BSR set to: 1
  5513  001012  C04A  F0AC         	movff	_line,??_main
  5514  001016  C04B  F0AD         	movff	_line+1,??_main+1
  5515  00101A  0100               	movlb	0	; () banked
  5516  00101C  1FAC               	comf	??_main& (0+255),f,b
  5517  00101E  1FAD               	comf	(??_main+1)& (0+255),f,b
  5518  001020  4BAC               	infsnz	??_main& (0+255),f,b
  5519  001022  2BAD               	incf	(??_main+1)& (0+255),f,b
  5520  001024  C0AC  F318         	movff	??_main,_main$1877
  5521  001028  C0AD  F319         	movff	??_main+1,_main$1877+1
  5522  00102C  D005               	goto	l7072
  5523  00102E                     l529:
  5524                           
  5525                           ; BSR set to: 1
  5526  00102E  C04A  F318         	movff	_line,_main$1877
  5527  001032  C04B  F319         	movff	_line+1,_main$1877+1
  5528  001036  D000               	goto	l7072
  5529  001038                     l7072:
  5530  001038  0103               	movlb	3	; () banked
  5531  00103A  BF19               	btfsc	(_main$1877+1)& (0+255),7,b
  5532  00103C  D043               	goto	l7082
  5533  00103E  0103               	movlb	3	; () banked
  5534  001040  5119               	movf	(_main$1877+1)& (0+255),w,b
  5535  001042  E107               	bnz	l7074
  5536  001044  0E32               	movlw	50
  5537  001046  0103               	movlb	3	; () banked
  5538  001048  5D18               	subwf	_main$1877& (0+255),w,b
  5539  00104A  B0D8               	btfsc	status,0,c
  5540  00104C  D002               	goto	l7074
  5541  00104E  D03A               	goto	l7082
  5542  001050  D000               	goto	l7074
  5543  001052                     l7074:
  5544  001052  90D8               	bcf	status,0,c
  5545  001054  0101               	movlb	1	; () banked
  5546  001056  35E0               	rlcf	_sd& (0+255),w,b
  5547  001058  6ED9               	movwf	fsr2l,c
  5548  00105A  0101               	movlb	1	; () banked
  5549  00105C  35E1               	rlcf	(_sd+1)& (0+255),w,b
  5550  00105E  6EDA               	movwf	fsr2h,c
  5551  001060  0E00               	movlw	low _P
  5552  001062  26D9               	addwf	fsr2l,f,c
  5553  001064  0E01               	movlw	high _P
  5554  001066  22DA               	addwfc	fsr2h,f,c
  5555  001068  0E01               	movlw	1
  5556  00106A  BEDB               	btfsc	plusw2,7,c
  5557  00106C  D042               	goto	l7084
  5558  00106E  0EF5               	movlw	245
  5559  001070  5CDE               	subwf	postinc2,w,c
  5560  001072  0E01               	movlw	1
  5561  001074  58DE               	subwfb	postinc2,w,c
  5562  001076  A0D8               	btfss	status,0,c
  5563  001078  D03C               	goto	l7084
  5564                           
  5565                           ; BSR set to: 1
  5566  00107A  BE4B               	btfsc	_line+1,7,c
  5567  00107C  D005               	goto	l7078
  5568  00107E  504B               	movf	_line+1,w,c
  5569  001080  E111               	bnz	l533
  5570  001082  044A               	decf	_line,w,c
  5571  001084  B0D8               	btfsc	status,0,c
  5572  001086  D00E               	goto	l533
  5573  001088                     l7078:
  5574                           
  5575                           ; BSR set to: 1
  5576  001088  C04A  F0AC         	movff	_line,??_main
  5577  00108C  C04B  F0AD         	movff	_line+1,??_main+1
  5578  001090  0100               	movlb	0	; () banked
  5579  001092  1FAC               	comf	??_main& (0+255),f,b
  5580  001094  1FAD               	comf	(??_main+1)& (0+255),f,b
  5581  001096  4BAC               	infsnz	??_main& (0+255),f,b
  5582  001098  2BAD               	incf	(??_main+1)& (0+255),f,b
  5583  00109A  C0AC  F31A         	movff	??_main,_main$1878
  5584  00109E  C0AD  F31B         	movff	??_main+1,_main$1878+1
  5585  0010A2  D005               	goto	l7080
  5586  0010A4                     l533:
  5587                           
  5588                           ; BSR set to: 1
  5589  0010A4  C04A  F31A         	movff	_line,_main$1878
  5590  0010A8  C04B  F31B         	movff	_line+1,_main$1878+1
  5591  0010AC  D000               	goto	l7080
  5592  0010AE                     l7080:
  5593  0010AE  0103               	movlb	3	; () banked
  5594  0010B0  BF1B               	btfsc	(_main$1878+1)& (0+255),7,b
  5595  0010B2  D008               	goto	l7082
  5596  0010B4  0103               	movlb	3	; () banked
  5597  0010B6  511B               	movf	(_main$1878+1)& (0+255),w,b
  5598  0010B8  E11C               	bnz	l7084
  5599  0010BA  0E32               	movlw	50
  5600  0010BC  0103               	movlb	3	; () banked
  5601  0010BE  5D1A               	subwf	_main$1878& (0+255),w,b
  5602  0010C0  B0D8               	btfsc	status,0,c
  5603  0010C2  D017               	goto	l7084
  5604  0010C4                     l7082:
  5605                           
  5606                           ; BSR set to: 3
  5607                           ;main.c: 685: f = 1;
  5608  0010C4  0E00               	movlw	0
  5609  0010C6  6E45               	movwf	_f+1,c
  5610  0010C8  0E01               	movlw	1
  5611  0010CA  6E44               	movwf	_f,c
  5612                           
  5613                           ;main.c: 686: TIME = 0;
  5614  0010CC  0E00               	movlw	0
  5615  0010CE  0100               	movlb	0	; () banked
  5616  0010D0  6FB1               	movwf	_TIME& (0+255),b
  5617  0010D2  0E00               	movlw	0
  5618  0010D4  6FB2               	movwf	(_TIME+1)& (0+255),b
  5619  0010D6  0E00               	movlw	0
  5620  0010D8  6FB3               	movwf	(_TIME+2)& (0+255),b
  5621  0010DA  0E00               	movlw	0
  5622  0010DC  6FB4               	movwf	(_TIME+3)& (0+255),b
  5623                           
  5624                           ;main.c: 688: TIME4 = 0;
  5625  0010DE  0E00               	movlw	0
  5626  0010E0  0100               	movlb	0	; () banked
  5627  0010E2  6FB5               	movwf	_TIME4& (0+255),b
  5628  0010E4  0E00               	movlw	0
  5629  0010E6  6FB6               	movwf	(_TIME4+1)& (0+255),b
  5630  0010E8  0E00               	movlw	0
  5631  0010EA  6FB7               	movwf	(_TIME4+2)& (0+255),b
  5632  0010EC  0E00               	movlw	0
  5633  0010EE  6FB8               	movwf	(_TIME4+3)& (0+255),b
  5634  0010F0  D000               	goto	l7084
  5635  0010F2                     l7084:
  5636                           
  5637                           ;main.c: 691: }
  5638                           ;main.c: 692: if (f == 1){
  5639  0010F2  0444               	decf	_f,w,c
  5640  0010F4  1045               	iorwf	_f+1,w,c
  5641  0010F6  A4D8               	btfss	status,2,c
  5642  0010F8  D01E               	goto	l7090
  5643                           
  5644                           ;main.c: 693: if (TIME > 200*6 ){
  5645  0010FA  0100               	movlb	0	; () banked
  5646  0010FC  BFB4               	btfsc	(_TIME+3)& (0+255),7,b
  5647  0010FE  D01B               	goto	l7090
  5648  001100  0100               	movlb	0	; () banked
  5649  001102  51B4               	movf	(_TIME+3)& (0+255),w,b
  5650  001104  0100               	movlb	0	; () banked
  5651  001106  11B3               	iorwf	(_TIME+2)& (0+255),w,b
  5652  001108  E108               	bnz	u9060
  5653  00110A  0EB1               	movlw	177
  5654  00110C  0100               	movlb	0	; () banked
  5655  00110E  5DB1               	subwf	_TIME& (0+255),w,b
  5656  001110  0E04               	movlw	4
  5657  001112  0100               	movlb	0	; () banked
  5658  001114  59B2               	subwfb	(_TIME+1)& (0+255),w,b
  5659  001116  A0D8               	btfss	status,0,c
  5660  001118  D00E               	goto	l7090
  5661  00111A                     u9060:
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;main.c: 694: TIME = 0;
  5665  00111A  0E00               	movlw	0
  5666  00111C  0100               	movlb	0	; () banked
  5667  00111E  6FB1               	movwf	_TIME& (0+255),b
  5668  001120  0E00               	movlw	0
  5669  001122  6FB2               	movwf	(_TIME+1)& (0+255),b
  5670  001124  0E00               	movlw	0
  5671  001126  6FB3               	movwf	(_TIME+2)& (0+255),b
  5672  001128  0E00               	movlw	0
  5673  00112A  6FB4               	movwf	(_TIME+3)& (0+255),b
  5674                           
  5675                           ;main.c: 695: f = 2;
  5676  00112C  0E00               	movlw	0
  5677  00112E  6E45               	movwf	_f+1,c
  5678  001130  0E02               	movlw	2
  5679  001132  6E44               	movwf	_f,c
  5680                           
  5681                           ; BSR set to: 0
  5682  001134  D000               	goto	l7090
  5683  001136                     l7090:
  5684                           
  5685                           ;main.c: 696: }
  5686                           ;main.c: 697: }
  5687                           ;main.c: 698: if (f == 2 && ((P[sd[1]] > 500 && ((line>0?line:-(line))<50)) || (P[sd[0]]
      +                           > 500 && ((line>0?line:-(line))<50)))){
  5688  001136  0E02               	movlw	2
  5689  001138  1844               	xorwf	_f,w,c
  5690  00113A  1045               	iorwf	_f+1,w,c
  5691  00113C  A4D8               	btfss	status,2,c
  5692  00113E  EFCF  F010         	goto	l7296
  5693  001142  90D8               	bcf	status,0,c
  5694  001144  0101               	movlb	1	; () banked
  5695  001146  35E2               	rlcf	(_sd+2)& (0+255),w,b
  5696  001148  6ED9               	movwf	fsr2l,c
  5697  00114A  0101               	movlb	1	; () banked
  5698  00114C  35E3               	rlcf	(_sd+3)& (0+255),w,b
  5699  00114E  6EDA               	movwf	fsr2h,c
  5700  001150  0E00               	movlw	low _P
  5701  001152  26D9               	addwf	fsr2l,f,c
  5702  001154  0E01               	movlw	high _P
  5703  001156  22DA               	addwfc	fsr2h,f,c
  5704  001158  0E01               	movlw	1
  5705  00115A  BEDB               	btfsc	plusw2,7,c
  5706  00115C  D02D               	goto	l7100
  5707  00115E  0EF5               	movlw	245
  5708  001160  5CDE               	subwf	postinc2,w,c
  5709  001162  0E01               	movlw	1
  5710  001164  58DE               	subwfb	postinc2,w,c
  5711  001166  A0D8               	btfss	status,0,c
  5712  001168  D027               	goto	l7100
  5713                           
  5714                           ; BSR set to: 1
  5715  00116A  BE4B               	btfsc	_line+1,7,c
  5716  00116C  D005               	goto	l7096
  5717  00116E  504B               	movf	_line+1,w,c
  5718  001170  E111               	bnz	l544
  5719  001172  044A               	decf	_line,w,c
  5720  001174  B0D8               	btfsc	status,0,c
  5721  001176  D00E               	goto	l544
  5722  001178                     l7096:
  5723                           
  5724                           ; BSR set to: 1
  5725  001178  C04A  F0AC         	movff	_line,??_main
  5726  00117C  C04B  F0AD         	movff	_line+1,??_main+1
  5727  001180  0100               	movlb	0	; () banked
  5728  001182  1FAC               	comf	??_main& (0+255),f,b
  5729  001184  1FAD               	comf	(??_main+1)& (0+255),f,b
  5730  001186  4BAC               	infsnz	??_main& (0+255),f,b
  5731  001188  2BAD               	incf	(??_main+1)& (0+255),f,b
  5732  00118A  C0AC  F31C         	movff	??_main,_main$1879
  5733  00118E  C0AD  F31D         	movff	??_main+1,_main$1879+1
  5734  001192  D005               	goto	l7098
  5735  001194                     l544:
  5736                           
  5737                           ; BSR set to: 1
  5738  001194  C04A  F31C         	movff	_line,_main$1879
  5739  001198  C04B  F31D         	movff	_line+1,_main$1879+1
  5740  00119C  D000               	goto	l7098
  5741  00119E                     l7098:
  5742  00119E  0103               	movlb	3	; () banked
  5743  0011A0  BF1D               	btfsc	(_main$1879+1)& (0+255),7,b
  5744  0011A2  D046               	goto	l7108
  5745  0011A4  0103               	movlb	3	; () banked
  5746  0011A6  511D               	movf	(_main$1879+1)& (0+255),w,b
  5747  0011A8  E107               	bnz	l7100
  5748  0011AA  0E32               	movlw	50
  5749  0011AC  0103               	movlb	3	; () banked
  5750  0011AE  5D1C               	subwf	_main$1879& (0+255),w,b
  5751  0011B0  B0D8               	btfsc	status,0,c
  5752  0011B2  D002               	goto	l7100
  5753  0011B4  D03D               	goto	l7108
  5754  0011B6  D000               	goto	l7100
  5755  0011B8                     l7100:
  5756  0011B8  90D8               	bcf	status,0,c
  5757  0011BA  0101               	movlb	1	; () banked
  5758  0011BC  35E0               	rlcf	_sd& (0+255),w,b
  5759  0011BE  6ED9               	movwf	fsr2l,c
  5760  0011C0  0101               	movlb	1	; () banked
  5761  0011C2  35E1               	rlcf	(_sd+1)& (0+255),w,b
  5762  0011C4  6EDA               	movwf	fsr2h,c
  5763  0011C6  0E00               	movlw	low _P
  5764  0011C8  26D9               	addwf	fsr2l,f,c
  5765  0011CA  0E01               	movlw	high _P
  5766  0011CC  22DA               	addwfc	fsr2h,f,c
  5767  0011CE  0E01               	movlw	1
  5768  0011D0  BEDB               	btfsc	plusw2,7,c
  5769  0011D2  EFCF  F010         	goto	l7296
  5770  0011D6  0EF5               	movlw	245
  5771  0011D8  5CDE               	subwf	postinc2,w,c
  5772  0011DA  0E01               	movlw	1
  5773  0011DC  58DE               	subwfb	postinc2,w,c
  5774  0011DE  A0D8               	btfss	status,0,c
  5775  0011E0  EFCF  F010         	goto	l7296
  5776                           
  5777                           ; BSR set to: 1
  5778  0011E4  BE4B               	btfsc	_line+1,7,c
  5779  0011E6  D005               	goto	l7104
  5780  0011E8  504B               	movf	_line+1,w,c
  5781  0011EA  E111               	bnz	l548
  5782  0011EC  044A               	decf	_line,w,c
  5783  0011EE  B0D8               	btfsc	status,0,c
  5784  0011F0  D00E               	goto	l548
  5785  0011F2                     l7104:
  5786                           
  5787                           ; BSR set to: 1
  5788  0011F2  C04A  F0AC         	movff	_line,??_main
  5789  0011F6  C04B  F0AD         	movff	_line+1,??_main+1
  5790  0011FA  0100               	movlb	0	; () banked
  5791  0011FC  1FAC               	comf	??_main& (0+255),f,b
  5792  0011FE  1FAD               	comf	(??_main+1)& (0+255),f,b
  5793  001200  4BAC               	infsnz	??_main& (0+255),f,b
  5794  001202  2BAD               	incf	(??_main+1)& (0+255),f,b
  5795  001204  C0AC  F31E         	movff	??_main,_main$1880
  5796  001208  C0AD  F31F         	movff	??_main+1,_main$1880+1
  5797  00120C  D005               	goto	l7106
  5798  00120E                     l548:
  5799                           
  5800                           ; BSR set to: 1
  5801  00120E  C04A  F31E         	movff	_line,_main$1880
  5802  001212  C04B  F31F         	movff	_line+1,_main$1880+1
  5803  001216  D000               	goto	l7106
  5804  001218                     l7106:
  5805  001218  0103               	movlb	3	; () banked
  5806  00121A  BF1F               	btfsc	(_main$1880+1)& (0+255),7,b
  5807  00121C  D009               	goto	l7108
  5808  00121E  0103               	movlb	3	; () banked
  5809  001220  511F               	movf	(_main$1880+1)& (0+255),w,b
  5810  001222  E104               	bnz	u9131
  5811  001224  0E32               	movlw	50
  5812  001226  0103               	movlb	3	; () banked
  5813  001228  5D1E               	subwf	_main$1880& (0+255),w,b
  5814  00122A  B0D8               	btfsc	status,0,c
  5815  00122C                     u9131:
  5816  00122C  EFCF  F010         	goto	l7296
  5817  001230                     l7108:
  5818                           
  5819                           ; BSR set to: 3
  5820                           ;main.c: 699: LEN[rcount] = TIME4 / 40 / 6;
  5821  001230  0E28               	movlw	40
  5822  001232  6E13               	movwf	___aldiv@divisor,c
  5823  001234  0E00               	movlw	0
  5824  001236  6E14               	movwf	___aldiv@divisor+1,c
  5825  001238  0E00               	movlw	0
  5826  00123A  6E15               	movwf	___aldiv@divisor+2,c
  5827  00123C  0E00               	movlw	0
  5828  00123E  6E16               	movwf	___aldiv@divisor+3,c
  5829  001240  C0B5  F00F         	movff	_TIME4,___aldiv@dividend
  5830  001244  C0B6  F010         	movff	_TIME4+1,___aldiv@dividend+1
  5831  001248  C0B7  F011         	movff	_TIME4+2,___aldiv@dividend+2
  5832  00124C  C0B8  F012         	movff	_TIME4+3,___aldiv@dividend+3
  5833  001250  EC5D  F01F         	call	___aldiv	;wreg free
  5834  001254  C00F  F340         	movff	?___aldiv,_main$2573
  5835  001258  C010  F341         	movff	?___aldiv+1,_main$2573+1
  5836  00125C  C011  F342         	movff	?___aldiv+2,_main$2573+2
  5837  001260  C012  F343         	movff	?___aldiv+3,_main$2573+3
  5838                           
  5839                           ;main.c: 699: LEN[rcount] = TIME4 / 40 / 6;
  5840  001264  C340  F00F         	movff	_main$2573,___aldiv@dividend
  5841  001268  C341  F010         	movff	_main$2573+1,___aldiv@dividend+1
  5842  00126C  C342  F011         	movff	_main$2573+2,___aldiv@dividend+2
  5843  001270  C343  F012         	movff	_main$2573+3,___aldiv@dividend+3
  5844  001274  0E06               	movlw	6
  5845  001276  6E13               	movwf	___aldiv@divisor,c
  5846  001278  0E00               	movlw	0
  5847  00127A  6E14               	movwf	___aldiv@divisor+1,c
  5848  00127C  0E00               	movlw	0
  5849  00127E  6E15               	movwf	___aldiv@divisor+2,c
  5850  001280  0E00               	movlw	0
  5851  001282  6E16               	movwf	___aldiv@divisor+3,c
  5852  001284  EC5D  F01F         	call	___aldiv	;wreg free
  5853  001288  90D8               	bcf	status,0,c
  5854  00128A  0100               	movlb	0	; () banked
  5855  00128C  35BF               	rlcf	_rcount& (0+255),w,b
  5856  00128E  6ED9               	movwf	fsr2l,c
  5857  001290  0100               	movlb	0	; () banked
  5858  001292  35C0               	rlcf	(_rcount+1)& (0+255),w,b
  5859  001294  6EDA               	movwf	fsr2h,c
  5860  001296  0E00               	movlw	low _LEN
  5861  001298  26D9               	addwf	fsr2l,f,c
  5862  00129A  0E02               	movlw	high _LEN
  5863  00129C  22DA               	addwfc	fsr2h,f,c
  5864  00129E  C00F  FFDE         	movff	?___aldiv,postinc2
  5865  0012A2  C010  FFDD         	movff	?___aldiv+1,postdec2
  5866                           
  5867                           ; BSR set to: 0
  5868                           ;main.c: 700: rcount ++;
  5869  0012A6  0100               	movlb	0	; () banked
  5870  0012A8  4BBF               	infsnz	_rcount& (0+255),f,b
  5871  0012AA  2BC0               	incf	(_rcount+1)& (0+255),f,b
  5872                           
  5873                           ; BSR set to: 0
  5874                           ;main.c: 701: status = WAIT_FRONT;
  5875  0012AC  0E00               	movlw	0
  5876  0012AE  0101               	movlb	1	; () banked
  5877  0012B0  6F99               	movwf	(_status+1)& (0+255),b
  5878  0012B2  0E04               	movlw	4
  5879  0012B4  EFF2  F00E         	goto	L9
  5880                           
  5881                           ; BSR set to: 1
  5882                           ;main.c: 702: }
  5883                           ;main.c: 703: }
  5884                           ;main.c: 704: break;
  5885                           
  5886                           ; BSR set to: 1
  5887  0012B8  EFCF  F010         	goto	l7296
  5888  0012BC                     l7116:
  5889                           
  5890                           ;main.c: 706: if (fns){
  5891  0012BC  0100               	movlb	0	; () banked
  5892  0012BE  51B9               	movf	_fns& (0+255),w,b
  5893  0012C0  0100               	movlb	0	; () banked
  5894  0012C2  11BA               	iorwf	(_fns+1)& (0+255),w,b
  5895  0012C4  B4D8               	btfsc	status,2,c
  5896  0012C6  D0BE               	goto	l7124
  5897                           
  5898                           ; BSR set to: 0
  5899                           ;main.c: 707: printf("{'COM':'line','value':'Entering rect f(%i) = (%i) (%i) (%i)'}\n" ,
      +                           rcount/ 2 , LEN[rcount/2],(((double)(LEN[rcount/2]*40) * 0.15)) , ((((double)(LEN[rcoun
      +                          t/2]*40) * 0.15)) + 40));
  5900  0012C8  0E00               	movlw	0
  5901  0012CA  6E12               	movwf	___awdiv@divisor+1,c
  5902  0012CC  0E02               	movlw	2
  5903  0012CE  6E11               	movwf	___awdiv@divisor,c
  5904  0012D0  C0BF  F00F         	movff	_rcount,___awdiv@dividend
  5905  0012D4  C0C0  F010         	movff	_rcount+1,___awdiv@dividend+1
  5906  0012D8  EC72  F022         	call	___awdiv	;wreg free
  5907  0012DC  90D8               	bcf	status,0,c
  5908  0012DE  360F               	rlcf	?___awdiv,f,c
  5909  0012E0  3610               	rlcf	?___awdiv+1,f,c
  5910  0012E2  0E00               	movlw	low _LEN
  5911  0012E4  240F               	addwf	?___awdiv,w,c
  5912  0012E6  6ED9               	movwf	fsr2l,c
  5913  0012E8  0E02               	movlw	high _LEN
  5914  0012EA  2010               	addwfc	?___awdiv+1,w,c
  5915  0012EC  6EDA               	movwf	fsr2h,c
  5916  0012EE  CFDE F017          	movff	postinc2,___wmul@multiplier
  5917  0012F2  CFDD F018          	movff	postdec2,___wmul@multiplier+1
  5918  0012F6  0E00               	movlw	0
  5919  0012F8  6E1A               	movwf	___wmul@multiplicand+1,c
  5920  0012FA  0E28               	movlw	40
  5921  0012FC  6E19               	movwf	___wmul@multiplicand,c
  5922  0012FE  EC10  F027         	call	___wmul	;wreg free
  5923  001302  C017  F01D         	movff	?___wmul,___awtoft@c
  5924  001306  C018  F01E         	movff	?___wmul+1,___awtoft@c+1
  5925  00130A  ECB5  F026         	call	___awtoft	;wreg free
  5926  00130E  C01D  F030         	movff	?___awtoft,___ftmul@f1
  5927  001312  C01E  F031         	movff	?___awtoft+1,___ftmul@f1+1
  5928  001316  C01F  F032         	movff	?___awtoft+2,___ftmul@f1+2
  5929  00131A  0E9A               	movlw	154
  5930  00131C  6E33               	movwf	___ftmul@f2,c
  5931  00131E  0E19               	movlw	25
  5932  001320  6E34               	movwf	___ftmul@f2+1,c
  5933  001322  0E3E               	movlw	62
  5934  001324  6E35               	movwf	___ftmul@f2+2,c
  5935  001326  EC70  F01E         	call	___ftmul	;wreg free
  5936  00132A  C030  F32A         	movff	?___ftmul,_main$2574
  5937  00132E  C031  F32B         	movff	?___ftmul+1,_main$2574+1
  5938  001332  C032  F32C         	movff	?___ftmul+2,_main$2574+2
  5939                           
  5940                           ;main.c: 707: printf("{'COM':'line','value':'Entering rect f(%i) = (%i) (%i) (%i)'}\n" ,
      +                           rcount/ 2 , LEN[rcount/2],(((double)(LEN[rcount/2]*40) * 0.15)) , ((((double)(LEN[rcoun
      +                          t/2]*40) * 0.15)) + 40));
  5941  001336  0E9A               	movlw	154
  5942  001338  6E33               	movwf	___ftmul@f2,c
  5943  00133A  0E19               	movlw	25
  5944  00133C  6E34               	movwf	___ftmul@f2+1,c
  5945  00133E  0E3E               	movlw	62
  5946  001340  6E35               	movwf	___ftmul@f2+2,c
  5947  001342  0E00               	movlw	0
  5948  001344  6E12               	movwf	___awdiv@divisor+1,c
  5949  001346  0E02               	movlw	2
  5950  001348  6E11               	movwf	___awdiv@divisor,c
  5951  00134A  C0BF  F00F         	movff	_rcount,___awdiv@dividend
  5952  00134E  C0C0  F010         	movff	_rcount+1,___awdiv@dividend+1
  5953  001352  EC72  F022         	call	___awdiv	;wreg free
  5954  001356  90D8               	bcf	status,0,c
  5955  001358  360F               	rlcf	?___awdiv,f,c
  5956  00135A  3610               	rlcf	?___awdiv+1,f,c
  5957  00135C  0E00               	movlw	low _LEN
  5958  00135E  240F               	addwf	?___awdiv,w,c
  5959  001360  6ED9               	movwf	fsr2l,c
  5960  001362  0E02               	movlw	high _LEN
  5961  001364  2010               	addwfc	?___awdiv+1,w,c
  5962  001366  6EDA               	movwf	fsr2h,c
  5963  001368  CFDE F017          	movff	postinc2,___wmul@multiplier
  5964  00136C  CFDD F018          	movff	postdec2,___wmul@multiplier+1
  5965  001370  0E00               	movlw	0
  5966  001372  6E1A               	movwf	___wmul@multiplicand+1,c
  5967  001374  0E28               	movlw	40
  5968  001376  6E19               	movwf	___wmul@multiplicand,c
  5969  001378  EC10  F027         	call	___wmul	;wreg free
  5970  00137C  C017  F01D         	movff	?___wmul,___awtoft@c
  5971  001380  C018  F01E         	movff	?___wmul+1,___awtoft@c+1
  5972  001384  ECB5  F026         	call	___awtoft	;wreg free
  5973  001388  C01D  F030         	movff	?___awtoft,___ftmul@f1
  5974  00138C  C01E  F031         	movff	?___awtoft+1,___ftmul@f1+1
  5975  001390  C01F  F032         	movff	?___awtoft+2,___ftmul@f1+2
  5976  001394  EC70  F01E         	call	___ftmul	;wreg free
  5977  001398  C030  F060         	movff	?___ftmul,___ftadd@f1
  5978  00139C  C031  F061         	movff	?___ftmul+1,___ftadd@f1+1
  5979  0013A0  C032  F062         	movff	?___ftmul+2,___ftadd@f1+2
  5980  0013A4  0E00               	movlw	0
  5981  0013A6  0100               	movlb	0	; () banked
  5982  0013A8  6F63               	movwf	___ftadd@f2& (0+255),b
  5983  0013AA  0E20               	movlw	32
  5984  0013AC  0100               	movlb	0	; () banked
  5985  0013AE  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
  5986  0013B0  0E42               	movlw	66
  5987  0013B2  0100               	movlb	0	; () banked
  5988  0013B4  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
  5989  0013B6  EC28  F016         	call	___ftadd	;wreg free
  5990  0013BA  C060  F32D         	movff	?___ftadd,_main$2575
  5991  0013BE  C061  F32E         	movff	?___ftadd+1,_main$2575+1
  5992  0013C2  C062  F32F         	movff	?___ftadd+2,_main$2575+2
  5993                           
  5994                           ;main.c: 707: printf("{'COM':'line','value':'Entering rect f(%i) = (%i) (%i) (%i)'}\n" ,
      +                           rcount/ 2 , LEN[rcount/2],(((double)(LEN[rcount/2]*40) * 0.15)) , ((((double)(LEN[rcoun
      +                          t/2]*40) * 0.15)) + 40));
  5995  0013C6  0EB4               	movlw	low STR_27
  5996  0013C8  0100               	movlb	0	; () banked
  5997  0013CA  6F85               	movwf	printf@f& (0+255),b
  5998  0013CC  0E7A               	movlw	high STR_27
  5999  0013CE  0100               	movlb	0	; () banked
  6000  0013D0  6F86               	movwf	(printf@f+1)& (0+255),b
  6001  0013D2  C0BF  F00F         	movff	_rcount,___awdiv@dividend
  6002  0013D6  C0C0  F010         	movff	_rcount+1,___awdiv@dividend+1
  6003  0013DA  0E00               	movlw	0
  6004  0013DC  6E12               	movwf	___awdiv@divisor+1,c
  6005  0013DE  0E02               	movlw	2
  6006  0013E0  6E11               	movwf	___awdiv@divisor,c
  6007  0013E2  EC72  F022         	call	___awdiv	;wreg free
  6008  0013E6  C00F  F087         	movff	?___awdiv,?_printf+2
  6009  0013EA  C010  F088         	movff	?___awdiv+1,?_printf+3
  6010  0013EE  C0BF  F00F         	movff	_rcount,___awdiv@dividend
  6011  0013F2  C0C0  F010         	movff	_rcount+1,___awdiv@dividend+1
  6012  0013F6  0E00               	movlw	0
  6013  0013F8  6E12               	movwf	___awdiv@divisor+1,c
  6014  0013FA  0E02               	movlw	2
  6015  0013FC  6E11               	movwf	___awdiv@divisor,c
  6016  0013FE  EC72  F022         	call	___awdiv	;wreg free
  6017  001402  90D8               	bcf	status,0,c
  6018  001404  360F               	rlcf	?___awdiv,f,c
  6019  001406  3610               	rlcf	?___awdiv+1,f,c
  6020  001408  0E00               	movlw	low _LEN
  6021  00140A  240F               	addwf	?___awdiv,w,c
  6022  00140C  6ED9               	movwf	fsr2l,c
  6023  00140E  0E02               	movlw	high _LEN
  6024  001410  2010               	addwfc	?___awdiv+1,w,c
  6025  001412  6EDA               	movwf	fsr2h,c
  6026  001414  CFDE F089          	movff	postinc2,?_printf+4
  6027  001418  CFDD F08A          	movff	postdec2,?_printf+5
  6028  00141C  C32A  F08B         	movff	_main$2574,?_printf+6
  6029  001420  C32B  F08C         	movff	_main$2574+1,?_printf+7
  6030  001424  C32C  F08D         	movff	_main$2574+2,?_printf+8
  6031  001428  C32D  F08E         	movff	_main$2575,?_printf+9
  6032  00142C  C32E  F08F         	movff	_main$2575+1,?_printf+10
  6033  001430  C32F  F090         	movff	_main$2575+2,?_printf+11
  6034  001434  EC8A  F014         	call	_printf	;wreg free
  6035                           
  6036                           ;main.c: 708: fns = 0;
  6037  001438  0E00               	movlw	0
  6038  00143A  0100               	movlb	0	; () banked
  6039  00143C  6FBA               	movwf	(_fns+1)& (0+255),b
  6040  00143E  0E00               	movlw	0
  6041  001440  6FB9               	movwf	_fns& (0+255),b
  6042  001442  D000               	goto	l7124
  6043  001444                     l7124:
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;main.c: 709: }
  6047                           ;main.c: 710: if (PORTDbits.RD6 == 0){
  6048  001444  BC83               	btfsc	3971,6,c	;volatile
  6049  001446  D00B               	goto	l7128
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;main.c: 711: fns = 1;
  6053  001448  0E00               	movlw	0
  6054  00144A  0100               	movlb	0	; () banked
  6055  00144C  6FBA               	movwf	(_fns+1)& (0+255),b
  6056  00144E  0E01               	movlw	1
  6057  001450  6FB9               	movwf	_fns& (0+255),b
  6058                           
  6059                           ;main.c: 712: status = INITIAL;
  6060  001452  0E00               	movlw	0
  6061  001454  0101               	movlb	1	; () banked
  6062  001456  6F99               	movwf	(_status+1)& (0+255),b
  6063  001458  0E08               	movlw	8
  6064  00145A  6F98               	movwf	_status& (0+255),b
  6065  00145C  D000               	goto	l7128
  6066  00145E                     l7128:
  6067                           
  6068                           ;main.c: 713: }
  6069                           ;main.c: 723: if (TIME3 > 10){
  6070  00145E  0101               	movlb	1	; () banked
  6071  001460  BF67               	btfsc	(_TIME3+3)& (0+255),7,b
  6072  001462  EFCF  F010         	goto	l7296
  6073  001466  0101               	movlb	1	; () banked
  6074  001468  5167               	movf	(_TIME3+3)& (0+255),w,b
  6075  00146A  0101               	movlb	1	; () banked
  6076  00146C  1166               	iorwf	(_TIME3+2)& (0+255),w,b
  6077  00146E  0101               	movlb	1	; () banked
  6078  001470  1165               	iorwf	(_TIME3+1)& (0+255),w,b
  6079  001472  E106               	bnz	u9160
  6080  001474  0E0B               	movlw	11
  6081  001476  0101               	movlb	1	; () banked
  6082  001478  5D64               	subwf	_TIME3& (0+255),w,b
  6083  00147A  A0D8               	btfss	status,0,c
  6084  00147C  EFCF  F010         	goto	l7296
  6085  001480                     u9160:
  6086                           
  6087                           ; BSR set to: 1
  6088                           ;main.c: 724: TIME3 = 0;
  6089  001480  0E00               	movlw	0
  6090  001482  0101               	movlb	1	; () banked
  6091  001484  6F64               	movwf	_TIME3& (0+255),b
  6092  001486  0E00               	movlw	0
  6093  001488  6F65               	movwf	(_TIME3+1)& (0+255),b
  6094  00148A  0E00               	movlw	0
  6095  00148C  6F66               	movwf	(_TIME3+2)& (0+255),b
  6096  00148E  0E00               	movlw	0
  6097  001490  6F67               	movwf	(_TIME3+3)& (0+255),b
  6098                           
  6099                           ; BSR set to: 1
  6100                           ;main.c: 725: EnhancedRead();
  6101  001492  EC39  F024         	call	_EnhancedRead	;wreg free
  6102                           
  6103                           ;main.c: 726: Line();
  6104  001496  EC0C  F011         	call	_Line	;wreg free
  6105                           
  6106                           ;main.c: 728: if (rcount % 2 == 1){
  6107  00149A  0100               	movlb	0	; () banked
  6108  00149C  A1BF               	btfss	_rcount& (0+255),0,b
  6109  00149E  D0A3               	goto	l555
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;main.c: 729: if (TIME4 / 6 < CURVE_ACEL_TIME){
  6113  0014A0  C1F4  F0AC         	movff	_CURVE_ACEL_TIME,??_main
  6114  0014A4  C1F5  F0AD         	movff	_CURVE_ACEL_TIME+1,??_main+1
  6115  0014A8  0E00               	movlw	0
  6116  0014AA  0100               	movlb	0	; () banked
  6117  0014AC  BFAD               	btfsc	(??_main+1)& (0+255),7,b
  6118  0014AE  0EFF               	movlw	255
  6119  0014B0  6FAE               	movwf	(??_main+2)& (0+255),b
  6120  0014B2  6FAF               	movwf	(??_main+3)& (0+255),b
  6121  0014B4  C0B5  F00F         	movff	_TIME4,___aldiv@dividend
  6122  0014B8  C0B6  F010         	movff	_TIME4+1,___aldiv@dividend+1
  6123  0014BC  C0B7  F011         	movff	_TIME4+2,___aldiv@dividend+2
  6124  0014C0  C0B8  F012         	movff	_TIME4+3,___aldiv@dividend+3
  6125  0014C4  0E06               	movlw	6
  6126  0014C6  6E13               	movwf	___aldiv@divisor,c
  6127  0014C8  0E00               	movlw	0
  6128  0014CA  6E14               	movwf	___aldiv@divisor+1,c
  6129  0014CC  0E00               	movlw	0
  6130  0014CE  6E15               	movwf	___aldiv@divisor+2,c
  6131  0014D0  0E00               	movlw	0
  6132  0014D2  6E16               	movwf	___aldiv@divisor+3,c
  6133  0014D4  EC5D  F01F         	call	___aldiv	;wreg free
  6134  0014D8  0100               	movlb	0	; () banked
  6135  0014DA  51AC               	movf	??_main& (0+255),w,b
  6136  0014DC  5C0F               	subwf	?___aldiv,w,c
  6137  0014DE  0100               	movlb	0	; () banked
  6138  0014E0  51AD               	movf	(??_main+1)& (0+255),w,b
  6139  0014E2  5810               	subwfb	?___aldiv+1,w,c
  6140  0014E4  0100               	movlb	0	; () banked
  6141  0014E6  51AE               	movf	(??_main+2)& (0+255),w,b
  6142  0014E8  5811               	subwfb	?___aldiv+2,w,c
  6143  0014EA  5012               	movf	?___aldiv+3,w,c
  6144  0014EC  0A80               	xorlw	128
  6145  0014EE  0100               	movlb	0	; () banked
  6146  0014F0  6FB0               	movwf	(??_main+4)& (0+255),b
  6147  0014F2  0100               	movlb	0	; () banked
  6148  0014F4  51AF               	movf	(??_main+3)& (0+255),w,b
  6149  0014F6  0A80               	xorlw	128
  6150  0014F8  0100               	movlb	0	; () banked
  6151  0014FA  59B0               	subwfb	(??_main+4)& (0+255),w,b
  6152  0014FC  B0D8               	btfsc	status,0,c
  6153  0014FE  D05F               	goto	l556
  6154                           
  6155                           ; BSR set to: 0
  6156                           ;main.c: 731: speed = ( VEL[CURVE] - VEL[NORMAL] ) * (TIME4 / 6) / CURVE_ACEL_TIME + VEL
      +                          [NORMAL];
  6157  001500  EE21  F0CA         	lfsr	2,_VEL+10
  6158  001504  CFDE F0AC          	movff	postinc2,??_main
  6159  001508  CFDD F0AD          	movff	postdec2,??_main+1
  6160  00150C  0100               	movlb	0	; () banked
  6161  00150E  1FAC               	comf	??_main& (0+255),f,b
  6162  001510  1FAD               	comf	(??_main+1)& (0+255),f,b
  6163  001512  4BAC               	infsnz	??_main& (0+255),f,b
  6164  001514  2BAD               	incf	(??_main+1)& (0+255),f,b
  6165  001516  0101               	movlb	1	; () banked
  6166  001518  51C2               	movf	(_VEL+2)& (0+255),w,b
  6167  00151A  0100               	movlb	0	; () banked
  6168  00151C  27AC               	addwf	??_main& (0+255),f,b
  6169  00151E  0101               	movlb	1	; () banked
  6170  001520  51C3               	movf	(_VEL+3)& (0+255),w,b
  6171  001522  0100               	movlb	0	; () banked
  6172  001524  23AD               	addwfc	(??_main+1)& (0+255),f,b
  6173  001526  C0AC  F01D         	movff	??_main,___lmul@multiplier
  6174  00152A  C0AD  F01E         	movff	??_main+1,___lmul@multiplier+1
  6175  00152E  0E00               	movlw	0
  6176  001530  BE1E               	btfsc	___lmul@multiplier+1,7,c
  6177  001532  0EFF               	movlw	-1
  6178  001534  6E1F               	movwf	___lmul@multiplier+2,c
  6179  001536  6E20               	movwf	___lmul@multiplier+3,c
  6180  001538  0E06               	movlw	6
  6181  00153A  6E13               	movwf	___aldiv@divisor,c
  6182  00153C  0E00               	movlw	0
  6183  00153E  6E14               	movwf	___aldiv@divisor+1,c
  6184  001540  0E00               	movlw	0
  6185  001542  6E15               	movwf	___aldiv@divisor+2,c
  6186  001544  0E00               	movlw	0
  6187  001546  6E16               	movwf	___aldiv@divisor+3,c
  6188  001548  C0B5  F00F         	movff	_TIME4,___aldiv@dividend
  6189  00154C  C0B6  F010         	movff	_TIME4+1,___aldiv@dividend+1
  6190  001550  C0B7  F011         	movff	_TIME4+2,___aldiv@dividend+2
  6191  001554  C0B8  F012         	movff	_TIME4+3,___aldiv@dividend+3
  6192  001558  EC5D  F01F         	call	___aldiv	;wreg free
  6193  00155C  C00F  F021         	movff	?___aldiv,___lmul@multiplicand
  6194  001560  C010  F022         	movff	?___aldiv+1,___lmul@multiplicand+1
  6195  001564  C011  F023         	movff	?___aldiv+2,___lmul@multiplicand+2
  6196  001568  C012  F024         	movff	?___aldiv+3,___lmul@multiplicand+3
  6197  00156C  EC8C  F025         	call	___lmul	;wreg free
  6198  001570  C01D  F340         	movff	?___lmul,_main$2573
  6199  001574  C01E  F341         	movff	?___lmul+1,_main$2573+1
  6200  001578  C01F  F342         	movff	?___lmul+2,_main$2573+2
  6201  00157C  C020  F343         	movff	?___lmul+3,_main$2573+3
  6202                           
  6203                           ;main.c: 731: speed = ( VEL[CURVE] - VEL[NORMAL] ) * (TIME4 / 6) / CURVE_ACEL_TIME + VEL
      +                          [NORMAL];
  6204  001580  C340  F00F         	movff	_main$2573,___aldiv@dividend
  6205  001584  C341  F010         	movff	_main$2573+1,___aldiv@dividend+1
  6206  001588  C342  F011         	movff	_main$2573+2,___aldiv@dividend+2
  6207  00158C  C343  F012         	movff	_main$2573+3,___aldiv@dividend+3
  6208  001590  C1F4  F013         	movff	_CURVE_ACEL_TIME,___aldiv@divisor
  6209  001594  C1F5  F014         	movff	_CURVE_ACEL_TIME+1,___aldiv@divisor+1
  6210  001598  0E00               	movlw	0
  6211  00159A  BE14               	btfsc	___aldiv@divisor+1,7,c
  6212  00159C  0EFF               	movlw	-1
  6213  00159E  6E15               	movwf	___aldiv@divisor+2,c
  6214  0015A0  6E16               	movwf	___aldiv@divisor+3,c
  6215  0015A2  EC5D  F01F         	call	___aldiv	;wreg free
  6216  0015A6  0101               	movlb	1	; () banked
  6217  0015A8  51CA               	movf	(_VEL+10)& (0+255),w,b
  6218  0015AA  240F               	addwf	?___aldiv,w,c
  6219  0015AC  6E4C               	movwf	_speed,c
  6220  0015AE  0101               	movlb	1	; () banked
  6221  0015B0  51CB               	movf	(_VEL+11)& (0+255),w,b
  6222  0015B2  2010               	addwfc	?___aldiv+1,w,c
  6223  0015B4  6E4D               	movwf	_speed+1,c
  6224                           
  6225                           ; BSR set to: 1
  6226                           ;main.c: 732: PORTBbits.RB0 = 0;
  6227  0015B6  9081               	bcf	3969,0,c	;volatile
  6228                           
  6229                           ; BSR set to: 1
  6230                           ;main.c: 733: PORTBbits.RB5 = 0;
  6231  0015B8  9A81               	bcf	3969,5,c	;volatile
  6232                           
  6233                           ; BSR set to: 1
  6234                           ;main.c: 734: PORTAbits.RA4 = 0;
  6235  0015BA  9880               	bcf	3968,4,c	;volatile
  6236                           
  6237                           ;main.c: 735: }else{
  6238  0015BC  D007               	goto	l557
  6239  0015BE                     l556:
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;main.c: 736: PORTBbits.RB0 = 1;
  6243  0015BE  8081               	bsf	3969,0,c	;volatile
  6244                           
  6245                           ;main.c: 737: PORTBbits.RB5 = 0;
  6246  0015C0  9A81               	bcf	3969,5,c	;volatile
  6247                           
  6248                           ;main.c: 738: PORTAbits.RA4 = 0;
  6249  0015C2  9880               	bcf	3968,4,c	;volatile
  6250                           
  6251                           ;main.c: 739: speed = VEL[CURVE];
  6252  0015C4  C1C2  F04C         	movff	_VEL+2,_speed
  6253  0015C8  C1C3  F04D         	movff	_VEL+3,_speed+1
  6254  0015CC                     l557:
  6255                           
  6256                           ;main.c: 740: }
  6257                           ;main.c: 741: kp = VKP[CURVE];
  6258  0015CC  C1B1  F17B         	movff	_VKP+3,_kp
  6259  0015D0  C1B2  F17C         	movff	_VKP+4,_kp+1
  6260  0015D4  C1B3  F17D         	movff	_VKP+5,_kp+2
  6261                           
  6262                           ;main.c: 742: kd = VKD[CURVE];
  6263  0015D8  C19F  F178         	movff	_VKD+3,_kd
  6264  0015DC  C1A0  F179         	movff	_VKD+4,_kd+1
  6265  0015E0  C1A1  F17A         	movff	_VKD+5,_kd+2
  6266                           
  6267                           ;main.c: 744: }else{
  6268  0015E4  D209               	goto	l7164
  6269  0015E6                     l555:
  6270                           
  6271                           ; BSR set to: 0
  6272                           ;main.c: 745: PORTBbits.RB0 = 0;
  6273  0015E6  9081               	bcf	3969,0,c	;volatile
  6274                           
  6275                           ;main.c: 746: PORTBbits.RB5 = 0;
  6276  0015E8  9A81               	bcf	3969,5,c	;volatile
  6277                           
  6278                           ;main.c: 747: PORTAbits.RA4 = 1;
  6279  0015EA  8880               	bsf	3968,4,c	;volatile
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;main.c: 752: if (TIME4 / 6 < RECT_ACEL_TIME){
  6283  0015EC  C1F8  F0AC         	movff	_RECT_ACEL_TIME,??_main
  6284  0015F0  C1F9  F0AD         	movff	_RECT_ACEL_TIME+1,??_main+1
  6285  0015F4  0E00               	movlw	0
  6286  0015F6  0100               	movlb	0	; () banked
  6287  0015F8  BFAD               	btfsc	(??_main+1)& (0+255),7,b
  6288  0015FA  0EFF               	movlw	255
  6289  0015FC  6FAE               	movwf	(??_main+2)& (0+255),b
  6290  0015FE  6FAF               	movwf	(??_main+3)& (0+255),b
  6291  001600  C0B5  F00F         	movff	_TIME4,___aldiv@dividend
  6292  001604  C0B6  F010         	movff	_TIME4+1,___aldiv@dividend+1
  6293  001608  C0B7  F011         	movff	_TIME4+2,___aldiv@dividend+2
  6294  00160C  C0B8  F012         	movff	_TIME4+3,___aldiv@dividend+3
  6295  001610  0E06               	movlw	6
  6296  001612  6E13               	movwf	___aldiv@divisor,c
  6297  001614  0E00               	movlw	0
  6298  001616  6E14               	movwf	___aldiv@divisor+1,c
  6299  001618  0E00               	movlw	0
  6300  00161A  6E15               	movwf	___aldiv@divisor+2,c
  6301  00161C  0E00               	movlw	0
  6302  00161E  6E16               	movwf	___aldiv@divisor+3,c
  6303  001620  EC5D  F01F         	call	___aldiv	;wreg free
  6304  001624  0100               	movlb	0	; () banked
  6305  001626  51AC               	movf	??_main& (0+255),w,b
  6306  001628  5C0F               	subwf	?___aldiv,w,c
  6307  00162A  0100               	movlb	0	; () banked
  6308  00162C  51AD               	movf	(??_main+1)& (0+255),w,b
  6309  00162E  5810               	subwfb	?___aldiv+1,w,c
  6310  001630  0100               	movlb	0	; () banked
  6311  001632  51AE               	movf	(??_main+2)& (0+255),w,b
  6312  001634  5811               	subwfb	?___aldiv+2,w,c
  6313  001636  5012               	movf	?___aldiv+3,w,c
  6314  001638  0A80               	xorlw	128
  6315  00163A  0100               	movlb	0	; () banked
  6316  00163C  6FB0               	movwf	(??_main+4)& (0+255),b
  6317  00163E  0100               	movlb	0	; () banked
  6318  001640  51AF               	movf	(??_main+3)& (0+255),w,b
  6319  001642  0A80               	xorlw	128
  6320  001644  0100               	movlb	0	; () banked
  6321  001646  59B0               	subwfb	(??_main+4)& (0+255),w,b
  6322  001648  B0D8               	btfsc	status,0,c
  6323  00164A  D05B               	goto	l7156
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;main.c: 753: speed = (VEL[FAST] - VEL[CURVE]) * (TIME4 / 6) / RECT_ACEL_TIME + VEL[CURV
      +                          E];
  6327  00164C  EE21  F0C2         	lfsr	2,_VEL+2
  6328  001650  CFDE F0AC          	movff	postinc2,??_main
  6329  001654  CFDD F0AD          	movff	postdec2,??_main+1
  6330  001658  0100               	movlb	0	; () banked
  6331  00165A  1FAC               	comf	??_main& (0+255),f,b
  6332  00165C  1FAD               	comf	(??_main+1)& (0+255),f,b
  6333  00165E  4BAC               	infsnz	??_main& (0+255),f,b
  6334  001660  2BAD               	incf	(??_main+1)& (0+255),f,b
  6335  001662  0101               	movlb	1	; () banked
  6336  001664  51C6               	movf	(_VEL+6)& (0+255),w,b
  6337  001666  0100               	movlb	0	; () banked
  6338  001668  27AC               	addwf	??_main& (0+255),f,b
  6339  00166A  0101               	movlb	1	; () banked
  6340  00166C  51C7               	movf	(_VEL+7)& (0+255),w,b
  6341  00166E  0100               	movlb	0	; () banked
  6342  001670  23AD               	addwfc	(??_main+1)& (0+255),f,b
  6343  001672  C0AC  F01D         	movff	??_main,___lmul@multiplier
  6344  001676  C0AD  F01E         	movff	??_main+1,___lmul@multiplier+1
  6345  00167A  0E00               	movlw	0
  6346  00167C  BE1E               	btfsc	___lmul@multiplier+1,7,c
  6347  00167E  0EFF               	movlw	-1
  6348  001680  6E1F               	movwf	___lmul@multiplier+2,c
  6349  001682  6E20               	movwf	___lmul@multiplier+3,c
  6350  001684  0E06               	movlw	6
  6351  001686  6E13               	movwf	___aldiv@divisor,c
  6352  001688  0E00               	movlw	0
  6353  00168A  6E14               	movwf	___aldiv@divisor+1,c
  6354  00168C  0E00               	movlw	0
  6355  00168E  6E15               	movwf	___aldiv@divisor+2,c
  6356  001690  0E00               	movlw	0
  6357  001692  6E16               	movwf	___aldiv@divisor+3,c
  6358  001694  C0B5  F00F         	movff	_TIME4,___aldiv@dividend
  6359  001698  C0B6  F010         	movff	_TIME4+1,___aldiv@dividend+1
  6360  00169C  C0B7  F011         	movff	_TIME4+2,___aldiv@dividend+2
  6361  0016A0  C0B8  F012         	movff	_TIME4+3,___aldiv@dividend+3
  6362  0016A4  EC5D  F01F         	call	___aldiv	;wreg free
  6363  0016A8  C00F  F021         	movff	?___aldiv,___lmul@multiplicand
  6364  0016AC  C010  F022         	movff	?___aldiv+1,___lmul@multiplicand+1
  6365  0016B0  C011  F023         	movff	?___aldiv+2,___lmul@multiplicand+2
  6366  0016B4  C012  F024         	movff	?___aldiv+3,___lmul@multiplicand+3
  6367  0016B8  EC8C  F025         	call	___lmul	;wreg free
  6368  0016BC  C01D  F340         	movff	?___lmul,_main$2573
  6369  0016C0  C01E  F341         	movff	?___lmul+1,_main$2573+1
  6370  0016C4  C01F  F342         	movff	?___lmul+2,_main$2573+2
  6371  0016C8  C020  F343         	movff	?___lmul+3,_main$2573+3
  6372                           
  6373                           ;main.c: 753: speed = (VEL[FAST] - VEL[CURVE]) * (TIME4 / 6) / RECT_ACEL_TIME + VEL[CURV
      +                          E];
  6374  0016CC  C340  F00F         	movff	_main$2573,___aldiv@dividend
  6375  0016D0  C341  F010         	movff	_main$2573+1,___aldiv@dividend+1
  6376  0016D4  C342  F011         	movff	_main$2573+2,___aldiv@dividend+2
  6377  0016D8  C343  F012         	movff	_main$2573+3,___aldiv@dividend+3
  6378  0016DC  C1F8  F013         	movff	_RECT_ACEL_TIME,___aldiv@divisor
  6379  0016E0  C1F9  F014         	movff	_RECT_ACEL_TIME+1,___aldiv@divisor+1
  6380  0016E4  0E00               	movlw	0
  6381  0016E6  BE14               	btfsc	___aldiv@divisor+1,7,c
  6382  0016E8  0EFF               	movlw	-1
  6383  0016EA  6E15               	movwf	___aldiv@divisor+2,c
  6384  0016EC  6E16               	movwf	___aldiv@divisor+3,c
  6385  0016EE  EC5D  F01F         	call	___aldiv	;wreg free
  6386  0016F2  0101               	movlb	1	; () banked
  6387  0016F4  51C2               	movf	(_VEL+2)& (0+255),w,b
  6388  0016F6  240F               	addwf	?___aldiv,w,c
  6389  0016F8  6E4C               	movwf	_speed,c
  6390  0016FA  0101               	movlb	1	; () banked
  6391  0016FC  51C3               	movf	(_VEL+3)& (0+255),w,b
  6392  0016FE  2010               	addwfc	?___aldiv+1,w,c
  6393  001700  D174               	goto	L10
  6394  001702                     l7156:
  6395  001702  0E06               	movlw	6
  6396  001704  6E13               	movwf	___aldiv@divisor,c
  6397  001706  0E00               	movlw	0
  6398  001708  6E14               	movwf	___aldiv@divisor+1,c
  6399  00170A  0E00               	movlw	0
  6400  00170C  6E15               	movwf	___aldiv@divisor+2,c
  6401  00170E  0E00               	movlw	0
  6402  001710  6E16               	movwf	___aldiv@divisor+3,c
  6403  001712  C0B5  F00F         	movff	_TIME4,___aldiv@dividend
  6404  001716  C0B6  F010         	movff	_TIME4+1,___aldiv@dividend+1
  6405  00171A  C0B7  F011         	movff	_TIME4+2,___aldiv@dividend+2
  6406  00171E  C0B8  F012         	movff	_TIME4+3,___aldiv@dividend+3
  6407  001722  EC5D  F01F         	call	___aldiv	;wreg free
  6408  001726  C00F  F01D         	movff	?___aldiv,___altoft@c
  6409  00172A  C010  F01E         	movff	?___aldiv+1,___altoft@c+1
  6410  00172E  C011  F01F         	movff	?___aldiv+2,___altoft@c+2
  6411  001732  C012  F020         	movff	?___aldiv+3,___altoft@c+3
  6412  001736  EC50  F023         	call	___altoft	;wreg free
  6413  00173A  C01D  F06C         	movff	?___altoft,___ftge@ff1
  6414  00173E  C01E  F06D         	movff	?___altoft+1,___ftge@ff1+1
  6415  001742  C01F  F06E         	movff	?___altoft+2,___ftge@ff1+2
  6416  001746  0E9A               	movlw	154
  6417  001748  6E33               	movwf	___ftmul@f2,c
  6418  00174A  0E19               	movlw	25
  6419  00174C  6E34               	movwf	___ftmul@f2+1,c
  6420  00174E  0E3E               	movlw	62
  6421  001750  6E35               	movwf	___ftmul@f2+2,c
  6422  001752  0E00               	movlw	0
  6423  001754  6E1A               	movwf	___wmul@multiplicand+1,c
  6424  001756  0E28               	movlw	40
  6425  001758  6E19               	movwf	___wmul@multiplicand,c
  6426  00175A  0E00               	movlw	0
  6427  00175C  6E12               	movwf	___awdiv@divisor+1,c
  6428  00175E  0E02               	movlw	2
  6429  001760  6E11               	movwf	___awdiv@divisor,c
  6430  001762  C0BF  F00F         	movff	_rcount,___awdiv@dividend
  6431  001766  C0C0  F010         	movff	_rcount+1,___awdiv@dividend+1
  6432  00176A  EC72  F022         	call	___awdiv	;wreg free
  6433  00176E  90D8               	bcf	status,0,c
  6434  001770  360F               	rlcf	?___awdiv,f,c
  6435  001772  3610               	rlcf	?___awdiv+1,f,c
  6436  001774  0E00               	movlw	low _LEN
  6437  001776  240F               	addwf	?___awdiv,w,c
  6438  001778  6ED9               	movwf	fsr2l,c
  6439  00177A  0E02               	movlw	high _LEN
  6440  00177C  2010               	addwfc	?___awdiv+1,w,c
  6441  00177E  6EDA               	movwf	fsr2h,c
  6442  001780  CFDE F017          	movff	postinc2,___wmul@multiplier
  6443  001784  CFDD F018          	movff	postdec2,___wmul@multiplier+1
  6444  001788  EC10  F027         	call	___wmul	;wreg free
  6445  00178C  C017  F01D         	movff	?___wmul,___awtoft@c
  6446  001790  C018  F01E         	movff	?___wmul+1,___awtoft@c+1
  6447  001794  ECB5  F026         	call	___awtoft	;wreg free
  6448  001798  C01D  F030         	movff	?___awtoft,___ftmul@f1
  6449  00179C  C01E  F031         	movff	?___awtoft+1,___ftmul@f1+1
  6450  0017A0  C01F  F032         	movff	?___awtoft+2,___ftmul@f1+2
  6451  0017A4  EC70  F01E         	call	___ftmul	;wreg free
  6452  0017A8  C030  F06F         	movff	?___ftmul,___ftge@ff2
  6453  0017AC  C031  F070         	movff	?___ftmul+1,___ftge@ff2+1
  6454  0017B0  C032  F071         	movff	?___ftmul+2,___ftge@ff2+2
  6455  0017B4  EC39  F020         	call	___ftge	;wreg free
  6456  0017B8  0100               	movlb	0	; () banked
  6457  0017BA  B0D8               	btfsc	status,0,c
  6458  0017BC  D005               	goto	l7160
  6459                           
  6460                           ; BSR set to: 0
  6461                           ;main.c: 755: speed = VEL[FAST];
  6462  0017BE  C1C6  F04C         	movff	_VEL+6,_speed
  6463  0017C2  C1C7  F04D         	movff	_VEL+7,_speed+1
  6464                           
  6465                           ;main.c: 756: }else if (TIME4 / 6 < (((double)(LEN[rcount/2]*40) * 0.15)) + RECT_STOP_TI
      +                          ME){
  6466  0017C6  D118               	goto	l7164
  6467  0017C8                     l7160:
  6468                           
  6469                           ; BSR set to: 0
  6470  0017C8  0E06               	movlw	6
  6471  0017CA  6E13               	movwf	___aldiv@divisor,c
  6472  0017CC  0E00               	movlw	0
  6473  0017CE  6E14               	movwf	___aldiv@divisor+1,c
  6474  0017D0  0E00               	movlw	0
  6475  0017D2  6E15               	movwf	___aldiv@divisor+2,c
  6476  0017D4  0E00               	movlw	0
  6477  0017D6  6E16               	movwf	___aldiv@divisor+3,c
  6478  0017D8  C0B5  F00F         	movff	_TIME4,___aldiv@dividend
  6479  0017DC  C0B6  F010         	movff	_TIME4+1,___aldiv@dividend+1
  6480  0017E0  C0B7  F011         	movff	_TIME4+2,___aldiv@dividend+2
  6481  0017E4  C0B8  F012         	movff	_TIME4+3,___aldiv@dividend+3
  6482  0017E8  EC5D  F01F         	call	___aldiv	;wreg free
  6483  0017EC  C00F  F01D         	movff	?___aldiv,___altoft@c
  6484  0017F0  C010  F01E         	movff	?___aldiv+1,___altoft@c+1
  6485  0017F4  C011  F01F         	movff	?___aldiv+2,___altoft@c+2
  6486  0017F8  C012  F020         	movff	?___aldiv+3,___altoft@c+3
  6487  0017FC  EC50  F023         	call	___altoft	;wreg free
  6488  001800  C01D  F06C         	movff	?___altoft,___ftge@ff1
  6489  001804  C01E  F06D         	movff	?___altoft+1,___ftge@ff1+1
  6490  001808  C01F  F06E         	movff	?___altoft+2,___ftge@ff1+2
  6491  00180C  C1FA  F01D         	movff	_RECT_STOP_TIME,___awtoft@c
  6492  001810  C1FB  F01E         	movff	_RECT_STOP_TIME+1,___awtoft@c+1
  6493  001814  ECB5  F026         	call	___awtoft	;wreg free
  6494  001818  C01D  F063         	movff	?___awtoft,___ftadd@f2
  6495  00181C  C01E  F064         	movff	?___awtoft+1,___ftadd@f2+1
  6496  001820  C01F  F065         	movff	?___awtoft+2,___ftadd@f2+2
  6497  001824  0E9A               	movlw	154
  6498  001826  6E33               	movwf	___ftmul@f2,c
  6499  001828  0E19               	movlw	25
  6500  00182A  6E34               	movwf	___ftmul@f2+1,c
  6501  00182C  0E3E               	movlw	62
  6502  00182E  6E35               	movwf	___ftmul@f2+2,c
  6503  001830  0E00               	movlw	0
  6504  001832  6E1A               	movwf	___wmul@multiplicand+1,c
  6505  001834  0E28               	movlw	40
  6506  001836  6E19               	movwf	___wmul@multiplicand,c
  6507  001838  0E00               	movlw	0
  6508  00183A  6E12               	movwf	___awdiv@divisor+1,c
  6509  00183C  0E02               	movlw	2
  6510  00183E  6E11               	movwf	___awdiv@divisor,c
  6511  001840  C0BF  F00F         	movff	_rcount,___awdiv@dividend
  6512  001844  C0C0  F010         	movff	_rcount+1,___awdiv@dividend+1
  6513  001848  EC72  F022         	call	___awdiv	;wreg free
  6514  00184C  90D8               	bcf	status,0,c
  6515  00184E  360F               	rlcf	?___awdiv,f,c
  6516  001850  3610               	rlcf	?___awdiv+1,f,c
  6517  001852  0E00               	movlw	low _LEN
  6518  001854  240F               	addwf	?___awdiv,w,c
  6519  001856  6ED9               	movwf	fsr2l,c
  6520  001858  0E02               	movlw	high _LEN
  6521  00185A  2010               	addwfc	?___awdiv+1,w,c
  6522  00185C  6EDA               	movwf	fsr2h,c
  6523  00185E  CFDE F017          	movff	postinc2,___wmul@multiplier
  6524  001862  CFDD F018          	movff	postdec2,___wmul@multiplier+1
  6525  001866  EC10  F027         	call	___wmul	;wreg free
  6526  00186A  C017  F01D         	movff	?___wmul,___awtoft@c
  6527  00186E  C018  F01E         	movff	?___wmul+1,___awtoft@c+1
  6528  001872  ECB5  F026         	call	___awtoft	;wreg free
  6529  001876  C01D  F030         	movff	?___awtoft,___ftmul@f1
  6530  00187A  C01E  F031         	movff	?___awtoft+1,___ftmul@f1+1
  6531  00187E  C01F  F032         	movff	?___awtoft+2,___ftmul@f1+2
  6532  001882  EC70  F01E         	call	___ftmul	;wreg free
  6533  001886  C030  F060         	movff	?___ftmul,___ftadd@f1
  6534  00188A  C031  F061         	movff	?___ftmul+1,___ftadd@f1+1
  6535  00188E  C032  F062         	movff	?___ftmul+2,___ftadd@f1+2
  6536  001892  EC28  F016         	call	___ftadd	;wreg free
  6537  001896  C060  F06F         	movff	?___ftadd,___ftge@ff2
  6538  00189A  C061  F070         	movff	?___ftadd+1,___ftge@ff2+1
  6539  00189E  C062  F071         	movff	?___ftadd+2,___ftge@ff2+2
  6540  0018A2  EC39  F020         	call	___ftge	;wreg free
  6541  0018A6  0100               	movlb	0	; () banked
  6542  0018A8  B0D8               	btfsc	status,0,c
  6543  0018AA  D0A1               	goto	l563
  6544                           
  6545                           ; BSR set to: 0
  6546                           ;main.c: 757: int v = TIME4 / 6 - (((double)(LEN[rcount/2]*40) * 0.15));
  6547  0018AC  0E9A               	movlw	154
  6548  0018AE  6E33               	movwf	___ftmul@f2,c
  6549  0018B0  0E19               	movlw	25
  6550  0018B2  6E34               	movwf	___ftmul@f2+1,c
  6551  0018B4  0E3E               	movlw	62
  6552  0018B6  6E35               	movwf	___ftmul@f2+2,c
  6553  0018B8  0E00               	movlw	0
  6554  0018BA  6E1A               	movwf	___wmul@multiplicand+1,c
  6555  0018BC  0E28               	movlw	40
  6556  0018BE  6E19               	movwf	___wmul@multiplicand,c
  6557  0018C0  0E00               	movlw	0
  6558  0018C2  6E12               	movwf	___awdiv@divisor+1,c
  6559  0018C4  0E02               	movlw	2
  6560  0018C6  6E11               	movwf	___awdiv@divisor,c
  6561  0018C8  C0BF  F00F         	movff	_rcount,___awdiv@dividend
  6562  0018CC  C0C0  F010         	movff	_rcount+1,___awdiv@dividend+1
  6563  0018D0  EC72  F022         	call	___awdiv	;wreg free
  6564  0018D4  90D8               	bcf	status,0,c
  6565  0018D6  360F               	rlcf	?___awdiv,f,c
  6566  0018D8  3610               	rlcf	?___awdiv+1,f,c
  6567  0018DA  0E00               	movlw	low _LEN
  6568  0018DC  240F               	addwf	?___awdiv,w,c
  6569  0018DE  6ED9               	movwf	fsr2l,c
  6570  0018E0  0E02               	movlw	high _LEN
  6571  0018E2  2010               	addwfc	?___awdiv+1,w,c
  6572  0018E4  6EDA               	movwf	fsr2h,c
  6573  0018E6  CFDE F017          	movff	postinc2,___wmul@multiplier
  6574  0018EA  CFDD F018          	movff	postdec2,___wmul@multiplier+1
  6575  0018EE  EC10  F027         	call	___wmul	;wreg free
  6576  0018F2  C017  F01D         	movff	?___wmul,___awtoft@c
  6577  0018F6  C018  F01E         	movff	?___wmul+1,___awtoft@c+1
  6578  0018FA  ECB5  F026         	call	___awtoft	;wreg free
  6579  0018FE  C01D  F030         	movff	?___awtoft,___ftmul@f1
  6580  001902  C01E  F031         	movff	?___awtoft+1,___ftmul@f1+1
  6581  001906  C01F  F032         	movff	?___awtoft+2,___ftmul@f1+2
  6582  00190A  EC70  F01E         	call	___ftmul	;wreg free
  6583  00190E  C030  F03F         	movff	?___ftmul,___ftneg@f1
  6584  001912  C031  F040         	movff	?___ftmul+1,___ftneg@f1+1
  6585  001916  C032  F041         	movff	?___ftmul+2,___ftneg@f1+2
  6586  00191A  EC36  F027         	call	___ftneg	;wreg free
  6587  00191E  C03F  F063         	movff	?___ftneg,___ftadd@f2
  6588  001922  C040  F064         	movff	?___ftneg+1,___ftadd@f2+1
  6589  001926  C041  F065         	movff	?___ftneg+2,___ftadd@f2+2
  6590  00192A  0E06               	movlw	6
  6591  00192C  6E13               	movwf	___aldiv@divisor,c
  6592  00192E  0E00               	movlw	0
  6593  001930  6E14               	movwf	___aldiv@divisor+1,c
  6594  001932  0E00               	movlw	0
  6595  001934  6E15               	movwf	___aldiv@divisor+2,c
  6596  001936  0E00               	movlw	0
  6597  001938  6E16               	movwf	___aldiv@divisor+3,c
  6598  00193A  C0B5  F00F         	movff	_TIME4,___aldiv@dividend
  6599  00193E  C0B6  F010         	movff	_TIME4+1,___aldiv@dividend+1
  6600  001942  C0B7  F011         	movff	_TIME4+2,___aldiv@dividend+2
  6601  001946  C0B8  F012         	movff	_TIME4+3,___aldiv@dividend+3
  6602  00194A  EC5D  F01F         	call	___aldiv	;wreg free
  6603  00194E  C00F  F01D         	movff	?___aldiv,___altoft@c
  6604  001952  C010  F01E         	movff	?___aldiv+1,___altoft@c+1
  6605  001956  C011  F01F         	movff	?___aldiv+2,___altoft@c+2
  6606  00195A  C012  F020         	movff	?___aldiv+3,___altoft@c+3
  6607  00195E  EC50  F023         	call	___altoft	;wreg free
  6608  001962  C01D  F060         	movff	?___altoft,___ftadd@f1
  6609  001966  C01E  F061         	movff	?___altoft+1,___ftadd@f1+1
  6610  00196A  C01F  F062         	movff	?___altoft+2,___ftadd@f1+2
  6611  00196E  EC28  F016         	call	___ftadd	;wreg free
  6612  001972  C060  F06C         	movff	?___ftadd,___fttol@f1
  6613  001976  C061  F06D         	movff	?___ftadd+1,___fttol@f1+1
  6614  00197A  C062  F06E         	movff	?___ftadd+2,___fttol@f1+2
  6615  00197E  EC1C  F01B         	call	___fttol	;wreg free
  6616  001982  C06C  F306         	movff	?___fttol,main@v
  6617  001986  C06D  F307         	movff	?___fttol+1,main@v+1
  6618                           
  6619                           ;main.c: 759: speed = VEL[FAST] - (VEL[FAST] - VEL[NORMAL]) * v / RECT_STOP_TIME;
  6620  00198A  EE21  F0CA         	lfsr	2,_VEL+10
  6621  00198E  CFDE F0AC          	movff	postinc2,??_main
  6622  001992  CFDD F0AD          	movff	postdec2,??_main+1
  6623  001996  0100               	movlb	0	; () banked
  6624  001998  1FAC               	comf	??_main& (0+255),f,b
  6625  00199A  1FAD               	comf	(??_main+1)& (0+255),f,b
  6626  00199C  4BAC               	infsnz	??_main& (0+255),f,b
  6627  00199E  2BAD               	incf	(??_main+1)& (0+255),f,b
  6628  0019A0  0101               	movlb	1	; () banked
  6629  0019A2  51C6               	movf	(_VEL+6)& (0+255),w,b
  6630  0019A4  0100               	movlb	0	; () banked
  6631  0019A6  25AC               	addwf	??_main& (0+255),w,b
  6632  0019A8  6E17               	movwf	___wmul@multiplier,c
  6633  0019AA  0101               	movlb	1	; () banked
  6634  0019AC  51C7               	movf	(_VEL+7)& (0+255),w,b
  6635  0019AE  0100               	movlb	0	; () banked
  6636  0019B0  21AD               	addwfc	(??_main+1)& (0+255),w,b
  6637  0019B2  6E18               	movwf	___wmul@multiplier+1,c
  6638  0019B4  C306  F019         	movff	main@v,___wmul@multiplicand
  6639  0019B8  C307  F01A         	movff	main@v+1,___wmul@multiplicand+1
  6640  0019BC  EC10  F027         	call	___wmul	;wreg free
  6641  0019C0  C017  F00F         	movff	?___wmul,___awdiv@dividend
  6642  0019C4  C018  F010         	movff	?___wmul+1,___awdiv@dividend+1
  6643  0019C8  C1FA  F011         	movff	_RECT_STOP_TIME,___awdiv@divisor
  6644  0019CC  C1FB  F012         	movff	_RECT_STOP_TIME+1,___awdiv@divisor+1
  6645  0019D0  EC72  F022         	call	___awdiv	;wreg free
  6646  0019D4  1E0F               	comf	?___awdiv,f,c
  6647  0019D6  1E10               	comf	?___awdiv+1,f,c
  6648  0019D8  4A0F               	infsnz	?___awdiv,f,c
  6649  0019DA  2A10               	incf	?___awdiv+1,f,c
  6650  0019DC  0101               	movlb	1	; () banked
  6651  0019DE  51C6               	movf	(_VEL+6)& (0+255),w,b
  6652  0019E0  240F               	addwf	?___awdiv,w,c
  6653  0019E2  6E4C               	movwf	_speed,c
  6654  0019E4  0101               	movlb	1	; () banked
  6655  0019E6  51C7               	movf	(_VEL+7)& (0+255),w,b
  6656  0019E8  2010               	addwfc	?___awdiv+1,w,c
  6657  0019EA                     L10:
  6658  0019EA  6E4D               	movwf	_speed+1,c
  6659                           
  6660                           ;main.c: 760: }else{
  6661  0019EC  D005               	goto	l7164
  6662  0019EE                     l563:
  6663                           
  6664                           ; BSR set to: 0
  6665                           ;main.c: 761: speed = VEL[NORMAL];
  6666  0019EE  C1CA  F04C         	movff	_VEL+10,_speed
  6667  0019F2  C1CB  F04D         	movff	_VEL+11,_speed+1
  6668                           
  6669                           ; BSR set to: 0
  6670                           
  6671                           ; BSR set to: 0
  6672                           
  6673                           ; BSR set to: 0
  6674  0019F6  D000               	goto	l7164
  6675  0019F8                     l7164:
  6676                           
  6677                           ;main.c: 762: }
  6678                           ;main.c: 763: }
  6679                           ;main.c: 768: UpdateDir();
  6680  0019F8  EC70  F01D         	call	_UpdateDir	;wreg free
  6681                           
  6682                           ;main.c: 789: if (flag_line == 0){
  6683  0019FC  5046               	movf	_flag_line,w,c
  6684  0019FE  1047               	iorwf	_flag_line+1,w,c
  6685  001A00  A4D8               	btfss	status,2,c
  6686  001A02  D160               	goto	l7200
  6687                           
  6688                           ;main.c: 790: if ((P[sd[1]] > 500 && ((line>0?line:-(line))<50)) || (P[sd[0]] > 500 && (
      +                          (line>0?line:-(line))<50))){
  6689  001A04  90D8               	bcf	status,0,c
  6690  001A06  0101               	movlb	1	; () banked
  6691  001A08  35E2               	rlcf	(_sd+2)& (0+255),w,b
  6692  001A0A  6ED9               	movwf	fsr2l,c
  6693  001A0C  0101               	movlb	1	; () banked
  6694  001A0E  35E3               	rlcf	(_sd+3)& (0+255),w,b
  6695  001A10  6EDA               	movwf	fsr2h,c
  6696  001A12  0E00               	movlw	low _P
  6697  001A14  26D9               	addwf	fsr2l,f,c
  6698  001A16  0E01               	movlw	high _P
  6699  001A18  22DA               	addwfc	fsr2h,f,c
  6700  001A1A  0E01               	movlw	1
  6701  001A1C  BEDB               	btfsc	plusw2,7,c
  6702  001A1E  D02D               	goto	l7176
  6703  001A20  0EF5               	movlw	245
  6704  001A22  5CDE               	subwf	postinc2,w,c
  6705  001A24  0E01               	movlw	1
  6706  001A26  58DE               	subwfb	postinc2,w,c
  6707  001A28  A0D8               	btfss	status,0,c
  6708  001A2A  D027               	goto	l7176
  6709                           
  6710                           ; BSR set to: 1
  6711  001A2C  BE4B               	btfsc	_line+1,7,c
  6712  001A2E  D005               	goto	l7172
  6713  001A30  504B               	movf	_line+1,w,c
  6714  001A32  E111               	bnz	l572
  6715  001A34  044A               	decf	_line,w,c
  6716  001A36  B0D8               	btfsc	status,0,c
  6717  001A38  D00E               	goto	l572
  6718  001A3A                     l7172:
  6719                           
  6720                           ; BSR set to: 1
  6721  001A3A  C04A  F0AC         	movff	_line,??_main
  6722  001A3E  C04B  F0AD         	movff	_line+1,??_main+1
  6723  001A42  0100               	movlb	0	; () banked
  6724  001A44  1FAC               	comf	??_main& (0+255),f,b
  6725  001A46  1FAD               	comf	(??_main+1)& (0+255),f,b
  6726  001A48  4BAC               	infsnz	??_main& (0+255),f,b
  6727  001A4A  2BAD               	incf	(??_main+1)& (0+255),f,b
  6728  001A4C  C0AC  F320         	movff	??_main,_main$1884
  6729  001A50  C0AD  F321         	movff	??_main+1,_main$1884+1
  6730  001A54  D005               	goto	l7174
  6731  001A56                     l572:
  6732                           
  6733                           ; BSR set to: 1
  6734  001A56  C04A  F320         	movff	_line,_main$1884
  6735  001A5A  C04B  F321         	movff	_line+1,_main$1884+1
  6736  001A5E  D000               	goto	l7174
  6737  001A60                     l7174:
  6738  001A60  0103               	movlb	3	; () banked
  6739  001A62  BF21               	btfsc	(_main$1884+1)& (0+255),7,b
  6740  001A64  D043               	goto	l7184
  6741  001A66  0103               	movlb	3	; () banked
  6742  001A68  5121               	movf	(_main$1884+1)& (0+255),w,b
  6743  001A6A  E107               	bnz	l7176
  6744  001A6C  0E32               	movlw	50
  6745  001A6E  0103               	movlb	3	; () banked
  6746  001A70  5D20               	subwf	_main$1884& (0+255),w,b
  6747  001A72  B0D8               	btfsc	status,0,c
  6748  001A74  D002               	goto	l7176
  6749  001A76  D03A               	goto	l7184
  6750  001A78  D000               	goto	l7176
  6751  001A7A                     l7176:
  6752  001A7A  90D8               	bcf	status,0,c
  6753  001A7C  0101               	movlb	1	; () banked
  6754  001A7E  35E0               	rlcf	_sd& (0+255),w,b
  6755  001A80  6ED9               	movwf	fsr2l,c
  6756  001A82  0101               	movlb	1	; () banked
  6757  001A84  35E1               	rlcf	(_sd+1)& (0+255),w,b
  6758  001A86  6EDA               	movwf	fsr2h,c
  6759  001A88  0E00               	movlw	low _P
  6760  001A8A  26D9               	addwf	fsr2l,f,c
  6761  001A8C  0E01               	movlw	high _P
  6762  001A8E  22DA               	addwfc	fsr2h,f,c
  6763  001A90  0E01               	movlw	1
  6764  001A92  BEDB               	btfsc	plusw2,7,c
  6765  001A94  D117               	goto	l7200
  6766  001A96  0EF5               	movlw	245
  6767  001A98  5CDE               	subwf	postinc2,w,c
  6768  001A9A  0E01               	movlw	1
  6769  001A9C  58DE               	subwfb	postinc2,w,c
  6770  001A9E  A0D8               	btfss	status,0,c
  6771  001AA0  D111               	goto	l7200
  6772                           
  6773                           ; BSR set to: 1
  6774  001AA2  BE4B               	btfsc	_line+1,7,c
  6775  001AA4  D005               	goto	l7180
  6776  001AA6  504B               	movf	_line+1,w,c
  6777  001AA8  E111               	bnz	l576
  6778  001AAA  044A               	decf	_line,w,c
  6779  001AAC  B0D8               	btfsc	status,0,c
  6780  001AAE  D00E               	goto	l576
  6781  001AB0                     l7180:
  6782                           
  6783                           ; BSR set to: 1
  6784  001AB0  C04A  F0AC         	movff	_line,??_main
  6785  001AB4  C04B  F0AD         	movff	_line+1,??_main+1
  6786  001AB8  0100               	movlb	0	; () banked
  6787  001ABA  1FAC               	comf	??_main& (0+255),f,b
  6788  001ABC  1FAD               	comf	(??_main+1)& (0+255),f,b
  6789  001ABE  4BAC               	infsnz	??_main& (0+255),f,b
  6790  001AC0  2BAD               	incf	(??_main+1)& (0+255),f,b
  6791  001AC2  C0AC  F322         	movff	??_main,_main$1885
  6792  001AC6  C0AD  F323         	movff	??_main+1,_main$1885+1
  6793  001ACA  D005               	goto	l7182
  6794  001ACC                     l576:
  6795                           
  6796                           ; BSR set to: 1
  6797  001ACC  C04A  F322         	movff	_line,_main$1885
  6798  001AD0  C04B  F323         	movff	_line+1,_main$1885+1
  6799  001AD4  D000               	goto	l7182
  6800  001AD6                     l7182:
  6801  001AD6  0103               	movlb	3	; () banked
  6802  001AD8  BF23               	btfsc	(_main$1885+1)& (0+255),7,b
  6803  001ADA  D008               	goto	l7184
  6804  001ADC  0103               	movlb	3	; () banked
  6805  001ADE  5123               	movf	(_main$1885+1)& (0+255),w,b
  6806  001AE0  E104               	bnz	u9281
  6807  001AE2  0E32               	movlw	50
  6808  001AE4  0103               	movlb	3	; () banked
  6809  001AE6  5D22               	subwf	_main$1885& (0+255),w,b
  6810  001AE8  B0D8               	btfsc	status,0,c
  6811  001AEA                     u9281:
  6812  001AEA  D0EC               	goto	l7200
  6813  001AEC                     l7184:
  6814                           
  6815                           ; BSR set to: 3
  6816                           ;main.c: 791: flag_line = 1;
  6817  001AEC  0E00               	movlw	0
  6818  001AEE  6E47               	movwf	_flag_line+1,c
  6819  001AF0  0E01               	movlw	1
  6820  001AF2  6E46               	movwf	_flag_line,c
  6821                           
  6822                           ;main.c: 792: TIME = 0;
  6823  001AF4  0E00               	movlw	0
  6824  001AF6  0100               	movlb	0	; () banked
  6825  001AF8  6FB1               	movwf	_TIME& (0+255),b
  6826  001AFA  0E00               	movlw	0
  6827  001AFC  6FB2               	movwf	(_TIME+1)& (0+255),b
  6828  001AFE  0E00               	movlw	0
  6829  001B00  6FB3               	movwf	(_TIME+2)& (0+255),b
  6830  001B02  0E00               	movlw	0
  6831  001B04  6FB4               	movwf	(_TIME+3)& (0+255),b
  6832                           
  6833                           ;main.c: 793: TIME4 = 0;
  6834  001B06  0E00               	movlw	0
  6835  001B08  0100               	movlb	0	; () banked
  6836  001B0A  6FB5               	movwf	_TIME4& (0+255),b
  6837  001B0C  0E00               	movlw	0
  6838  001B0E  6FB6               	movwf	(_TIME4+1)& (0+255),b
  6839  001B10  0E00               	movlw	0
  6840  001B12  6FB7               	movwf	(_TIME4+2)& (0+255),b
  6841  001B14  0E00               	movlw	0
  6842  001B16  6FB8               	movwf	(_TIME4+3)& (0+255),b
  6843                           
  6844                           ; BSR set to: 0
  6845                           ;main.c: 794: PORTAbits.RA4 = !PORTAbits.RA4;
  6846  001B18  7880               	btg	3968,4,c	;volatile
  6847                           
  6848                           ; BSR set to: 0
  6849                           ;main.c: 795: rcount ++ ;
  6850  001B1A  0100               	movlb	0	; () banked
  6851  001B1C  4BBF               	infsnz	_rcount& (0+255),f,b
  6852  001B1E  2BC0               	incf	(_rcount+1)& (0+255),f,b
  6853                           
  6854                           ; BSR set to: 0
  6855                           ;main.c: 796: if (rcount % 2 == 1){
  6856  001B20  0100               	movlb	0	; () banked
  6857  001B22  A1BF               	btfss	_rcount& (0+255),0,b
  6858  001B24  D009               	goto	l7194
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;main.c: 797: printf("{'COM':'line','value':'Entering curve'}\n");
  6862  001B26  0E0D               	movlw	low STR_28
  6863  001B28  0100               	movlb	0	; () banked
  6864  001B2A  6F85               	movwf	printf@f& (0+255),b
  6865  001B2C  0E7E               	movlw	high STR_28
  6866  001B2E  0100               	movlb	0	; () banked
  6867  001B30  6F86               	movwf	(printf@f+1)& (0+255),b
  6868  001B32  EC8A  F014         	call	_printf	;wreg free
  6869                           
  6870                           ;main.c: 798: }else{
  6871  001B36  D0B9               	goto	l7198
  6872  001B38                     l7194:
  6873                           
  6874                           ;main.c: 799: printf("{'COM':'line','value':'Entering rect f(%i) = (%i) (%i) (%i)'}\n" ,
      +                           rcount/ 2 , LEN[rcount/2],(((double)(LEN[rcount/2]*40) * 0.15)) , ((((double)(LEN[rcoun
      +                          t/2]*40) * 0.15)) + 40));
  6875  001B38  0E00               	movlw	0
  6876  001B3A  6E12               	movwf	___awdiv@divisor+1,c
  6877  001B3C  0E02               	movlw	2
  6878  001B3E  6E11               	movwf	___awdiv@divisor,c
  6879  001B40  C0BF  F00F         	movff	_rcount,___awdiv@dividend
  6880  001B44  C0C0  F010         	movff	_rcount+1,___awdiv@dividend+1
  6881  001B48  EC72  F022         	call	___awdiv	;wreg free
  6882  001B4C  90D8               	bcf	status,0,c
  6883  001B4E  360F               	rlcf	?___awdiv,f,c
  6884  001B50  3610               	rlcf	?___awdiv+1,f,c
  6885  001B52  0E00               	movlw	low _LEN
  6886  001B54  240F               	addwf	?___awdiv,w,c
  6887  001B56  6ED9               	movwf	fsr2l,c
  6888  001B58  0E02               	movlw	high _LEN
  6889  001B5A  2010               	addwfc	?___awdiv+1,w,c
  6890  001B5C  6EDA               	movwf	fsr2h,c
  6891  001B5E  CFDE F017          	movff	postinc2,___wmul@multiplier
  6892  001B62  CFDD F018          	movff	postdec2,___wmul@multiplier+1
  6893  001B66  0E00               	movlw	0
  6894  001B68  6E1A               	movwf	___wmul@multiplicand+1,c
  6895  001B6A  0E28               	movlw	40
  6896  001B6C  6E19               	movwf	___wmul@multiplicand,c
  6897  001B6E  EC10  F027         	call	___wmul	;wreg free
  6898  001B72  C017  F01D         	movff	?___wmul,___awtoft@c
  6899  001B76  C018  F01E         	movff	?___wmul+1,___awtoft@c+1
  6900  001B7A  ECB5  F026         	call	___awtoft	;wreg free
  6901  001B7E  C01D  F030         	movff	?___awtoft,___ftmul@f1
  6902  001B82  C01E  F031         	movff	?___awtoft+1,___ftmul@f1+1
  6903  001B86  C01F  F032         	movff	?___awtoft+2,___ftmul@f1+2
  6904  001B8A  0E9A               	movlw	154
  6905  001B8C  6E33               	movwf	___ftmul@f2,c
  6906  001B8E  0E19               	movlw	25
  6907  001B90  6E34               	movwf	___ftmul@f2+1,c
  6908  001B92  0E3E               	movlw	62
  6909  001B94  6E35               	movwf	___ftmul@f2+2,c
  6910  001B96  EC70  F01E         	call	___ftmul	;wreg free
  6911  001B9A  C030  F32A         	movff	?___ftmul,_main$2574
  6912  001B9E  C031  F32B         	movff	?___ftmul+1,_main$2574+1
  6913  001BA2  C032  F32C         	movff	?___ftmul+2,_main$2574+2
  6914                           
  6915                           ;main.c: 799: printf("{'COM':'line','value':'Entering rect f(%i) = (%i) (%i) (%i)'}\n" ,
      +                           rcount/ 2 , LEN[rcount/2],(((double)(LEN[rcount/2]*40) * 0.15)) , ((((double)(LEN[rcoun
      +                          t/2]*40) * 0.15)) + 40));
  6916  001BA6  0E9A               	movlw	154
  6917  001BA8  6E33               	movwf	___ftmul@f2,c
  6918  001BAA  0E19               	movlw	25
  6919  001BAC  6E34               	movwf	___ftmul@f2+1,c
  6920  001BAE  0E3E               	movlw	62
  6921  001BB0  6E35               	movwf	___ftmul@f2+2,c
  6922  001BB2  0E00               	movlw	0
  6923  001BB4  6E12               	movwf	___awdiv@divisor+1,c
  6924  001BB6  0E02               	movlw	2
  6925  001BB8  6E11               	movwf	___awdiv@divisor,c
  6926  001BBA  C0BF  F00F         	movff	_rcount,___awdiv@dividend
  6927  001BBE  C0C0  F010         	movff	_rcount+1,___awdiv@dividend+1
  6928  001BC2  EC72  F022         	call	___awdiv	;wreg free
  6929  001BC6  90D8               	bcf	status,0,c
  6930  001BC8  360F               	rlcf	?___awdiv,f,c
  6931  001BCA  3610               	rlcf	?___awdiv+1,f,c
  6932  001BCC  0E00               	movlw	low _LEN
  6933  001BCE  240F               	addwf	?___awdiv,w,c
  6934  001BD0  6ED9               	movwf	fsr2l,c
  6935  001BD2  0E02               	movlw	high _LEN
  6936  001BD4  2010               	addwfc	?___awdiv+1,w,c
  6937  001BD6  6EDA               	movwf	fsr2h,c
  6938  001BD8  CFDE F017          	movff	postinc2,___wmul@multiplier
  6939  001BDC  CFDD F018          	movff	postdec2,___wmul@multiplier+1
  6940  001BE0  0E00               	movlw	0
  6941  001BE2  6E1A               	movwf	___wmul@multiplicand+1,c
  6942  001BE4  0E28               	movlw	40
  6943  001BE6  6E19               	movwf	___wmul@multiplicand,c
  6944  001BE8  EC10  F027         	call	___wmul	;wreg free
  6945  001BEC  C017  F01D         	movff	?___wmul,___awtoft@c
  6946  001BF0  C018  F01E         	movff	?___wmul+1,___awtoft@c+1
  6947  001BF4  ECB5  F026         	call	___awtoft	;wreg free
  6948  001BF8  C01D  F030         	movff	?___awtoft,___ftmul@f1
  6949  001BFC  C01E  F031         	movff	?___awtoft+1,___ftmul@f1+1
  6950  001C00  C01F  F032         	movff	?___awtoft+2,___ftmul@f1+2
  6951  001C04  EC70  F01E         	call	___ftmul	;wreg free
  6952  001C08  C030  F060         	movff	?___ftmul,___ftadd@f1
  6953  001C0C  C031  F061         	movff	?___ftmul+1,___ftadd@f1+1
  6954  001C10  C032  F062         	movff	?___ftmul+2,___ftadd@f1+2
  6955  001C14  0E00               	movlw	0
  6956  001C16  0100               	movlb	0	; () banked
  6957  001C18  6F63               	movwf	___ftadd@f2& (0+255),b
  6958  001C1A  0E20               	movlw	32
  6959  001C1C  0100               	movlb	0	; () banked
  6960  001C1E  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
  6961  001C20  0E42               	movlw	66
  6962  001C22  0100               	movlb	0	; () banked
  6963  001C24  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
  6964  001C26  EC28  F016         	call	___ftadd	;wreg free
  6965  001C2A  C060  F32D         	movff	?___ftadd,_main$2575
  6966  001C2E  C061  F32E         	movff	?___ftadd+1,_main$2575+1
  6967  001C32  C062  F32F         	movff	?___ftadd+2,_main$2575+2
  6968                           
  6969                           ;main.c: 799: printf("{'COM':'line','value':'Entering rect f(%i) = (%i) (%i) (%i)'}\n" ,
      +                           rcount/ 2 , LEN[rcount/2],(((double)(LEN[rcount/2]*40) * 0.15)) , ((((double)(LEN[rcoun
      +                          t/2]*40) * 0.15)) + 40));
  6970  001C36  0EB4               	movlw	low STR_27
  6971  001C38  0100               	movlb	0	; () banked
  6972  001C3A  6F85               	movwf	printf@f& (0+255),b
  6973  001C3C  0E7A               	movlw	high STR_27
  6974  001C3E  0100               	movlb	0	; () banked
  6975  001C40  6F86               	movwf	(printf@f+1)& (0+255),b
  6976  001C42  C0BF  F00F         	movff	_rcount,___awdiv@dividend
  6977  001C46  C0C0  F010         	movff	_rcount+1,___awdiv@dividend+1
  6978  001C4A  0E00               	movlw	0
  6979  001C4C  6E12               	movwf	___awdiv@divisor+1,c
  6980  001C4E  0E02               	movlw	2
  6981  001C50  6E11               	movwf	___awdiv@divisor,c
  6982  001C52  EC72  F022         	call	___awdiv	;wreg free
  6983  001C56  C00F  F087         	movff	?___awdiv,?_printf+2
  6984  001C5A  C010  F088         	movff	?___awdiv+1,?_printf+3
  6985  001C5E  C0BF  F00F         	movff	_rcount,___awdiv@dividend
  6986  001C62  C0C0  F010         	movff	_rcount+1,___awdiv@dividend+1
  6987  001C66  0E00               	movlw	0
  6988  001C68  6E12               	movwf	___awdiv@divisor+1,c
  6989  001C6A  0E02               	movlw	2
  6990  001C6C  6E11               	movwf	___awdiv@divisor,c
  6991  001C6E  EC72  F022         	call	___awdiv	;wreg free
  6992  001C72  90D8               	bcf	status,0,c
  6993  001C74  360F               	rlcf	?___awdiv,f,c
  6994  001C76  3610               	rlcf	?___awdiv+1,f,c
  6995  001C78  0E00               	movlw	low _LEN
  6996  001C7A  240F               	addwf	?___awdiv,w,c
  6997  001C7C  6ED9               	movwf	fsr2l,c
  6998  001C7E  0E02               	movlw	high _LEN
  6999  001C80  2010               	addwfc	?___awdiv+1,w,c
  7000  001C82  6EDA               	movwf	fsr2h,c
  7001  001C84  CFDE F089          	movff	postinc2,?_printf+4
  7002  001C88  CFDD F08A          	movff	postdec2,?_printf+5
  7003  001C8C  C32A  F08B         	movff	_main$2574,?_printf+6
  7004  001C90  C32B  F08C         	movff	_main$2574+1,?_printf+7
  7005  001C94  C32C  F08D         	movff	_main$2574+2,?_printf+8
  7006  001C98  C32D  F08E         	movff	_main$2575,?_printf+9
  7007  001C9C  C32E  F08F         	movff	_main$2575+1,?_printf+10
  7008  001CA0  C32F  F090         	movff	_main$2575+2,?_printf+11
  7009  001CA4  EC8A  F014         	call	_printf	;wreg free
  7010  001CA8  D000               	goto	l7198
  7011  001CAA                     l7198:
  7012                           
  7013                           ;main.c: 800: }
  7014                           ;main.c: 801: printf("{'COM':'Settle','name':'Area %i','color':(100,100,255)}\n",rcount)
      +                          ;
  7015  001CAA  0EAB               	movlw	low STR_30
  7016  001CAC  0100               	movlb	0	; () banked
  7017  001CAE  6F85               	movwf	printf@f& (0+255),b
  7018  001CB0  0E7B               	movlw	high STR_30
  7019  001CB2  0100               	movlb	0	; () banked
  7020  001CB4  6F86               	movwf	(printf@f+1)& (0+255),b
  7021  001CB6  C0BF  F087         	movff	_rcount,?_printf+2
  7022  001CBA  C0C0  F088         	movff	_rcount+1,?_printf+3
  7023  001CBE  EC8A  F014         	call	_printf	;wreg free
  7024  001CC2  D000               	goto	l7200
  7025  001CC4                     l7200:
  7026                           
  7027                           ;main.c: 802: }
  7028                           ;main.c: 803: }
  7029                           ;main.c: 804: if (flag_line == 1){
  7030  001CC4  0446               	decf	_flag_line,w,c
  7031  001CC6  1047               	iorwf	_flag_line+1,w,c
  7032  001CC8  A4D8               	btfss	status,2,c
  7033  001CCA  D01E               	goto	l7206
  7034                           
  7035                           ;main.c: 805: if (TIME > 200*6 ){
  7036  001CCC  0100               	movlb	0	; () banked
  7037  001CCE  BFB4               	btfsc	(_TIME+3)& (0+255),7,b
  7038  001CD0  D01B               	goto	l7206
  7039  001CD2  0100               	movlb	0	; () banked
  7040  001CD4  51B4               	movf	(_TIME+3)& (0+255),w,b
  7041  001CD6  0100               	movlb	0	; () banked
  7042  001CD8  11B3               	iorwf	(_TIME+2)& (0+255),w,b
  7043  001CDA  E108               	bnz	u9310
  7044  001CDC  0EB1               	movlw	177
  7045  001CDE  0100               	movlb	0	; () banked
  7046  001CE0  5DB1               	subwf	_TIME& (0+255),w,b
  7047  001CE2  0E04               	movlw	4
  7048  001CE4  0100               	movlb	0	; () banked
  7049  001CE6  59B2               	subwfb	(_TIME+1)& (0+255),w,b
  7050  001CE8  A0D8               	btfss	status,0,c
  7051  001CEA  D00E               	goto	l7206
  7052  001CEC                     u9310:
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;main.c: 806: TIME = 0;
  7056  001CEC  0E00               	movlw	0
  7057  001CEE  0100               	movlb	0	; () banked
  7058  001CF0  6FB1               	movwf	_TIME& (0+255),b
  7059  001CF2  0E00               	movlw	0
  7060  001CF4  6FB2               	movwf	(_TIME+1)& (0+255),b
  7061  001CF6  0E00               	movlw	0
  7062  001CF8  6FB3               	movwf	(_TIME+2)& (0+255),b
  7063  001CFA  0E00               	movlw	0
  7064  001CFC  6FB4               	movwf	(_TIME+3)& (0+255),b
  7065                           
  7066                           ;main.c: 807: flag_line = 0;
  7067  001CFE  0E00               	movlw	0
  7068  001D00  6E47               	movwf	_flag_line+1,c
  7069  001D02  0E00               	movlw	0
  7070  001D04  6E46               	movwf	_flag_line,c
  7071                           
  7072                           ; BSR set to: 0
  7073  001D06  D000               	goto	l7206
  7074  001D08                     l7206:
  7075                           
  7076                           ;main.c: 808: }
  7077                           ;main.c: 809: }
  7078                           ;main.c: 810: if (rcount == TOTAL*2-1){
  7079  001D08  0EFF               	movlw	255
  7080  001D0A  0100               	movlb	0	; () banked
  7081  001D0C  6FAC               	movwf	??_main& (0+255),b
  7082  001D0E  0EFF               	movlw	255
  7083  001D10  0100               	movlb	0	; () banked
  7084  001D12  6FAD               	movwf	(??_main+1)& (0+255),b
  7085  001D14  C0C1  F0AE         	movff	_TOTAL,??_main+2
  7086  001D18  C0C2  F0AF         	movff	_TOTAL+1,??_main+3
  7087  001D1C  90D8               	bcf	status,0,c
  7088  001D1E  0100               	movlb	0	; () banked
  7089  001D20  37AE               	rlcf	(??_main+2)& (0+255),f,b
  7090  001D22  37AF               	rlcf	(??_main+3)& (0+255),f,b
  7091  001D24  0100               	movlb	0	; () banked
  7092  001D26  51AC               	movf	??_main& (0+255),w,b
  7093  001D28  0100               	movlb	0	; () banked
  7094  001D2A  27AE               	addwf	(??_main+2)& (0+255),f,b
  7095  001D2C  0100               	movlb	0	; () banked
  7096  001D2E  51AD               	movf	(??_main+1)& (0+255),w,b
  7097  001D30  0100               	movlb	0	; () banked
  7098  001D32  23AF               	addwfc	(??_main+3)& (0+255),f,b
  7099  001D34  0100               	movlb	0	; () banked
  7100  001D36  51BF               	movf	_rcount& (0+255),w,b
  7101  001D38  0100               	movlb	0	; () banked
  7102  001D3A  19AE               	xorwf	(??_main+2)& (0+255),w,b
  7103  001D3C  E105               	bnz	u9321
  7104  001D3E  0100               	movlb	0	; () banked
  7105  001D40  51C0               	movf	(_rcount+1)& (0+255),w,b
  7106  001D42  0100               	movlb	0	; () banked
  7107  001D44  19AF               	xorwf	(??_main+3)& (0+255),w,b
  7108  001D46  A4D8               	btfss	status,2,c
  7109  001D48                     u9321:
  7110  001D48  D22A               	goto	l7296
  7111                           
  7112                           ; BSR set to: 0
  7113                           ;main.c: 811: int ms = TIME6 % 60;
  7114  001D4A  C16C  F00F         	movff	_TIME6,___almod@dividend
  7115  001D4E  C16D  F010         	movff	_TIME6+1,___almod@dividend+1
  7116  001D52  C16E  F011         	movff	_TIME6+2,___almod@dividend+2
  7117  001D56  C16F  F012         	movff	_TIME6+3,___almod@dividend+3
  7118  001D5A  0E3C               	movlw	60
  7119  001D5C  6E13               	movwf	___almod@divisor,c
  7120  001D5E  0E00               	movlw	0
  7121  001D60  6E14               	movwf	___almod@divisor+1,c
  7122  001D62  0E00               	movlw	0
  7123  001D64  6E15               	movwf	___almod@divisor+2,c
  7124  001D66  0E00               	movlw	0
  7125  001D68  6E16               	movwf	___almod@divisor+3,c
  7126  001D6A  EC69  F021         	call	___almod	;wreg free
  7127  001D6E  C00F  F308         	movff	?___almod,main@ms
  7128  001D72  C010  F309         	movff	?___almod+1,main@ms+1
  7129                           
  7130                           ;main.c: 812: int s = TIME6 / 60;
  7131  001D76  C16C  F00F         	movff	_TIME6,___aldiv@dividend
  7132  001D7A  C16D  F010         	movff	_TIME6+1,___aldiv@dividend+1
  7133  001D7E  C16E  F011         	movff	_TIME6+2,___aldiv@dividend+2
  7134  001D82  C16F  F012         	movff	_TIME6+3,___aldiv@dividend+3
  7135  001D86  0E3C               	movlw	60
  7136  001D88  6E13               	movwf	___aldiv@divisor,c
  7137  001D8A  0E00               	movlw	0
  7138  001D8C  6E14               	movwf	___aldiv@divisor+1,c
  7139  001D8E  0E00               	movlw	0
  7140  001D90  6E15               	movwf	___aldiv@divisor+2,c
  7141  001D92  0E00               	movlw	0
  7142  001D94  6E16               	movwf	___aldiv@divisor+3,c
  7143  001D96  EC5D  F01F         	call	___aldiv	;wreg free
  7144  001D9A  C00F  F30A         	movff	?___aldiv,main@s
  7145  001D9E  C010  F30B         	movff	?___aldiv+1,main@s+1
  7146                           
  7147                           ;main.c: 813: printf("{'COM':'line','value':'Time = %02u:%02u'}\n",s,ms);
  7148  001DA2  0E8D               	movlw	low STR_31
  7149  001DA4  0100               	movlb	0	; () banked
  7150  001DA6  6F85               	movwf	printf@f& (0+255),b
  7151  001DA8  0E7D               	movlw	high STR_31
  7152  001DAA  0100               	movlb	0	; () banked
  7153  001DAC  6F86               	movwf	(printf@f+1)& (0+255),b
  7154  001DAE  C30A  F087         	movff	main@s,?_printf+2
  7155  001DB2  C30B  F088         	movff	main@s+1,?_printf+3
  7156  001DB6  C308  F089         	movff	main@ms,?_printf+4
  7157  001DBA  C309  F08A         	movff	main@ms+1,?_printf+5
  7158  001DBE  EC8A  F014         	call	_printf	;wreg free
  7159                           
  7160                           ;main.c: 814: printf("{'COM':'Hold'}\n");
  7161  001DC2  0EEE               	movlw	low STR_32
  7162  001DC4  0100               	movlb	0	; () banked
  7163  001DC6  6F85               	movwf	printf@f& (0+255),b
  7164  001DC8  0E7F               	movlw	high STR_32
  7165  001DCA  0100               	movlb	0	; () banked
  7166  001DCC  6F86               	movwf	(printf@f+1)& (0+255),b
  7167  001DCE  EC8A  F014         	call	_printf	;wreg free
  7168                           
  7169                           ;main.c: 815: fns = 1;
  7170  001DD2  0E00               	movlw	0
  7171  001DD4  0100               	movlb	0	; () banked
  7172  001DD6  6FBA               	movwf	(_fns+1)& (0+255),b
  7173  001DD8  0E01               	movlw	1
  7174  001DDA  6FB9               	movwf	_fns& (0+255),b
  7175  001DDC                     l7216:
  7176                           
  7177                           ; BSR set to: 0
  7178                           ;main.c: 816: status = INITIAL;
  7179  001DDC  0E00               	movlw	0
  7180  001DDE  0101               	movlb	1	; () banked
  7181  001DE0  6F99               	movwf	(_status+1)& (0+255),b
  7182  001DE2  0E08               	movlw	8
  7183  001DE4                     L9:
  7184  001DE4  6F98               	movwf	_status& (0+255),b
  7185                           
  7186                           ; BSR set to: 1
  7187                           ;main.c: 817: }
  7188                           ;main.c: 818: }
  7189                           ;main.c: 819: break;
  7190                           
  7191                           ; BSR set to: 1
  7192  001DE6  D1DB               	goto	l7296
  7193  001DE8                     l584:
  7194                           
  7195                           ; BSR set to: 0
  7196                           ;main.c: 823: if (PORTDbits.RD6 == 0){
  7197  001DE8  BC83               	btfsc	3971,6,c	;volatile
  7198  001DEA  D00B               	goto	l7220
  7199                           
  7200                           ; BSR set to: 0
  7201                           ;main.c: 824: fns = 1;
  7202  001DEC  0E00               	movlw	0
  7203  001DEE  0100               	movlb	0	; () banked
  7204  001DF0  6FBA               	movwf	(_fns+1)& (0+255),b
  7205  001DF2  0E01               	movlw	1
  7206  001DF4  6FB9               	movwf	_fns& (0+255),b
  7207                           
  7208                           ;main.c: 825: status = INITIAL;
  7209  001DF6  0E00               	movlw	0
  7210  001DF8  0101               	movlb	1	; () banked
  7211  001DFA  6F99               	movwf	(_status+1)& (0+255),b
  7212  001DFC  0E08               	movlw	8
  7213  001DFE  6F98               	movwf	_status& (0+255),b
  7214  001E00  D000               	goto	l7220
  7215  001E02                     l7220:
  7216                           
  7217                           ;main.c: 826: }
  7218                           ;main.c: 827: PORTBbits.RB0 = 1;
  7219  001E02  8081               	bsf	3969,0,c	;volatile
  7220                           
  7221                           ;main.c: 829: PORTBbits.RB5 = 0;
  7222  001E04  9A81               	bcf	3969,5,c	;volatile
  7223                           
  7224                           ;main.c: 830: if (TIME3 > 5){
  7225  001E06  0101               	movlb	1	; () banked
  7226  001E08  BF67               	btfsc	(_TIME3+3)& (0+255),7,b
  7227  001E0A  D1C9               	goto	l7296
  7228  001E0C  0101               	movlb	1	; () banked
  7229  001E0E  5167               	movf	(_TIME3+3)& (0+255),w,b
  7230  001E10  0101               	movlb	1	; () banked
  7231  001E12  1166               	iorwf	(_TIME3+2)& (0+255),w,b
  7232  001E14  0101               	movlb	1	; () banked
  7233  001E16  1165               	iorwf	(_TIME3+1)& (0+255),w,b
  7234  001E18  E105               	bnz	u9340
  7235  001E1A  0E06               	movlw	6
  7236  001E1C  0101               	movlb	1	; () banked
  7237  001E1E  5D64               	subwf	_TIME3& (0+255),w,b
  7238  001E20  A0D8               	btfss	status,0,c
  7239  001E22  D1BD               	goto	l7296
  7240  001E24                     u9340:
  7241                           
  7242                           ; BSR set to: 1
  7243                           ;main.c: 831: TIME3 = 0;
  7244  001E24  0E00               	movlw	0
  7245  001E26  0101               	movlb	1	; () banked
  7246  001E28  6F64               	movwf	_TIME3& (0+255),b
  7247  001E2A  0E00               	movlw	0
  7248  001E2C  6F65               	movwf	(_TIME3+1)& (0+255),b
  7249  001E2E  0E00               	movlw	0
  7250  001E30  6F66               	movwf	(_TIME3+2)& (0+255),b
  7251  001E32  0E00               	movlw	0
  7252  001E34  6F67               	movwf	(_TIME3+3)& (0+255),b
  7253                           
  7254                           ; BSR set to: 1
  7255                           ;main.c: 832: EnhancedRead();
  7256  001E36  EC39  F024         	call	_EnhancedRead	;wreg free
  7257                           
  7258                           ;main.c: 833: Line();
  7259  001E3A  EC0C  F011         	call	_Line	;wreg free
  7260  001E3E  D000               	goto	l587
  7261  001E40                     l587:
  7262                           
  7263                           ;main.c: 841: }
  7264                           ;main.c: 842: if (rcount % 2 == 0){
  7265  001E40  0100               	movlb	0	; () banked
  7266  001E42  B1BF               	btfsc	_rcount& (0+255),0,b
  7267  001E44  D005               	goto	l7236
  7268                           
  7269                           ; BSR set to: 0
  7270                           ;main.c: 843: mod = TEST;
  7271  001E46  0E00               	movlw	0
  7272  001E48  0103               	movlb	3	; () banked
  7273  001E4A  6F3F               	movwf	(main@mod+1)& (0+255),b
  7274  001E4C  0E00               	movlw	0
  7275  001E4E  D004               	goto	L11
  7276  001E50                     l7236:
  7277                           
  7278                           ;main.c: 845: mod = CURVE;
  7279  001E50  0E00               	movlw	0
  7280  001E52  0103               	movlb	3	; () banked
  7281  001E54  6F3F               	movwf	(main@mod+1)& (0+255),b
  7282  001E56  0E01               	movlw	1
  7283  001E58                     L11:
  7284  001E58  6F3E               	movwf	main@mod& (0+255),b
  7285  001E5A  D000               	goto	l7238
  7286  001E5C                     l7238:
  7287                           
  7288                           ; BSR set to: 3
  7289                           ;main.c: 846: }
  7290                           ;main.c: 847: speed = VEL[mod];
  7291  001E5C  90D8               	bcf	status,0,c
  7292  001E5E  0103               	movlb	3	; () banked
  7293  001E60  353E               	rlcf	main@mod& (0+255),w,b
  7294  001E62  6ED9               	movwf	fsr2l,c
  7295  001E64  0103               	movlb	3	; () banked
  7296  001E66  353F               	rlcf	(main@mod+1)& (0+255),w,b
  7297  001E68  6EDA               	movwf	fsr2h,c
  7298  001E6A  0EC0               	movlw	low _VEL
  7299  001E6C  26D9               	addwf	fsr2l,f,c
  7300  001E6E  0E01               	movlw	high _VEL
  7301  001E70  22DA               	addwfc	fsr2h,f,c
  7302  001E72  CFDE F344          	movff	postinc2,main@speed
  7303  001E76  CFDD F345          	movff	postdec2,main@speed+1
  7304                           
  7305                           ; BSR set to: 3
  7306                           ;main.c: 848: kp = VKP[mod];
  7307  001E7A  C33E  F017         	movff	main@mod,___wmul@multiplier
  7308  001E7E  C33F  F018         	movff	main@mod+1,___wmul@multiplier+1
  7309  001E82  0E00               	movlw	0
  7310  001E84  6E1A               	movwf	___wmul@multiplicand+1,c
  7311  001E86  0E03               	movlw	3
  7312  001E88  6E19               	movwf	___wmul@multiplicand,c
  7313  001E8A  EC10  F027         	call	___wmul	;wreg free
  7314  001E8E  0EAE               	movlw	low _VKP
  7315  001E90  2417               	addwf	?___wmul,w,c
  7316  001E92  6ED9               	movwf	fsr2l,c
  7317  001E94  0E01               	movlw	high _VKP
  7318  001E96  2018               	addwfc	?___wmul+1,w,c
  7319  001E98  6EDA               	movwf	fsr2h,c
  7320  001E9A  CFDE F300          	movff	postinc2,main@kp
  7321  001E9E  CFDE F301          	movff	postinc2,main@kp+1
  7322  001EA2  CFDD F302          	movff	postdec2,main@kp+2
  7323                           
  7324                           ;main.c: 849: kd = VKD[mod];
  7325  001EA6  C33E  F017         	movff	main@mod,___wmul@multiplier
  7326  001EAA  C33F  F018         	movff	main@mod+1,___wmul@multiplier+1
  7327  001EAE  0E00               	movlw	0
  7328  001EB0  6E1A               	movwf	___wmul@multiplicand+1,c
  7329  001EB2  0E03               	movlw	3
  7330  001EB4  6E19               	movwf	___wmul@multiplicand,c
  7331  001EB6  EC10  F027         	call	___wmul	;wreg free
  7332  001EBA  0E9C               	movlw	low _VKD
  7333  001EBC  2417               	addwf	?___wmul,w,c
  7334  001EBE  6ED9               	movwf	fsr2l,c
  7335  001EC0  0E01               	movlw	high _VKD
  7336  001EC2  2018               	addwfc	?___wmul+1,w,c
  7337  001EC4  6EDA               	movwf	fsr2h,c
  7338  001EC6  CFDE F303          	movff	postinc2,main@kd
  7339  001ECA  CFDE F304          	movff	postinc2,main@kd+1
  7340  001ECE  CFDD F305          	movff	postdec2,main@kd+2
  7341                           
  7342                           ;main.c: 851: der = line - last;
  7343  001ED2  C18E  F0AC         	movff	_last,??_main
  7344  001ED6  C18F  F0AD         	movff	_last+1,??_main+1
  7345  001EDA  0100               	movlb	0	; () banked
  7346  001EDC  1FAC               	comf	??_main& (0+255),f,b
  7347  001EDE  1FAD               	comf	(??_main+1)& (0+255),f,b
  7348  001EE0  4BAC               	infsnz	??_main& (0+255),f,b
  7349  001EE2  2BAD               	incf	(??_main+1)& (0+255),f,b
  7350  001EE4  504A               	movf	_line,w,c
  7351  001EE6  0100               	movlb	0	; () banked
  7352  001EE8  25AC               	addwf	??_main& (0+255),w,b
  7353  001EEA  0101               	movlb	1	; () banked
  7354  001EEC  6F84               	movwf	_der& (0+255),b
  7355  001EEE  504B               	movf	_line+1,w,c
  7356  001EF0  0100               	movlb	0	; () banked
  7357  001EF2  21AD               	addwfc	(??_main+1)& (0+255),w,b
  7358  001EF4  0101               	movlb	1	; () banked
  7359  001EF6  6F85               	movwf	(_der+1)& (0+255),b
  7360                           
  7361                           ; BSR set to: 1
  7362                           ;main.c: 852: formula = line * kp + der * kd;
  7363  001EF8  C303  F033         	movff	main@kd,___ftmul@f2
  7364  001EFC  C304  F034         	movff	main@kd+1,___ftmul@f2+1
  7365  001F00  C305  F035         	movff	main@kd+2,___ftmul@f2+2
  7366  001F04  C184  F01D         	movff	_der,___awtoft@c
  7367  001F08  C185  F01E         	movff	_der+1,___awtoft@c+1
  7368  001F0C  ECB5  F026         	call	___awtoft	;wreg free
  7369  001F10  C01D  F030         	movff	?___awtoft,___ftmul@f1
  7370  001F14  C01E  F031         	movff	?___awtoft+1,___ftmul@f1+1
  7371  001F18  C01F  F032         	movff	?___awtoft+2,___ftmul@f1+2
  7372  001F1C  EC70  F01E         	call	___ftmul	;wreg free
  7373  001F20  C030  F063         	movff	?___ftmul,___ftadd@f2
  7374  001F24  C031  F064         	movff	?___ftmul+1,___ftadd@f2+1
  7375  001F28  C032  F065         	movff	?___ftmul+2,___ftadd@f2+2
  7376  001F2C  C300  F033         	movff	main@kp,___ftmul@f2
  7377  001F30  C301  F034         	movff	main@kp+1,___ftmul@f2+1
  7378  001F34  C302  F035         	movff	main@kp+2,___ftmul@f2+2
  7379  001F38  C04A  F01D         	movff	_line,___awtoft@c
  7380  001F3C  C04B  F01E         	movff	_line+1,___awtoft@c+1
  7381  001F40  ECB5  F026         	call	___awtoft	;wreg free
  7382  001F44  C01D  F030         	movff	?___awtoft,___ftmul@f1
  7383  001F48  C01E  F031         	movff	?___awtoft+1,___ftmul@f1+1
  7384  001F4C  C01F  F032         	movff	?___awtoft+2,___ftmul@f1+2
  7385  001F50  EC70  F01E         	call	___ftmul	;wreg free
  7386  001F54  C030  F060         	movff	?___ftmul,___ftadd@f1
  7387  001F58  C031  F061         	movff	?___ftmul+1,___ftadd@f1+1
  7388  001F5C  C032  F062         	movff	?___ftmul+2,___ftadd@f1+2
  7389  001F60  EC28  F016         	call	___ftadd	;wreg free
  7390  001F64  C060  F06C         	movff	?___ftadd,___fttol@f1
  7391  001F68  C061  F06D         	movff	?___ftadd+1,___fttol@f1+1
  7392  001F6C  C062  F06E         	movff	?___ftadd+2,___fttol@f1+2
  7393  001F70  EC1C  F01B         	call	___fttol	;wreg free
  7394  001F74  C06C  F048         	movff	?___fttol,_formula
  7395  001F78  C06D  F049         	movff	?___fttol+1,_formula+1
  7396                           
  7397                           ;main.c: 854: if (formula > 0){
  7398  001F7C  BE49               	btfsc	_formula+1,7,c
  7399  001F7E  D021               	goto	l7252
  7400  001F80  5049               	movf	_formula+1,w,c
  7401  001F82  E103               	bnz	u9360
  7402  001F84  0448               	decf	_formula,w,c
  7403  001F86  A0D8               	btfss	status,0,c
  7404  001F88  D01C               	goto	l7252
  7405  001F8A                     u9360:
  7406                           
  7407                           ;main.c: 855: MotorsSpeed(speed - formula , speed);
  7408  001F8A  C048  F0AC         	movff	_formula,??_main
  7409  001F8E  C049  F0AD         	movff	_formula+1,??_main+1
  7410  001F92  0100               	movlb	0	; () banked
  7411  001F94  1FAC               	comf	??_main& (0+255),f,b
  7412  001F96  1FAD               	comf	(??_main+1)& (0+255),f,b
  7413  001F98  4BAC               	infsnz	??_main& (0+255),f,b
  7414  001F9A  2BAD               	incf	(??_main+1)& (0+255),f,b
  7415  001F9C  0103               	movlb	3	; () banked
  7416  001F9E  5144               	movf	main@speed& (0+255),w,b
  7417  001FA0  0100               	movlb	0	; () banked
  7418  001FA2  25AC               	addwf	??_main& (0+255),w,b
  7419  001FA4  0100               	movlb	0	; () banked
  7420  001FA6  6F7B               	movwf	MotorsSpeed@A& (0+255),b
  7421  001FA8  0103               	movlb	3	; () banked
  7422  001FAA  5145               	movf	(main@speed+1)& (0+255),w,b
  7423  001FAC  0100               	movlb	0	; () banked
  7424  001FAE  21AD               	addwfc	(??_main+1)& (0+255),w,b
  7425  001FB0  0100               	movlb	0	; () banked
  7426  001FB2  6F7C               	movwf	(MotorsSpeed@A+1)& (0+255),b
  7427  001FB4  C344  F07D         	movff	main@speed,MotorsSpeed@B
  7428  001FB8  C345  F07E         	movff	main@speed+1,MotorsSpeed@B+1
  7429  001FBC  EC53  F026         	call	_MotorsSpeed	;wreg free
  7430                           
  7431                           ;main.c: 856: }else{
  7432  001FC0  D011               	goto	l7254
  7433  001FC2                     l7252:
  7434                           
  7435                           ;main.c: 857: MotorsSpeed(speed , speed + formula);
  7436  001FC2  C344  F07B         	movff	main@speed,MotorsSpeed@A
  7437  001FC6  C345  F07C         	movff	main@speed+1,MotorsSpeed@A+1
  7438  001FCA  5048               	movf	_formula,w,c
  7439  001FCC  0103               	movlb	3	; () banked
  7440  001FCE  2544               	addwf	main@speed& (0+255),w,b
  7441  001FD0  0100               	movlb	0	; () banked
  7442  001FD2  6F7D               	movwf	MotorsSpeed@B& (0+255),b
  7443  001FD4  5049               	movf	_formula+1,w,c
  7444  001FD6  0103               	movlb	3	; () banked
  7445  001FD8  2145               	addwfc	(main@speed+1)& (0+255),w,b
  7446  001FDA  0100               	movlb	0	; () banked
  7447  001FDC  6F7E               	movwf	(MotorsSpeed@B+1)& (0+255),b
  7448  001FDE  EC53  F026         	call	_MotorsSpeed	;wreg free
  7449  001FE2  D000               	goto	l7254
  7450  001FE4                     l7254:
  7451                           
  7452                           ;main.c: 858: }
  7453                           ;main.c: 859: if (flag_line == 0){
  7454  001FE4  5046               	movf	_flag_line,w,c
  7455  001FE6  1047               	iorwf	_flag_line+1,w,c
  7456  001FE8  A4D8               	btfss	status,2,c
  7457  001FEA  D086               	goto	l7278
  7458                           
  7459                           ;main.c: 860: if ((P[sd[1]] > 500 && ((line>0?line:-(line))<50)) || (P[sd[0]] > 500 && (
      +                          (line>0?line:-(line))<50))){
  7460  001FEC  90D8               	bcf	status,0,c
  7461  001FEE  0101               	movlb	1	; () banked
  7462  001FF0  35E2               	rlcf	(_sd+2)& (0+255),w,b
  7463  001FF2  6ED9               	movwf	fsr2l,c
  7464  001FF4  0101               	movlb	1	; () banked
  7465  001FF6  35E3               	rlcf	(_sd+3)& (0+255),w,b
  7466  001FF8  6EDA               	movwf	fsr2h,c
  7467  001FFA  0E00               	movlw	low _P
  7468  001FFC  26D9               	addwf	fsr2l,f,c
  7469  001FFE  0E01               	movlw	high _P
  7470  002000  22DA               	addwfc	fsr2h,f,c
  7471  002002  0E01               	movlw	1
  7472  002004  BEDB               	btfsc	plusw2,7,c
  7473  002006  D02D               	goto	l7264
  7474  002008  0EF5               	movlw	245
  7475  00200A  5CDE               	subwf	postinc2,w,c
  7476  00200C  0E01               	movlw	1
  7477  00200E  58DE               	subwfb	postinc2,w,c
  7478  002010  A0D8               	btfss	status,0,c
  7479  002012  D027               	goto	l7264
  7480                           
  7481                           ; BSR set to: 1
  7482  002014  BE4B               	btfsc	_line+1,7,c
  7483  002016  D005               	goto	l7260
  7484  002018  504B               	movf	_line+1,w,c
  7485  00201A  E111               	bnz	l599
  7486  00201C  044A               	decf	_line,w,c
  7487  00201E  B0D8               	btfsc	status,0,c
  7488  002020  D00E               	goto	l599
  7489  002022                     l7260:
  7490                           
  7491                           ; BSR set to: 1
  7492  002022  C04A  F0AC         	movff	_line,??_main
  7493  002026  C04B  F0AD         	movff	_line+1,??_main+1
  7494  00202A  0100               	movlb	0	; () banked
  7495  00202C  1FAC               	comf	??_main& (0+255),f,b
  7496  00202E  1FAD               	comf	(??_main+1)& (0+255),f,b
  7497  002030  4BAC               	infsnz	??_main& (0+255),f,b
  7498  002032  2BAD               	incf	(??_main+1)& (0+255),f,b
  7499  002034  C0AC  F324         	movff	??_main,_main$1897
  7500  002038  C0AD  F325         	movff	??_main+1,_main$1897+1
  7501  00203C  D005               	goto	l7262
  7502  00203E                     l599:
  7503                           
  7504                           ; BSR set to: 1
  7505  00203E  C04A  F324         	movff	_line,_main$1897
  7506  002042  C04B  F325         	movff	_line+1,_main$1897+1
  7507  002046  D000               	goto	l7262
  7508  002048                     l7262:
  7509  002048  0103               	movlb	3	; () banked
  7510  00204A  BF25               	btfsc	(_main$1897+1)& (0+255),7,b
  7511  00204C  D043               	goto	l7272
  7512  00204E  0103               	movlb	3	; () banked
  7513  002050  5125               	movf	(_main$1897+1)& (0+255),w,b
  7514  002052  E107               	bnz	l7264
  7515  002054  0E32               	movlw	50
  7516  002056  0103               	movlb	3	; () banked
  7517  002058  5D24               	subwf	_main$1897& (0+255),w,b
  7518  00205A  B0D8               	btfsc	status,0,c
  7519  00205C  D002               	goto	l7264
  7520  00205E  D03A               	goto	l7272
  7521  002060  D000               	goto	l7264
  7522  002062                     l7264:
  7523  002062  90D8               	bcf	status,0,c
  7524  002064  0101               	movlb	1	; () banked
  7525  002066  35E0               	rlcf	_sd& (0+255),w,b
  7526  002068  6ED9               	movwf	fsr2l,c
  7527  00206A  0101               	movlb	1	; () banked
  7528  00206C  35E1               	rlcf	(_sd+1)& (0+255),w,b
  7529  00206E  6EDA               	movwf	fsr2h,c
  7530  002070  0E00               	movlw	low _P
  7531  002072  26D9               	addwf	fsr2l,f,c
  7532  002074  0E01               	movlw	high _P
  7533  002076  22DA               	addwfc	fsr2h,f,c
  7534  002078  0E01               	movlw	1
  7535  00207A  BEDB               	btfsc	plusw2,7,c
  7536  00207C  D03D               	goto	l7278
  7537  00207E  0EF5               	movlw	245
  7538  002080  5CDE               	subwf	postinc2,w,c
  7539  002082  0E01               	movlw	1
  7540  002084  58DE               	subwfb	postinc2,w,c
  7541  002086  A0D8               	btfss	status,0,c
  7542  002088  D037               	goto	l7278
  7543                           
  7544                           ; BSR set to: 1
  7545  00208A  BE4B               	btfsc	_line+1,7,c
  7546  00208C  D005               	goto	l7268
  7547  00208E  504B               	movf	_line+1,w,c
  7548  002090  E111               	bnz	l603
  7549  002092  044A               	decf	_line,w,c
  7550  002094  B0D8               	btfsc	status,0,c
  7551  002096  D00E               	goto	l603
  7552  002098                     l7268:
  7553                           
  7554                           ; BSR set to: 1
  7555  002098  C04A  F0AC         	movff	_line,??_main
  7556  00209C  C04B  F0AD         	movff	_line+1,??_main+1
  7557  0020A0  0100               	movlb	0	; () banked
  7558  0020A2  1FAC               	comf	??_main& (0+255),f,b
  7559  0020A4  1FAD               	comf	(??_main+1)& (0+255),f,b
  7560  0020A6  4BAC               	infsnz	??_main& (0+255),f,b
  7561  0020A8  2BAD               	incf	(??_main+1)& (0+255),f,b
  7562  0020AA  C0AC  F326         	movff	??_main,_main$1898
  7563  0020AE  C0AD  F327         	movff	??_main+1,_main$1898+1
  7564  0020B2  D005               	goto	l7270
  7565  0020B4                     l603:
  7566                           
  7567                           ; BSR set to: 1
  7568  0020B4  C04A  F326         	movff	_line,_main$1898
  7569  0020B8  C04B  F327         	movff	_line+1,_main$1898+1
  7570  0020BC  D000               	goto	l7270
  7571  0020BE                     l7270:
  7572  0020BE  0103               	movlb	3	; () banked
  7573  0020C0  BF27               	btfsc	(_main$1898+1)& (0+255),7,b
  7574  0020C2  D008               	goto	l7272
  7575  0020C4  0103               	movlb	3	; () banked
  7576  0020C6  5127               	movf	(_main$1898+1)& (0+255),w,b
  7577  0020C8  E117               	bnz	l7278
  7578  0020CA  0E32               	movlw	50
  7579  0020CC  0103               	movlb	3	; () banked
  7580  0020CE  5D26               	subwf	_main$1898& (0+255),w,b
  7581  0020D0  B0D8               	btfsc	status,0,c
  7582  0020D2  D012               	goto	l7278
  7583  0020D4                     l7272:
  7584                           
  7585                           ; BSR set to: 3
  7586                           ;main.c: 861: flag_line = 1;
  7587  0020D4  0E00               	movlw	0
  7588  0020D6  6E47               	movwf	_flag_line+1,c
  7589  0020D8  0E01               	movlw	1
  7590  0020DA  6E46               	movwf	_flag_line,c
  7591                           
  7592                           ;main.c: 862: TIME = 0;
  7593  0020DC  0E00               	movlw	0
  7594  0020DE  0100               	movlb	0	; () banked
  7595  0020E0  6FB1               	movwf	_TIME& (0+255),b
  7596  0020E2  0E00               	movlw	0
  7597  0020E4  6FB2               	movwf	(_TIME+1)& (0+255),b
  7598  0020E6  0E00               	movlw	0
  7599  0020E8  6FB3               	movwf	(_TIME+2)& (0+255),b
  7600  0020EA  0E00               	movlw	0
  7601  0020EC  6FB4               	movwf	(_TIME+3)& (0+255),b
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;main.c: 863: PORTAbits.RA4 = !PORTAbits.RA4;
  7605  0020EE  7880               	btg	3968,4,c	;volatile
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;main.c: 864: rcount ++ ;
  7609  0020F0  0100               	movlb	0	; () banked
  7610  0020F2  4BBF               	infsnz	_rcount& (0+255),f,b
  7611  0020F4  2BC0               	incf	(_rcount+1)& (0+255),f,b
  7612                           
  7613                           ; BSR set to: 0
  7614  0020F6  D000               	goto	l7278
  7615  0020F8                     l7278:
  7616                           
  7617                           ;main.c: 866: }
  7618                           ;main.c: 867: }
  7619                           ;main.c: 868: if (flag_line == 1){
  7620  0020F8  0446               	decf	_flag_line,w,c
  7621  0020FA  1047               	iorwf	_flag_line+1,w,c
  7622  0020FC  A4D8               	btfss	status,2,c
  7623  0020FE  D01E               	goto	l7284
  7624                           
  7625                           ;main.c: 869: if (TIME > 500*6 ){
  7626  002100  0100               	movlb	0	; () banked
  7627  002102  BFB4               	btfsc	(_TIME+3)& (0+255),7,b
  7628  002104  D01B               	goto	l7284
  7629  002106  0100               	movlb	0	; () banked
  7630  002108  51B4               	movf	(_TIME+3)& (0+255),w,b
  7631  00210A  0100               	movlb	0	; () banked
  7632  00210C  11B3               	iorwf	(_TIME+2)& (0+255),w,b
  7633  00210E  E108               	bnz	u9450
  7634  002110  0EB9               	movlw	185
  7635  002112  0100               	movlb	0	; () banked
  7636  002114  5DB1               	subwf	_TIME& (0+255),w,b
  7637  002116  0E0B               	movlw	11
  7638  002118  0100               	movlb	0	; () banked
  7639  00211A  59B2               	subwfb	(_TIME+1)& (0+255),w,b
  7640  00211C  A0D8               	btfss	status,0,c
  7641  00211E  D00E               	goto	l7284
  7642  002120                     u9450:
  7643                           
  7644                           ; BSR set to: 0
  7645                           ;main.c: 870: TIME = 0;
  7646  002120  0E00               	movlw	0
  7647  002122  0100               	movlb	0	; () banked
  7648  002124  6FB1               	movwf	_TIME& (0+255),b
  7649  002126  0E00               	movlw	0
  7650  002128  6FB2               	movwf	(_TIME+1)& (0+255),b
  7651  00212A  0E00               	movlw	0
  7652  00212C  6FB3               	movwf	(_TIME+2)& (0+255),b
  7653  00212E  0E00               	movlw	0
  7654  002130  6FB4               	movwf	(_TIME+3)& (0+255),b
  7655                           
  7656                           ;main.c: 871: flag_line = 0;
  7657  002132  0E00               	movlw	0
  7658  002134  6E47               	movwf	_flag_line+1,c
  7659  002136  0E00               	movlw	0
  7660  002138  6E46               	movwf	_flag_line,c
  7661                           
  7662                           ; BSR set to: 0
  7663  00213A  D000               	goto	l7284
  7664  00213C                     l7284:
  7665                           
  7666                           ;main.c: 872: }
  7667                           ;main.c: 873: }
  7668                           ;main.c: 874: if (rcount == 7){
  7669  00213C  0E07               	movlw	7
  7670  00213E  0100               	movlb	0	; () banked
  7671  002140  19BF               	xorwf	_rcount& (0+255),w,b
  7672  002142  0100               	movlb	0	; () banked
  7673  002144  11C0               	iorwf	(_rcount+1)& (0+255),w,b
  7674  002146  A4D8               	btfss	status,2,c
  7675  002148  D00B               	goto	l7288
  7676                           
  7677                           ; BSR set to: 0
  7678                           ;main.c: 875: fns = 1;
  7679  00214A  0E00               	movlw	0
  7680  00214C  0100               	movlb	0	; () banked
  7681  00214E  6FBA               	movwf	(_fns+1)& (0+255),b
  7682  002150  0E01               	movlw	1
  7683  002152  6FB9               	movwf	_fns& (0+255),b
  7684                           
  7685                           ;main.c: 876: status = INITIAL;
  7686  002154  0E00               	movlw	0
  7687  002156  0101               	movlb	1	; () banked
  7688  002158  6F99               	movwf	(_status+1)& (0+255),b
  7689  00215A  0E08               	movlw	8
  7690  00215C  6F98               	movwf	_status& (0+255),b
  7691  00215E  D000               	goto	l7288
  7692  002160                     l7288:
  7693                           
  7694                           ;main.c: 877: }
  7695                           ;main.c: 878: if (TIME2 > 1000){
  7696  002160  0101               	movlb	1	; () banked
  7697  002162  BF63               	btfsc	(_TIME2+3)& (0+255),7,b
  7698  002164  D017               	goto	l7292
  7699  002166  0101               	movlb	1	; () banked
  7700  002168  5163               	movf	(_TIME2+3)& (0+255),w,b
  7701  00216A  0101               	movlb	1	; () banked
  7702  00216C  1162               	iorwf	(_TIME2+2)& (0+255),w,b
  7703  00216E  E108               	bnz	u9470
  7704  002170  0EE9               	movlw	233
  7705  002172  0101               	movlb	1	; () banked
  7706  002174  5D60               	subwf	_TIME2& (0+255),w,b
  7707  002176  0E03               	movlw	3
  7708  002178  0101               	movlb	1	; () banked
  7709  00217A  5961               	subwfb	(_TIME2+1)& (0+255),w,b
  7710  00217C  A0D8               	btfss	status,0,c
  7711  00217E  D00A               	goto	l7292
  7712  002180                     u9470:
  7713                           
  7714                           ; BSR set to: 1
  7715                           ;main.c: 882: TIME2 = 0;
  7716  002180  0E00               	movlw	0
  7717  002182  0101               	movlb	1	; () banked
  7718  002184  6F60               	movwf	_TIME2& (0+255),b
  7719  002186  0E00               	movlw	0
  7720  002188  6F61               	movwf	(_TIME2+1)& (0+255),b
  7721  00218A  0E00               	movlw	0
  7722  00218C  6F62               	movwf	(_TIME2+2)& (0+255),b
  7723  00218E  0E00               	movlw	0
  7724  002190  6F63               	movwf	(_TIME2+3)& (0+255),b
  7725  002192  D000               	goto	l7292
  7726  002194                     l7292:
  7727                           
  7728                           ; BSR set to: 1
  7729                           ;main.c: 883: }
  7730                           ;main.c: 884: last = line;
  7731  002194  C04A  F18E         	movff	_line,_last
  7732  002198  C04B  F18F         	movff	_line+1,_last+1
  7733                           
  7734                           ; BSR set to: 1
  7735                           ;main.c: 888: }
  7736                           
  7737                           ; BSR set to: 1
  7738                           ;main.c: 885: }
  7739                           ;main.c: 887: break;
  7740  00219C  D000               	goto	l7296
  7741  00219E                     l7296:
  7742  00219E  C198  F0AC         	movff	_status,??_main
  7743  0021A2  C199  F0AD         	movff	_status+1,??_main+1
  7744                           
  7745                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7746                           ; Switch size 1, requested type "space"
  7747                           ; Number of cases is 1, Range of values is 0 to 0
  7748                           ; switch strategies available:
  7749                           ; Name         Instructions Cycles
  7750                           ; simple_byte            4     3 (average)
  7751                           ;	Chosen strategy is simple_byte
  7752  0021A6  0100               	movlb	0	; () banked
  7753  0021A8  51AD               	movf	(??_main+1)& (0+255),w,b
  7754  0021AA  0A00               	xorlw	0	; case 0
  7755  0021AC  A4D8               	btfss	status,2,c
  7756  0021AE  D7F7               	goto	l7296
  7757                           
  7758                           ; BSR set to: 0
  7759                           ; Switch size 1, requested type "space"
  7760                           ; Number of cases is 12, Range of values is 0 to 11
  7761                           ; switch strategies available:
  7762                           ; Name         Instructions Cycles
  7763                           ; simple_byte           37    19 (average)
  7764                           ;	Chosen strategy is simple_byte
  7765  0021B0  0100               	movlb	0	; () banked
  7766  0021B2  51AC               	movf	??_main& (0+255),w,b
  7767  0021B4  0A00               	xorlw	0	; case 0
  7768  0021B6  B4D8               	btfsc	status,2,c
  7769  0021B8  EF56  F000         	goto	l6708
  7770  0021BC  0A01               	xorlw	1	; case 1
  7771  0021BE  B4D8               	btfsc	status,2,c
  7772  0021C0  EF3D  F004         	goto	l496
  7773  0021C4  0A03               	xorlw	3	; case 2
  7774  0021C6  B4D8               	btfsc	status,2,c
  7775  0021C8  EF5E  F009         	goto	l7116
  7776  0021CC  0A01               	xorlw	1	; case 3
  7777  0021CE  B4D8               	btfsc	status,2,c
  7778  0021D0  EF7D  F007         	goto	l518
  7779  0021D4  0A07               	xorlw	7	; case 4
  7780  0021D6  B4D8               	btfsc	status,2,c
  7781  0021D8  EFD5  F006         	goto	l7014
  7782  0021DC  0A01               	xorlw	1	; case 5
  7783  0021DE  B4D8               	btfsc	status,2,c
  7784  0021E0  EF87  F007         	goto	l7044
  7785  0021E4  0A03               	xorlw	3	; case 6
  7786  0021E6  B4D8               	btfsc	status,2,c
  7787  0021E8  EF68  F002         	goto	l483
  7788  0021EC  0A01               	xorlw	1	; case 7
  7789  0021EE  B4D8               	btfsc	status,2,c
  7790  0021F0  EFB2  F001         	goto	l6766
  7791  0021F4  0A0F               	xorlw	15	; case 8
  7792  0021F6  B4D8               	btfsc	status,2,c
  7793  0021F8  EF47  F004         	goto	l6890
  7794  0021FC  0A01               	xorlw	1	; case 9
  7795  0021FE  B4D8               	btfsc	status,2,c
  7796  002200  EF85  F002         	goto	l6822
  7797  002204  0A03               	xorlw	3	; case 10
  7798  002206  B4D8               	btfsc	status,2,c
  7799  002208  EF69  F006         	goto	l512
  7800  00220C  0A01               	xorlw	1	; case 11
  7801  00220E  B4D8               	btfsc	status,2,c
  7802  002210  D5EB               	goto	l584
  7803                           
  7804                           ; BSR set to: 0
  7805                           
  7806                           ; BSR set to: 0
  7807  002212  D7C5               	goto	l7296
  7808                           
  7809                           ; BSR set to: 0
  7810                           
  7811                           ; BSR set to: 0
  7812  002214  EF0C  F000         	goto	start
  7813  002218                     __end_of_main:
  7814                           	opt stack 0
  7815                           tblptru	equ	0xFF8
  7816                           tblptrh	equ	0xFF7
  7817                           tblptrl	equ	0xFF6
  7818                           tablat	equ	0xFF5
  7819                           postinc0	equ	0xFEE
  7820                           wreg	equ	0xFE8
  7821                           postinc1	equ	0xFE6
  7822                           postdec1	equ	0xFE5
  7823                           fsr1h	equ	0xFE2
  7824                           fsr1l	equ	0xFE1
  7825                           postinc2	equ	0xFDE
  7826                           postdec2	equ	0xFDD
  7827                           plusw2	equ	0xFDB
  7828                           fsr2h	equ	0xFDA
  7829                           fsr2l	equ	0xFD9
  7830                           status	equ	0xFD8
  7831                           
  7832 ;; *************** function _initYBOT *****************
  7833 ;; Defined at:
  7834 ;;		line 140 in file "../main.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;		None
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;		None
  7839 ;; Return value:  Size  Location     Type
  7840 ;;		None               void
  7841 ;; Registers used:
  7842 ;;		wreg, status,2, cstack
  7843 ;; Tracked objects:
  7844 ;;		On entry : 0/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7848 ;;      Params:         0       0       0       0       0       0       0       0       0
  7849 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7850 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7851 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7852 ;;Total ram usage:        0 bytes
  7853 ;; Hardware stack levels used:    1
  7854 ;; Hardware stack levels required when called:    2
  7855 ;; This function calls:
  7856 ;;		_InitAnalog
  7857 ;;		_InitTIMERS
  7858 ;;		_MotorsPWM
  7859 ;;		_ResetCounter
  7860 ;;		_configurations_init
  7861 ;; This function is called by:
  7862 ;;		_main
  7863 ;; This function uses a non-reentrant model
  7864 ;;
  7865                           
  7866                           	psect	text1
  7867  004DD0                     __ptext1:
  7868                           	opt stack 0
  7869  004DD0                     _initYBOT:
  7870                           	opt stack 28
  7871                           
  7872                           ;main.c: 141: TIME = 0;
  7873                           
  7874                           ; BSR set to: 0
  7875                           ;incstack = 0
  7876  004DD0  0E00               	movlw	0
  7877  004DD2  0100               	movlb	0	; () banked
  7878  004DD4  6FB1               	movwf	_TIME& (0+255),b
  7879  004DD6  0E00               	movlw	0
  7880  004DD8  6FB2               	movwf	(_TIME+1)& (0+255),b
  7881  004DDA  0E00               	movlw	0
  7882  004DDC  6FB3               	movwf	(_TIME+2)& (0+255),b
  7883  004DDE  0E00               	movlw	0
  7884  004DE0  6FB4               	movwf	(_TIME+3)& (0+255),b
  7885                           
  7886                           ; BSR set to: 0
  7887                           ;main.c: 142: ResetCounter();
  7888  004DE2  EC74  F027         	call	_ResetCounter	;wreg free
  7889                           
  7890                           ;main.c: 143: configurations_init();
  7891  004DE6  EC7E  F027         	call	_configurations_init	;wreg free
  7892                           
  7893                           ;main.c: 144: InitAnalog();
  7894  004DEA  ECD3  F026         	call	_InitAnalog	;wreg free
  7895                           
  7896                           ;main.c: 145: InitTIMERS();
  7897  004DEE  EC70  F024         	call	_InitTIMERS	;wreg free
  7898                           
  7899                           ;main.c: 146: MotorsPWM();
  7900  004DF2  EC96  F026         	call	_MotorsPWM	;wreg free
  7901  004DF6  0012               	return		;funcret
  7902  004DF8                     __end_of_initYBOT:
  7903                           	opt stack 0
  7904                           tblptru	equ	0xFF8
  7905                           tblptrh	equ	0xFF7
  7906                           tblptrl	equ	0xFF6
  7907                           tablat	equ	0xFF5
  7908                           postinc0	equ	0xFEE
  7909                           wreg	equ	0xFE8
  7910                           postinc1	equ	0xFE6
  7911                           postdec1	equ	0xFE5
  7912                           fsr1h	equ	0xFE2
  7913                           fsr1l	equ	0xFE1
  7914                           postinc2	equ	0xFDE
  7915                           postdec2	equ	0xFDD
  7916                           plusw2	equ	0xFDB
  7917                           fsr2h	equ	0xFDA
  7918                           fsr2l	equ	0xFD9
  7919                           status	equ	0xFD8
  7920                           
  7921 ;; *************** function _configurations_init *****************
  7922 ;; Defined at:
  7923 ;;		line 35 in file "../config.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;		None
  7926 ;; Auto vars:     Size  Location     Type
  7927 ;;		None
  7928 ;; Return value:  Size  Location     Type
  7929 ;;		None               void
  7930 ;; Registers used:
  7931 ;;		wreg, status,2
  7932 ;; Tracked objects:
  7933 ;;		On entry : 0/0
  7934 ;;		On exit  : 0/0
  7935 ;;		Unchanged: 0/0
  7936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7937 ;;      Params:         0       0       0       0       0       0       0       0       0
  7938 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7939 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7940 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7941 ;;Total ram usage:        0 bytes
  7942 ;; Hardware stack levels used:    1
  7943 ;; Hardware stack levels required when called:    1
  7944 ;; This function calls:
  7945 ;;		Nothing
  7946 ;; This function is called by:
  7947 ;;		_initYBOT
  7948 ;; This function uses a non-reentrant model
  7949 ;;
  7950                           
  7951                           	psect	text2
  7952  004EFC                     __ptext2:
  7953                           	opt stack 0
  7954  004EFC                     _configurations_init:
  7955                           	opt stack 28
  7956                           
  7957                           ;config.c: 36: OSCCONbits.IRCF = 7;
  7958                           
  7959                           ;incstack = 0
  7960  004EFC  88D3               	bsf	4051,4,c	;volatile
  7961  004EFE  8AD3               	bsf	4051,5,c	;volatile
  7962  004F00  8CD3               	bsf	4051,6,c	;volatile
  7963                           
  7964                           ;config.c: 39: CMCON=0x07;
  7965  004F02  0E07               	movlw	7
  7966  004F04  6EB4               	movwf	4020,c	;volatile
  7967                           
  7968                           ;config.c: 42: UCONbits.USBEN = 0;
  7969  004F06  966D               	bcf	3949,3,c	;volatile
  7970                           
  7971                           ;config.c: 43: UCFGbits.UTRDIS = 1;
  7972  004F08  866F               	bsf	3951,3,c	;volatile
  7973  004F0A  0012               	return		;funcret
  7974  004F0C                     __end_of_configurations_init:
  7975                           	opt stack 0
  7976                           tblptru	equ	0xFF8
  7977                           tblptrh	equ	0xFF7
  7978                           tblptrl	equ	0xFF6
  7979                           tablat	equ	0xFF5
  7980                           postinc0	equ	0xFEE
  7981                           wreg	equ	0xFE8
  7982                           postinc1	equ	0xFE6
  7983                           postdec1	equ	0xFE5
  7984                           fsr1h	equ	0xFE2
  7985                           fsr1l	equ	0xFE1
  7986                           postinc2	equ	0xFDE
  7987                           postdec2	equ	0xFDD
  7988                           plusw2	equ	0xFDB
  7989                           fsr2h	equ	0xFDA
  7990                           fsr2l	equ	0xFD9
  7991                           status	equ	0xFD8
  7992                           
  7993 ;; *************** function _ResetCounter *****************
  7994 ;; Defined at:
  7995 ;;		line 149 in file "../main.c"
  7996 ;; Parameters:    Size  Location     Type
  7997 ;;		None
  7998 ;; Auto vars:     Size  Location     Type
  7999 ;;		None
  8000 ;; Return value:  Size  Location     Type
  8001 ;;		None               void
  8002 ;; Registers used:
  8003 ;;		wreg, status,2
  8004 ;; Tracked objects:
  8005 ;;		On entry : 0/0
  8006 ;;		On exit  : 0/0
  8007 ;;		Unchanged: 0/0
  8008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8009 ;;      Params:         0       0       0       0       0       0       0       0       0
  8010 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8011 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8012 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8013 ;;Total ram usage:        0 bytes
  8014 ;; Hardware stack levels used:    1
  8015 ;; Hardware stack levels required when called:    1
  8016 ;; This function calls:
  8017 ;;		Nothing
  8018 ;; This function is called by:
  8019 ;;		_initYBOT
  8020 ;; This function uses a non-reentrant model
  8021 ;;
  8022                           
  8023                           	psect	text3
  8024  004EE8                     __ptext3:
  8025                           	opt stack 0
  8026  004EE8                     _ResetCounter:
  8027                           	opt stack 28
  8028                           
  8029                           ;main.c: 150: TIME = 0;
  8030                           
  8031                           ;incstack = 0
  8032  004EE8  0E00               	movlw	0
  8033  004EEA  0100               	movlb	0	; () banked
  8034  004EEC  6FB1               	movwf	_TIME& (0+255),b
  8035  004EEE  0E00               	movlw	0
  8036  004EF0  6FB2               	movwf	(_TIME+1)& (0+255),b
  8037  004EF2  0E00               	movlw	0
  8038  004EF4  6FB3               	movwf	(_TIME+2)& (0+255),b
  8039  004EF6  0E00               	movlw	0
  8040  004EF8  6FB4               	movwf	(_TIME+3)& (0+255),b
  8041                           
  8042                           ; BSR set to: 0
  8043  004EFA  0012               	return		;funcret
  8044  004EFC                     __end_of_ResetCounter:
  8045                           	opt stack 0
  8046                           tblptru	equ	0xFF8
  8047                           tblptrh	equ	0xFF7
  8048                           tblptrl	equ	0xFF6
  8049                           tablat	equ	0xFF5
  8050                           postinc0	equ	0xFEE
  8051                           wreg	equ	0xFE8
  8052                           postinc1	equ	0xFE6
  8053                           postdec1	equ	0xFE5
  8054                           fsr1h	equ	0xFE2
  8055                           fsr1l	equ	0xFE1
  8056                           postinc2	equ	0xFDE
  8057                           postdec2	equ	0xFDD
  8058                           plusw2	equ	0xFDB
  8059                           fsr2h	equ	0xFDA
  8060                           fsr2l	equ	0xFD9
  8061                           status	equ	0xFD8
  8062                           
  8063 ;; *************** function _MotorsPWM *****************
  8064 ;; Defined at:
  8065 ;;		line 144 in file "../config.c"
  8066 ;; Parameters:    Size  Location     Type
  8067 ;;		None
  8068 ;; Auto vars:     Size  Location     Type
  8069 ;;		None
  8070 ;; Return value:  Size  Location     Type
  8071 ;;		None               void
  8072 ;; Registers used:
  8073 ;;		wreg, status,2
  8074 ;; Tracked objects:
  8075 ;;		On entry : 0/0
  8076 ;;		On exit  : 0/0
  8077 ;;		Unchanged: 0/0
  8078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8079 ;;      Params:         0       0       0       0       0       0       0       0       0
  8080 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8081 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8082 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8083 ;;Total ram usage:        0 bytes
  8084 ;; Hardware stack levels used:    1
  8085 ;; Hardware stack levels required when called:    1
  8086 ;; This function calls:
  8087 ;;		Nothing
  8088 ;; This function is called by:
  8089 ;;		_initYBOT
  8090 ;; This function uses a non-reentrant model
  8091 ;;
  8092                           
  8093                           	psect	text4
  8094  004D2C                     __ptext4:
  8095                           	opt stack 0
  8096  004D2C                     _MotorsPWM:
  8097                           	opt stack 28
  8098                           
  8099                           ;config.c: 146: T2OUTPS0 = 0;
  8100                           
  8101                           ; BSR set to: 0
  8102                           ;incstack = 0
  8103  004D2C  96CA               	bcf	4042,3,c	;volatile
  8104                           
  8105                           ;config.c: 147: T2OUTPS1 = 0;
  8106  004D2E  98CA               	bcf	4042,4,c	;volatile
  8107                           
  8108                           ;config.c: 148: T2OUTPS2 = 0;
  8109  004D30  9ACA               	bcf	4042,5,c	;volatile
  8110                           
  8111                           ;config.c: 149: T2OUTPS3 = 0;
  8112  004D32  9CCA               	bcf	4042,6,c	;volatile
  8113                           
  8114                           ;config.c: 151: TMR2ON = 1;
  8115  004D34  84CA               	bsf	4042,2,c	;volatile
  8116                           
  8117                           ;config.c: 152: T2CKPS0 = 0;
  8118  004D36  90CA               	bcf	4042,0,c	;volatile
  8119                           
  8120                           ;config.c: 153: T2CKPS1 = 0;
  8121  004D38  92CA               	bcf	4042,1,c	;volatile
  8122                           
  8123                           ;config.c: 155: TMR2ON = 1;
  8124  004D3A  84CA               	bsf	4042,2,c	;volatile
  8125                           
  8126                           ;config.c: 158: T2CONbits.TOUTPS=11;
  8127  004D3C  50CA               	movf	4042,w,c	;volatile
  8128  004D3E  0B87               	andlw	-121
  8129  004D40  0958               	iorlw	88
  8130  004D42  6ECA               	movwf	4042,c	;volatile
  8131                           
  8132                           ;config.c: 159: T2CONbits.T2CKPS=1;
  8133  004D44  50CA               	movf	4042,w,c	;volatile
  8134  004D46  0BFC               	andlw	-4
  8135  004D48  0901               	iorlw	1
  8136  004D4A  6ECA               	movwf	4042,c	;volatile
  8137                           
  8138                           ;config.c: 160: T2CONbits.TMR2ON=0;
  8139  004D4C  94CA               	bcf	4042,2,c	;volatile
  8140                           
  8141                           ;config.c: 161: PR2=249;
  8142  004D4E  0EF9               	movlw	249
  8143  004D50  6ECB               	movwf	4043,c	;volatile
  8144                           
  8145                           ;config.c: 162: T2CONbits.TMR2ON=1;
  8146  004D52  84CA               	bsf	4042,2,c	;volatile
  8147                           
  8148                           ;config.c: 165: CCP1CONbits.CCP1M = 1100;
  8149  004D54  50BD               	movf	4029,w,c	;volatile
  8150  004D56  0BF0               	andlw	-16
  8151  004D58  090C               	iorlw	12
  8152  004D5A  6EBD               	movwf	4029,c	;volatile
  8153                           
  8154                           ;config.c: 166: CCP2CONbits.CCP2M = 1100;
  8155  004D5C  50BA               	movf	4026,w,c	;volatile
  8156  004D5E  0BF0               	andlw	-16
  8157  004D60  090C               	iorlw	12
  8158  004D62  6EBA               	movwf	4026,c	;volatile
  8159                           
  8160                           ;config.c: 167: PR2 = 249;
  8161  004D64  0EF9               	movlw	249
  8162  004D66  6ECB               	movwf	4043,c	;volatile
  8163  004D68  0012               	return		;funcret
  8164  004D6A                     __end_of_MotorsPWM:
  8165                           	opt stack 0
  8166                           tblptru	equ	0xFF8
  8167                           tblptrh	equ	0xFF7
  8168                           tblptrl	equ	0xFF6
  8169                           tablat	equ	0xFF5
  8170                           postinc0	equ	0xFEE
  8171                           wreg	equ	0xFE8
  8172                           postinc1	equ	0xFE6
  8173                           postdec1	equ	0xFE5
  8174                           fsr1h	equ	0xFE2
  8175                           fsr1l	equ	0xFE1
  8176                           postinc2	equ	0xFDE
  8177                           postdec2	equ	0xFDD
  8178                           plusw2	equ	0xFDB
  8179                           fsr2h	equ	0xFDA
  8180                           fsr2l	equ	0xFD9
  8181                           status	equ	0xFD8
  8182                           
  8183 ;; *************** function _InitTIMERS *****************
  8184 ;; Defined at:
  8185 ;;		line 46 in file "../config.c"
  8186 ;; Parameters:    Size  Location     Type
  8187 ;;		None
  8188 ;; Auto vars:     Size  Location     Type
  8189 ;;		None
  8190 ;; Return value:  Size  Location     Type
  8191 ;;		None               void
  8192 ;; Registers used:
  8193 ;;		wreg, status,2
  8194 ;; Tracked objects:
  8195 ;;		On entry : 0/0
  8196 ;;		On exit  : 0/0
  8197 ;;		Unchanged: 0/0
  8198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8199 ;;      Params:         0       0       0       0       0       0       0       0       0
  8200 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8201 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8202 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8203 ;;Total ram usage:        0 bytes
  8204 ;; Hardware stack levels used:    1
  8205 ;; Hardware stack levels required when called:    1
  8206 ;; This function calls:
  8207 ;;		Nothing
  8208 ;; This function is called by:
  8209 ;;		_initYBOT
  8210 ;; This function uses a non-reentrant model
  8211 ;;
  8212                           
  8213                           	psect	text5
  8214  0048E0                     __ptext5:
  8215                           	opt stack 0
  8216  0048E0                     _InitTIMERS:
  8217                           	opt stack 28
  8218                           
  8219                           ;config.c: 47: T0CONbits.TMR0ON = 0;
  8220                           
  8221                           ;incstack = 0
  8222  0048E0  9ED5               	bcf	4053,7,c	;volatile
  8223                           
  8224                           ;config.c: 48: T0CONbits.T08BIT = 0;
  8225  0048E2  9CD5               	bcf	4053,6,c	;volatile
  8226                           
  8227                           ;config.c: 49: T0CONbits.T0CS = 0;
  8228  0048E4  9AD5               	bcf	4053,5,c	;volatile
  8229                           
  8230                           ;config.c: 51: T0CONbits.PSA = 1;
  8231  0048E6  86D5               	bsf	4053,3,c	;volatile
  8232                           
  8233                           ;config.c: 52: TMR0H = 0xF8;
  8234  0048E8  0EF8               	movlw	248
  8235  0048EA  6ED7               	movwf	4055,c	;volatile
  8236                           
  8237                           ;config.c: 53: TMR0L = 0x2F;
  8238  0048EC  0E2F               	movlw	47
  8239  0048EE  6ED6               	movwf	4054,c	;volatile
  8240                           
  8241                           ;config.c: 56: INTCON2bits.TMR0IP = 1;
  8242  0048F0  84F1               	bsf	intcon2,2,c	;volatile
  8243                           
  8244                           ;config.c: 57: RCONbits.IPEN = 0;
  8245  0048F2  9ED0               	bcf	4048,7,c	;volatile
  8246                           
  8247                           ;config.c: 58: INTCONbits.TMR0IE = 1;
  8248  0048F4  8AF2               	bsf	intcon,5,c	;volatile
  8249                           
  8250                           ;config.c: 62: INTCONbits.GIE = 1;
  8251  0048F6  8EF2               	bsf	intcon,7,c	;volatile
  8252                           
  8253                           ;config.c: 64: T0CONbits.TMR0ON = 1;
  8254  0048F8  8ED5               	bsf	4053,7,c	;volatile
  8255                           
  8256                           ;config.c: 66: T1CONbits.TMR1ON = 0;
  8257  0048FA  90CD               	bcf	4045,0,c	;volatile
  8258                           
  8259                           ;config.c: 67: T1CONbits.T1RD16 = 0;
  8260  0048FC  9ECD               	bcf	4045,7,c	;volatile
  8261                           
  8262                           ;config.c: 68: T1CONbits.T1RUN = 0;
  8263  0048FE  9CCD               	bcf	4045,6,c	;volatile
  8264                           
  8265                           ;config.c: 69: T1CONbits.T1CKPS = 0;
  8266  004900  0ECF               	movlw	-49
  8267  004902  16CD               	andwf	4045,f,c	;volatile
  8268                           
  8269                           ;config.c: 70: T1CONbits.T1OSCEN = 0;
  8270  004904  96CD               	bcf	4045,3,c	;volatile
  8271                           
  8272                           ;config.c: 71: T1CONbits.TMR1CS = 0;
  8273  004906  92CD               	bcf	4045,1,c	;volatile
  8274                           
  8275                           ;config.c: 72: T1CONbits.TMR1ON = 1;
  8276  004908  80CD               	bsf	4045,0,c	;volatile
  8277                           
  8278                           ;config.c: 74: TMR1H = 0xF8;
  8279  00490A  0EF8               	movlw	248
  8280  00490C  6ECF               	movwf	4047,c	;volatile
  8281                           
  8282                           ;config.c: 75: TMR1L = 0x2F;
  8283  00490E  0E2F               	movlw	47
  8284  004910  6ECE               	movwf	4046,c	;volatile
  8285                           
  8286                           ;config.c: 83: TRISBbits.TRISB5 = OUTPUT;
  8287  004912  9A93               	bcf	3987,5,c	;volatile
  8288                           
  8289                           ;config.c: 85: TRISAbits.TRISA4 = OUTPUT;
  8290  004914  9892               	bcf	3986,4,c	;volatile
  8291                           
  8292                           ;config.c: 86: TRISBbits.TRISB0 = OUTPUT;
  8293  004916  9093               	bcf	3987,0,c	;volatile
  8294                           
  8295                           ;config.c: 88: TRISDbits.TRISD4 = INPUT;
  8296  004918  8895               	bsf	3989,4,c	;volatile
  8297                           
  8298                           ;config.c: 89: TRISDbits.TRISD5 = INPUT;
  8299  00491A  8A95               	bsf	3989,5,c	;volatile
  8300                           
  8301                           ;config.c: 90: TRISDbits.TRISD6 = INPUT;
  8302  00491C  8C95               	bsf	3989,6,c	;volatile
  8303                           
  8304                           ;config.c: 93: TRISDbits.TRISD1 = OUTPUT;
  8305  00491E  9295               	bcf	3989,1,c	;volatile
  8306                           
  8307                           ;config.c: 94: TRISDbits.TRISD2 = OUTPUT;
  8308  004920  9495               	bcf	3989,2,c	;volatile
  8309                           
  8310                           ;config.c: 95: TRISDbits.TRISD0 = INPUT;
  8311  004922  8095               	bsf	3989,0,c	;volatile
  8312                           
  8313                           ;config.c: 96: TRISDbits.TRISD3 = OUTPUT;
  8314  004924  9695               	bcf	3989,3,c	;volatile
  8315                           
  8316                           ;config.c: 99: TRISCbits.TRISC1 = OUTPUT;
  8317  004926  9294               	bcf	3988,1,c	;volatile
  8318                           
  8319                           ;config.c: 100: TRISCbits.TRISC2 = OUTPUT;
  8320  004928  9494               	bcf	3988,2,c	;volatile
  8321                           
  8322                           ;config.c: 103: TRISAbits.TRISA0 = INPUT;
  8323  00492A  8092               	bsf	3986,0,c	;volatile
  8324                           
  8325                           ;config.c: 104: TRISAbits.TRISA1 = INPUT;
  8326  00492C  8292               	bsf	3986,1,c	;volatile
  8327                           
  8328                           ;config.c: 105: TRISAbits.TRISA2 = INPUT;
  8329  00492E  8492               	bsf	3986,2,c	;volatile
  8330                           
  8331                           ;config.c: 106: TRISAbits.TRISA3 = INPUT;
  8332  004930  8692               	bsf	3986,3,c	;volatile
  8333                           
  8334                           ;config.c: 107: TRISAbits.TRISA5 = INPUT;
  8335  004932  8A92               	bsf	3986,5,c	;volatile
  8336                           
  8337                           ;config.c: 109: TRISEbits.TRISE0 = INPUT;
  8338  004934  8096               	bsf	3990,0,c	;volatile
  8339                           
  8340                           ;config.c: 110: TRISEbits.TRISE1 = INPUT;
  8341  004936  8296               	bsf	3990,1,c	;volatile
  8342                           
  8343                           ;config.c: 111: TRISEbits.TRISE2 = INPUT;
  8344  004938  8496               	bsf	3990,2,c	;volatile
  8345                           
  8346                           ;config.c: 112: TRISBbits.TRISB2 = INPUT;
  8347  00493A  8493               	bsf	3987,2,c	;volatile
  8348                           
  8349                           ;config.c: 114: TRISBbits.TRISB1 = INPUT;
  8350  00493C  8293               	bsf	3987,1,c	;volatile
  8351                           
  8352                           ;config.c: 119: TRISCbits.TRISC6 = OUTPUT;
  8353  00493E  9C94               	bcf	3988,6,c	;volatile
  8354                           
  8355                           ;config.c: 120: TRISCbits.TRISC7 = INPUT;
  8356  004940  8E94               	bsf	3988,7,c	;volatile
  8357                           
  8358                           ;config.c: 122: PORTEbits.RDPU = 1;
  8359  004942  8E84               	bsf	3972,7,c	;volatile
  8360  004944  0012               	return		;funcret
  8361  004946                     __end_of_InitTIMERS:
  8362                           	opt stack 0
  8363                           tblptru	equ	0xFF8
  8364                           tblptrh	equ	0xFF7
  8365                           tblptrl	equ	0xFF6
  8366                           tablat	equ	0xFF5
  8367                           intcon	equ	0xFF2
  8368                           intcon2	equ	0xFF1
  8369                           postinc0	equ	0xFEE
  8370                           wreg	equ	0xFE8
  8371                           postinc1	equ	0xFE6
  8372                           postdec1	equ	0xFE5
  8373                           fsr1h	equ	0xFE2
  8374                           fsr1l	equ	0xFE1
  8375                           postinc2	equ	0xFDE
  8376                           postdec2	equ	0xFDD
  8377                           plusw2	equ	0xFDB
  8378                           fsr2h	equ	0xFDA
  8379                           fsr2l	equ	0xFD9
  8380                           status	equ	0xFD8
  8381                           
  8382 ;; *************** function _InitAnalog *****************
  8383 ;; Defined at:
  8384 ;;		line 125 in file "../config.c"
  8385 ;; Parameters:    Size  Location     Type
  8386 ;;		None
  8387 ;; Auto vars:     Size  Location     Type
  8388 ;;		None
  8389 ;; Return value:  Size  Location     Type
  8390 ;;		None               void
  8391 ;; Registers used:
  8392 ;;		wreg, status,2
  8393 ;; Tracked objects:
  8394 ;;		On entry : 0/0
  8395 ;;		On exit  : 0/0
  8396 ;;		Unchanged: 0/0
  8397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8398 ;;      Params:         0       0       0       0       0       0       0       0       0
  8399 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8400 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8401 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8402 ;;Total ram usage:        0 bytes
  8403 ;; Hardware stack levels used:    1
  8404 ;; Hardware stack levels required when called:    1
  8405 ;; This function calls:
  8406 ;;		Nothing
  8407 ;; This function is called by:
  8408 ;;		_initYBOT
  8409 ;; This function uses a non-reentrant model
  8410 ;;
  8411                           
  8412                           	psect	text6
  8413  004DA6                     __ptext6:
  8414                           	opt stack 0
  8415  004DA6                     _InitAnalog:
  8416                           	opt stack 28
  8417                           
  8418                           ;config.c: 126: ADCON1bits.VCFG1 = 0;
  8419                           
  8420                           ;incstack = 0
  8421  004DA6  9AC1               	bcf	4033,5,c	;volatile
  8422                           
  8423                           ;config.c: 127: ADCON1bits.VCFG0 = 0;
  8424  004DA8  98C1               	bcf	4033,4,c	;volatile
  8425                           
  8426                           ;config.c: 129: ADCON1bits.PCFG3 = 0;
  8427  004DAA  96C1               	bcf	4033,3,c	;volatile
  8428                           
  8429                           ;config.c: 130: ADCON1bits.PCFG2 = 1;
  8430  004DAC  84C1               	bsf	4033,2,c	;volatile
  8431                           
  8432                           ;config.c: 131: ADCON1bits.PCFG1 = 0;
  8433  004DAE  92C1               	bcf	4033,1,c	;volatile
  8434                           
  8435                           ;config.c: 132: ADCON1bits.PCFG0 = 0;
  8436  004DB0  90C1               	bcf	4033,0,c	;volatile
  8437                           
  8438                           ;config.c: 136: ADCON2bits.ADFM=0;
  8439  004DB2  9EC0               	bcf	4032,7,c	;volatile
  8440                           
  8441                           ;config.c: 137: ADCON2bits.ACQT=7;
  8442  004DB4  86C0               	bsf	4032,3,c	;volatile
  8443  004DB6  88C0               	bsf	4032,4,c	;volatile
  8444  004DB8  8AC0               	bsf	4032,5,c	;volatile
  8445                           
  8446                           ;config.c: 138: ADCON2bits.ADCS=6;
  8447  004DBA  50C0               	movf	4032,w,c	;volatile
  8448  004DBC  0BF8               	andlw	-8
  8449  004DBE  0906               	iorlw	6
  8450  004DC0  6EC0               	movwf	4032,c	;volatile
  8451                           
  8452                           ;config.c: 139: ADCON0bits.CHS=0;
  8453  004DC2  94C2               	bcf	4034,2,c	;volatile
  8454  004DC4  96C2               	bcf	4034,3,c	;volatile
  8455  004DC6  98C2               	bcf	4034,4,c	;volatile
  8456  004DC8  9AC2               	bcf	4034,5,c	;volatile
  8457                           
  8458                           ;config.c: 140: ADCON0bits.GODONE=0;
  8459  004DCA  92C2               	bcf	4034,1,c	;volatile
  8460                           
  8461                           ;config.c: 141: ADCON0bits.ADON=1;
  8462  004DCC  80C2               	bsf	4034,0,c	;volatile
  8463  004DCE  0012               	return		;funcret
  8464  004DD0                     __end_of_InitAnalog:
  8465                           	opt stack 0
  8466                           tblptru	equ	0xFF8
  8467                           tblptrh	equ	0xFF7
  8468                           tblptrl	equ	0xFF6
  8469                           tablat	equ	0xFF5
  8470                           intcon	equ	0xFF2
  8471                           intcon2	equ	0xFF1
  8472                           postinc0	equ	0xFEE
  8473                           wreg	equ	0xFE8
  8474                           postinc1	equ	0xFE6
  8475                           postdec1	equ	0xFE5
  8476                           fsr1h	equ	0xFE2
  8477                           fsr1l	equ	0xFE1
  8478                           postinc2	equ	0xFDE
  8479                           postdec2	equ	0xFDD
  8480                           plusw2	equ	0xFDB
  8481                           fsr2h	equ	0xFDA
  8482                           fsr2l	equ	0xFD9
  8483                           status	equ	0xFD8
  8484                           
  8485 ;; *************** function _initLED *****************
  8486 ;; Defined at:
  8487 ;;		line 173 in file "../main.c"
  8488 ;; Parameters:    Size  Location     Type
  8489 ;;		None
  8490 ;; Auto vars:     Size  Location     Type
  8491 ;;		None
  8492 ;; Return value:  Size  Location     Type
  8493 ;;		None               void
  8494 ;; Registers used:
  8495 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8496 ;; Tracked objects:
  8497 ;;		On entry : 0/0
  8498 ;;		On exit  : 0/0
  8499 ;;		Unchanged: 0/0
  8500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8501 ;;      Params:         0       0       0       0       0       0       0       0       0
  8502 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8503 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8504 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8505 ;;Total ram usage:        0 bytes
  8506 ;; Hardware stack levels used:    1
  8507 ;; Hardware stack levels required when called:    1
  8508 ;; This function calls:
  8509 ;;		Nothing
  8510 ;; This function is called by:
  8511 ;;		_main
  8512 ;; This function uses a non-reentrant model
  8513 ;;
  8514                           
  8515                           	psect	text7
  8516  004ABE                     __ptext7:
  8517                           	opt stack 0
  8518  004ABE                     _initLED:
  8519                           	opt stack 29
  8520                           
  8521                           ;main.c: 174: for (x = 0;x < 11;x++){
  8522                           
  8523                           ;incstack = 0
  8524  004ABE  0E00               	movlw	0
  8525  004AC0  6E4F               	movwf	_x+1,c
  8526  004AC2  0E00               	movlw	0
  8527  004AC4  6E4E               	movwf	_x,c
  8528  004AC6                     l6480:
  8529  004AC6  BE4F               	btfsc	_x+1,7,c
  8530  004AC8  D008               	goto	l6484
  8531  004ACA  504F               	movf	_x+1,w,c
  8532  004ACC  E124               	bnz	l311
  8533  004ACE  0E0B               	movlw	11
  8534  004AD0  5C4E               	subwf	_x,w,c
  8535  004AD2  B0D8               	btfsc	status,0,c
  8536  004AD4  D020               	goto	l311
  8537  004AD6  D001               	goto	l6484
  8538  004AD8  D01E               	goto	l311
  8539  004ADA                     l6484:
  8540                           
  8541                           ;main.c: 175: amax[x] = 0;
  8542  004ADA  90D8               	bcf	status,0,c
  8543  004ADC  344E               	rlcf	_x,w,c
  8544  004ADE  6ED9               	movwf	fsr2l,c
  8545  004AE0  344F               	rlcf	_x+1,w,c
  8546  004AE2  6EDA               	movwf	fsr2h,c
  8547  004AE4  0E20               	movlw	low _amax
  8548  004AE6  26D9               	addwf	fsr2l,f,c
  8549  004AE8  0E01               	movlw	high _amax
  8550  004AEA  22DA               	addwfc	fsr2h,f,c
  8551  004AEC  0E00               	movlw	0
  8552  004AEE  6EDE               	movwf	postinc2,c
  8553  004AF0  0E00               	movlw	0
  8554  004AF2  6EDD               	movwf	postdec2,c
  8555                           
  8556                           ;main.c: 176: amin[x] = 1024;
  8557  004AF4  90D8               	bcf	status,0,c
  8558  004AF6  344E               	rlcf	_x,w,c
  8559  004AF8  6ED9               	movwf	fsr2l,c
  8560  004AFA  344F               	rlcf	_x+1,w,c
  8561  004AFC  6EDA               	movwf	fsr2h,c
  8562  004AFE  0E40               	movlw	low _amin
  8563  004B00  26D9               	addwf	fsr2l,f,c
  8564  004B02  0E01               	movlw	high _amin
  8565  004B04  22DA               	addwfc	fsr2h,f,c
  8566  004B06  0E00               	movlw	0
  8567  004B08  6EDE               	movwf	postinc2,c
  8568  004B0A  0E04               	movlw	4
  8569  004B0C  6EDD               	movwf	postdec2,c
  8570  004B0E  4A4E               	infsnz	_x,f,c
  8571  004B10  2A4F               	incf	_x+1,f,c
  8572  004B12  D7D9               	goto	l6480
  8573  004B14  D000               	goto	l311
  8574  004B16                     l311:
  8575  004B16  0012               	return		;funcret
  8576  004B18                     __end_of_initLED:
  8577                           	opt stack 0
  8578                           tblptru	equ	0xFF8
  8579                           tblptrh	equ	0xFF7
  8580                           tblptrl	equ	0xFF6
  8581                           tablat	equ	0xFF5
  8582                           intcon	equ	0xFF2
  8583                           intcon2	equ	0xFF1
  8584                           postinc0	equ	0xFEE
  8585                           wreg	equ	0xFE8
  8586                           postinc1	equ	0xFE6
  8587                           postdec1	equ	0xFE5
  8588                           fsr1h	equ	0xFE2
  8589                           fsr1l	equ	0xFE1
  8590                           postinc2	equ	0xFDE
  8591                           postdec2	equ	0xFDD
  8592                           plusw2	equ	0xFDB
  8593                           fsr2h	equ	0xFDA
  8594                           fsr2l	equ	0xFD9
  8595                           status	equ	0xFD8
  8596                           
  8597 ;; *************** function ___almod *****************
  8598 ;; Defined at:
  8599 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/almod.c"
  8600 ;; Parameters:    Size  Location     Type
  8601 ;;  dividend        4   14[COMRAM] long 
  8602 ;;  divisor         4   18[COMRAM] long 
  8603 ;; Auto vars:     Size  Location     Type
  8604 ;;  sign            1   23[COMRAM] unsigned char 
  8605 ;;  counter         1   22[COMRAM] unsigned char 
  8606 ;; Return value:  Size  Location     Type
  8607 ;;                  4   14[COMRAM] long 
  8608 ;; Registers used:
  8609 ;;		wreg, status,2, status,0
  8610 ;; Tracked objects:
  8611 ;;		On entry : 0/0
  8612 ;;		On exit  : 0/0
  8613 ;;		Unchanged: 0/0
  8614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8615 ;;      Params:         8       0       0       0       0       0       0       0       0
  8616 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8617 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8618 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8619 ;;Total ram usage:       10 bytes
  8620 ;; Hardware stack levels used:    1
  8621 ;; Hardware stack levels required when called:    1
  8622 ;; This function calls:
  8623 ;;		Nothing
  8624 ;; This function is called by:
  8625 ;;		_main
  8626 ;; This function uses a non-reentrant model
  8627 ;;
  8628                           
  8629                           	psect	text8
  8630  0042D2                     __ptext8:
  8631                           	opt stack 0
  8632  0042D2                     ___almod:
  8633                           	opt stack 29
  8634                           
  8635                           ;incstack = 0
  8636  0042D2  0E00               	movlw	0
  8637  0042D4  6E18               	movwf	___almod@sign,c
  8638  0042D6  AE12               	btfss	___almod@dividend+3,7,c
  8639  0042D8  D00B               	goto	l6656
  8640  0042DA  1E12               	comf	___almod@dividend+3,f,c
  8641  0042DC  1E11               	comf	___almod@dividend+2,f,c
  8642  0042DE  1E10               	comf	___almod@dividend+1,f,c
  8643  0042E0  6C0F               	negf	___almod@dividend,c
  8644  0042E2  0E00               	movlw	0
  8645  0042E4  2210               	addwfc	___almod@dividend+1,f,c
  8646  0042E6  2211               	addwfc	___almod@dividend+2,f,c
  8647  0042E8  2212               	addwfc	___almod@dividend+3,f,c
  8648  0042EA  0E01               	movlw	1
  8649  0042EC  6E18               	movwf	___almod@sign,c
  8650  0042EE  D000               	goto	l6656
  8651  0042F0                     l6656:
  8652  0042F0  AE16               	btfss	___almod@divisor+3,7,c
  8653  0042F2  D009               	goto	l6660
  8654  0042F4  1E16               	comf	___almod@divisor+3,f,c
  8655  0042F6  1E15               	comf	___almod@divisor+2,f,c
  8656  0042F8  1E14               	comf	___almod@divisor+1,f,c
  8657  0042FA  6C13               	negf	___almod@divisor,c
  8658  0042FC  0E00               	movlw	0
  8659  0042FE  2214               	addwfc	___almod@divisor+1,f,c
  8660  004300  2215               	addwfc	___almod@divisor+2,f,c
  8661  004302  2216               	addwfc	___almod@divisor+3,f,c
  8662  004304  D000               	goto	l6660
  8663  004306                     l6660:
  8664  004306  5013               	movf	___almod@divisor,w,c
  8665  004308  1014               	iorwf	___almod@divisor+1,w,c
  8666  00430A  1015               	iorwf	___almod@divisor+2,w,c
  8667  00430C  1016               	iorwf	___almod@divisor+3,w,c
  8668  00430E  B4D8               	btfsc	status,2,c
  8669  004310  D029               	goto	l6676
  8670  004312  0E01               	movlw	1
  8671  004314  6E17               	movwf	___almod@counter,c
  8672  004316  D007               	goto	l6666
  8673  004318                     l6664:
  8674  004318  90D8               	bcf	status,0,c
  8675  00431A  3613               	rlcf	___almod@divisor,f,c
  8676  00431C  3614               	rlcf	___almod@divisor+1,f,c
  8677  00431E  3615               	rlcf	___almod@divisor+2,f,c
  8678  004320  3616               	rlcf	___almod@divisor+3,f,c
  8679  004322  2A17               	incf	___almod@counter,f,c
  8680  004324  D000               	goto	l6666
  8681  004326                     l6666:
  8682  004326  BE16               	btfsc	___almod@divisor+3,7,c
  8683  004328  D002               	goto	l6668
  8684  00432A  D7F6               	goto	l6664
  8685  00432C  D000               	goto	l6668
  8686  00432E                     l6668:
  8687  00432E  5013               	movf	___almod@divisor,w,c
  8688  004330  5C0F               	subwf	___almod@dividend,w,c
  8689  004332  5014               	movf	___almod@divisor+1,w,c
  8690  004334  5810               	subwfb	___almod@dividend+1,w,c
  8691  004336  5015               	movf	___almod@divisor+2,w,c
  8692  004338  5811               	subwfb	___almod@dividend+2,w,c
  8693  00433A  5016               	movf	___almod@divisor+3,w,c
  8694  00433C  5812               	subwfb	___almod@dividend+3,w,c
  8695  00433E  A0D8               	btfss	status,0,c
  8696  004340  D009               	goto	l6672
  8697  004342  5013               	movf	___almod@divisor,w,c
  8698  004344  5E0F               	subwf	___almod@dividend,f,c
  8699  004346  5014               	movf	___almod@divisor+1,w,c
  8700  004348  5A10               	subwfb	___almod@dividend+1,f,c
  8701  00434A  5015               	movf	___almod@divisor+2,w,c
  8702  00434C  5A11               	subwfb	___almod@dividend+2,f,c
  8703  00434E  5016               	movf	___almod@divisor+3,w,c
  8704  004350  5A12               	subwfb	___almod@dividend+3,f,c
  8705  004352  D000               	goto	l6672
  8706  004354                     l6672:
  8707  004354  90D8               	bcf	status,0,c
  8708  004356  3216               	rrcf	___almod@divisor+3,f,c
  8709  004358  3215               	rrcf	___almod@divisor+2,f,c
  8710  00435A  3214               	rrcf	___almod@divisor+1,f,c
  8711  00435C  3213               	rrcf	___almod@divisor,f,c
  8712  00435E  2E17               	decfsz	___almod@counter,f,c
  8713  004360  D7E6               	goto	l6668
  8714  004362  D000               	goto	l6676
  8715  004364                     l6676:
  8716  004364  5018               	movf	___almod@sign,w,c
  8717  004366  B4D8               	btfsc	status,2,c
  8718  004368  D009               	goto	l6680
  8719  00436A  1E12               	comf	___almod@dividend+3,f,c
  8720  00436C  1E11               	comf	___almod@dividend+2,f,c
  8721  00436E  1E10               	comf	___almod@dividend+1,f,c
  8722  004370  6C0F               	negf	___almod@dividend,c
  8723  004372  0E00               	movlw	0
  8724  004374  2210               	addwfc	___almod@dividend+1,f,c
  8725  004376  2211               	addwfc	___almod@dividend+2,f,c
  8726  004378  2212               	addwfc	___almod@dividend+3,f,c
  8727  00437A  D000               	goto	l6680
  8728  00437C                     l6680:
  8729  00437C  C00F  F00F         	movff	___almod@dividend,?___almod
  8730  004380  C010  F010         	movff	___almod@dividend+1,?___almod+1
  8731  004384  C011  F011         	movff	___almod@dividend+2,?___almod+2
  8732  004388  C012  F012         	movff	___almod@dividend+3,?___almod+3
  8733  00438C  D000               	goto	l753
  8734  00438E                     l753:
  8735  00438E  0012               	return		;funcret
  8736  004390                     __end_of___almod:
  8737                           	opt stack 0
  8738                           tblptru	equ	0xFF8
  8739                           tblptrh	equ	0xFF7
  8740                           tblptrl	equ	0xFF6
  8741                           tablat	equ	0xFF5
  8742                           intcon	equ	0xFF2
  8743                           intcon2	equ	0xFF1
  8744                           postinc0	equ	0xFEE
  8745                           wreg	equ	0xFE8
  8746                           postinc1	equ	0xFE6
  8747                           postdec1	equ	0xFE5
  8748                           fsr1h	equ	0xFE2
  8749                           fsr1l	equ	0xFE1
  8750                           postinc2	equ	0xFDE
  8751                           postdec2	equ	0xFDD
  8752                           plusw2	equ	0xFDB
  8753                           fsr2h	equ	0xFDA
  8754                           fsr2l	equ	0xFD9
  8755                           status	equ	0xFD8
  8756                           
  8757 ;; *************** function _Wixel *****************
  8758 ;; Defined at:
  8759 ;;		line 9 in file "../config.c"
  8760 ;; Parameters:    Size  Location     Type
  8761 ;;		None
  8762 ;; Auto vars:     Size  Location     Type
  8763 ;;		None
  8764 ;; Return value:  Size  Location     Type
  8765 ;;		None               void
  8766 ;; Registers used:
  8767 ;;		wreg, status,2
  8768 ;; Tracked objects:
  8769 ;;		On entry : 0/0
  8770 ;;		On exit  : 0/0
  8771 ;;		Unchanged: 0/0
  8772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8773 ;;      Params:         0       0       0       0       0       0       0       0       0
  8774 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8775 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8776 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8777 ;;Total ram usage:        0 bytes
  8778 ;; Hardware stack levels used:    1
  8779 ;; Hardware stack levels required when called:    1
  8780 ;; This function calls:
  8781 ;;		Nothing
  8782 ;; This function is called by:
  8783 ;;		_main
  8784 ;; This function uses a non-reentrant model
  8785 ;;
  8786                           
  8787                           	psect	text9
  8788  004E48                     __ptext9:
  8789                           	opt stack 0
  8790  004E48                     _Wixel:
  8791                           	opt stack 29
  8792                           
  8793                           ;config.c: 10: BAUDCONbits.RXDTP=0;
  8794                           
  8795                           ;incstack = 0
  8796  004E48  9AB8               	bcf	4024,5,c	;volatile
  8797                           
  8798                           ;config.c: 11: BAUDCONbits.TXCKP=0;
  8799  004E4A  98B8               	bcf	4024,4,c	;volatile
  8800                           
  8801                           ;config.c: 12: BAUDCONbits.BRG16=1;
  8802  004E4C  86B8               	bsf	4024,3,c	;volatile
  8803                           
  8804                           ;config.c: 14: BAUDCONbits.WUE=0;
  8805  004E4E  92B8               	bcf	4024,1,c	;volatile
  8806                           
  8807                           ;config.c: 15: BAUDCONbits.ABDEN=0;
  8808  004E50  90B8               	bcf	4024,0,c	;volatile
  8809                           
  8810                           ;config.c: 16: SPBRG=51;
  8811  004E52  0E33               	movlw	51
  8812  004E54  6EAF               	movwf	4015,c	;volatile
  8813                           
  8814                           ;config.c: 17: SPBRGH=0;
  8815  004E56  0E00               	movlw	0
  8816  004E58  6EB0               	movwf	4016,c	;volatile
  8817                           
  8818                           ;config.c: 18: TXSTAbits.CSRC=0;
  8819  004E5A  9EAC               	bcf	4012,7,c	;volatile
  8820                           
  8821                           ;config.c: 19: TXSTAbits.TX9=0;
  8822  004E5C  9CAC               	bcf	4012,6,c	;volatile
  8823                           
  8824                           ;config.c: 20: TXSTAbits.TXEN=1;
  8825  004E5E  8AAC               	bsf	4012,5,c	;volatile
  8826                           
  8827                           ;config.c: 21: TXSTAbits.SYNC=0;
  8828  004E60  98AC               	bcf	4012,4,c	;volatile
  8829                           
  8830                           ;config.c: 23: TXSTAbits.BRGH=0;
  8831  004E62  94AC               	bcf	4012,2,c	;volatile
  8832                           
  8833                           ;config.c: 24: RCSTAbits.RX9=0;
  8834  004E64  9CAB               	bcf	4011,6,c	;volatile
  8835                           
  8836                           ;config.c: 25: RCSTAbits.CREN=1;
  8837  004E66  88AB               	bsf	4011,4,c	;volatile
  8838                           
  8839                           ;config.c: 26: RCSTAbits.SPEN=1;
  8840  004E68  8EAB               	bsf	4011,7,c	;volatile
  8841  004E6A  0012               	return		;funcret
  8842  004E6C                     __end_of_Wixel:
  8843                           	opt stack 0
  8844                           tblptru	equ	0xFF8
  8845                           tblptrh	equ	0xFF7
  8846                           tblptrl	equ	0xFF6
  8847                           tablat	equ	0xFF5
  8848                           intcon	equ	0xFF2
  8849                           intcon2	equ	0xFF1
  8850                           postinc0	equ	0xFEE
  8851                           wreg	equ	0xFE8
  8852                           postinc1	equ	0xFE6
  8853                           postdec1	equ	0xFE5
  8854                           fsr1h	equ	0xFE2
  8855                           fsr1l	equ	0xFE1
  8856                           postinc2	equ	0xFDE
  8857                           postdec2	equ	0xFDD
  8858                           plusw2	equ	0xFDB
  8859                           fsr2h	equ	0xFDA
  8860                           fsr2l	equ	0xFD9
  8861                           status	equ	0xFD8
  8862                           
  8863 ;; *************** function _UpdateDir *****************
  8864 ;; Defined at:
  8865 ;;		line 275 in file "../main.c"
  8866 ;; Parameters:    Size  Location     Type
  8867 ;;		None
  8868 ;; Auto vars:     Size  Location     Type
  8869 ;;		None
  8870 ;; Return value:  Size  Location     Type
  8871 ;;		None               void
  8872 ;; Registers used:
  8873 ;;		wreg, status,2, status,0, cstack
  8874 ;; Tracked objects:
  8875 ;;		On entry : 0/0
  8876 ;;		On exit  : 0/0
  8877 ;;		Unchanged: 0/0
  8878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8879 ;;      Params:         0       0       0       0       0       0       0       0       0
  8880 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8881 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8882 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8883 ;;Total ram usage:        2 bytes
  8884 ;; Hardware stack levels used:    1
  8885 ;; Hardware stack levels required when called:    4
  8886 ;; This function calls:
  8887 ;;		_MotorsSpeed
  8888 ;;		___awtoft
  8889 ;;		___ftadd
  8890 ;;		___ftmul
  8891 ;;		___fttol
  8892 ;; This function is called by:
  8893 ;;		_main
  8894 ;; This function uses a non-reentrant model
  8895 ;;
  8896                           
  8897                           	psect	text10
  8898  003AE0                     __ptext10:
  8899                           	opt stack 0
  8900  003AE0                     _UpdateDir:
  8901                           	opt stack 26
  8902                           
  8903                           ;main.c: 276: der = line - last;
  8904                           
  8905                           ;incstack = 0
  8906  003AE0  C18E  F042         	movff	_last,??_UpdateDir
  8907  003AE4  C18F  F043         	movff	_last+1,??_UpdateDir+1
  8908  003AE8  1E42               	comf	??_UpdateDir,f,c
  8909  003AEA  1E43               	comf	??_UpdateDir+1,f,c
  8910  003AEC  4A42               	infsnz	??_UpdateDir,f,c
  8911  003AEE  2A43               	incf	??_UpdateDir+1,f,c
  8912  003AF0  504A               	movf	_line,w,c
  8913  003AF2  2442               	addwf	??_UpdateDir,w,c
  8914  003AF4  0101               	movlb	1	; () banked
  8915  003AF6  6F84               	movwf	_der& (0+255),b
  8916  003AF8  504B               	movf	_line+1,w,c
  8917  003AFA  2043               	addwfc	??_UpdateDir+1,w,c
  8918  003AFC  0101               	movlb	1	; () banked
  8919  003AFE  6F85               	movwf	(_der+1)& (0+255),b
  8920                           
  8921                           ; BSR set to: 1
  8922                           ;main.c: 277: formula = line * kp + der * kd;
  8923  003B00  C178  F033         	movff	_kd,___ftmul@f2
  8924  003B04  C179  F034         	movff	_kd+1,___ftmul@f2+1
  8925  003B08  C17A  F035         	movff	_kd+2,___ftmul@f2+2
  8926  003B0C  C184  F01D         	movff	_der,___awtoft@c
  8927  003B10  C185  F01E         	movff	_der+1,___awtoft@c+1
  8928  003B14  ECB5  F026         	call	___awtoft	;wreg free
  8929  003B18  C01D  F030         	movff	?___awtoft,___ftmul@f1
  8930  003B1C  C01E  F031         	movff	?___awtoft+1,___ftmul@f1+1
  8931  003B20  C01F  F032         	movff	?___awtoft+2,___ftmul@f1+2
  8932  003B24  EC70  F01E         	call	___ftmul	;wreg free
  8933  003B28  C030  F063         	movff	?___ftmul,___ftadd@f2
  8934  003B2C  C031  F064         	movff	?___ftmul+1,___ftadd@f2+1
  8935  003B30  C032  F065         	movff	?___ftmul+2,___ftadd@f2+2
  8936  003B34  C17B  F033         	movff	_kp,___ftmul@f2
  8937  003B38  C17C  F034         	movff	_kp+1,___ftmul@f2+1
  8938  003B3C  C17D  F035         	movff	_kp+2,___ftmul@f2+2
  8939  003B40  C04A  F01D         	movff	_line,___awtoft@c
  8940  003B44  C04B  F01E         	movff	_line+1,___awtoft@c+1
  8941  003B48  ECB5  F026         	call	___awtoft	;wreg free
  8942  003B4C  C01D  F030         	movff	?___awtoft,___ftmul@f1
  8943  003B50  C01E  F031         	movff	?___awtoft+1,___ftmul@f1+1
  8944  003B54  C01F  F032         	movff	?___awtoft+2,___ftmul@f1+2
  8945  003B58  EC70  F01E         	call	___ftmul	;wreg free
  8946  003B5C  C030  F060         	movff	?___ftmul,___ftadd@f1
  8947  003B60  C031  F061         	movff	?___ftmul+1,___ftadd@f1+1
  8948  003B64  C032  F062         	movff	?___ftmul+2,___ftadd@f1+2
  8949  003B68  EC28  F016         	call	___ftadd	;wreg free
  8950  003B6C  C060  F06C         	movff	?___ftadd,___fttol@f1
  8951  003B70  C061  F06D         	movff	?___ftadd+1,___fttol@f1+1
  8952  003B74  C062  F06E         	movff	?___ftadd+2,___fttol@f1+2
  8953  003B78  EC1C  F01B         	call	___fttol	;wreg free
  8954  003B7C  C06C  F048         	movff	?___fttol,_formula
  8955  003B80  C06D  F049         	movff	?___fttol+1,_formula+1
  8956                           
  8957                           ;main.c: 278: if (formula > 0){
  8958  003B84  BE49               	btfsc	_formula+1,7,c
  8959  003B86  D01C               	goto	l6546
  8960  003B88  5049               	movf	_formula+1,w,c
  8961  003B8A  E103               	bnz	u7930
  8962  003B8C  0448               	decf	_formula,w,c
  8963  003B8E  A0D8               	btfss	status,0,c
  8964  003B90  D017               	goto	l6546
  8965  003B92                     u7930:
  8966                           
  8967                           ;main.c: 279: MotorsSpeed(speed - formula , speed);
  8968  003B92  C048  F042         	movff	_formula,??_UpdateDir
  8969  003B96  C049  F043         	movff	_formula+1,??_UpdateDir+1
  8970  003B9A  1E42               	comf	??_UpdateDir,f,c
  8971  003B9C  1E43               	comf	??_UpdateDir+1,f,c
  8972  003B9E  4A42               	infsnz	??_UpdateDir,f,c
  8973  003BA0  2A43               	incf	??_UpdateDir+1,f,c
  8974  003BA2  504C               	movf	_speed,w,c
  8975  003BA4  2442               	addwf	??_UpdateDir,w,c
  8976  003BA6  0100               	movlb	0	; () banked
  8977  003BA8  6F7B               	movwf	MotorsSpeed@A& (0+255),b
  8978  003BAA  504D               	movf	_speed+1,w,c
  8979  003BAC  2043               	addwfc	??_UpdateDir+1,w,c
  8980  003BAE  0100               	movlb	0	; () banked
  8981  003BB0  6F7C               	movwf	(MotorsSpeed@A+1)& (0+255),b
  8982  003BB2  C04C  F07D         	movff	_speed,MotorsSpeed@B
  8983  003BB6  C04D  F07E         	movff	_speed+1,MotorsSpeed@B+1
  8984  003BBA  EC53  F026         	call	_MotorsSpeed	;wreg free
  8985                           
  8986                           ;main.c: 280: }else{
  8987  003BBE  D00F               	goto	l6548
  8988  003BC0                     l6546:
  8989                           
  8990                           ;main.c: 281: MotorsSpeed(speed , speed + formula);
  8991  003BC0  C04C  F07B         	movff	_speed,MotorsSpeed@A
  8992  003BC4  C04D  F07C         	movff	_speed+1,MotorsSpeed@A+1
  8993  003BC8  5048               	movf	_formula,w,c
  8994  003BCA  244C               	addwf	_speed,w,c
  8995  003BCC  0100               	movlb	0	; () banked
  8996  003BCE  6F7D               	movwf	MotorsSpeed@B& (0+255),b
  8997  003BD0  5049               	movf	_formula+1,w,c
  8998  003BD2  204D               	addwfc	_speed+1,w,c
  8999  003BD4  0100               	movlb	0	; () banked
  9000  003BD6  6F7E               	movwf	(MotorsSpeed@B+1)& (0+255),b
  9001  003BD8  EC53  F026         	call	_MotorsSpeed	;wreg free
  9002  003BDC  D000               	goto	l6548
  9003  003BDE                     l6548:
  9004                           
  9005                           ;main.c: 282: }
  9006                           ;main.c: 283: last = line;
  9007  003BDE  C04A  F18E         	movff	_line,_last
  9008  003BE2  C04B  F18F         	movff	_line+1,_last+1
  9009  003BE6  0012               	return		;funcret
  9010  003BE8                     __end_of_UpdateDir:
  9011                           	opt stack 0
  9012                           tblptru	equ	0xFF8
  9013                           tblptrh	equ	0xFF7
  9014                           tblptrl	equ	0xFF6
  9015                           tablat	equ	0xFF5
  9016                           intcon	equ	0xFF2
  9017                           intcon2	equ	0xFF1
  9018                           postinc0	equ	0xFEE
  9019                           wreg	equ	0xFE8
  9020                           postinc1	equ	0xFE6
  9021                           postdec1	equ	0xFE5
  9022                           fsr1h	equ	0xFE2
  9023                           fsr1l	equ	0xFE1
  9024                           postinc2	equ	0xFDE
  9025                           postdec2	equ	0xFDD
  9026                           plusw2	equ	0xFDB
  9027                           fsr2h	equ	0xFDA
  9028                           fsr2l	equ	0xFD9
  9029                           status	equ	0xFD8
  9030                           
  9031 ;; *************** function _Save *****************
  9032 ;; Defined at:
  9033 ;;		line 244 in file "../main.c"
  9034 ;; Parameters:    Size  Location     Type
  9035 ;;		None
  9036 ;; Auto vars:     Size  Location     Type
  9037 ;;  x               2   69[BANK0 ] int 
  9038 ;;  sum             1   68[BANK0 ] unsigned char 
  9039 ;; Return value:  Size  Location     Type
  9040 ;;		None               void
  9041 ;; Registers used:
  9042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9048 ;;      Params:         0       0       0       0       0       0       0       0       0
  9049 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9050 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9051 ;;      Totals:         0       6       0       0       0       0       0       0       0
  9052 ;;Total ram usage:        6 bytes
  9053 ;; Hardware stack levels used:    1
  9054 ;; Hardware stack levels required when called:    4
  9055 ;; This function calls:
  9056 ;;		_ShowMem
  9057 ;;		_WriteMem
  9058 ;; This function is called by:
  9059 ;;		_main
  9060 ;; This function uses a non-reentrant model
  9061 ;;
  9062                           
  9063                           	psect	text11
  9064  00457A                     __ptext11:
  9065                           	opt stack 0
  9066  00457A                     _Save:
  9067                           	opt stack 26
  9068                           
  9069                           ;main.c: 245: uc sum; sum = MF ? 128 : 0;
  9070                           
  9071                           ;incstack = 0
  9072  00457A  5050               	movf	_MF,w,c
  9073  00457C  A4D8               	btfss	status,2,c
  9074  00457E  D005               	goto	l6512
  9075  004580  0E00               	movlw	0
  9076  004582  0100               	movlb	0	; () banked
  9077  004584  6FA3               	movwf	(_Save$1775+1)& (0+255),b
  9078  004586  0E00               	movlw	0
  9079  004588  D004               	goto	L12
  9080  00458A                     l6512:
  9081  00458A  0E00               	movlw	0
  9082  00458C  0100               	movlb	0	; () banked
  9083  00458E  6FA3               	movwf	(_Save$1775+1)& (0+255),b
  9084  004590  0E80               	movlw	128
  9085  004592                     L12:
  9086  004592  6FA2               	movwf	_Save$1775& (0+255),b
  9087  004594  D000               	goto	l6514
  9088  004596                     l6514:
  9089                           
  9090                           ; BSR set to: 0
  9091  004596  C0A2  F0A4         	movff	_Save$1775,Save@sum
  9092                           
  9093                           ; BSR set to: 0
  9094                           ;main.c: 246: WriteMem(sum,(uc)TOTAL);
  9095  00459A  C0C1  F00F         	movff	_TOTAL,WriteMem@data
  9096  00459E  0100               	movlb	0	; () banked
  9097  0045A0  51A4               	movf	Save@sum& (0+255),w,b
  9098  0045A2  ECFC  F026         	call	_WriteMem
  9099                           
  9100                           ;main.c: 247: int x;
  9101                           ;main.c: 248: for (x = 0;x < TOTAL;x++){
  9102  0045A6  0E00               	movlw	0
  9103  0045A8  0100               	movlb	0	; () banked
  9104  0045AA  6FA6               	movwf	(Save@x+1)& (0+255),b
  9105  0045AC  0E00               	movlw	0
  9106  0045AE  6FA5               	movwf	Save@x& (0+255),b
  9107  0045B0  D01B               	goto	l6524
  9108  0045B2                     l6520:
  9109                           
  9110                           ; BSR set to: 0
  9111                           ;main.c: 249: WriteMem(sum + x + 1,(uc)(LEN[x]));
  9112  0045B2  90D8               	bcf	status,0,c
  9113  0045B4  0100               	movlb	0	; () banked
  9114  0045B6  35A5               	rlcf	Save@x& (0+255),w,b
  9115  0045B8  6ED9               	movwf	fsr2l,c
  9116  0045BA  0100               	movlb	0	; () banked
  9117  0045BC  35A6               	rlcf	(Save@x+1)& (0+255),w,b
  9118  0045BE  6EDA               	movwf	fsr2h,c
  9119  0045C0  0E00               	movlw	low _LEN
  9120  0045C2  26D9               	addwf	fsr2l,f,c
  9121  0045C4  0E02               	movlw	high _LEN
  9122  0045C6  22DA               	addwfc	fsr2h,f,c
  9123  0045C8  50DF               	movf	indf2,w,c
  9124  0045CA  6E0F               	movwf	WriteMem@data,c
  9125  0045CC  0100               	movlb	0	; () banked
  9126  0045CE  51A4               	movf	Save@sum& (0+255),w,b
  9127  0045D0  0100               	movlb	0	; () banked
  9128  0045D2  25A5               	addwf	Save@x& (0+255),w,b
  9129  0045D4  0100               	movlb	0	; () banked
  9130  0045D6  6FA1               	movwf	??_Save& (0+255),b
  9131  0045D8  0100               	movlb	0	; () banked
  9132  0045DA  29A1               	incf	??_Save& (0+255),w,b
  9133  0045DC  ECFC  F026         	call	_WriteMem
  9134  0045E0  0100               	movlb	0	; () banked
  9135  0045E2  4BA5               	infsnz	Save@x& (0+255),f,b
  9136  0045E4  2BA6               	incf	(Save@x+1)& (0+255),f,b
  9137  0045E6  D000               	goto	l6524
  9138  0045E8                     l6524:
  9139                           
  9140                           ; BSR set to: 0
  9141  0045E8  0100               	movlb	0	; () banked
  9142  0045EA  51C1               	movf	_TOTAL& (0+255),w,b
  9143  0045EC  0100               	movlb	0	; () banked
  9144  0045EE  5DA5               	subwf	Save@x& (0+255),w,b
  9145  0045F0  0100               	movlb	0	; () banked
  9146  0045F2  51A6               	movf	(Save@x+1)& (0+255),w,b
  9147  0045F4  0A80               	xorlw	128
  9148  0045F6  0100               	movlb	0	; () banked
  9149  0045F8  6FA1               	movwf	??_Save& (0+255),b
  9150  0045FA  0100               	movlb	0	; () banked
  9151  0045FC  51C2               	movf	(_TOTAL+1)& (0+255),w,b
  9152  0045FE  0A80               	xorlw	128
  9153  004600  0100               	movlb	0	; () banked
  9154  004602  59A1               	subwfb	??_Save& (0+255),w,b
  9155  004604  A0D8               	btfss	status,0,c
  9156  004606  D7D5               	goto	l6520
  9157                           
  9158                           ; BSR set to: 0
  9159                           ;main.c: 250: }
  9160                           ;main.c: 251: ShowMem();
  9161                           
  9162                           ; BSR set to: 0
  9163  004608  EC8E  F023         	call	_ShowMem	;wreg free
  9164  00460C  0012               	return		;funcret
  9165  00460E                     __end_of_Save:
  9166                           	opt stack 0
  9167                           tblptru	equ	0xFF8
  9168                           tblptrh	equ	0xFF7
  9169                           tblptrl	equ	0xFF6
  9170                           tablat	equ	0xFF5
  9171                           intcon	equ	0xFF2
  9172                           intcon2	equ	0xFF1
  9173                           postinc0	equ	0xFEE
  9174                           wreg	equ	0xFE8
  9175                           postinc1	equ	0xFE6
  9176                           postdec1	equ	0xFE5
  9177                           fsr1h	equ	0xFE2
  9178                           fsr1l	equ	0xFE1
  9179                           indf2	equ	0xFDF
  9180                           postinc2	equ	0xFDE
  9181                           postdec2	equ	0xFDD
  9182                           plusw2	equ	0xFDB
  9183                           fsr2h	equ	0xFDA
  9184                           fsr2l	equ	0xFD9
  9185                           status	equ	0xFD8
  9186                           
  9187 ;; *************** function _ShowMem *****************
  9188 ;; Defined at:
  9189 ;;		line 231 in file "../main.c"
  9190 ;; Parameters:    Size  Location     Type
  9191 ;;		None
  9192 ;; Auto vars:     Size  Location     Type
  9193 ;;  x               2   63[BANK0 ] int 
  9194 ;; Return value:  Size  Location     Type
  9195 ;;		None               void
  9196 ;; Registers used:
  9197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9198 ;; Tracked objects:
  9199 ;;		On entry : 0/0
  9200 ;;		On exit  : 0/0
  9201 ;;		Unchanged: 0/0
  9202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9203 ;;      Params:         0       0       0       0       0       0       0       0       0
  9204 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9205 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9206 ;;      Totals:         0       3       0       0       0       0       0       0       0
  9207 ;;Total ram usage:        3 bytes
  9208 ;; Hardware stack levels used:    1
  9209 ;; Hardware stack levels required when called:    3
  9210 ;; This function calls:
  9211 ;;		_printf
  9212 ;; This function is called by:
  9213 ;;		_Save
  9214 ;;		_main
  9215 ;; This function uses a non-reentrant model
  9216 ;;
  9217                           
  9218                           	psect	text12
  9219  00471C                     __ptext12:
  9220                           	opt stack 0
  9221  00471C                     _ShowMem:
  9222                           	opt stack 27
  9223                           
  9224                           ;main.c: 232: int x;
  9225                           ;main.c: 233: for (x = 0;x < TOTAL;x++) printf("{'COM':'line','value':'[%i] = %i'}\n",x+
      +                          1,LEN[x]);
  9226                           
  9227                           ;incstack = 0
  9228  00471C  0E00               	movlw	0
  9229  00471E  0100               	movlb	0	; () banked
  9230  004720  6FA0               	movwf	(ShowMem@x+1)& (0+255),b
  9231  004722  0E00               	movlw	0
  9232  004724  6F9F               	movwf	ShowMem@x& (0+255),b
  9233  004726  D025               	goto	l6312
  9234  004728                     l6308:
  9235                           
  9236                           ; BSR set to: 0
  9237  004728  0EB7               	movlw	low STR_2
  9238  00472A  0100               	movlb	0	; () banked
  9239  00472C  6F85               	movwf	printf@f& (0+255),b
  9240  00472E  0E7F               	movlw	high STR_2
  9241  004730  0100               	movlb	0	; () banked
  9242  004732  6F86               	movwf	(printf@f+1)& (0+255),b
  9243  004734  0E01               	movlw	1
  9244  004736  0100               	movlb	0	; () banked
  9245  004738  259F               	addwf	ShowMem@x& (0+255),w,b
  9246  00473A  0100               	movlb	0	; () banked
  9247  00473C  6F87               	movwf	(?_printf+2)& (0+255),b
  9248  00473E  0E00               	movlw	0
  9249  004740  0100               	movlb	0	; () banked
  9250  004742  21A0               	addwfc	(ShowMem@x+1)& (0+255),w,b
  9251  004744  0100               	movlb	0	; () banked
  9252  004746  6F88               	movwf	(?_printf+3)& (0+255),b
  9253  004748  90D8               	bcf	status,0,c
  9254  00474A  0100               	movlb	0	; () banked
  9255  00474C  359F               	rlcf	ShowMem@x& (0+255),w,b
  9256  00474E  6ED9               	movwf	fsr2l,c
  9257  004750  0100               	movlb	0	; () banked
  9258  004752  35A0               	rlcf	(ShowMem@x+1)& (0+255),w,b
  9259  004754  6EDA               	movwf	fsr2h,c
  9260  004756  0E00               	movlw	low _LEN
  9261  004758  26D9               	addwf	fsr2l,f,c
  9262  00475A  0E02               	movlw	high _LEN
  9263  00475C  22DA               	addwfc	fsr2h,f,c
  9264  00475E  CFDE F089          	movff	postinc2,?_printf+4
  9265  004762  CFDD F08A          	movff	postdec2,?_printf+5
  9266  004766  EC8A  F014         	call	_printf	;wreg free
  9267  00476A  0100               	movlb	0	; () banked
  9268  00476C  4B9F               	infsnz	ShowMem@x& (0+255),f,b
  9269  00476E  2BA0               	incf	(ShowMem@x+1)& (0+255),f,b
  9270  004770  D000               	goto	l6312
  9271  004772                     l6312:
  9272                           
  9273                           ; BSR set to: 0
  9274  004772  0100               	movlb	0	; () banked
  9275  004774  51C1               	movf	_TOTAL& (0+255),w,b
  9276  004776  0100               	movlb	0	; () banked
  9277  004778  5D9F               	subwf	ShowMem@x& (0+255),w,b
  9278  00477A  0100               	movlb	0	; () banked
  9279  00477C  51A0               	movf	(ShowMem@x+1)& (0+255),w,b
  9280  00477E  0A80               	xorlw	128
  9281  004780  0100               	movlb	0	; () banked
  9282  004782  6F9E               	movwf	??_ShowMem& (0+255),b
  9283  004784  0100               	movlb	0	; () banked
  9284  004786  51C2               	movf	(_TOTAL+1)& (0+255),w,b
  9285  004788  0A80               	xorlw	128
  9286  00478A  0100               	movlb	0	; () banked
  9287  00478C  599E               	subwfb	??_ShowMem& (0+255),w,b
  9288  00478E  A0D8               	btfss	status,0,c
  9289  004790  D7CB               	goto	l6308
  9290                           
  9291                           ; BSR set to: 0
  9292                           
  9293                           ; BSR set to: 0
  9294  004792  0012               	return		;funcret
  9295  004794                     __end_of_ShowMem:
  9296                           	opt stack 0
  9297                           tblptru	equ	0xFF8
  9298                           tblptrh	equ	0xFF7
  9299                           tblptrl	equ	0xFF6
  9300                           tablat	equ	0xFF5
  9301                           intcon	equ	0xFF2
  9302                           intcon2	equ	0xFF1
  9303                           postinc0	equ	0xFEE
  9304                           wreg	equ	0xFE8
  9305                           postinc1	equ	0xFE6
  9306                           postdec1	equ	0xFE5
  9307                           fsr1h	equ	0xFE2
  9308                           fsr1l	equ	0xFE1
  9309                           indf2	equ	0xFDF
  9310                           postinc2	equ	0xFDE
  9311                           postdec2	equ	0xFDD
  9312                           plusw2	equ	0xFDB
  9313                           fsr2h	equ	0xFDA
  9314                           fsr2l	equ	0xFD9
  9315                           status	equ	0xFD8
  9316                           
  9317 ;; *************** function _PlotCompute *****************
  9318 ;; Defined at:
  9319 ;;		line 97 in file "../main.c"
  9320 ;; Parameters:    Size  Location     Type
  9321 ;;		None
  9322 ;; Auto vars:     Size  Location     Type
  9323 ;;  x               2   62[BANK0 ] int 
  9324 ;; Return value:  Size  Location     Type
  9325 ;;		None               void
  9326 ;; Registers used:
  9327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9328 ;; Tracked objects:
  9329 ;;		On entry : 0/0
  9330 ;;		On exit  : 0/0
  9331 ;;		Unchanged: 0/0
  9332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9333 ;;      Params:         0       0       0       0       0       0       0       0       0
  9334 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9335 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9336 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9337 ;;Total ram usage:        2 bytes
  9338 ;; Hardware stack levels used:    1
  9339 ;; Hardware stack levels required when called:    4
  9340 ;; This function calls:
  9341 ;;		_Interval
  9342 ;;		_printf
  9343 ;; This function is called by:
  9344 ;;		_main
  9345 ;; This function uses a non-reentrant model
  9346 ;;
  9347                           
  9348                           	psect	text13
  9349  004794                     __ptext13:
  9350                           	opt stack 0
  9351  004794                     _PlotCompute:
  9352                           	opt stack 26
  9353                           
  9354                           ;main.c: 98: int x;
  9355                           ;main.c: 104: for (x = 0;x < 700;x++){
  9356                           
  9357                           ; BSR set to: 0
  9358                           ;incstack = 0
  9359  004794  0E00               	movlw	0
  9360  004796  0100               	movlb	0	; () banked
  9361  004798  6F9F               	movwf	(PlotCompute@x+1)& (0+255),b
  9362  00479A  0E00               	movlw	0
  9363  00479C  6F9E               	movwf	PlotCompute@x& (0+255),b
  9364  00479E                     l6454:
  9365                           
  9366                           ; BSR set to: 0
  9367  00479E  0100               	movlb	0	; () banked
  9368  0047A0  BF9F               	btfsc	(PlotCompute@x+1)& (0+255),7,b
  9369  0047A2  D00A               	goto	l6458
  9370  0047A4  0EBC               	movlw	188
  9371  0047A6  0100               	movlb	0	; () banked
  9372  0047A8  5D9E               	subwf	PlotCompute@x& (0+255),w,b
  9373  0047AA  0E02               	movlw	2
  9374  0047AC  0100               	movlb	0	; () banked
  9375  0047AE  599F               	subwfb	(PlotCompute@x+1)& (0+255),w,b
  9376  0047B0  B0D8               	btfsc	status,0,c
  9377  0047B2  D027               	goto	l272
  9378  0047B4  D001               	goto	l6458
  9379                           
  9380                           ; BSR set to: 0
  9381  0047B6  D025               	goto	l272
  9382  0047B8                     l6458:
  9383                           
  9384                           ; BSR set to: 0
  9385                           ;main.c: 105: printf("{'COM':'plot','name':'POW3','value':%i,'color':(200,100,100)}\n", 
      +                          Interval(400,1000,x,700) );
  9386  0047B8  0EF3               	movlw	low STR_1
  9387  0047BA  0100               	movlb	0	; () banked
  9388  0047BC  6F85               	movwf	printf@f& (0+255),b
  9389  0047BE  0E7A               	movlw	high STR_1
  9390  0047C0  0100               	movlb	0	; () banked
  9391  0047C2  6F86               	movwf	(printf@f+1)& (0+255),b
  9392  0047C4  0E01               	movlw	1
  9393  0047C6  0100               	movlb	0	; () banked
  9394  0047C8  6F7C               	movwf	(Interval@start+1)& (0+255),b
  9395  0047CA  0E90               	movlw	144
  9396  0047CC  6F7B               	movwf	Interval@start& (0+255),b
  9397  0047CE  0E03               	movlw	3
  9398  0047D0  0100               	movlb	0	; () banked
  9399  0047D2  6F7E               	movwf	(Interval@end+1)& (0+255),b
  9400  0047D4  0EE8               	movlw	232
  9401  0047D6  6F7D               	movwf	Interval@end& (0+255),b
  9402  0047D8  C09E  F07F         	movff	PlotCompute@x,Interval@t
  9403  0047DC  C09F  F080         	movff	PlotCompute@x+1,Interval@t+1
  9404  0047E0  0E02               	movlw	2
  9405  0047E2  0100               	movlb	0	; () banked
  9406  0047E4  6F82               	movwf	(Interval@total+1)& (0+255),b
  9407  0047E6  0EBC               	movlw	188
  9408  0047E8  6F81               	movwf	Interval@total& (0+255),b
  9409  0047EA  EC70  F019         	call	_Interval	;wreg free
  9410  0047EE  C07B  F087         	movff	?_Interval,?_printf+2
  9411  0047F2  C07C  F088         	movff	?_Interval+1,?_printf+3
  9412  0047F6  EC8A  F014         	call	_printf	;wreg free
  9413  0047FA  0100               	movlb	0	; () banked
  9414  0047FC  4B9E               	infsnz	PlotCompute@x& (0+255),f,b
  9415  0047FE  2B9F               	incf	(PlotCompute@x+1)& (0+255),f,b
  9416  004800  D7CE               	goto	l6454
  9417  004802                     l272:
  9418                           
  9419                           ; BSR set to: 0
  9420  004802  0012               	return		;funcret
  9421  004804                     __end_of_PlotCompute:
  9422                           	opt stack 0
  9423                           tblptru	equ	0xFF8
  9424                           tblptrh	equ	0xFF7
  9425                           tblptrl	equ	0xFF6
  9426                           tablat	equ	0xFF5
  9427                           intcon	equ	0xFF2
  9428                           intcon2	equ	0xFF1
  9429                           postinc0	equ	0xFEE
  9430                           wreg	equ	0xFE8
  9431                           postinc1	equ	0xFE6
  9432                           postdec1	equ	0xFE5
  9433                           fsr1h	equ	0xFE2
  9434                           fsr1l	equ	0xFE1
  9435                           indf2	equ	0xFDF
  9436                           postinc2	equ	0xFDE
  9437                           postdec2	equ	0xFDD
  9438                           plusw2	equ	0xFDB
  9439                           fsr2h	equ	0xFDA
  9440                           fsr2l	equ	0xFD9
  9441                           status	equ	0xFD8
  9442                           
  9443 ;; *************** function _printf *****************
  9444 ;; Defined at:
  9445 ;;		line 464 in file "/opt/microchip/xc8/v1.34/sources/common/doprnt.c"
  9446 ;; Parameters:    Size  Location     Type
  9447 ;;  f               2   37[BANK0 ] PTR const unsigned char 
  9448 ;;		 -> STR_32(16), STR_31(43), STR_30(57), STR_29(63), 
  9449 ;;		 -> STR_28(41), STR_27(63), STR_26(36), STR_25(42), 
  9450 ;;		 -> STR_24(40), STR_23(19), STR_22(40), STR_21(49), 
  9451 ;;		 -> STR_20(47), STR_19(38), STR_18(47), STR_17(45), 
  9452 ;;		 -> STR_16(61), STR_15(60), STR_14(53), STR_13(39), 
  9453 ;;		 -> STR_12(44), STR_11(47), STR_10(48), STR_9(38), 
  9454 ;;		 -> STR_8(43), STR_7(39), STR_6(45), STR_5(41), 
  9455 ;;		 -> STR_4(37), STR_3(37), STR_2(36), STR_1(63), 
  9456 ;; Auto vars:     Size  Location     Type
  9457 ;;  tmpval          4    0        struct .
  9458 ;;  cp              3    0        PTR const unsigned char 
  9459 ;;  width           2   59[BANK0 ] int 
  9460 ;;  val             2   56[BANK0 ] unsigned int 
  9461 ;;  ap              2   54[BANK0 ] PTR void [1]
  9462 ;;		 -> ?_printf(2), 
  9463 ;;  len             2    0        unsigned int 
  9464 ;;  c               1   61[BANK0 ] char 
  9465 ;;  flag            1   58[BANK0 ] unsigned char 
  9466 ;;  prec            1   53[BANK0 ] char 
  9467 ;; Return value:  Size  Location     Type
  9468 ;;                  2   37[BANK0 ] int 
  9469 ;; Registers used:
  9470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9471 ;; Tracked objects:
  9472 ;;		On entry : 0/0
  9473 ;;		On exit  : 0/0
  9474 ;;		Unchanged: 0/0
  9475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9476 ;;      Params:         0      12       0       0       0       0       0       0       0
  9477 ;;      Locals:         0       9       0       0       0       0       0       0       0
  9478 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9479 ;;      Totals:         0      25       0       0       0       0       0       0       0
  9480 ;;Total ram usage:       25 bytes
  9481 ;; Hardware stack levels used:    1
  9482 ;; Hardware stack levels required when called:    2
  9483 ;; This function calls:
  9484 ;;		___lwdiv
  9485 ;;		___lwmod
  9486 ;;		___wmul
  9487 ;;		_isdigit
  9488 ;;		_putch
  9489 ;; This function is called by:
  9490 ;;		_PlotCompute
  9491 ;;		_ShowMem
  9492 ;;		_main
  9493 ;; This function uses a non-reentrant model
  9494 ;;
  9495                           
  9496                           	psect	text14
  9497  002914                     __ptext14:
  9498                           	opt stack 0
  9499  002914                     _printf:
  9500                           	opt stack 28
  9501                           
  9502                           ;doprnt.c: 466: va_list ap;
  9503                           ;doprnt.c: 499: signed char c;
  9504                           ;doprnt.c: 501: int width;
  9505                           ;doprnt.c: 506: signed char prec;
  9506                           ;doprnt.c: 508: unsigned char flag;
  9507                           ;doprnt.c: 523: union {
  9508                           ;doprnt.c: 524: unsigned long vd;
  9509                           ;doprnt.c: 525: double integ;
  9510                           ;doprnt.c: 526: } tmpval;
  9511                           ;doprnt.c: 528: unsigned int val;
  9512                           ;doprnt.c: 529: unsigned len;
  9513                           ;doprnt.c: 530: const char * cp;
  9514                           ;doprnt.c: 533: *ap = __va_start();
  9515                           
  9516                           ; BSR set to: 0
  9517                           ;incstack = 0
  9518  002914  0E87               	movlw	low (?_printf+2)
  9519  002916  0100               	movlb	0	; () banked
  9520  002918  6F96               	movwf	printf@ap& (0+255),b
  9521  00291A  0E00               	movlw	high (?_printf+2)
  9522  00291C  0100               	movlb	0	; () banked
  9523  00291E  6F97               	movwf	(printf@ap+1)& (0+255),b
  9524                           
  9525                           ;doprnt.c: 536: while(c = *f++) {
  9526  002920  D186               	goto	l6040
  9527  002922                     l5940:
  9528                           
  9529                           ; BSR set to: 0
  9530                           ;doprnt.c: 538: if(c != '%')
  9531  002922  0E25               	movlw	37
  9532  002924  0100               	movlb	0	; () banked
  9533  002926  199D               	xorwf	printf@c& (0+255),w,b
  9534  002928  B4D8               	btfsc	status,2,c
  9535  00292A  D005               	goto	l5944
  9536                           
  9537                           ; BSR set to: 0
  9538                           ;doprnt.c: 540: {
  9539                           ;doprnt.c: 541: (putch(c) );
  9540  00292C  0100               	movlb	0	; () banked
  9541  00292E  519D               	movf	printf@c& (0+255),w,b
  9542  002930  EC86  F027         	call	_putch
  9543                           
  9544                           ;doprnt.c: 542: continue;
  9545  002934  D17C               	goto	l6040
  9546  002936                     l5944:
  9547                           
  9548                           ;doprnt.c: 543: }
  9549                           ;doprnt.c: 546: width = 0;
  9550  002936  0E00               	movlw	0
  9551  002938  0100               	movlb	0	; () banked
  9552  00293A  6F9C               	movwf	(printf@width+1)& (0+255),b
  9553  00293C  0E00               	movlw	0
  9554  00293E  6F9B               	movwf	printf@width& (0+255),b
  9555                           
  9556                           ;doprnt.c: 548: flag = 0;
  9557  002940  0E00               	movlw	0
  9558  002942  0100               	movlb	0	; () banked
  9559  002944  6F9A               	movwf	printf@flag& (0+255),b
  9560                           
  9561                           ; BSR set to: 0
  9562                           ;doprnt.c: 551: switch(*f) {
  9563                           
  9564                           ;doprnt.c: 550: for(;;) {
  9565  002946  D007               	goto	l5950
  9566  002948                     l5946:
  9567                           
  9568                           ;doprnt.c: 580: flag |= 0x04;
  9569  002948  0100               	movlb	0	; () banked
  9570  00294A  859A               	bsf	printf@flag& (0+255),2,b
  9571                           
  9572                           ;doprnt.c: 581: f++;
  9573  00294C  0100               	movlb	0	; () banked
  9574  00294E  4B85               	infsnz	printf@f& (0+255),f,b
  9575  002950  2B86               	incf	(printf@f+1)& (0+255),f,b
  9576                           
  9577                           ;doprnt.c: 582: continue;
  9578  002952  D001               	goto	l5950
  9579                           
  9580                           ; BSR set to: 0
  9581                           ;doprnt.c: 584: }
  9582  002954  D00B               	goto	l5952
  9583  002956                     l5950:
  9584  002956  C085  FFF6         	movff	printf@f,tblptrl
  9585  00295A  C086  FFF7         	movff	printf@f+1,tblptrh
  9586  00295E                     	if	0	;tblptru may be non-zero
  9587  00295E                     	endif
  9588  00295E                     	if	0	;tblptru may be non-zero
  9589  00295E                     	endif
  9590  00295E  0008               	tblrd		*
  9591  002960  50F5               	movf	tablat,w,c
  9592                           
  9593                           ; Switch size 1, requested type "space"
  9594                           ; Number of cases is 1, Range of values is 48 to 48
  9595                           ; switch strategies available:
  9596                           ; Name         Instructions Cycles
  9597                           ; simple_byte            4     3 (average)
  9598                           ;	Chosen strategy is simple_byte
  9599  002962  0A30               	xorlw	48	; case 48
  9600  002964  B4D8               	btfsc	status,2,c
  9601  002966  D7F0               	goto	l5946
  9602                           
  9603                           ;doprnt.c: 585: break;
  9604  002968  D001               	goto	l5952
  9605                           
  9606                           ;doprnt.c: 586: }
  9607  00296A  D7F5               	goto	l5950
  9608  00296C                     l5952:
  9609                           
  9610                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9611  00296C  C085  FFF6         	movff	printf@f,tblptrl
  9612  002970  C086  FFF7         	movff	printf@f+1,tblptrh
  9613  002974                     	if	0	;tblptru may be non-zero
  9614  002974                     	endif
  9615  002974                     	if	0	;tblptru may be non-zero
  9616  002974                     	endif
  9617  002974  0008               	tblrd		*
  9618  002976  50F5               	movf	tablat,w,c
  9619  002978  EC48  F027         	call	_isdigit
  9620  00297C  A0D8               	btfss	status,0,c
  9621  00297E  D048               	goto	l5968
  9622                           
  9623                           ;doprnt.c: 598: width = 0;
  9624  002980  0E00               	movlw	0
  9625  002982  0100               	movlb	0	; () banked
  9626  002984  6F9C               	movwf	(printf@width+1)& (0+255),b
  9627  002986  0E00               	movlw	0
  9628  002988  6F9B               	movwf	printf@width& (0+255),b
  9629  00298A  D000               	goto	l5956
  9630  00298C                     l5956:
  9631                           
  9632                           ;doprnt.c: 600: width *= 10;
  9633  00298C  C09B  F017         	movff	printf@width,___wmul@multiplier
  9634  002990  C09C  F018         	movff	printf@width+1,___wmul@multiplier+1
  9635  002994  0E00               	movlw	0
  9636  002996  6E1A               	movwf	___wmul@multiplicand+1,c
  9637  002998  0E0A               	movlw	10
  9638  00299A  6E19               	movwf	___wmul@multiplicand,c
  9639  00299C  EC10  F027         	call	___wmul	;wreg free
  9640  0029A0  C017  F09B         	movff	?___wmul,printf@width
  9641  0029A4  C018  F09C         	movff	?___wmul+1,printf@width+1
  9642                           
  9643                           ;doprnt.c: 601: width += *f++ - '0';
  9644  0029A8  0ED0               	movlw	208
  9645  0029AA  0100               	movlb	0	; () banked
  9646  0029AC  6F91               	movwf	??_printf& (0+255),b
  9647  0029AE  0EFF               	movlw	255
  9648  0029B0  0100               	movlb	0	; () banked
  9649  0029B2  6F92               	movwf	(??_printf+1)& (0+255),b
  9650  0029B4  C085  FFF6         	movff	printf@f,tblptrl
  9651  0029B8  C086  FFF7         	movff	printf@f+1,tblptrh
  9652  0029BC                     	if	0	;tblptru may be non-zero
  9653  0029BC                     	endif
  9654  0029BC                     	if	0	;tblptru may be non-zero
  9655  0029BC                     	endif
  9656  0029BC  0008               	tblrd		*
  9657  0029BE  50F5               	movf	tablat,w,c
  9658  0029C0  0100               	movlb	0	; () banked
  9659  0029C2  6F93               	movwf	(??_printf+2)& (0+255),b
  9660  0029C4  6B94               	clrf	(??_printf+3)& (0+255),b
  9661  0029C6  0100               	movlb	0	; () banked
  9662  0029C8  5191               	movf	??_printf& (0+255),w,b
  9663  0029CA  0100               	movlb	0	; () banked
  9664  0029CC  2793               	addwf	(??_printf+2)& (0+255),f,b
  9665  0029CE  0100               	movlb	0	; () banked
  9666  0029D0  5192               	movf	(??_printf+1)& (0+255),w,b
  9667  0029D2  0100               	movlb	0	; () banked
  9668  0029D4  2394               	addwfc	(??_printf+3)& (0+255),f,b
  9669  0029D6  0100               	movlb	0	; () banked
  9670  0029D8  5193               	movf	(??_printf+2)& (0+255),w,b
  9671  0029DA  0100               	movlb	0	; () banked
  9672  0029DC  279B               	addwf	printf@width& (0+255),f,b
  9673  0029DE  0100               	movlb	0	; () banked
  9674  0029E0  5194               	movf	(??_printf+3)& (0+255),w,b
  9675  0029E2  0100               	movlb	0	; () banked
  9676  0029E4  239C               	addwfc	(printf@width+1)& (0+255),f,b
  9677                           
  9678                           ; BSR set to: 0
  9679  0029E6  0100               	movlb	0	; () banked
  9680  0029E8  4B85               	infsnz	printf@f& (0+255),f,b
  9681  0029EA  2B86               	incf	(printf@f+1)& (0+255),f,b
  9682                           
  9683                           ; BSR set to: 0
  9684                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9685  0029EC  C085  FFF6         	movff	printf@f,tblptrl
  9686  0029F0  C086  FFF7         	movff	printf@f+1,tblptrh
  9687  0029F4                     	if	0	;tblptru may be non-zero
  9688  0029F4                     	endif
  9689  0029F4                     	if	0	;tblptru may be non-zero
  9690  0029F4                     	endif
  9691  0029F4  0008               	tblrd		*
  9692  0029F6  50F5               	movf	tablat,w,c
  9693  0029F8  EC48  F027         	call	_isdigit
  9694  0029FC  A0D8               	btfss	status,0,c
  9695  0029FE  D008               	goto	l5968
  9696  002A00  D7C5               	goto	l5956
  9697                           
  9698                           ;doprnt.c: 608: }
  9699                           ;doprnt.c: 635: switch(c = *f++) {
  9700  002A02  D006               	goto	l5968
  9701                           
  9702                           ;doprnt.c: 638: goto alldone;
  9703                           
  9704                           ;doprnt.c: 637: case 0:
  9705  002A04  D124               	goto	l668
  9706                           
  9707                           ;doprnt.c: 698: case 'i':
  9708                           ;doprnt.c: 699: break;
  9709                           
  9710                           ;doprnt.c: 697: case 'd':
  9711  002A06  D01D               	goto	l642
  9712                           
  9713                           ;doprnt.c: 813: continue;
  9714                           
  9715                           ;doprnt.c: 802: default:
  9716  002A08  D112               	goto	l6040
  9717  002A0A                     l5964:
  9718                           
  9719                           ;doprnt.c: 818: flag |= 0x40;
  9720  002A0A  0100               	movlb	0	; () banked
  9721  002A0C  8D9A               	bsf	printf@flag& (0+255),6,b
  9722                           
  9723                           ; BSR set to: 0
  9724                           ;doprnt.c: 822: }
  9725                           
  9726                           ;doprnt.c: 819: break;
  9727  002A0E  D019               	goto	l642
  9728  002A10                     l5968:
  9729  002A10  C085  FFF6         	movff	printf@f,tblptrl
  9730  002A14  C086  FFF7         	movff	printf@f+1,tblptrh
  9731  002A18  0100               	movlb	0	; () banked
  9732  002A1A  4B85               	infsnz	printf@f& (0+255),f,b
  9733  002A1C  2B86               	incf	(printf@f+1)& (0+255),f,b
  9734  002A1E                     	if	0	;tblptru may be non-zero
  9735  002A1E                     	endif
  9736  002A1E                     	if	0	;tblptru may be non-zero
  9737  002A1E                     	endif
  9738  002A1E  0008               	tblrd		*
  9739  002A20  CFF5 F09D          	movff	tablat,printf@c
  9740  002A24  0100               	movlb	0	; () banked
  9741  002A26  519D               	movf	printf@c& (0+255),w,b
  9742                           
  9743                           ; Switch size 1, requested type "space"
  9744                           ; Number of cases is 4, Range of values is 0 to 117
  9745                           ; switch strategies available:
  9746                           ; Name         Instructions Cycles
  9747                           ; simple_byte           13     7 (average)
  9748                           ;	Chosen strategy is simple_byte
  9749  002A28  0A00               	xorlw	0	; case 0
  9750  002A2A  B4D8               	btfsc	status,2,c
  9751  002A2C  D110               	goto	l668
  9752  002A2E  0A64               	xorlw	100	; case 100
  9753  002A30  B4D8               	btfsc	status,2,c
  9754  002A32  D007               	goto	l642
  9755  002A34  0A0D               	xorlw	13	; case 105
  9756  002A36  B4D8               	btfsc	status,2,c
  9757  002A38  D004               	goto	l642
  9758  002A3A  0A1C               	xorlw	28	; case 117
  9759  002A3C  B4D8               	btfsc	status,2,c
  9760  002A3E  D7E5               	goto	l5964
  9761  002A40  D0F6               	goto	l6040
  9762  002A42                     l642:
  9763                           
  9764                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  9765  002A42  0100               	movlb	0	; () banked
  9766  002A44  BD9A               	btfsc	printf@flag& (0+255),6,b
  9767  002A46  D019               	goto	l5980
  9768                           
  9769                           ; BSR set to: 0
  9770                           ;doprnt.c: 1253: {
  9771                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9772  002A48  C096  FFD9         	movff	printf@ap,fsr2l
  9773  002A4C  C097  FFDA         	movff	printf@ap+1,fsr2h
  9774  002A50  CFDE F098          	movff	postinc2,printf@val
  9775  002A54  CFDD F099          	movff	postdec2,printf@val+1
  9776                           
  9777                           ; BSR set to: 0
  9778  002A58  0E02               	movlw	2
  9779  002A5A  0100               	movlb	0	; () banked
  9780  002A5C  2796               	addwf	printf@ap& (0+255),f,b
  9781  002A5E  0E00               	movlw	0
  9782  002A60  2397               	addwfc	(printf@ap+1)& (0+255),f,b
  9783                           
  9784                           ; BSR set to: 0
  9785                           ;doprnt.c: 1261: if((int)val < 0) {
  9786  002A62  0100               	movlb	0	; () banked
  9787  002A64  AF99               	btfss	(printf@val+1)& (0+255),7,b
  9788  002A66  D017               	goto	l5984
  9789                           
  9790                           ; BSR set to: 0
  9791                           ;doprnt.c: 1262: flag |= 0x03;
  9792  002A68  0E03               	movlw	3
  9793  002A6A  0100               	movlb	0	; () banked
  9794  002A6C  139A               	iorwf	printf@flag& (0+255),f,b
  9795                           
  9796                           ; BSR set to: 0
  9797                           ;doprnt.c: 1263: val = -val;
  9798  002A6E  0100               	movlb	0	; () banked
  9799  002A70  6D98               	negf	printf@val& (0+255),b
  9800  002A72  1F99               	comf	(printf@val+1)& (0+255),f,b
  9801  002A74  B0D8               	btfsc	status,0,c
  9802  002A76  2B99               	incf	(printf@val+1)& (0+255),f,b
  9803                           
  9804                           ; BSR set to: 0
  9805                           ;doprnt.c: 1264: }
  9806                           ;doprnt.c: 1266: }
  9807  002A78  D00E               	goto	l5984
  9808  002A7A                     l5980:
  9809                           
  9810                           ; BSR set to: 0
  9811                           ;doprnt.c: 1268: else
  9812                           ;doprnt.c: 1273: {
  9813                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9814  002A7A  C096  FFD9         	movff	printf@ap,fsr2l
  9815  002A7E  C097  FFDA         	movff	printf@ap+1,fsr2h
  9816  002A82  CFDE F098          	movff	postinc2,printf@val
  9817  002A86  CFDD F099          	movff	postdec2,printf@val+1
  9818                           
  9819                           ; BSR set to: 0
  9820  002A8A  0E02               	movlw	2
  9821  002A8C  0100               	movlb	0	; () banked
  9822  002A8E  2796               	addwf	printf@ap& (0+255),f,b
  9823  002A90  0E00               	movlw	0
  9824  002A92  2397               	addwfc	(printf@ap+1)& (0+255),f,b
  9825  002A94  D000               	goto	l5984
  9826  002A96                     l5984:
  9827                           
  9828                           ; BSR set to: 0
  9829                           ;doprnt.c: 1287: }
  9830                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9831  002A96  0E01               	movlw	1
  9832  002A98  0100               	movlb	0	; () banked
  9833  002A9A  6F9D               	movwf	printf@c& (0+255),b
  9834  002A9C                     l5986:
  9835                           
  9836                           ; BSR set to: 0
  9837  002A9C  0E05               	movlw	5
  9838  002A9E  0100               	movlb	0	; () banked
  9839  002AA0  199D               	xorwf	printf@c& (0+255),w,b
  9840  002AA2  B4D8               	btfsc	status,2,c
  9841  002AA4  D01A               	goto	l5998
  9842  002AA6  D001               	goto	l5990
  9843                           
  9844                           ; BSR set to: 0
  9845  002AA8  D018               	goto	l5998
  9846  002AAA                     l5990:
  9847                           
  9848                           ; BSR set to: 0
  9849                           ;doprnt.c: 1306: if(val < dpowers[c])
  9850  002AAA  0100               	movlb	0	; () banked
  9851  002AAC  519D               	movf	printf@c& (0+255),w,b
  9852  002AAE  0D02               	mullw	2
  9853  002AB0  0E71               	movlw	low _dpowers
  9854  002AB2  24F3               	addwf	prodl,w,c
  9855  002AB4  6EF6               	movwf	tblptrl,c
  9856  002AB6  0E7A               	movlw	high _dpowers
  9857  002AB8  20F4               	addwfc	prodh,w,c
  9858  002ABA  6EF7               	movwf	tblptrh,c
  9859  002ABC                     	if	0	;There are less than 3 active tblptr bytes
  9860  002ABC                     	endif
  9861  002ABC  0009               	tblrd		*+
  9862  002ABE  50F5               	movf	tablat,w,c
  9863  002AC0  0100               	movlb	0	; () banked
  9864  002AC2  5D98               	subwf	printf@val& (0+255),w,b
  9865  002AC4  0009               	tblrd		*+
  9866  002AC6  50F5               	movf	tablat,w,c
  9867  002AC8  0100               	movlb	0	; () banked
  9868  002ACA  5999               	subwfb	(printf@val+1)& (0+255),w,b
  9869  002ACC  A0D8               	btfss	status,0,c
  9870  002ACE  D005               	goto	l5998
  9871  002AD0  D001               	goto	l5994
  9872                           
  9873                           ; BSR set to: 0
  9874                           ;doprnt.c: 1307: break;
  9875  002AD2  D003               	goto	l5998
  9876  002AD4                     l5994:
  9877                           
  9878                           ; BSR set to: 0
  9879  002AD4  0100               	movlb	0	; () banked
  9880  002AD6  2B9D               	incf	printf@c& (0+255),f,b
  9881  002AD8  D7E1               	goto	l5986
  9882  002ADA                     l5998:
  9883                           
  9884                           ; BSR set to: 0
  9885                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9886  002ADA  0100               	movlb	0	; () banked
  9887  002ADC  519B               	movf	printf@width& (0+255),w,b
  9888  002ADE  0100               	movlb	0	; () banked
  9889  002AE0  119C               	iorwf	(printf@width+1)& (0+255),w,b
  9890  002AE2  B4D8               	btfsc	status,2,c
  9891  002AE4  D00C               	goto	l6004
  9892                           
  9893                           ; BSR set to: 0
  9894  002AE6  C09A  F091         	movff	printf@flag,??_printf
  9895  002AEA  0E03               	movlw	3
  9896  002AEC  0100               	movlb	0	; () banked
  9897  002AEE  1791               	andwf	??_printf& (0+255),f,b
  9898  002AF0  B4D8               	btfsc	status,2,c
  9899  002AF2  D005               	goto	l6004
  9900                           
  9901                           ; BSR set to: 0
  9902                           ;doprnt.c: 1346: width--;
  9903  002AF4  0100               	movlb	0	; () banked
  9904  002AF6  079B               	decf	printf@width& (0+255),f,b
  9905  002AF8  A0D8               	btfss	status,0,c
  9906  002AFA  079C               	decf	(printf@width+1)& (0+255),f,b
  9907  002AFC  D000               	goto	l6004
  9908  002AFE                     l6004:
  9909                           
  9910                           ; BSR set to: 0
  9911                           ;doprnt.c: 1381: if(width > c)
  9912  002AFE  0E80               	movlw	128
  9913  002B00  0100               	movlb	0	; () banked
  9914  002B02  BF9D               	btfsc	printf@c& (0+255),7,b
  9915  002B04  0E7F               	movlw	127
  9916  002B06  0100               	movlb	0	; () banked
  9917  002B08  6F91               	movwf	??_printf& (0+255),b
  9918  002B0A  0100               	movlb	0	; () banked
  9919  002B0C  519B               	movf	printf@width& (0+255),w,b
  9920  002B0E  0100               	movlb	0	; () banked
  9921  002B10  5D9D               	subwf	printf@c& (0+255),w,b
  9922  002B12  0100               	movlb	0	; () banked
  9923  002B14  519C               	movf	(printf@width+1)& (0+255),w,b
  9924  002B16  0A80               	xorlw	128
  9925  002B18  0100               	movlb	0	; () banked
  9926  002B1A  5991               	subwfb	??_printf& (0+255),w,b
  9927  002B1C  B0D8               	btfsc	status,0,c
  9928  002B1E  D00B               	goto	l6008
  9929                           
  9930                           ; BSR set to: 0
  9931                           ;doprnt.c: 1382: width -= c;
  9932  002B20  0100               	movlb	0	; () banked
  9933  002B22  519D               	movf	printf@c& (0+255),w,b
  9934  002B24  0100               	movlb	0	; () banked
  9935  002B26  5F9B               	subwf	printf@width& (0+255),f,b
  9936  002B28  0E00               	movlw	0
  9937  002B2A  0100               	movlb	0	; () banked
  9938  002B2C  BF9D               	btfsc	printf@c& (0+255),7,b
  9939  002B2E  0EFF               	movlw	255
  9940  002B30  0100               	movlb	0	; () banked
  9941  002B32  5B9C               	subwfb	(printf@width+1)& (0+255),f,b
  9942  002B34  D006               	goto	l6010
  9943  002B36                     l6008:
  9944                           
  9945                           ; BSR set to: 0
  9946                           ;doprnt.c: 1383: else
  9947                           ;doprnt.c: 1384: width = 0;
  9948  002B36  0E00               	movlw	0
  9949  002B38  0100               	movlb	0	; () banked
  9950  002B3A  6F9C               	movwf	(printf@width+1)& (0+255),b
  9951  002B3C  0E00               	movlw	0
  9952  002B3E  6F9B               	movwf	printf@width& (0+255),b
  9953  002B40  D000               	goto	l6010
  9954  002B42                     l6010:
  9955                           
  9956                           ; BSR set to: 0
  9957                           ;doprnt.c: 1387: if(flag & 0x04) {
  9958  002B42  0100               	movlb	0	; () banked
  9959  002B44  A59A               	btfss	printf@flag& (0+255),2,b
  9960  002B46  D020               	goto	l6022
  9961                           
  9962                           ; BSR set to: 0
  9963                           ;doprnt.c: 1392: if(flag & 0x03)
  9964  002B48  C09A  F091         	movff	printf@flag,??_printf
  9965  002B4C  0E03               	movlw	3
  9966  002B4E  0100               	movlb	0	; () banked
  9967  002B50  1791               	andwf	??_printf& (0+255),f,b
  9968  002B52  B4D8               	btfsc	status,2,c
  9969  002B54  D004               	goto	l6016
  9970                           
  9971                           ; BSR set to: 0
  9972                           ;doprnt.c: 1393: (putch('-') );
  9973  002B56  0E2D               	movlw	45
  9974  002B58  EC86  F027         	call	_putch
  9975  002B5C  D000               	goto	l6016
  9976  002B5E                     l6016:
  9977                           
  9978                           ;doprnt.c: 1415: if(width)
  9979  002B5E  0100               	movlb	0	; () banked
  9980  002B60  519B               	movf	printf@width& (0+255),w,b
  9981  002B62  0100               	movlb	0	; () banked
  9982  002B64  119C               	iorwf	(printf@width+1)& (0+255),w,b
  9983  002B66  B4D8               	btfsc	status,2,c
  9984  002B68  D02F               	goto	l6032
  9985  002B6A                     l6018:
  9986                           
  9987                           ; BSR set to: 0
  9988                           ;doprnt.c: 1417: (putch('0') );
  9989  002B6A  0E30               	movlw	48
  9990  002B6C  EC86  F027         	call	_putch
  9991                           
  9992                           ;doprnt.c: 1418: while(--width);
  9993  002B70  0100               	movlb	0	; () banked
  9994  002B72  079B               	decf	printf@width& (0+255),f,b
  9995  002B74  A0D8               	btfss	status,0,c
  9996  002B76  079C               	decf	(printf@width+1)& (0+255),f,b
  9997  002B78  0100               	movlb	0	; () banked
  9998  002B7A  519B               	movf	printf@width& (0+255),w,b
  9999  002B7C  0100               	movlb	0	; () banked
 10000  002B7E  119C               	iorwf	(printf@width+1)& (0+255),w,b
 10001  002B80  B4D8               	btfsc	status,2,c
 10002  002B82  D022               	goto	l6032
 10003  002B84  D7F2               	goto	l6018
 10004                           
 10005                           ; BSR set to: 0
 10006                           ;doprnt.c: 1420: } else
 10007                           
 10008                           ; BSR set to: 0
 10009  002B86  D020               	goto	l6032
 10010  002B88                     l6022:
 10011                           
 10012                           ; BSR set to: 0
 10013                           ;doprnt.c: 1422: {
 10014                           ;doprnt.c: 1424: if(width
 10015                           ;doprnt.c: 1428: )
 10016  002B88  0100               	movlb	0	; () banked
 10017  002B8A  519B               	movf	printf@width& (0+255),w,b
 10018  002B8C  0100               	movlb	0	; () banked
 10019  002B8E  119C               	iorwf	(printf@width+1)& (0+255),w,b
 10020  002B90  B4D8               	btfsc	status,2,c
 10021  002B92  D00F               	goto	l6028
 10022  002B94                     l6024:
 10023                           
 10024                           ; BSR set to: 0
 10025                           ;doprnt.c: 1430: (putch(' ') );
 10026  002B94  0E20               	movlw	32
 10027  002B96  EC86  F027         	call	_putch
 10028                           
 10029                           ;doprnt.c: 1431: while(--width);
 10030  002B9A  0100               	movlb	0	; () banked
 10031  002B9C  079B               	decf	printf@width& (0+255),f,b
 10032  002B9E  A0D8               	btfss	status,0,c
 10033  002BA0  079C               	decf	(printf@width+1)& (0+255),f,b
 10034  002BA2  0100               	movlb	0	; () banked
 10035  002BA4  519B               	movf	printf@width& (0+255),w,b
 10036  002BA6  0100               	movlb	0	; () banked
 10037  002BA8  119C               	iorwf	(printf@width+1)& (0+255),w,b
 10038  002BAA  B4D8               	btfsc	status,2,c
 10039  002BAC  D002               	goto	l6028
 10040  002BAE  D7F2               	goto	l6024
 10041                           
 10042                           ; BSR set to: 0
 10043  002BB0  D000               	goto	l6028
 10044  002BB2                     l6028:
 10045                           
 10046                           ; BSR set to: 0
 10047                           ;doprnt.c: 1438: if(flag & 0x03)
 10048  002BB2  C09A  F091         	movff	printf@flag,??_printf
 10049  002BB6  0E03               	movlw	3
 10050  002BB8  0100               	movlb	0	; () banked
 10051  002BBA  1791               	andwf	??_printf& (0+255),f,b
 10052  002BBC  B4D8               	btfsc	status,2,c
 10053  002BBE  D004               	goto	l6032
 10054                           
 10055                           ; BSR set to: 0
 10056                           ;doprnt.c: 1439: (putch('-') );
 10057  002BC0  0E2D               	movlw	45
 10058  002BC2  EC86  F027         	call	_putch
 10059  002BC6  D000               	goto	l6032
 10060  002BC8                     l6032:
 10061                           
 10062                           ;doprnt.c: 1469: }
 10063                           ;doprnt.c: 1472: prec = c;
 10064  002BC8  C09D  F095         	movff	printf@c,printf@prec
 10065                           
 10066                           ;doprnt.c: 1474: while(prec--) {
 10067  002BCC  D028               	goto	l6038
 10068  002BCE                     l6034:
 10069                           
 10070                           ;doprnt.c: 1478: {
 10071                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10072  002BCE  0100               	movlb	0	; () banked
 10073  002BD0  5195               	movf	printf@prec& (0+255),w,b
 10074  002BD2  0D02               	mullw	2
 10075  002BD4  0E71               	movlw	low _dpowers
 10076  002BD6  24F3               	addwf	prodl,w,c
 10077  002BD8  6EF6               	movwf	tblptrl,c
 10078  002BDA  0E7A               	movlw	high _dpowers
 10079  002BDC  20F4               	addwfc	prodh,w,c
 10080  002BDE  6EF7               	movwf	tblptrh,c
 10081  002BE0                     	if	0	;There are less than 3 active tblptr bytes
 10082  002BE0                     	endif
 10083  002BE0  0009               	tblrd		*+
 10084  002BE2  CFF5 F011          	movff	tablat,___lwdiv@divisor
 10085  002BE6  000A               	tblrd		*-
 10086  002BE8  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
 10087  002BEC  C098  F00F         	movff	printf@val,___lwdiv@dividend
 10088  002BF0  C099  F010         	movff	printf@val+1,___lwdiv@dividend+1
 10089  002BF4  EC03  F025         	call	___lwdiv	;wreg free
 10090  002BF8  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
 10091  002BFC  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
 10092  002C00  0E00               	movlw	0
 10093  002C02  6E19               	movwf	___lwmod@divisor+1,c
 10094  002C04  0E0A               	movlw	10
 10095  002C06  6E18               	movwf	___lwmod@divisor,c
 10096  002C08  EC09  F026         	call	___lwmod	;wreg free
 10097  002C0C  5016               	movf	?___lwmod,w,c
 10098  002C0E  0F30               	addlw	48
 10099  002C10  0100               	movlb	0	; () banked
 10100  002C12  6F9D               	movwf	printf@c& (0+255),b
 10101                           
 10102                           ; BSR set to: 0
 10103                           ;doprnt.c: 1523: }
 10104                           ;doprnt.c: 1524: (putch(c) );
 10105  002C14  0100               	movlb	0	; () banked
 10106  002C16  519D               	movf	printf@c& (0+255),w,b
 10107  002C18  EC86  F027         	call	_putch
 10108  002C1C  D000               	goto	l6038
 10109  002C1E                     l6038:
 10110  002C1E  0100               	movlb	0	; () banked
 10111  002C20  0795               	decf	printf@prec& (0+255),f,b
 10112  002C22  0100               	movlb	0	; () banked
 10113  002C24  2995               	incf	printf@prec& (0+255),w,b
 10114  002C26  B4D8               	btfsc	status,2,c
 10115  002C28  D002               	goto	l6040
 10116  002C2A  D7D1               	goto	l6034
 10117                           
 10118                           ; BSR set to: 0
 10119  002C2C  D000               	goto	l6040
 10120  002C2E                     l6040:
 10121  002C2E  C085  FFF6         	movff	printf@f,tblptrl
 10122  002C32  C086  FFF7         	movff	printf@f+1,tblptrh
 10123  002C36  0100               	movlb	0	; () banked
 10124  002C38  4B85               	infsnz	printf@f& (0+255),f,b
 10125  002C3A  2B86               	incf	(printf@f+1)& (0+255),f,b
 10126  002C3C                     	if	0	;tblptru may be non-zero
 10127  002C3C                     	endif
 10128  002C3C                     	if	0	;tblptru may be non-zero
 10129  002C3C                     	endif
 10130  002C3C  0008               	tblrd		*
 10131  002C3E  CFF5 F09D          	movff	tablat,printf@c
 10132  002C42  0100               	movlb	0	; () banked
 10133  002C44  519D               	movf	printf@c& (0+255),w,b
 10134  002C46  B4D8               	btfsc	status,2,c
 10135  002C48  D002               	goto	l668
 10136  002C4A  D66B               	goto	l5940
 10137                           
 10138                           ; BSR set to: 0
 10139  002C4C  D000               	goto	l668
 10140  002C4E                     l668:
 10141  002C4E  0012               	return		;funcret
 10142  002C50                     __end_of_printf:
 10143                           	opt stack 0
 10144                           tblptru	equ	0xFF8
 10145                           tblptrh	equ	0xFF7
 10146                           tblptrl	equ	0xFF6
 10147                           tablat	equ	0xFF5
 10148                           prodh	equ	0xFF4
 10149                           prodl	equ	0xFF3
 10150                           intcon	equ	0xFF2
 10151                           intcon2	equ	0xFF1
 10152                           postinc0	equ	0xFEE
 10153                           wreg	equ	0xFE8
 10154                           postinc1	equ	0xFE6
 10155                           postdec1	equ	0xFE5
 10156                           fsr1h	equ	0xFE2
 10157                           fsr1l	equ	0xFE1
 10158                           indf2	equ	0xFDF
 10159                           postinc2	equ	0xFDE
 10160                           postdec2	equ	0xFDD
 10161                           plusw2	equ	0xFDB
 10162                           fsr2h	equ	0xFDA
 10163                           fsr2l	equ	0xFD9
 10164                           status	equ	0xFD8
 10165                           
 10166 ;; *************** function _putch *****************
 10167 ;; Defined at:
 10168 ;;		line 29 in file "../config.c"
 10169 ;; Parameters:    Size  Location     Type
 10170 ;;  data            1    wreg     unsigned char 
 10171 ;; Auto vars:     Size  Location     Type
 10172 ;;  data            1   14[COMRAM] unsigned char 
 10173 ;; Return value:  Size  Location     Type
 10174 ;;		None               void
 10175 ;; Registers used:
 10176 ;;		wreg
 10177 ;; Tracked objects:
 10178 ;;		On entry : 0/0
 10179 ;;		On exit  : 0/0
 10180 ;;		Unchanged: 0/0
 10181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10182 ;;      Params:         0       0       0       0       0       0       0       0       0
 10183 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10184 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10185 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10186 ;;Total ram usage:        1 bytes
 10187 ;; Hardware stack levels used:    1
 10188 ;; Hardware stack levels required when called:    1
 10189 ;; This function calls:
 10190 ;;		Nothing
 10191 ;; This function is called by:
 10192 ;;		_printf
 10193 ;; This function uses a non-reentrant model
 10194 ;;
 10195                           
 10196                           	psect	text15
 10197  004F0C                     __ptext15:
 10198                           	opt stack 0
 10199  004F0C                     _putch:
 10200                           	opt stack 28
 10201                           
 10202                           ;incstack = 0
 10203                           ;putch@data stored from wreg
 10204  004F0C  6E0F               	movwf	putch@data,c
 10205                           
 10206                           ;config.c: 30: while( ! TXIF)
 10207  004F0E  D000               	goto	l106
 10208  004F10                     l106:
 10209  004F10  A89E               	btfss	3998,4,c	;volatile
 10210  004F12  D7FE               	goto	l106
 10211                           
 10212                           ;config.c: 32: TXREG = data;
 10213  004F14  C00F  FFAD         	movff	putch@data,4013	;volatile
 10214  004F18  0012               	return		;funcret
 10215  004F1A                     __end_of_putch:
 10216                           	opt stack 0
 10217                           tblptru	equ	0xFF8
 10218                           tblptrh	equ	0xFF7
 10219                           tblptrl	equ	0xFF6
 10220                           tablat	equ	0xFF5
 10221                           prodh	equ	0xFF4
 10222                           prodl	equ	0xFF3
 10223                           intcon	equ	0xFF2
 10224                           intcon2	equ	0xFF1
 10225                           postinc0	equ	0xFEE
 10226                           wreg	equ	0xFE8
 10227                           postinc1	equ	0xFE6
 10228                           postdec1	equ	0xFE5
 10229                           fsr1h	equ	0xFE2
 10230                           fsr1l	equ	0xFE1
 10231                           indf2	equ	0xFDF
 10232                           postinc2	equ	0xFDE
 10233                           postdec2	equ	0xFDD
 10234                           plusw2	equ	0xFDB
 10235                           fsr2h	equ	0xFDA
 10236                           fsr2l	equ	0xFD9
 10237                           status	equ	0xFD8
 10238                           
 10239 ;; *************** function _isdigit *****************
 10240 ;; Defined at:
 10241 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/isdigit.c"
 10242 ;; Parameters:    Size  Location     Type
 10243 ;;  c               1    wreg     unsigned char 
 10244 ;; Auto vars:     Size  Location     Type
 10245 ;;  c               1   16[COMRAM] unsigned char 
 10246 ;; Return value:  Size  Location     Type
 10247 ;;		None               void
 10248 ;; Registers used:
 10249 ;;		wreg, status,2, status,0
 10250 ;; Tracked objects:
 10251 ;;		On entry : 0/0
 10252 ;;		On exit  : 0/0
 10253 ;;		Unchanged: 0/0
 10254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10255 ;;      Params:         0       0       0       0       0       0       0       0       0
 10256 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10257 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10258 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10259 ;;Total ram usage:        3 bytes
 10260 ;; Hardware stack levels used:    1
 10261 ;; Hardware stack levels required when called:    1
 10262 ;; This function calls:
 10263 ;;		Nothing
 10264 ;; This function is called by:
 10265 ;;		_printf
 10266 ;; This function uses a non-reentrant model
 10267 ;;
 10268                           
 10269                           	psect	text16
 10270  004E90                     __ptext16:
 10271                           	opt stack 0
 10272  004E90                     _isdigit:
 10273                           	opt stack 28
 10274                           
 10275                           ;incstack = 0
 10276                           ;isdigit@c stored from wreg
 10277  004E90  6E11               	movwf	isdigit@c,c
 10278  004E92  0E00               	movlw	0
 10279  004E94  6E10               	movwf	_isdigit$2200,c
 10280  004E96  0E3A               	movlw	58
 10281  004E98  6011               	cpfslt	isdigit@c,c
 10282  004E9A  D006               	goto	l5670
 10283  004E9C  0E2F               	movlw	47
 10284  004E9E  6411               	cpfsgt	isdigit@c,c
 10285  004EA0  D003               	goto	l5670
 10286  004EA2  0E01               	movlw	1
 10287  004EA4  6E10               	movwf	_isdigit$2200,c
 10288  004EA6  D000               	goto	l5670
 10289  004EA8                     l5670:
 10290  004EA8  C010  F00F         	movff	_isdigit$2200,??_isdigit
 10291  004EAC  300F               	rrcf	??_isdigit,w,c
 10292  004EAE  D000               	goto	l1102
 10293  004EB0                     l1102:
 10294  004EB0  0012               	return		;funcret
 10295  004EB2                     __end_of_isdigit:
 10296                           	opt stack 0
 10297                           tblptru	equ	0xFF8
 10298                           tblptrh	equ	0xFF7
 10299                           tblptrl	equ	0xFF6
 10300                           tablat	equ	0xFF5
 10301                           prodh	equ	0xFF4
 10302                           prodl	equ	0xFF3
 10303                           intcon	equ	0xFF2
 10304                           intcon2	equ	0xFF1
 10305                           postinc0	equ	0xFEE
 10306                           wreg	equ	0xFE8
 10307                           postinc1	equ	0xFE6
 10308                           postdec1	equ	0xFE5
 10309                           fsr1h	equ	0xFE2
 10310                           fsr1l	equ	0xFE1
 10311                           indf2	equ	0xFDF
 10312                           postinc2	equ	0xFDE
 10313                           postdec2	equ	0xFDD
 10314                           plusw2	equ	0xFDB
 10315                           fsr2h	equ	0xFDA
 10316                           fsr2l	equ	0xFD9
 10317                           status	equ	0xFD8
 10318                           
 10319 ;; *************** function ___lwmod *****************
 10320 ;; Defined at:
 10321 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwmod.c"
 10322 ;; Parameters:    Size  Location     Type
 10323 ;;  dividend        2   21[COMRAM] unsigned int 
 10324 ;;  divisor         2   23[COMRAM] unsigned int 
 10325 ;; Auto vars:     Size  Location     Type
 10326 ;;  counter         1   25[COMRAM] unsigned char 
 10327 ;; Return value:  Size  Location     Type
 10328 ;;                  2   21[COMRAM] unsigned int 
 10329 ;; Registers used:
 10330 ;;		wreg, status,2, status,0
 10331 ;; Tracked objects:
 10332 ;;		On entry : 0/0
 10333 ;;		On exit  : 0/0
 10334 ;;		Unchanged: 0/0
 10335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10336 ;;      Params:         4       0       0       0       0       0       0       0       0
 10337 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10338 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10339 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10340 ;;Total ram usage:        5 bytes
 10341 ;; Hardware stack levels used:    1
 10342 ;; Hardware stack levels required when called:    1
 10343 ;; This function calls:
 10344 ;;		Nothing
 10345 ;; This function is called by:
 10346 ;;		_printf
 10347 ;; This function uses a non-reentrant model
 10348 ;;
 10349                           
 10350                           	psect	text17
 10351  004C12                     __ptext17:
 10352                           	opt stack 0
 10353  004C12                     ___lwmod:
 10354                           	opt stack 28
 10355                           
 10356                           ;incstack = 0
 10357  004C12  5018               	movf	___lwmod@divisor,w,c
 10358  004C14  1019               	iorwf	___lwmod@divisor+1,w,c
 10359  004C16  B4D8               	btfsc	status,2,c
 10360  004C18  D01D               	goto	l1204
 10361  004C1A  0E01               	movlw	1
 10362  004C1C  6E1A               	movwf	___lwmod@counter,c
 10363  004C1E  D005               	goto	l5816
 10364  004C20                     l5814:
 10365  004C20  90D8               	bcf	status,0,c
 10366  004C22  3618               	rlcf	___lwmod@divisor,f,c
 10367  004C24  3619               	rlcf	___lwmod@divisor+1,f,c
 10368  004C26  2A1A               	incf	___lwmod@counter,f,c
 10369  004C28  D000               	goto	l5816
 10370  004C2A                     l5816:
 10371  004C2A  BE19               	btfsc	___lwmod@divisor+1,7,c
 10372  004C2C  D002               	goto	l5818
 10373  004C2E  D7F8               	goto	l5814
 10374  004C30  D000               	goto	l5818
 10375  004C32                     l5818:
 10376  004C32  5018               	movf	___lwmod@divisor,w,c
 10377  004C34  5C16               	subwf	___lwmod@dividend,w,c
 10378  004C36  5019               	movf	___lwmod@divisor+1,w,c
 10379  004C38  5817               	subwfb	___lwmod@dividend+1,w,c
 10380  004C3A  A0D8               	btfss	status,0,c
 10381  004C3C  D005               	goto	l5822
 10382  004C3E  5018               	movf	___lwmod@divisor,w,c
 10383  004C40  5E16               	subwf	___lwmod@dividend,f,c
 10384  004C42  5019               	movf	___lwmod@divisor+1,w,c
 10385  004C44  5A17               	subwfb	___lwmod@dividend+1,f,c
 10386  004C46  D000               	goto	l5822
 10387  004C48                     l5822:
 10388  004C48  90D8               	bcf	status,0,c
 10389  004C4A  3219               	rrcf	___lwmod@divisor+1,f,c
 10390  004C4C  3218               	rrcf	___lwmod@divisor,f,c
 10391  004C4E  2E1A               	decfsz	___lwmod@counter,f,c
 10392  004C50  D7F0               	goto	l5818
 10393  004C52  D000               	goto	l1204
 10394  004C54                     l1204:
 10395  004C54  C016  F016         	movff	___lwmod@dividend,?___lwmod
 10396  004C58  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
 10397  004C5C  0012               	return		;funcret
 10398  004C5E                     __end_of___lwmod:
 10399                           	opt stack 0
 10400                           tblptru	equ	0xFF8
 10401                           tblptrh	equ	0xFF7
 10402                           tblptrl	equ	0xFF6
 10403                           tablat	equ	0xFF5
 10404                           prodh	equ	0xFF4
 10405                           prodl	equ	0xFF3
 10406                           intcon	equ	0xFF2
 10407                           intcon2	equ	0xFF1
 10408                           postinc0	equ	0xFEE
 10409                           wreg	equ	0xFE8
 10410                           postinc1	equ	0xFE6
 10411                           postdec1	equ	0xFE5
 10412                           fsr1h	equ	0xFE2
 10413                           fsr1l	equ	0xFE1
 10414                           indf2	equ	0xFDF
 10415                           postinc2	equ	0xFDE
 10416                           postdec2	equ	0xFDD
 10417                           plusw2	equ	0xFDB
 10418                           fsr2h	equ	0xFDA
 10419                           fsr2l	equ	0xFD9
 10420                           status	equ	0xFD8
 10421                           
 10422 ;; *************** function ___lwdiv *****************
 10423 ;; Defined at:
 10424 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwdiv.c"
 10425 ;; Parameters:    Size  Location     Type
 10426 ;;  dividend        2   14[COMRAM] unsigned int 
 10427 ;;  divisor         2   16[COMRAM] unsigned int 
 10428 ;; Auto vars:     Size  Location     Type
 10429 ;;  quotient        2   19[COMRAM] unsigned int 
 10430 ;;  counter         1   18[COMRAM] unsigned char 
 10431 ;; Return value:  Size  Location     Type
 10432 ;;                  2   14[COMRAM] unsigned int 
 10433 ;; Registers used:
 10434 ;;		wreg, status,2, status,0
 10435 ;; Tracked objects:
 10436 ;;		On entry : 0/0
 10437 ;;		On exit  : 0/0
 10438 ;;		Unchanged: 0/0
 10439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10440 ;;      Params:         4       0       0       0       0       0       0       0       0
 10441 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10442 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10443 ;;      Totals:         7       0       0       0       0       0       0       0       0
 10444 ;;Total ram usage:        7 bytes
 10445 ;; Hardware stack levels used:    1
 10446 ;; Hardware stack levels required when called:    1
 10447 ;; This function calls:
 10448 ;;		Nothing
 10449 ;; This function is called by:
 10450 ;;		_printf
 10451 ;; This function uses a non-reentrant model
 10452 ;;
 10453                           
 10454                           	psect	text18
 10455  004A06                     __ptext18:
 10456                           	opt stack 0
 10457  004A06                     ___lwdiv:
 10458                           	opt stack 28
 10459                           
 10460                           ;incstack = 0
 10461  004A06  0E00               	movlw	0
 10462  004A08  6E15               	movwf	___lwdiv@quotient+1,c
 10463  004A0A  0E00               	movlw	0
 10464  004A0C  6E14               	movwf	___lwdiv@quotient,c
 10465  004A0E  5011               	movf	___lwdiv@divisor,w,c
 10466  004A10  1012               	iorwf	___lwdiv@divisor+1,w,c
 10467  004A12  B4D8               	btfsc	status,2,c
 10468  004A14  D021               	goto	l1194
 10469  004A16  0E01               	movlw	1
 10470  004A18  6E13               	movwf	___lwdiv@counter,c
 10471  004A1A  D005               	goto	l5796
 10472  004A1C                     l5794:
 10473  004A1C  90D8               	bcf	status,0,c
 10474  004A1E  3611               	rlcf	___lwdiv@divisor,f,c
 10475  004A20  3612               	rlcf	___lwdiv@divisor+1,f,c
 10476  004A22  2A13               	incf	___lwdiv@counter,f,c
 10477  004A24  D000               	goto	l5796
 10478  004A26                     l5796:
 10479  004A26  BE12               	btfsc	___lwdiv@divisor+1,7,c
 10480  004A28  D002               	goto	l5798
 10481  004A2A  D7F8               	goto	l5794
 10482  004A2C  D000               	goto	l5798
 10483  004A2E                     l5798:
 10484  004A2E  90D8               	bcf	status,0,c
 10485  004A30  3614               	rlcf	___lwdiv@quotient,f,c
 10486  004A32  3615               	rlcf	___lwdiv@quotient+1,f,c
 10487  004A34  5011               	movf	___lwdiv@divisor,w,c
 10488  004A36  5C0F               	subwf	___lwdiv@dividend,w,c
 10489  004A38  5012               	movf	___lwdiv@divisor+1,w,c
 10490  004A3A  5810               	subwfb	___lwdiv@dividend+1,w,c
 10491  004A3C  A0D8               	btfss	status,0,c
 10492  004A3E  D006               	goto	l5806
 10493  004A40  5011               	movf	___lwdiv@divisor,w,c
 10494  004A42  5E0F               	subwf	___lwdiv@dividend,f,c
 10495  004A44  5012               	movf	___lwdiv@divisor+1,w,c
 10496  004A46  5A10               	subwfb	___lwdiv@dividend+1,f,c
 10497  004A48  8014               	bsf	___lwdiv@quotient,0,c
 10498  004A4A  D000               	goto	l5806
 10499  004A4C                     l5806:
 10500  004A4C  90D8               	bcf	status,0,c
 10501  004A4E  3212               	rrcf	___lwdiv@divisor+1,f,c
 10502  004A50  3211               	rrcf	___lwdiv@divisor,f,c
 10503  004A52  2E13               	decfsz	___lwdiv@counter,f,c
 10504  004A54  D7EC               	goto	l5798
 10505  004A56  D000               	goto	l1194
 10506  004A58                     l1194:
 10507  004A58  C014  F00F         	movff	___lwdiv@quotient,?___lwdiv
 10508  004A5C  C015  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10509  004A60  0012               	return		;funcret
 10510  004A62                     __end_of___lwdiv:
 10511                           	opt stack 0
 10512                           tblptru	equ	0xFF8
 10513                           tblptrh	equ	0xFF7
 10514                           tblptrl	equ	0xFF6
 10515                           tablat	equ	0xFF5
 10516                           prodh	equ	0xFF4
 10517                           prodl	equ	0xFF3
 10518                           intcon	equ	0xFF2
 10519                           intcon2	equ	0xFF1
 10520                           postinc0	equ	0xFEE
 10521                           wreg	equ	0xFE8
 10522                           postinc1	equ	0xFE6
 10523                           postdec1	equ	0xFE5
 10524                           fsr1h	equ	0xFE2
 10525                           fsr1l	equ	0xFE1
 10526                           indf2	equ	0xFDF
 10527                           postinc2	equ	0xFDE
 10528                           postdec2	equ	0xFDD
 10529                           plusw2	equ	0xFDB
 10530                           fsr2h	equ	0xFDA
 10531                           fsr2l	equ	0xFD9
 10532                           status	equ	0xFD8
 10533                           
 10534 ;; *************** function _Interval *****************
 10535 ;; Defined at:
 10536 ;;		line 108 in file "../main.c"
 10537 ;; Parameters:    Size  Location     Type
 10538 ;;  start           2   27[BANK0 ] int 
 10539 ;;  end             2   29[BANK0 ] int 
 10540 ;;  t               2   31[BANK0 ] int 
 10541 ;;  total           2   33[BANK0 ] int 
 10542 ;; Auto vars:     Size  Location     Type
 10543 ;;  a               2   35[BANK0 ] int 
 10544 ;; Return value:  Size  Location     Type
 10545 ;;                  2   27[BANK0 ] int 
 10546 ;; Registers used:
 10547 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10548 ;; Tracked objects:
 10549 ;;		On entry : 0/0
 10550 ;;		On exit  : 0/0
 10551 ;;		Unchanged: 0/0
 10552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10553 ;;      Params:         0       8       0       0       0       0       0       0       0
 10554 ;;      Locals:         0       2       0       0       0       0       0       0       0
 10555 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10556 ;;      Totals:         2      10       0       0       0       0       0       0       0
 10557 ;;Total ram usage:       12 bytes
 10558 ;; Hardware stack levels used:    1
 10559 ;; Hardware stack levels required when called:    3
 10560 ;; This function calls:
 10561 ;;		___awtoft
 10562 ;;		___ftadd
 10563 ;;		___ftdiv
 10564 ;;		___ftmul
 10565 ;;		___fttol
 10566 ;;		___wmul
 10567 ;; This function is called by:
 10568 ;;		_PlotCompute
 10569 ;; This function uses a non-reentrant model
 10570 ;;
 10571                           
 10572                           	psect	text19
 10573  0032E0                     __ptext19:
 10574                           	opt stack 0
 10575  0032E0                     _Interval:
 10576                           	opt stack 26
 10577                           
 10578                           ;main.c: 109: int a; a = (double)t / (double)total * 100.0;
 10579                           
 10580                           ;incstack = 0
 10581  0032E0  0E00               	movlw	0
 10582  0032E2  6E33               	movwf	___ftmul@f2,c
 10583  0032E4  0EC8               	movlw	200
 10584  0032E6  6E34               	movwf	___ftmul@f2+1,c
 10585  0032E8  0E42               	movlw	66
 10586  0032EA  6E35               	movwf	___ftmul@f2+2,c
 10587  0032EC  C081  F01D         	movff	Interval@total,___awtoft@c
 10588  0032F0  C082  F01E         	movff	Interval@total+1,___awtoft@c+1
 10589  0032F4  ECB5  F026         	call	___awtoft	;wreg free
 10590  0032F8  C01D  F024         	movff	?___awtoft,___ftdiv@f2
 10591  0032FC  C01E  F025         	movff	?___awtoft+1,___ftdiv@f2+1
 10592  003300  C01F  F026         	movff	?___awtoft+2,___ftdiv@f2+2
 10593  003304  C07F  F01D         	movff	Interval@t,___awtoft@c
 10594  003308  C080  F01E         	movff	Interval@t+1,___awtoft@c+1
 10595  00330C  ECB5  F026         	call	___awtoft	;wreg free
 10596  003310  C01D  F021         	movff	?___awtoft,___ftdiv@f1
 10597  003314  C01E  F022         	movff	?___awtoft+1,___ftdiv@f1+1
 10598  003318  C01F  F023         	movff	?___awtoft+2,___ftdiv@f1+2
 10599  00331C  ECEC  F01E         	call	___ftdiv	;wreg free
 10600  003320  C021  F030         	movff	?___ftdiv,___ftmul@f1
 10601  003324  C022  F031         	movff	?___ftdiv+1,___ftmul@f1+1
 10602  003328  C023  F032         	movff	?___ftdiv+2,___ftmul@f1+2
 10603  00332C  EC70  F01E         	call	___ftmul	;wreg free
 10604  003330  C030  F06C         	movff	?___ftmul,___fttol@f1
 10605  003334  C031  F06D         	movff	?___ftmul+1,___fttol@f1+1
 10606  003338  C032  F06E         	movff	?___ftmul+2,___fttol@f1+2
 10607  00333C  EC1C  F01B         	call	___fttol	;wreg free
 10608  003340  C06C  F083         	movff	?___fttol,Interval@a
 10609  003344  C06D  F084         	movff	?___fttol+1,Interval@a+1
 10610                           
 10611                           ;main.c: 110: if (start < end){
 10612  003348  0100               	movlb	0	; () banked
 10613  00334A  517D               	movf	Interval@end& (0+255),w,b
 10614  00334C  0100               	movlb	0	; () banked
 10615  00334E  5D7B               	subwf	Interval@start& (0+255),w,b
 10616  003350  0100               	movlb	0	; () banked
 10617  003352  517C               	movf	(Interval@start+1)& (0+255),w,b
 10618  003354  0A80               	xorlw	128
 10619  003356  6E42               	movwf	??_Interval& (0+255),c
 10620  003358  0100               	movlb	0	; () banked
 10621  00335A  517E               	movf	(Interval@end+1)& (0+255),w,b
 10622  00335C  0A80               	xorlw	128
 10623  00335E  5842               	subwfb	??_Interval& (0+255),w,c
 10624  003360  B0D8               	btfsc	status,0,c
 10625  003362  D04E               	goto	l6300
 10626                           
 10627                           ; BSR set to: 0
 10628                           ;main.c: 111: return (int) (start + ACEL[a] * (double)(end - start));
 10629  003364  0E00               	movlw	0
 10630  003366  6E1A               	movwf	___wmul@multiplicand+1,c
 10631  003368  0E03               	movlw	3
 10632  00336A  6E19               	movwf	___wmul@multiplicand,c
 10633  00336C  C083  F017         	movff	Interval@a,___wmul@multiplier
 10634  003370  C084  F018         	movff	Interval@a+1,___wmul@multiplier+1
 10635  003374  EC10  F027         	call	___wmul	;wreg free
 10636  003378  0E4B               	movlw	low _ACEL
 10637  00337A  2417               	addwf	?___wmul,w,c
 10638  00337C  6ED9               	movwf	fsr2l,c
 10639  00337E  0E03               	movlw	high _ACEL
 10640  003380  2018               	addwfc	?___wmul+1,w,c
 10641  003382  6EDA               	movwf	fsr2h,c
 10642  003384  CFDE F033          	movff	postinc2,___ftmul@f2
 10643  003388  CFDE F034          	movff	postinc2,___ftmul@f2+1
 10644  00338C  CFDD F035          	movff	postdec2,___ftmul@f2+2
 10645  003390  C07B  F042         	movff	Interval@start,??_Interval
 10646  003394  C07C  F043         	movff	Interval@start+1,??_Interval+1
 10647  003398  1E42               	comf	??_Interval,f,c
 10648  00339A  1E43               	comf	??_Interval+1,f,c
 10649  00339C  4A42               	infsnz	??_Interval,f,c
 10650  00339E  2A43               	incf	??_Interval+1,f,c
 10651  0033A0  0100               	movlb	0	; () banked
 10652  0033A2  517D               	movf	Interval@end& (0+255),w,b
 10653  0033A4  2442               	addwf	??_Interval,w,c
 10654  0033A6  6E1D               	movwf	___awtoft@c,c
 10655  0033A8  0100               	movlb	0	; () banked
 10656  0033AA  517E               	movf	(Interval@end+1)& (0+255),w,b
 10657  0033AC  2043               	addwfc	??_Interval+1,w,c
 10658  0033AE  6E1E               	movwf	___awtoft@c+1,c
 10659  0033B0  ECB5  F026         	call	___awtoft	;wreg free
 10660  0033B4  C01D  F030         	movff	?___awtoft,___ftmul@f1
 10661  0033B8  C01E  F031         	movff	?___awtoft+1,___ftmul@f1+1
 10662  0033BC  C01F  F032         	movff	?___awtoft+2,___ftmul@f1+2
 10663  0033C0  EC70  F01E         	call	___ftmul	;wreg free
 10664  0033C4  C030  F063         	movff	?___ftmul,___ftadd@f2
 10665  0033C8  C031  F064         	movff	?___ftmul+1,___ftadd@f2+1
 10666  0033CC  C032  F065         	movff	?___ftmul+2,___ftadd@f2+2
 10667  0033D0  C07B  F01D         	movff	Interval@start,___awtoft@c
 10668  0033D4  C07C  F01E         	movff	Interval@start+1,___awtoft@c+1
 10669  0033D8  ECB5  F026         	call	___awtoft	;wreg free
 10670  0033DC  C01D  F060         	movff	?___awtoft,___ftadd@f1
 10671  0033E0  C01E  F061         	movff	?___awtoft+1,___ftadd@f1+1
 10672  0033E4  C01F  F062         	movff	?___awtoft+2,___ftadd@f1+2
 10673  0033E8  EC28  F016         	call	___ftadd	;wreg free
 10674  0033EC  C060  F06C         	movff	?___ftadd,___fttol@f1
 10675  0033F0  C061  F06D         	movff	?___ftadd+1,___fttol@f1+1
 10676  0033F4  C062  F06E         	movff	?___ftadd+2,___fttol@f1+2
 10677  0033F8  EC1C  F01B         	call	___fttol	;wreg free
 10678  0033FC  D04D               	goto	L13
 10679                           
 10680                           ;main.c: 112: }else{
 10681  0033FE  D051               	goto	l276
 10682  003400                     l6300:
 10683                           
 10684                           ;main.c: 113: return (int) (start + ICEL[a] * (double)(end - start));
 10685  003400  0E00               	movlw	0
 10686  003402  6E1A               	movwf	___wmul@multiplicand+1,c
 10687  003404  0E03               	movlw	3
 10688  003406  6E19               	movwf	___wmul@multiplicand,c
 10689  003408  C083  F017         	movff	Interval@a,___wmul@multiplier
 10690  00340C  C084  F018         	movff	Interval@a+1,___wmul@multiplier+1
 10691  003410  EC10  F027         	call	___wmul	;wreg free
 10692  003414  0E86               	movlw	low _ICEL
 10693  003416  2417               	addwf	?___wmul,w,c
 10694  003418  6ED9               	movwf	fsr2l,c
 10695  00341A  0E04               	movlw	high _ICEL
 10696  00341C  2018               	addwfc	?___wmul+1,w,c
 10697  00341E  6EDA               	movwf	fsr2h,c
 10698  003420  CFDE F033          	movff	postinc2,___ftmul@f2
 10699  003424  CFDE F034          	movff	postinc2,___ftmul@f2+1
 10700  003428  CFDD F035          	movff	postdec2,___ftmul@f2+2
 10701  00342C  C07B  F042         	movff	Interval@start,??_Interval
 10702  003430  C07C  F043         	movff	Interval@start+1,??_Interval+1
 10703  003434  1E42               	comf	??_Interval,f,c
 10704  003436  1E43               	comf	??_Interval+1,f,c
 10705  003438  4A42               	infsnz	??_Interval,f,c
 10706  00343A  2A43               	incf	??_Interval+1,f,c
 10707  00343C  0100               	movlb	0	; () banked
 10708  00343E  517D               	movf	Interval@end& (0+255),w,b
 10709  003440  2442               	addwf	??_Interval,w,c
 10710  003442  6E1D               	movwf	___awtoft@c,c
 10711  003444  0100               	movlb	0	; () banked
 10712  003446  517E               	movf	(Interval@end+1)& (0+255),w,b
 10713  003448  2043               	addwfc	??_Interval+1,w,c
 10714  00344A  6E1E               	movwf	___awtoft@c+1,c
 10715  00344C  ECB5  F026         	call	___awtoft	;wreg free
 10716  003450  C01D  F030         	movff	?___awtoft,___ftmul@f1
 10717  003454  C01E  F031         	movff	?___awtoft+1,___ftmul@f1+1
 10718  003458  C01F  F032         	movff	?___awtoft+2,___ftmul@f1+2
 10719  00345C  EC70  F01E         	call	___ftmul	;wreg free
 10720  003460  C030  F063         	movff	?___ftmul,___ftadd@f2
 10721  003464  C031  F064         	movff	?___ftmul+1,___ftadd@f2+1
 10722  003468  C032  F065         	movff	?___ftmul+2,___ftadd@f2+2
 10723  00346C  C07B  F01D         	movff	Interval@start,___awtoft@c
 10724  003470  C07C  F01E         	movff	Interval@start+1,___awtoft@c+1
 10725  003474  ECB5  F026         	call	___awtoft	;wreg free
 10726  003478  C01D  F060         	movff	?___awtoft,___ftadd@f1
 10727  00347C  C01E  F061         	movff	?___awtoft+1,___ftadd@f1+1
 10728  003480  C01F  F062         	movff	?___awtoft+2,___ftadd@f1+2
 10729  003484  EC28  F016         	call	___ftadd	;wreg free
 10730  003488  C060  F06C         	movff	?___ftadd,___fttol@f1
 10731  00348C  C061  F06D         	movff	?___ftadd+1,___fttol@f1+1
 10732  003490  C062  F06E         	movff	?___ftadd+2,___fttol@f1+2
 10733  003494  EC1C  F01B         	call	___fttol	;wreg free
 10734  003498                     L13:
 10735  003498  C06C  F07B         	movff	?___fttol,?_Interval
 10736  00349C  C06D  F07C         	movff	?___fttol+1,?_Interval+1
 10737  0034A0  D000               	goto	l276
 10738  0034A2                     l276:
 10739  0034A2  0012               	return		;funcret
 10740  0034A4                     __end_of_Interval:
 10741                           	opt stack 0
 10742                           tblptru	equ	0xFF8
 10743                           tblptrh	equ	0xFF7
 10744                           tblptrl	equ	0xFF6
 10745                           tablat	equ	0xFF5
 10746                           prodh	equ	0xFF4
 10747                           prodl	equ	0xFF3
 10748                           intcon	equ	0xFF2
 10749                           intcon2	equ	0xFF1
 10750                           postinc0	equ	0xFEE
 10751                           wreg	equ	0xFE8
 10752                           postinc1	equ	0xFE6
 10753                           postdec1	equ	0xFE5
 10754                           fsr1h	equ	0xFE2
 10755                           fsr1l	equ	0xFE1
 10756                           indf2	equ	0xFDF
 10757                           postinc2	equ	0xFDE
 10758                           postdec2	equ	0xFDD
 10759                           plusw2	equ	0xFDB
 10760                           fsr2h	equ	0xFDA
 10761                           fsr2l	equ	0xFD9
 10762                           status	equ	0xFD8
 10763                           
 10764 ;; *************** function _Load *****************
 10765 ;; Defined at:
 10766 ;;		line 260 in file "../main.c"
 10767 ;; Parameters:    Size  Location     Type
 10768 ;;		None
 10769 ;; Auto vars:     Size  Location     Type
 10770 ;;  x               2   29[COMRAM] int 
 10771 ;; Return value:  Size  Location     Type
 10772 ;;		None               void
 10773 ;; Registers used:
 10774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10775 ;; Tracked objects:
 10776 ;;		On entry : 0/0
 10777 ;;		On exit  : 0/0
 10778 ;;		Unchanged: 0/0
 10779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10780 ;;      Params:         0       0       0       0       0       0       0       0       0
 10781 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10782 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10783 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10784 ;;Total ram usage:        4 bytes
 10785 ;; Hardware stack levels used:    1
 10786 ;; Hardware stack levels required when called:    3
 10787 ;; This function calls:
 10788 ;;		_GetValue
 10789 ;;		_Length
 10790 ;; This function is called by:
 10791 ;;		_main
 10792 ;; This function uses a non-reentrant model
 10793 ;;
 10794                           
 10795                           	psect	text20
 10796  004A62                     __ptext20:
 10797                           	opt stack 0
 10798  004A62                     _Load:
 10799                           	opt stack 27
 10800                           
 10801                           ;main.c: 261: Length(&TOTAL);
 10802                           
 10803                           ;incstack = 0
 10804  004A62  0EC1               	movlw	low _TOTAL
 10805  004A64  6E12               	movwf	Length@data,c
 10806  004A66  0E00               	movlw	high _TOTAL
 10807  004A68  6E13               	movwf	Length@data+1,c
 10808  004A6A  EC75  F026         	call	_Length	;wreg free
 10809                           
 10810                           ;main.c: 262: int x;
 10811                           ;main.c: 263: for (x = 0;x < TOTAL;x++) GetValue(x, (int)&(LEN[x]) );
 10812  004A6E  0E00               	movlw	0
 10813  004A70  6E1F               	movwf	Load@x+1,c
 10814  004A72  0E00               	movlw	0
 10815  004A74  6E1E               	movwf	Load@x,c
 10816  004A76  D016               	goto	l6536
 10817  004A78                     l6532:
 10818  004A78  C01E  F012         	movff	Load@x,GetValue@item
 10819  004A7C  C01F  F013         	movff	Load@x+1,GetValue@item+1
 10820  004A80  C01E  F01C         	movff	Load@x,??_Load
 10821  004A84  C01F  F01D         	movff	Load@x+1,??_Load+1
 10822  004A88  90D8               	bcf	status,0,c
 10823  004A8A  361C               	rlcf	??_Load,f,c
 10824  004A8C  361D               	rlcf	??_Load+1,f,c
 10825  004A8E  0E00               	movlw	low _LEN
 10826  004A90  241C               	addwf	??_Load,w,c
 10827  004A92  6E14               	movwf	GetValue@data,c
 10828  004A94  0E02               	movlw	high _LEN
 10829  004A96  201D               	addwfc	??_Load+1,w,c
 10830  004A98  6E15               	movwf	GetValue@data+1,c
 10831  004A9A  EC2F  F026         	call	_GetValue	;wreg free
 10832  004A9E  4A1E               	infsnz	Load@x,f,c
 10833  004AA0  2A1F               	incf	Load@x+1,f,c
 10834  004AA2  D000               	goto	l6536
 10835  004AA4                     l6536:
 10836  004AA4  0100               	movlb	0	; () banked
 10837  004AA6  51C1               	movf	_TOTAL& (0+255),w,b
 10838  004AA8  5C1E               	subwf	Load@x,w,c
 10839  004AAA  501F               	movf	Load@x+1,w,c
 10840  004AAC  0A80               	xorlw	128
 10841  004AAE  6E1C               	movwf	??_Load& (0+255),c
 10842  004AB0  0100               	movlb	0	; () banked
 10843  004AB2  51C2               	movf	(_TOTAL+1)& (0+255),w,b
 10844  004AB4  0A80               	xorlw	128
 10845  004AB6  581C               	subwfb	??_Load& (0+255),w,c
 10846  004AB8  A0D8               	btfss	status,0,c
 10847  004ABA  D7DE               	goto	l6532
 10848                           
 10849                           ; BSR set to: 0
 10850                           
 10851                           ; BSR set to: 0
 10852  004ABC  0012               	return		;funcret
 10853  004ABE                     __end_of_Load:
 10854                           	opt stack 0
 10855                           tblptru	equ	0xFF8
 10856                           tblptrh	equ	0xFF7
 10857                           tblptrl	equ	0xFF6
 10858                           tablat	equ	0xFF5
 10859                           prodh	equ	0xFF4
 10860                           prodl	equ	0xFF3
 10861                           intcon	equ	0xFF2
 10862                           intcon2	equ	0xFF1
 10863                           postinc0	equ	0xFEE
 10864                           wreg	equ	0xFE8
 10865                           postinc1	equ	0xFE6
 10866                           postdec1	equ	0xFE5
 10867                           fsr1h	equ	0xFE2
 10868                           fsr1l	equ	0xFE1
 10869                           indf2	equ	0xFDF
 10870                           postinc2	equ	0xFDE
 10871                           postdec2	equ	0xFDD
 10872                           plusw2	equ	0xFDB
 10873                           fsr2h	equ	0xFDA
 10874                           fsr2l	equ	0xFD9
 10875                           status	equ	0xFD8
 10876                           
 10877 ;; *************** function _Length *****************
 10878 ;; Defined at:
 10879 ;;		line 254 in file "../main.c"
 10880 ;; Parameters:    Size  Location     Type
 10881 ;;  data            2   17[COMRAM] PTR int 
 10882 ;;		 -> TOTAL(2), 
 10883 ;; Auto vars:     Size  Location     Type
 10884 ;;  rta             1   24[COMRAM] unsigned char 
 10885 ;;  add             1   21[COMRAM] unsigned char 
 10886 ;; Return value:  Size  Location     Type
 10887 ;;		None               void
 10888 ;; Registers used:
 10889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10890 ;; Tracked objects:
 10891 ;;		On entry : 0/0
 10892 ;;		On exit  : 0/0
 10893 ;;		Unchanged: 0/0
 10894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10895 ;;      Params:         2       0       0       0       0       0       0       0       0
 10896 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10897 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10898 ;;      Totals:         8       0       0       0       0       0       0       0       0
 10899 ;;Total ram usage:        8 bytes
 10900 ;; Hardware stack levels used:    1
 10901 ;; Hardware stack levels required when called:    2
 10902 ;; This function calls:
 10903 ;;		_ReadMem
 10904 ;; This function is called by:
 10905 ;;		_Load
 10906 ;; This function uses a non-reentrant model
 10907 ;;
 10908                           
 10909                           	psect	text21
 10910  004CEA                     __ptext21:
 10911                           	opt stack 0
 10912  004CEA                     _Length:
 10913                           	opt stack 27
 10914                           
 10915                           ;main.c: 255: uc add = MF ? 128 : 0;
 10916                           
 10917                           ; BSR set to: 0
 10918                           ;incstack = 0
 10919  004CEA  5050               	movf	_MF,w,c
 10920  004CEC  A4D8               	btfss	status,2,c
 10921  004CEE  D004               	goto	l6318
 10922  004CF0  0E00               	movlw	0
 10923  004CF2  6E18               	movwf	_Length$1781+1,c
 10924  004CF4  0E00               	movlw	0
 10925  004CF6  D003               	goto	L14
 10926  004CF8                     l6318:
 10927  004CF8  0E00               	movlw	0
 10928  004CFA  6E18               	movwf	_Length$1781+1,c
 10929  004CFC  0E80               	movlw	128
 10930  004CFE                     L14:
 10931  004CFE  6E17               	movwf	_Length$1781,c
 10932  004D00  D000               	goto	l6320
 10933  004D02                     l6320:
 10934  004D02  C017  F016         	movff	_Length$1781,Length@add
 10935                           
 10936                           ;main.c: 256: uc rta;
 10937                           ;main.c: 257: ReadMem(add,&rta);
 10938  004D06  0E19               	movlw	low Length@rta
 10939  004D08  6E0F               	movwf	ReadMem@data,c
 10940  004D0A  0E00               	movlw	high Length@rta
 10941  004D0C  6E10               	movwf	ReadMem@data+1,c
 10942  004D0E  5016               	movf	Length@add,w,c
 10943  004D10  EC59  F027         	call	_ReadMem
 10944                           
 10945                           ;main.c: 258: *data = (int)rta;
 10946  004D14  5019               	movf	Length@rta,w,c
 10947  004D16  6E14               	movwf	??_Length& (0+255),c
 10948  004D18  6A15               	clrf	(??_Length+1)& (0+255),c
 10949  004D1A  C012  FFD9         	movff	Length@data,fsr2l
 10950  004D1E  C013  FFDA         	movff	Length@data+1,fsr2h
 10951  004D22  C014  FFDE         	movff	??_Length,postinc2
 10952  004D26  C015  FFDD         	movff	??_Length+1,postdec2
 10953  004D2A  0012               	return		;funcret
 10954  004D2C                     __end_of_Length:
 10955                           	opt stack 0
 10956                           tblptru	equ	0xFF8
 10957                           tblptrh	equ	0xFF7
 10958                           tblptrl	equ	0xFF6
 10959                           tablat	equ	0xFF5
 10960                           prodh	equ	0xFF4
 10961                           prodl	equ	0xFF3
 10962                           intcon	equ	0xFF2
 10963                           intcon2	equ	0xFF1
 10964                           postinc0	equ	0xFEE
 10965                           wreg	equ	0xFE8
 10966                           postinc1	equ	0xFE6
 10967                           postdec1	equ	0xFE5
 10968                           fsr1h	equ	0xFE2
 10969                           fsr1l	equ	0xFE1
 10970                           indf2	equ	0xFDF
 10971                           postinc2	equ	0xFDE
 10972                           postdec2	equ	0xFDD
 10973                           plusw2	equ	0xFDB
 10974                           fsr2h	equ	0xFDA
 10975                           fsr2l	equ	0xFD9
 10976                           status	equ	0xFD8
 10977                           
 10978 ;; *************** function _GetValue *****************
 10979 ;; Defined at:
 10980 ;;		line 265 in file "../main.c"
 10981 ;; Parameters:    Size  Location     Type
 10982 ;;  item            2   17[COMRAM] int 
 10983 ;;  data            2   19[COMRAM] PTR int 
 10984 ;;		 -> RAM(2047), 
 10985 ;; Auto vars:     Size  Location     Type
 10986 ;;  rta             1   26[COMRAM] unsigned char 
 10987 ;;  add             1   23[COMRAM] unsigned char 
 10988 ;; Return value:  Size  Location     Type
 10989 ;;		None               void
 10990 ;; Registers used:
 10991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10992 ;; Tracked objects:
 10993 ;;		On entry : 0/0
 10994 ;;		On exit  : 0/0
 10995 ;;		Unchanged: 0/0
 10996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10997 ;;      Params:         4       0       0       0       0       0       0       0       0
 10998 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10999 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11000 ;;      Totals:        10       0       0       0       0       0       0       0       0
 11001 ;;Total ram usage:       10 bytes
 11002 ;; Hardware stack levels used:    1
 11003 ;; Hardware stack levels required when called:    2
 11004 ;; This function calls:
 11005 ;;		_ReadMem
 11006 ;; This function is called by:
 11007 ;;		_Load
 11008 ;; This function uses a non-reentrant model
 11009 ;;
 11010                           
 11011                           	psect	text22
 11012  004C5E                     __ptext22:
 11013                           	opt stack 0
 11014  004C5E                     _GetValue:
 11015                           	opt stack 27
 11016                           
 11017                           ;main.c: 266: uc add = MF ? 128 : 0;
 11018                           
 11019                           ;incstack = 0
 11020  004C5E  5050               	movf	_MF,w,c
 11021  004C60  A4D8               	btfss	status,2,c
 11022  004C62  D004               	goto	l6330
 11023  004C64  0E00               	movlw	0
 11024  004C66  6E1A               	movwf	_GetValue$1791+1,c
 11025  004C68  0E00               	movlw	0
 11026  004C6A  D003               	goto	L15
 11027  004C6C                     l6330:
 11028  004C6C  0E00               	movlw	0
 11029  004C6E  6E1A               	movwf	_GetValue$1791+1,c
 11030  004C70  0E80               	movlw	128
 11031  004C72                     L15:
 11032  004C72  6E19               	movwf	_GetValue$1791,c
 11033  004C74  D000               	goto	l6332
 11034  004C76                     l6332:
 11035  004C76  C019  F018         	movff	_GetValue$1791,GetValue@add
 11036                           
 11037                           ;main.c: 267: uc rta;
 11038                           ;main.c: 268: ReadMem(add + 1 + item , &rta);
 11039  004C7A  0E1B               	movlw	low GetValue@rta
 11040  004C7C  6E0F               	movwf	ReadMem@data,c
 11041  004C7E  0E00               	movlw	high GetValue@rta
 11042  004C80  6E10               	movwf	ReadMem@data+1,c
 11043  004C82  5018               	movf	GetValue@add,w,c
 11044  004C84  2412               	addwf	GetValue@item,w,c
 11045  004C86  6E16               	movwf	??_GetValue& (0+255),c
 11046  004C88  2816               	incf	??_GetValue,w,c
 11047  004C8A  EC59  F027         	call	_ReadMem
 11048                           
 11049                           ;main.c: 269: *data = (int)rta;
 11050  004C8E  501B               	movf	GetValue@rta,w,c
 11051  004C90  6E16               	movwf	??_GetValue& (0+255),c
 11052  004C92  6A17               	clrf	(??_GetValue+1)& (0+255),c
 11053  004C94  C014  FFD9         	movff	GetValue@data,fsr2l
 11054  004C98  C015  FFDA         	movff	GetValue@data+1,fsr2h
 11055  004C9C  C016  FFDE         	movff	??_GetValue,postinc2
 11056  004CA0  C017  FFDD         	movff	??_GetValue+1,postdec2
 11057  004CA4  0012               	return		;funcret
 11058  004CA6                     __end_of_GetValue:
 11059                           	opt stack 0
 11060                           tblptru	equ	0xFF8
 11061                           tblptrh	equ	0xFF7
 11062                           tblptrl	equ	0xFF6
 11063                           tablat	equ	0xFF5
 11064                           prodh	equ	0xFF4
 11065                           prodl	equ	0xFF3
 11066                           intcon	equ	0xFF2
 11067                           intcon2	equ	0xFF1
 11068                           postinc0	equ	0xFEE
 11069                           wreg	equ	0xFE8
 11070                           postinc1	equ	0xFE6
 11071                           postdec1	equ	0xFE5
 11072                           fsr1h	equ	0xFE2
 11073                           fsr1l	equ	0xFE1
 11074                           indf2	equ	0xFDF
 11075                           postinc2	equ	0xFDE
 11076                           postdec2	equ	0xFDD
 11077                           plusw2	equ	0xFDB
 11078                           fsr2h	equ	0xFDA
 11079                           fsr2l	equ	0xFD9
 11080                           status	equ	0xFD8
 11081                           
 11082 ;; *************** function _Line *****************
 11083 ;; Defined at:
 11084 ;;		line 285 in file "../main.c"
 11085 ;; Parameters:    Size  Location     Type
 11086 ;;		None
 11087 ;; Auto vars:     Size  Location     Type
 11088 ;;  i               2   19[BANK0 ] int 
 11089 ;;  i               2   17[BANK0 ] int 
 11090 ;;  j               2   13[BANK0 ] int 
 11091 ;;  v               4   21[BANK0 ] long 
 11092 ;;  b               4    8[BANK0 ] long 
 11093 ;;  a               4    4[BANK0 ] long 
 11094 ;;  w               4    0[BANK0 ] long 
 11095 ;;  j               2   15[BANK0 ] int 
 11096 ;;  g               1   12[BANK0 ] unsigned char 
 11097 ;; Return value:  Size  Location     Type
 11098 ;;		None               void
 11099 ;; Registers used:
 11100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11101 ;; Tracked objects:
 11102 ;;		On entry : 0/0
 11103 ;;		On exit  : 0/0
 11104 ;;		Unchanged: 0/0
 11105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11106 ;;      Params:         0       0       0       0       0       0       0       0       0
 11107 ;;      Locals:         0      25       0       0       0       0       0       0       0
 11108 ;;      Temps:          7       0       0       0       0       0       0       0       0
 11109 ;;      Totals:         7      25       0       0       0       0       0       0       0
 11110 ;;Total ram usage:       32 bytes
 11111 ;; Hardware stack levels used:    1
 11112 ;; Hardware stack levels required when called:    2
 11113 ;; This function calls:
 11114 ;;		___aldiv
 11115 ;;		___lmul
 11116 ;; This function is called by:
 11117 ;;		_main
 11118 ;; This function uses a non-reentrant model
 11119 ;;
 11120                           
 11121                           	psect	text23
 11122  002218                     __ptext23:
 11123                           	opt stack 0
 11124  002218                     _Line:
 11125                           	opt stack 28
 11126                           
 11127                           ;main.c: 286: long a = 0;
 11128                           
 11129                           ;incstack = 0
 11130  002218  0E00               	movlw	0
 11131  00221A  0100               	movlb	0	; () banked
 11132  00221C  6F64               	movwf	Line@a& (0+255),b
 11133  00221E  0E00               	movlw	0
 11134  002220  6F65               	movwf	(Line@a+1)& (0+255),b
 11135  002222  0E00               	movlw	0
 11136  002224  6F66               	movwf	(Line@a+2)& (0+255),b
 11137  002226  0E00               	movlw	0
 11138  002228  6F67               	movwf	(Line@a+3)& (0+255),b
 11139                           
 11140                           ;main.c: 287: long b = 0;
 11141  00222A  0E00               	movlw	0
 11142  00222C  0100               	movlb	0	; () banked
 11143  00222E  6F68               	movwf	Line@b& (0+255),b
 11144  002230  0E00               	movlw	0
 11145  002232  6F69               	movwf	(Line@b+1)& (0+255),b
 11146  002234  0E00               	movlw	0
 11147  002236  6F6A               	movwf	(Line@b+2)& (0+255),b
 11148  002238  0E00               	movlw	0
 11149  00223A  6F6B               	movwf	(Line@b+3)& (0+255),b
 11150                           
 11151                           ;main.c: 288: char g = 0;
 11152  00223C  0E00               	movlw	0
 11153  00223E  0100               	movlb	0	; () banked
 11154  002240  6F6C               	movwf	Line@g& (0+255),b
 11155                           
 11156                           ;main.c: 289: int j;
 11157                           ;main.c: 290: long v , w;
 11158                           ;main.c: 292: for (j = 0;j < 5;j++){
 11159  002242  0E00               	movlw	0
 11160  002244  0100               	movlb	0	; () banked
 11161  002246  6F70               	movwf	(Line@j+1)& (0+255),b
 11162  002248  0E00               	movlw	0
 11163  00224A  6F6F               	movwf	Line@j& (0+255),b
 11164                           
 11165                           ; BSR set to: 0
 11166  00224C  0100               	movlb	0	; () banked
 11167  00224E  BF70               	btfsc	(Line@j+1)& (0+255),7,b
 11168  002250  D00A               	goto	l6556
 11169  002252  0100               	movlb	0	; () banked
 11170  002254  5170               	movf	(Line@j+1)& (0+255),w,b
 11171  002256  E106               	bnz	u7940
 11172  002258  0E05               	movlw	5
 11173  00225A  0100               	movlb	0	; () banked
 11174  00225C  5D6F               	subwf	Line@j& (0+255),w,b
 11175  00225E  B0D8               	btfsc	status,0,c
 11176  002260  D1C6               	goto	l6594
 11177  002262  D001               	goto	l6556
 11178  002264                     u7940:
 11179                           
 11180                           ; BSR set to: 0
 11181  002264  D1C4               	goto	l6594
 11182  002266                     l6556:
 11183                           
 11184                           ; BSR set to: 0
 11185                           ;main.c: 293: int i = fw[j];
 11186  002266  90D8               	bcf	status,0,c
 11187  002268  0100               	movlb	0	; () banked
 11188  00226A  356F               	rlcf	Line@j& (0+255),w,b
 11189  00226C  6ED9               	movwf	fsr2l,c
 11190  00226E  0100               	movlb	0	; () banked
 11191  002270  3570               	rlcf	(Line@j+1)& (0+255),w,b
 11192  002272  6EDA               	movwf	fsr2h,c
 11193  002274  0ECC               	movlw	low _fw
 11194  002276  26D9               	addwf	fsr2l,f,c
 11195  002278  0E01               	movlw	high _fw
 11196  00227A  22DA               	addwfc	fsr2h,f,c
 11197  00227C  CFDE F071          	movff	postinc2,Line@i
 11198  002280  CFDD F072          	movff	postdec2,Line@i+1
 11199                           
 11200                           ;main.c: 294: v = V[i];
 11201  002284  90D8               	bcf	status,0,c
 11202  002286  0100               	movlb	0	; () banked
 11203  002288  3571               	rlcf	Line@i& (0+255),w,b
 11204  00228A  6ED9               	movwf	fsr2l,c
 11205  00228C  0100               	movlb	0	; () banked
 11206  00228E  3572               	rlcf	(Line@i+1)& (0+255),w,b
 11207  002290  6EDA               	movwf	fsr2h,c
 11208  002292  0EC8               	movlw	low _V
 11209  002294  26D9               	addwf	fsr2l,f,c
 11210  002296  0E02               	movlw	high _V
 11211  002298  22DA               	addwfc	fsr2h,f,c
 11212  00229A  CFDE F029          	movff	postinc2,??_Line
 11213  00229E  CFDD F02A          	movff	postdec2,??_Line+1
 11214  0022A2  C029  F075         	movff	??_Line,Line@v
 11215  0022A6  C02A  F076         	movff	??_Line+1,Line@v+1
 11216  0022AA  0100               	movlb	0	; () banked
 11217  0022AC  6B77               	clrf	(Line@v+2)& (0+255),b
 11218  0022AE  6B78               	clrf	(Line@v+3)& (0+255),b
 11219                           
 11220                           ; BSR set to: 0
 11221                           ;main.c: 295: if (v < amin[i]){
 11222  0022B0  90D8               	bcf	status,0,c
 11223  0022B2  0100               	movlb	0	; () banked
 11224  0022B4  3571               	rlcf	Line@i& (0+255),w,b
 11225  0022B6  6ED9               	movwf	fsr2l,c
 11226  0022B8  0100               	movlb	0	; () banked
 11227  0022BA  3572               	rlcf	(Line@i+1)& (0+255),w,b
 11228  0022BC  6EDA               	movwf	fsr2h,c
 11229  0022BE  0E40               	movlw	low _amin
 11230  0022C0  26D9               	addwf	fsr2l,f,c
 11231  0022C2  0E01               	movlw	high _amin
 11232  0022C4  22DA               	addwfc	fsr2h,f,c
 11233  0022C6  CFDE F029          	movff	postinc2,??_Line
 11234  0022CA  CFDD F02A          	movff	postdec2,??_Line+1
 11235  0022CE  5029               	movf	??_Line,w,c
 11236  0022D0  6E2B               	movwf	(??_Line+2)& (0+255),c
 11237  0022D2  502A               	movf	??_Line+1,w,c
 11238  0022D4  6E2C               	movwf	(??_Line+3)& (0+255),c
 11239  0022D6  6A2D               	clrf	(??_Line+4)& (0+255),c
 11240  0022D8  6A2E               	clrf	(??_Line+5)& (0+255),c
 11241  0022DA  502B               	movf	??_Line+2,w,c
 11242  0022DC  0100               	movlb	0	; () banked
 11243  0022DE  5D75               	subwf	Line@v& (0+255),w,b
 11244  0022E0  502C               	movf	??_Line+3,w,c
 11245  0022E2  0100               	movlb	0	; () banked
 11246  0022E4  5976               	subwfb	(Line@v+1)& (0+255),w,b
 11247  0022E6  502D               	movf	??_Line+4,w,c
 11248  0022E8  0100               	movlb	0	; () banked
 11249  0022EA  5977               	subwfb	(Line@v+2)& (0+255),w,b
 11250  0022EC  0100               	movlb	0	; () banked
 11251  0022EE  5178               	movf	(Line@v+3)& (0+255),w,b
 11252  0022F0  0A80               	xorlw	128
 11253  0022F2  6E2F               	movwf	(??_Line+6)& (0+255),c
 11254  0022F4  502E               	movf	??_Line+5,w,c
 11255  0022F6  0A80               	xorlw	128
 11256  0022F8  582F               	subwfb	(??_Line+6)& (0+255),w,c
 11257  0022FA  B0D8               	btfsc	status,0,c
 11258  0022FC  D017               	goto	l6562
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;main.c: 296: v = amin[i];
 11262  0022FE  90D8               	bcf	status,0,c
 11263  002300  0100               	movlb	0	; () banked
 11264  002302  3571               	rlcf	Line@i& (0+255),w,b
 11265  002304  6ED9               	movwf	fsr2l,c
 11266  002306  0100               	movlb	0	; () banked
 11267  002308  3572               	rlcf	(Line@i+1)& (0+255),w,b
 11268  00230A  6EDA               	movwf	fsr2h,c
 11269  00230C  0E40               	movlw	low _amin
 11270  00230E  26D9               	addwf	fsr2l,f,c
 11271  002310  0E01               	movlw	high _amin
 11272  002312  22DA               	addwfc	fsr2h,f,c
 11273  002314  CFDE F029          	movff	postinc2,??_Line
 11274  002318  CFDD F02A          	movff	postdec2,??_Line+1
 11275  00231C  C029  F075         	movff	??_Line,Line@v
 11276  002320  C02A  F076         	movff	??_Line+1,Line@v+1
 11277  002324  0100               	movlb	0	; () banked
 11278  002326  6B77               	clrf	(Line@v+2)& (0+255),b
 11279  002328  6B78               	clrf	(Line@v+3)& (0+255),b
 11280  00232A  D000               	goto	l6562
 11281  00232C                     l6562:
 11282                           
 11283                           ; BSR set to: 0
 11284                           ;main.c: 297: }
 11285                           ;main.c: 298: if (v > amax[i]){
 11286  00232C  90D8               	bcf	status,0,c
 11287  00232E  0100               	movlb	0	; () banked
 11288  002330  3571               	rlcf	Line@i& (0+255),w,b
 11289  002332  6ED9               	movwf	fsr2l,c
 11290  002334  0100               	movlb	0	; () banked
 11291  002336  3572               	rlcf	(Line@i+1)& (0+255),w,b
 11292  002338  6EDA               	movwf	fsr2h,c
 11293  00233A  0E20               	movlw	low _amax
 11294  00233C  26D9               	addwf	fsr2l,f,c
 11295  00233E  0E01               	movlw	high _amax
 11296  002340  22DA               	addwfc	fsr2h,f,c
 11297  002342  CFDE F029          	movff	postinc2,??_Line
 11298  002346  CFDD F02A          	movff	postdec2,??_Line+1
 11299  00234A  5029               	movf	??_Line,w,c
 11300  00234C  6E2B               	movwf	(??_Line+2)& (0+255),c
 11301  00234E  502A               	movf	??_Line+1,w,c
 11302  002350  6E2C               	movwf	(??_Line+3)& (0+255),c
 11303  002352  6A2D               	clrf	(??_Line+4)& (0+255),c
 11304  002354  6A2E               	clrf	(??_Line+5)& (0+255),c
 11305  002356  0100               	movlb	0	; () banked
 11306  002358  5175               	movf	Line@v& (0+255),w,b
 11307  00235A  5C2B               	subwf	??_Line+2,w,c
 11308  00235C  0100               	movlb	0	; () banked
 11309  00235E  5176               	movf	(Line@v+1)& (0+255),w,b
 11310  002360  582C               	subwfb	??_Line+3,w,c
 11311  002362  0100               	movlb	0	; () banked
 11312  002364  5177               	movf	(Line@v+2)& (0+255),w,b
 11313  002366  582D               	subwfb	??_Line+4,w,c
 11314  002368  502E               	movf	??_Line+5,w,c
 11315  00236A  0A80               	xorlw	128
 11316  00236C  6E2F               	movwf	(??_Line+6)& (0+255),c
 11317  00236E  0100               	movlb	0	; () banked
 11318  002370  5178               	movf	(Line@v+3)& (0+255),w,b
 11319  002372  0A80               	xorlw	128
 11320  002374  582F               	subwfb	(??_Line+6)& (0+255),w,c
 11321  002376  B0D8               	btfsc	status,0,c
 11322  002378  D017               	goto	l6566
 11323                           
 11324                           ; BSR set to: 0
 11325                           ;main.c: 299: v = amax[i];
 11326  00237A  90D8               	bcf	status,0,c
 11327  00237C  0100               	movlb	0	; () banked
 11328  00237E  3571               	rlcf	Line@i& (0+255),w,b
 11329  002380  6ED9               	movwf	fsr2l,c
 11330  002382  0100               	movlb	0	; () banked
 11331  002384  3572               	rlcf	(Line@i+1)& (0+255),w,b
 11332  002386  6EDA               	movwf	fsr2h,c
 11333  002388  0E20               	movlw	low _amax
 11334  00238A  26D9               	addwf	fsr2l,f,c
 11335  00238C  0E01               	movlw	high _amax
 11336  00238E  22DA               	addwfc	fsr2h,f,c
 11337  002390  CFDE F029          	movff	postinc2,??_Line
 11338  002394  CFDD F02A          	movff	postdec2,??_Line+1
 11339  002398  C029  F075         	movff	??_Line,Line@v
 11340  00239C  C02A  F076         	movff	??_Line+1,Line@v+1
 11341  0023A0  0100               	movlb	0	; () banked
 11342  0023A2  6B77               	clrf	(Line@v+2)& (0+255),b
 11343  0023A4  6B78               	clrf	(Line@v+3)& (0+255),b
 11344  0023A6  D000               	goto	l6566
 11345  0023A8                     l6566:
 11346                           
 11347                           ; BSR set to: 0
 11348                           ;main.c: 300: }
 11349                           ;main.c: 301: v -= amin[i];
 11350  0023A8  90D8               	bcf	status,0,c
 11351  0023AA  0100               	movlb	0	; () banked
 11352  0023AC  3571               	rlcf	Line@i& (0+255),w,b
 11353  0023AE  6ED9               	movwf	fsr2l,c
 11354  0023B0  0100               	movlb	0	; () banked
 11355  0023B2  3572               	rlcf	(Line@i+1)& (0+255),w,b
 11356  0023B4  6EDA               	movwf	fsr2h,c
 11357  0023B6  0E40               	movlw	low _amin
 11358  0023B8  26D9               	addwf	fsr2l,f,c
 11359  0023BA  0E01               	movlw	high _amin
 11360  0023BC  22DA               	addwfc	fsr2h,f,c
 11361  0023BE  CFDE F029          	movff	postinc2,??_Line
 11362  0023C2  CFDD F02A          	movff	postdec2,??_Line+1
 11363  0023C6  5029               	movf	??_Line,w,c
 11364  0023C8  6E2B               	movwf	(??_Line+2)& (0+255),c
 11365  0023CA  502A               	movf	??_Line+1,w,c
 11366  0023CC  6E2C               	movwf	(??_Line+3)& (0+255),c
 11367  0023CE  6A2D               	clrf	(??_Line+4)& (0+255),c
 11368  0023D0  6A2E               	clrf	(??_Line+5)& (0+255),c
 11369  0023D2  502B               	movf	??_Line+2,w,c
 11370  0023D4  0100               	movlb	0	; () banked
 11371  0023D6  5F75               	subwf	Line@v& (0+255),f,b
 11372  0023D8  502C               	movf	??_Line+3,w,c
 11373  0023DA  0100               	movlb	0	; () banked
 11374  0023DC  5B76               	subwfb	(Line@v+1)& (0+255),f,b
 11375  0023DE  502D               	movf	??_Line+4,w,c
 11376  0023E0  0100               	movlb	0	; () banked
 11377  0023E2  5B77               	subwfb	(Line@v+2)& (0+255),f,b
 11378  0023E4  502E               	movf	??_Line+5,w,c
 11379  0023E6  0100               	movlb	0	; () banked
 11380  0023E8  5B78               	subwfb	(Line@v+3)& (0+255),f,b
 11381                           
 11382                           ; BSR set to: 0
 11383                           ;main.c: 302: v *= 1000;
 11384  0023EA  C075  F01D         	movff	Line@v,___lmul@multiplier
 11385  0023EE  C076  F01E         	movff	Line@v+1,___lmul@multiplier+1
 11386  0023F2  C077  F01F         	movff	Line@v+2,___lmul@multiplier+2
 11387  0023F6  C078  F020         	movff	Line@v+3,___lmul@multiplier+3
 11388  0023FA  0EE8               	movlw	232
 11389  0023FC  6E21               	movwf	___lmul@multiplicand,c
 11390  0023FE  0E03               	movlw	3
 11391  002400  6E22               	movwf	___lmul@multiplicand+1,c
 11392  002402  0E00               	movlw	0
 11393  002404  6E23               	movwf	___lmul@multiplicand+2,c
 11394  002406  0E00               	movlw	0
 11395  002408  6E24               	movwf	___lmul@multiplicand+3,c
 11396  00240A  EC8C  F025         	call	___lmul	;wreg free
 11397  00240E  C01D  F075         	movff	?___lmul,Line@v
 11398  002412  C01E  F076         	movff	?___lmul+1,Line@v+1
 11399  002416  C01F  F077         	movff	?___lmul+2,Line@v+2
 11400  00241A  C020  F078         	movff	?___lmul+3,Line@v+3
 11401                           
 11402                           ;main.c: 303: v /= (amax[i] - amin[i]);
 11403  00241E  C075  F00F         	movff	Line@v,___aldiv@dividend
 11404  002422  C076  F010         	movff	Line@v+1,___aldiv@dividend+1
 11405  002426  C077  F011         	movff	Line@v+2,___aldiv@dividend+2
 11406  00242A  C078  F012         	movff	Line@v+3,___aldiv@dividend+3
 11407  00242E  90D8               	bcf	status,0,c
 11408  002430  0100               	movlb	0	; () banked
 11409  002432  3571               	rlcf	Line@i& (0+255),w,b
 11410  002434  6ED9               	movwf	fsr2l,c
 11411  002436  0100               	movlb	0	; () banked
 11412  002438  3572               	rlcf	(Line@i+1)& (0+255),w,b
 11413  00243A  6EDA               	movwf	fsr2h,c
 11414  00243C  0E20               	movlw	low _amax
 11415  00243E  26D9               	addwf	fsr2l,f,c
 11416  002440  0E01               	movlw	high _amax
 11417  002442  22DA               	addwfc	fsr2h,f,c
 11418  002444  CFDE F029          	movff	postinc2,??_Line
 11419  002448  CFDD F02A          	movff	postdec2,??_Line+1
 11420  00244C  90D8               	bcf	status,0,c
 11421  00244E  0100               	movlb	0	; () banked
 11422  002450  3571               	rlcf	Line@i& (0+255),w,b
 11423  002452  6ED9               	movwf	fsr2l,c
 11424  002454  0100               	movlb	0	; () banked
 11425  002456  3572               	rlcf	(Line@i+1)& (0+255),w,b
 11426  002458  6EDA               	movwf	fsr2h,c
 11427  00245A  0E40               	movlw	low _amin
 11428  00245C  26D9               	addwf	fsr2l,f,c
 11429  00245E  0E01               	movlw	high _amin
 11430  002460  22DA               	addwfc	fsr2h,f,c
 11431  002462  CFDE F02B          	movff	postinc2,??_Line+2
 11432  002466  CFDD F02C          	movff	postdec2,??_Line+3
 11433  00246A  1E2B               	comf	??_Line+2,f,c
 11434  00246C  1E2C               	comf	??_Line+3,f,c
 11435  00246E  4A2B               	infsnz	??_Line+2,f,c
 11436  002470  2A2C               	incf	??_Line+3,f,c
 11437  002472  5029               	movf	??_Line,w,c
 11438  002474  262B               	addwf	??_Line+2,f,c
 11439  002476  502A               	movf	??_Line+1,w,c
 11440  002478  222C               	addwfc	??_Line+3,f,c
 11441  00247A  C02B  F013         	movff	??_Line+2,___aldiv@divisor
 11442  00247E  C02C  F014         	movff	??_Line+3,___aldiv@divisor+1
 11443  002482  6A15               	clrf	___aldiv@divisor+2,c
 11444  002484  6A16               	clrf	___aldiv@divisor+3,c
 11445  002486  EC5D  F01F         	call	___aldiv	;wreg free
 11446  00248A  C00F  F075         	movff	?___aldiv,Line@v
 11447  00248E  C010  F076         	movff	?___aldiv+1,Line@v+1
 11448  002492  C011  F077         	movff	?___aldiv+2,Line@v+2
 11449  002496  C012  F078         	movff	?___aldiv+3,Line@v+3
 11450                           
 11451                           ;main.c: 304: v = 1000 - v;
 11452  00249A  C075  F029         	movff	Line@v,??_Line
 11453  00249E  C076  F02A         	movff	Line@v+1,??_Line+1
 11454  0024A2  C077  F02B         	movff	Line@v+2,??_Line+2
 11455  0024A6  C078  F02C         	movff	Line@v+3,??_Line+3
 11456  0024AA  1E29               	comf	??_Line,f,c
 11457  0024AC  1E2A               	comf	??_Line+1,f,c
 11458  0024AE  1E2B               	comf	??_Line+2,f,c
 11459  0024B0  1E2C               	comf	??_Line+3,f,c
 11460  0024B2  2A29               	incf	??_Line,f,c
 11461  0024B4  0E00               	movlw	0
 11462  0024B6  222A               	addwfc	??_Line+1,f,c
 11463  0024B8  222B               	addwfc	??_Line+2,f,c
 11464  0024BA  222C               	addwfc	??_Line+3,f,c
 11465  0024BC  0EE8               	movlw	232
 11466  0024BE  2429               	addwf	??_Line,w,c
 11467  0024C0  0100               	movlb	0	; () banked
 11468  0024C2  6F75               	movwf	Line@v& (0+255),b
 11469  0024C4  0E03               	movlw	3
 11470  0024C6  202A               	addwfc	??_Line+1,w,c
 11471  0024C8  0100               	movlb	0	; () banked
 11472  0024CA  6F76               	movwf	(Line@v+1)& (0+255),b
 11473  0024CC  0E00               	movlw	0
 11474  0024CE  202B               	addwfc	??_Line+2,w,c
 11475  0024D0  0100               	movlb	0	; () banked
 11476  0024D2  6F77               	movwf	(Line@v+2)& (0+255),b
 11477  0024D4  0E00               	movlw	0
 11478  0024D6  202C               	addwfc	??_Line+3,w,c
 11479  0024D8  0100               	movlb	0	; () banked
 11480  0024DA  6F78               	movwf	(Line@v+3)& (0+255),b
 11481                           
 11482                           ; BSR set to: 0
 11483                           ;main.c: 305: if (v < 50){
 11484  0024DC  0100               	movlb	0	; () banked
 11485  0024DE  BF78               	btfsc	(Line@v+3)& (0+255),7,b
 11486  0024E0  D00C               	goto	l6576
 11487  0024E2  0100               	movlb	0	; () banked
 11488  0024E4  5178               	movf	(Line@v+3)& (0+255),w,b
 11489  0024E6  0100               	movlb	0	; () banked
 11490  0024E8  1177               	iorwf	(Line@v+2)& (0+255),w,b
 11491  0024EA  0100               	movlb	0	; () banked
 11492  0024EC  1176               	iorwf	(Line@v+1)& (0+255),w,b
 11493  0024EE  E10F               	bnz	l6578
 11494  0024F0  0E32               	movlw	50
 11495  0024F2  0100               	movlb	0	; () banked
 11496  0024F4  5D75               	subwf	Line@v& (0+255),w,b
 11497  0024F6  B0D8               	btfsc	status,0,c
 11498  0024F8  D00A               	goto	l6578
 11499  0024FA                     l6576:
 11500                           
 11501                           ; BSR set to: 0
 11502                           ;main.c: 306: v = 0;
 11503  0024FA  0E00               	movlw	0
 11504  0024FC  0100               	movlb	0	; () banked
 11505  0024FE  6F75               	movwf	Line@v& (0+255),b
 11506  002500  0E00               	movlw	0
 11507  002502  6F76               	movwf	(Line@v+1)& (0+255),b
 11508  002504  0E00               	movlw	0
 11509  002506  6F77               	movwf	(Line@v+2)& (0+255),b
 11510  002508  0E00               	movlw	0
 11511  00250A  6F78               	movwf	(Line@v+3)& (0+255),b
 11512  00250C  D000               	goto	l6578
 11513  00250E                     l6578:
 11514                           
 11515                           ; BSR set to: 0
 11516                           ;main.c: 307: }
 11517                           ;main.c: 308: P[i] = v;
 11518  00250E  90D8               	bcf	status,0,c
 11519  002510  0100               	movlb	0	; () banked
 11520  002512  3571               	rlcf	Line@i& (0+255),w,b
 11521  002514  6ED9               	movwf	fsr2l,c
 11522  002516  0100               	movlb	0	; () banked
 11523  002518  3572               	rlcf	(Line@i+1)& (0+255),w,b
 11524  00251A  6EDA               	movwf	fsr2h,c
 11525  00251C  0E00               	movlw	low _P
 11526  00251E  26D9               	addwf	fsr2l,f,c
 11527  002520  0E01               	movlw	high _P
 11528  002522  22DA               	addwfc	fsr2h,f,c
 11529  002524  C075  FFDE         	movff	Line@v,postinc2
 11530  002528  C076  FFDD         	movff	Line@v+1,postdec2
 11531                           
 11532                           ; BSR set to: 0
 11533                           ;main.c: 309: w = pd[j];
 11534  00252C  90D8               	bcf	status,0,c
 11535  00252E  0100               	movlb	0	; () banked
 11536  002530  356F               	rlcf	Line@j& (0+255),w,b
 11537  002532  6ED9               	movwf	fsr2l,c
 11538  002534  0100               	movlb	0	; () banked
 11539  002536  3570               	rlcf	(Line@j+1)& (0+255),w,b
 11540  002538  6EDA               	movwf	fsr2h,c
 11541  00253A  0ED6               	movlw	low _pd
 11542  00253C  26D9               	addwf	fsr2l,f,c
 11543  00253E  0E01               	movlw	high _pd
 11544  002540  22DA               	addwfc	fsr2h,f,c
 11545  002542  CFDE F060          	movff	postinc2,Line@w
 11546  002546  CFDD F061          	movff	postdec2,Line@w+1
 11547  00254A  0100               	movlb	0	; () banked
 11548  00254C  0E00               	movlw	0
 11549  00254E  BF61               	btfsc	(Line@w+1)& (0+255),7,b
 11550  002550  0EFF               	movlw	-1
 11551  002552  6F62               	movwf	(Line@w+2)& (0+255),b
 11552  002554  6F63               	movwf	(Line@w+3)& (0+255),b
 11553                           
 11554                           ; BSR set to: 0
 11555                           ;main.c: 312: a += v*w;
 11556  002556  C075  F01D         	movff	Line@v,___lmul@multiplier
 11557  00255A  C076  F01E         	movff	Line@v+1,___lmul@multiplier+1
 11558  00255E  C077  F01F         	movff	Line@v+2,___lmul@multiplier+2
 11559  002562  C078  F020         	movff	Line@v+3,___lmul@multiplier+3
 11560  002566  C060  F021         	movff	Line@w,___lmul@multiplicand
 11561  00256A  C061  F022         	movff	Line@w+1,___lmul@multiplicand+1
 11562  00256E  C062  F023         	movff	Line@w+2,___lmul@multiplicand+2
 11563  002572  C063  F024         	movff	Line@w+3,___lmul@multiplicand+3
 11564  002576  EC8C  F025         	call	___lmul	;wreg free
 11565  00257A  501D               	movf	?___lmul,w,c
 11566  00257C  0100               	movlb	0	; () banked
 11567  00257E  2764               	addwf	Line@a& (0+255),f,b
 11568  002580  501E               	movf	?___lmul+1,w,c
 11569  002582  0100               	movlb	0	; () banked
 11570  002584  2365               	addwfc	(Line@a+1)& (0+255),f,b
 11571  002586  501F               	movf	?___lmul+2,w,c
 11572  002588  0100               	movlb	0	; () banked
 11573  00258A  2366               	addwfc	(Line@a+2)& (0+255),f,b
 11574  00258C  5020               	movf	?___lmul+3,w,c
 11575  00258E  0100               	movlb	0	; () banked
 11576  002590  2367               	addwfc	(Line@a+3)& (0+255),f,b
 11577                           
 11578                           ; BSR set to: 0
 11579                           ;main.c: 313: b += v;
 11580  002592  0100               	movlb	0	; () banked
 11581  002594  5175               	movf	Line@v& (0+255),w,b
 11582  002596  0100               	movlb	0	; () banked
 11583  002598  2768               	addwf	Line@b& (0+255),f,b
 11584  00259A  0100               	movlb	0	; () banked
 11585  00259C  5176               	movf	(Line@v+1)& (0+255),w,b
 11586  00259E  0100               	movlb	0	; () banked
 11587  0025A0  2369               	addwfc	(Line@b+1)& (0+255),f,b
 11588  0025A2  0100               	movlb	0	; () banked
 11589  0025A4  5177               	movf	(Line@v+2)& (0+255),w,b
 11590  0025A6  0100               	movlb	0	; () banked
 11591  0025A8  236A               	addwfc	(Line@b+2)& (0+255),f,b
 11592  0025AA  0100               	movlb	0	; () banked
 11593  0025AC  5178               	movf	(Line@v+3)& (0+255),w,b
 11594  0025AE  0100               	movlb	0	; () banked
 11595  0025B0  236B               	addwfc	(Line@b+3)& (0+255),f,b
 11596                           
 11597                           ; BSR set to: 0
 11598                           ;main.c: 314: if (v > 200){
 11599  0025B2  0100               	movlb	0	; () banked
 11600  0025B4  BF78               	btfsc	(Line@v+3)& (0+255),7,b
 11601  0025B6  D010               	goto	l6590
 11602  0025B8  0100               	movlb	0	; () banked
 11603  0025BA  5178               	movf	(Line@v+3)& (0+255),w,b
 11604  0025BC  0100               	movlb	0	; () banked
 11605  0025BE  1177               	iorwf	(Line@v+2)& (0+255),w,b
 11606  0025C0  0100               	movlb	0	; () banked
 11607  0025C2  1176               	iorwf	(Line@v+1)& (0+255),w,b
 11608  0025C4  E105               	bnz	u7980
 11609  0025C6  0EC9               	movlw	201
 11610  0025C8  0100               	movlb	0	; () banked
 11611  0025CA  5D75               	subwf	Line@v& (0+255),w,b
 11612  0025CC  A0D8               	btfss	status,0,c
 11613  0025CE  D004               	goto	l6590
 11614  0025D0                     u7980:
 11615                           
 11616                           ; BSR set to: 0
 11617                           ;main.c: 315: g = 1;
 11618  0025D0  0E01               	movlw	1
 11619  0025D2  0100               	movlb	0	; () banked
 11620  0025D4  6F6C               	movwf	Line@g& (0+255),b
 11621  0025D6  D000               	goto	l6590
 11622  0025D8                     l6590:
 11623                           
 11624                           ; BSR set to: 0
 11625  0025D8  0100               	movlb	0	; () banked
 11626  0025DA  4B6F               	infsnz	Line@j& (0+255),f,b
 11627  0025DC  2B70               	incf	(Line@j+1)& (0+255),f,b
 11628                           
 11629                           ; BSR set to: 0
 11630  0025DE  0100               	movlb	0	; () banked
 11631  0025E0  BF70               	btfsc	(Line@j+1)& (0+255),7,b
 11632  0025E2  D641               	goto	l6556
 11633  0025E4  0100               	movlb	0	; () banked
 11634  0025E6  5170               	movf	(Line@j+1)& (0+255),w,b
 11635  0025E8  E102               	bnz	l6594
 11636  0025EA  D636               	goto	L16
 11637  0025EC  D000               	goto	l6594
 11638  0025EE                     l6594:
 11639                           
 11640                           ; BSR set to: 0
 11641                           ;main.c: 316: }
 11642                           ;main.c: 317: }
 11643                           ;main.c: 319: for (int j = 0;j < 2;j++){
 11644  0025EE  0E00               	movlw	0
 11645  0025F0  0100               	movlb	0	; () banked
 11646  0025F2  6F6E               	movwf	(Line@j_1803+1)& (0+255),b
 11647  0025F4  0E00               	movlw	0
 11648  0025F6  6F6D               	movwf	Line@j_1803& (0+255),b
 11649                           
 11650                           ; BSR set to: 0
 11651  0025F8  0100               	movlb	0	; () banked
 11652  0025FA  BF6E               	btfsc	(Line@j_1803+1)& (0+255),7,b
 11653  0025FC  D00A               	goto	l6600
 11654  0025FE  0100               	movlb	0	; () banked
 11655  002600  516E               	movf	(Line@j_1803+1)& (0+255),w,b
 11656  002602  E106               	bnz	u8000
 11657  002604  0E02               	movlw	2
 11658  002606  0100               	movlb	0	; () banked
 11659  002608  5D6D               	subwf	Line@j_1803& (0+255),w,b
 11660  00260A  B0D8               	btfsc	status,0,c
 11661  00260C  D157               	goto	l6622
 11662  00260E  D001               	goto	l6600
 11663  002610                     u8000:
 11664                           
 11665                           ; BSR set to: 0
 11666  002610  D155               	goto	l6622
 11667  002612                     l6600:
 11668                           
 11669                           ; BSR set to: 0
 11670                           ;main.c: 320: int i = sd[j];
 11671  002612  90D8               	bcf	status,0,c
 11672  002614  0100               	movlb	0	; () banked
 11673  002616  356D               	rlcf	Line@j_1803& (0+255),w,b
 11674  002618  6ED9               	movwf	fsr2l,c
 11675  00261A  0100               	movlb	0	; () banked
 11676  00261C  356E               	rlcf	(Line@j_1803+1)& (0+255),w,b
 11677  00261E  6EDA               	movwf	fsr2h,c
 11678  002620  0EE0               	movlw	low _sd
 11679  002622  26D9               	addwf	fsr2l,f,c
 11680  002624  0E01               	movlw	high _sd
 11681  002626  22DA               	addwfc	fsr2h,f,c
 11682  002628  CFDE F073          	movff	postinc2,Line@i_1804
 11683  00262C  CFDD F074          	movff	postdec2,Line@i_1804+1
 11684                           
 11685                           ;main.c: 321: v = V[i];
 11686  002630  90D8               	bcf	status,0,c
 11687  002632  0100               	movlb	0	; () banked
 11688  002634  3573               	rlcf	Line@i_1804& (0+255),w,b
 11689  002636  6ED9               	movwf	fsr2l,c
 11690  002638  0100               	movlb	0	; () banked
 11691  00263A  3574               	rlcf	(Line@i_1804+1)& (0+255),w,b
 11692  00263C  6EDA               	movwf	fsr2h,c
 11693  00263E  0EC8               	movlw	low _V
 11694  002640  26D9               	addwf	fsr2l,f,c
 11695  002642  0E02               	movlw	high _V
 11696  002644  22DA               	addwfc	fsr2h,f,c
 11697  002646  CFDE F029          	movff	postinc2,??_Line
 11698  00264A  CFDD F02A          	movff	postdec2,??_Line+1
 11699  00264E  C029  F075         	movff	??_Line,Line@v
 11700  002652  C02A  F076         	movff	??_Line+1,Line@v+1
 11701  002656  0100               	movlb	0	; () banked
 11702  002658  6B77               	clrf	(Line@v+2)& (0+255),b
 11703  00265A  6B78               	clrf	(Line@v+3)& (0+255),b
 11704                           
 11705                           ; BSR set to: 0
 11706                           ;main.c: 322: if (v < amin[i]) v = amin[i];
 11707  00265C  90D8               	bcf	status,0,c
 11708  00265E  0100               	movlb	0	; () banked
 11709  002660  3573               	rlcf	Line@i_1804& (0+255),w,b
 11710  002662  6ED9               	movwf	fsr2l,c
 11711  002664  0100               	movlb	0	; () banked
 11712  002666  3574               	rlcf	(Line@i_1804+1)& (0+255),w,b
 11713  002668  6EDA               	movwf	fsr2h,c
 11714  00266A  0E40               	movlw	low _amin
 11715  00266C  26D9               	addwf	fsr2l,f,c
 11716  00266E  0E01               	movlw	high _amin
 11717  002670  22DA               	addwfc	fsr2h,f,c
 11718  002672  CFDE F029          	movff	postinc2,??_Line
 11719  002676  CFDD F02A          	movff	postdec2,??_Line+1
 11720  00267A  5029               	movf	??_Line,w,c
 11721  00267C  6E2B               	movwf	(??_Line+2)& (0+255),c
 11722  00267E  502A               	movf	??_Line+1,w,c
 11723  002680  6E2C               	movwf	(??_Line+3)& (0+255),c
 11724  002682  6A2D               	clrf	(??_Line+4)& (0+255),c
 11725  002684  6A2E               	clrf	(??_Line+5)& (0+255),c
 11726  002686  502B               	movf	??_Line+2,w,c
 11727  002688  0100               	movlb	0	; () banked
 11728  00268A  5D75               	subwf	Line@v& (0+255),w,b
 11729  00268C  502C               	movf	??_Line+3,w,c
 11730  00268E  0100               	movlb	0	; () banked
 11731  002690  5976               	subwfb	(Line@v+1)& (0+255),w,b
 11732  002692  502D               	movf	??_Line+4,w,c
 11733  002694  0100               	movlb	0	; () banked
 11734  002696  5977               	subwfb	(Line@v+2)& (0+255),w,b
 11735  002698  0100               	movlb	0	; () banked
 11736  00269A  5178               	movf	(Line@v+3)& (0+255),w,b
 11737  00269C  0A80               	xorlw	128
 11738  00269E  6E2F               	movwf	(??_Line+6)& (0+255),c
 11739  0026A0  502E               	movf	??_Line+5,w,c
 11740  0026A2  0A80               	xorlw	128
 11741  0026A4  582F               	subwfb	(??_Line+6)& (0+255),w,c
 11742  0026A6  B0D8               	btfsc	status,0,c
 11743  0026A8  D017               	goto	l6606
 11744                           
 11745                           ; BSR set to: 0
 11746  0026AA  90D8               	bcf	status,0,c
 11747  0026AC  0100               	movlb	0	; () banked
 11748  0026AE  3573               	rlcf	Line@i_1804& (0+255),w,b
 11749  0026B0  6ED9               	movwf	fsr2l,c
 11750  0026B2  0100               	movlb	0	; () banked
 11751  0026B4  3574               	rlcf	(Line@i_1804+1)& (0+255),w,b
 11752  0026B6  6EDA               	movwf	fsr2h,c
 11753  0026B8  0E40               	movlw	low _amin
 11754  0026BA  26D9               	addwf	fsr2l,f,c
 11755  0026BC  0E01               	movlw	high _amin
 11756  0026BE  22DA               	addwfc	fsr2h,f,c
 11757  0026C0  CFDE F029          	movff	postinc2,??_Line
 11758  0026C4  CFDD F02A          	movff	postdec2,??_Line+1
 11759  0026C8  C029  F075         	movff	??_Line,Line@v
 11760  0026CC  C02A  F076         	movff	??_Line+1,Line@v+1
 11761  0026D0  0100               	movlb	0	; () banked
 11762  0026D2  6B77               	clrf	(Line@v+2)& (0+255),b
 11763  0026D4  6B78               	clrf	(Line@v+3)& (0+255),b
 11764  0026D6  D000               	goto	l6606
 11765  0026D8                     l6606:
 11766                           
 11767                           ; BSR set to: 0
 11768                           ;main.c: 323: if (v > amax[i]) v = amax[i];
 11769  0026D8  90D8               	bcf	status,0,c
 11770  0026DA  0100               	movlb	0	; () banked
 11771  0026DC  3573               	rlcf	Line@i_1804& (0+255),w,b
 11772  0026DE  6ED9               	movwf	fsr2l,c
 11773  0026E0  0100               	movlb	0	; () banked
 11774  0026E2  3574               	rlcf	(Line@i_1804+1)& (0+255),w,b
 11775  0026E4  6EDA               	movwf	fsr2h,c
 11776  0026E6  0E20               	movlw	low _amax
 11777  0026E8  26D9               	addwf	fsr2l,f,c
 11778  0026EA  0E01               	movlw	high _amax
 11779  0026EC  22DA               	addwfc	fsr2h,f,c
 11780  0026EE  CFDE F029          	movff	postinc2,??_Line
 11781  0026F2  CFDD F02A          	movff	postdec2,??_Line+1
 11782  0026F6  5029               	movf	??_Line,w,c
 11783  0026F8  6E2B               	movwf	(??_Line+2)& (0+255),c
 11784  0026FA  502A               	movf	??_Line+1,w,c
 11785  0026FC  6E2C               	movwf	(??_Line+3)& (0+255),c
 11786  0026FE  6A2D               	clrf	(??_Line+4)& (0+255),c
 11787  002700  6A2E               	clrf	(??_Line+5)& (0+255),c
 11788  002702  0100               	movlb	0	; () banked
 11789  002704  5175               	movf	Line@v& (0+255),w,b
 11790  002706  5C2B               	subwf	??_Line+2,w,c
 11791  002708  0100               	movlb	0	; () banked
 11792  00270A  5176               	movf	(Line@v+1)& (0+255),w,b
 11793  00270C  582C               	subwfb	??_Line+3,w,c
 11794  00270E  0100               	movlb	0	; () banked
 11795  002710  5177               	movf	(Line@v+2)& (0+255),w,b
 11796  002712  582D               	subwfb	??_Line+4,w,c
 11797  002714  502E               	movf	??_Line+5,w,c
 11798  002716  0A80               	xorlw	128
 11799  002718  6E2F               	movwf	(??_Line+6)& (0+255),c
 11800  00271A  0100               	movlb	0	; () banked
 11801  00271C  5178               	movf	(Line@v+3)& (0+255),w,b
 11802  00271E  0A80               	xorlw	128
 11803  002720  582F               	subwfb	(??_Line+6)& (0+255),w,c
 11804  002722  B0D8               	btfsc	status,0,c
 11805  002724  D017               	goto	l6610
 11806                           
 11807                           ; BSR set to: 0
 11808  002726  90D8               	bcf	status,0,c
 11809  002728  0100               	movlb	0	; () banked
 11810  00272A  3573               	rlcf	Line@i_1804& (0+255),w,b
 11811  00272C  6ED9               	movwf	fsr2l,c
 11812  00272E  0100               	movlb	0	; () banked
 11813  002730  3574               	rlcf	(Line@i_1804+1)& (0+255),w,b
 11814  002732  6EDA               	movwf	fsr2h,c
 11815  002734  0E20               	movlw	low _amax
 11816  002736  26D9               	addwf	fsr2l,f,c
 11817  002738  0E01               	movlw	high _amax
 11818  00273A  22DA               	addwfc	fsr2h,f,c
 11819  00273C  CFDE F029          	movff	postinc2,??_Line
 11820  002740  CFDD F02A          	movff	postdec2,??_Line+1
 11821  002744  C029  F075         	movff	??_Line,Line@v
 11822  002748  C02A  F076         	movff	??_Line+1,Line@v+1
 11823  00274C  0100               	movlb	0	; () banked
 11824  00274E  6B77               	clrf	(Line@v+2)& (0+255),b
 11825  002750  6B78               	clrf	(Line@v+3)& (0+255),b
 11826  002752  D000               	goto	l6610
 11827  002754                     l6610:
 11828                           
 11829                           ; BSR set to: 0
 11830                           ;main.c: 324: v -= amin[i]; v *= 1000; v /= (amax[i]-amin[i]); v = 1000 - v;
 11831  002754  90D8               	bcf	status,0,c
 11832  002756  0100               	movlb	0	; () banked
 11833  002758  3573               	rlcf	Line@i_1804& (0+255),w,b
 11834  00275A  6ED9               	movwf	fsr2l,c
 11835  00275C  0100               	movlb	0	; () banked
 11836  00275E  3574               	rlcf	(Line@i_1804+1)& (0+255),w,b
 11837  002760  6EDA               	movwf	fsr2h,c
 11838  002762  0E40               	movlw	low _amin
 11839  002764  26D9               	addwf	fsr2l,f,c
 11840  002766  0E01               	movlw	high _amin
 11841  002768  22DA               	addwfc	fsr2h,f,c
 11842  00276A  CFDE F029          	movff	postinc2,??_Line
 11843  00276E  CFDD F02A          	movff	postdec2,??_Line+1
 11844  002772  5029               	movf	??_Line,w,c
 11845  002774  6E2B               	movwf	(??_Line+2)& (0+255),c
 11846  002776  502A               	movf	??_Line+1,w,c
 11847  002778  6E2C               	movwf	(??_Line+3)& (0+255),c
 11848  00277A  6A2D               	clrf	(??_Line+4)& (0+255),c
 11849  00277C  6A2E               	clrf	(??_Line+5)& (0+255),c
 11850  00277E  502B               	movf	??_Line+2,w,c
 11851  002780  0100               	movlb	0	; () banked
 11852  002782  5F75               	subwf	Line@v& (0+255),f,b
 11853  002784  502C               	movf	??_Line+3,w,c
 11854  002786  0100               	movlb	0	; () banked
 11855  002788  5B76               	subwfb	(Line@v+1)& (0+255),f,b
 11856  00278A  502D               	movf	??_Line+4,w,c
 11857  00278C  0100               	movlb	0	; () banked
 11858  00278E  5B77               	subwfb	(Line@v+2)& (0+255),f,b
 11859  002790  502E               	movf	??_Line+5,w,c
 11860  002792  0100               	movlb	0	; () banked
 11861  002794  5B78               	subwfb	(Line@v+3)& (0+255),f,b
 11862                           
 11863                           ; BSR set to: 0
 11864  002796  C075  F01D         	movff	Line@v,___lmul@multiplier
 11865  00279A  C076  F01E         	movff	Line@v+1,___lmul@multiplier+1
 11866  00279E  C077  F01F         	movff	Line@v+2,___lmul@multiplier+2
 11867  0027A2  C078  F020         	movff	Line@v+3,___lmul@multiplier+3
 11868  0027A6  0EE8               	movlw	232
 11869  0027A8  6E21               	movwf	___lmul@multiplicand,c
 11870  0027AA  0E03               	movlw	3
 11871  0027AC  6E22               	movwf	___lmul@multiplicand+1,c
 11872  0027AE  0E00               	movlw	0
 11873  0027B0  6E23               	movwf	___lmul@multiplicand+2,c
 11874  0027B2  0E00               	movlw	0
 11875  0027B4  6E24               	movwf	___lmul@multiplicand+3,c
 11876  0027B6  EC8C  F025         	call	___lmul	;wreg free
 11877  0027BA  C01D  F075         	movff	?___lmul,Line@v
 11878  0027BE  C01E  F076         	movff	?___lmul+1,Line@v+1
 11879  0027C2  C01F  F077         	movff	?___lmul+2,Line@v+2
 11880  0027C6  C020  F078         	movff	?___lmul+3,Line@v+3
 11881  0027CA  C075  F00F         	movff	Line@v,___aldiv@dividend
 11882  0027CE  C076  F010         	movff	Line@v+1,___aldiv@dividend+1
 11883  0027D2  C077  F011         	movff	Line@v+2,___aldiv@dividend+2
 11884  0027D6  C078  F012         	movff	Line@v+3,___aldiv@dividend+3
 11885  0027DA  90D8               	bcf	status,0,c
 11886  0027DC  0100               	movlb	0	; () banked
 11887  0027DE  3573               	rlcf	Line@i_1804& (0+255),w,b
 11888  0027E0  6ED9               	movwf	fsr2l,c
 11889  0027E2  0100               	movlb	0	; () banked
 11890  0027E4  3574               	rlcf	(Line@i_1804+1)& (0+255),w,b
 11891  0027E6  6EDA               	movwf	fsr2h,c
 11892  0027E8  0E20               	movlw	low _amax
 11893  0027EA  26D9               	addwf	fsr2l,f,c
 11894  0027EC  0E01               	movlw	high _amax
 11895  0027EE  22DA               	addwfc	fsr2h,f,c
 11896  0027F0  CFDE F029          	movff	postinc2,??_Line
 11897  0027F4  CFDD F02A          	movff	postdec2,??_Line+1
 11898  0027F8  90D8               	bcf	status,0,c
 11899  0027FA  0100               	movlb	0	; () banked
 11900  0027FC  3573               	rlcf	Line@i_1804& (0+255),w,b
 11901  0027FE  6ED9               	movwf	fsr2l,c
 11902  002800  0100               	movlb	0	; () banked
 11903  002802  3574               	rlcf	(Line@i_1804+1)& (0+255),w,b
 11904  002804  6EDA               	movwf	fsr2h,c
 11905  002806  0E40               	movlw	low _amin
 11906  002808  26D9               	addwf	fsr2l,f,c
 11907  00280A  0E01               	movlw	high _amin
 11908  00280C  22DA               	addwfc	fsr2h,f,c
 11909  00280E  CFDE F02B          	movff	postinc2,??_Line+2
 11910  002812  CFDD F02C          	movff	postdec2,??_Line+3
 11911  002816  1E2B               	comf	??_Line+2,f,c
 11912  002818  1E2C               	comf	??_Line+3,f,c
 11913  00281A  4A2B               	infsnz	??_Line+2,f,c
 11914  00281C  2A2C               	incf	??_Line+3,f,c
 11915  00281E  5029               	movf	??_Line,w,c
 11916  002820  262B               	addwf	??_Line+2,f,c
 11917  002822  502A               	movf	??_Line+1,w,c
 11918  002824  222C               	addwfc	??_Line+3,f,c
 11919  002826  C02B  F013         	movff	??_Line+2,___aldiv@divisor
 11920  00282A  C02C  F014         	movff	??_Line+3,___aldiv@divisor+1
 11921  00282E  6A15               	clrf	___aldiv@divisor+2,c
 11922  002830  6A16               	clrf	___aldiv@divisor+3,c
 11923  002832  EC5D  F01F         	call	___aldiv	;wreg free
 11924  002836  C00F  F075         	movff	?___aldiv,Line@v
 11925  00283A  C010  F076         	movff	?___aldiv+1,Line@v+1
 11926  00283E  C011  F077         	movff	?___aldiv+2,Line@v+2
 11927  002842  C012  F078         	movff	?___aldiv+3,Line@v+3
 11928  002846  C075  F029         	movff	Line@v,??_Line
 11929  00284A  C076  F02A         	movff	Line@v+1,??_Line+1
 11930  00284E  C077  F02B         	movff	Line@v+2,??_Line+2
 11931  002852  C078  F02C         	movff	Line@v+3,??_Line+3
 11932  002856  1E29               	comf	??_Line,f,c
 11933  002858  1E2A               	comf	??_Line+1,f,c
 11934  00285A  1E2B               	comf	??_Line+2,f,c
 11935  00285C  1E2C               	comf	??_Line+3,f,c
 11936  00285E  2A29               	incf	??_Line,f,c
 11937  002860  0E00               	movlw	0
 11938  002862  222A               	addwfc	??_Line+1,f,c
 11939  002864  222B               	addwfc	??_Line+2,f,c
 11940  002866  222C               	addwfc	??_Line+3,f,c
 11941  002868  0EE8               	movlw	232
 11942  00286A  2429               	addwf	??_Line,w,c
 11943  00286C  0100               	movlb	0	; () banked
 11944  00286E  6F75               	movwf	Line@v& (0+255),b
 11945  002870  0E03               	movlw	3
 11946  002872  202A               	addwfc	??_Line+1,w,c
 11947  002874  0100               	movlb	0	; () banked
 11948  002876  6F76               	movwf	(Line@v+1)& (0+255),b
 11949  002878  0E00               	movlw	0
 11950  00287A  202B               	addwfc	??_Line+2,w,c
 11951  00287C  0100               	movlb	0	; () banked
 11952  00287E  6F77               	movwf	(Line@v+2)& (0+255),b
 11953  002880  0E00               	movlw	0
 11954  002882  202C               	addwfc	??_Line+3,w,c
 11955  002884  0100               	movlb	0	; () banked
 11956  002886  6F78               	movwf	(Line@v+3)& (0+255),b
 11957                           
 11958                           ;main.c: 325: P[i] = v;
 11959  002888  90D8               	bcf	status,0,c
 11960  00288A  0100               	movlb	0	; () banked
 11961  00288C  3573               	rlcf	Line@i_1804& (0+255),w,b
 11962  00288E  6ED9               	movwf	fsr2l,c
 11963  002890  0100               	movlb	0	; () banked
 11964  002892  3574               	rlcf	(Line@i_1804+1)& (0+255),w,b
 11965  002894  6EDA               	movwf	fsr2h,c
 11966  002896  0E00               	movlw	low _P
 11967  002898  26D9               	addwf	fsr2l,f,c
 11968  00289A  0E01               	movlw	high _P
 11969  00289C  22DA               	addwfc	fsr2h,f,c
 11970  00289E  C075  FFDE         	movff	Line@v,postinc2
 11971  0028A2  C076  FFDD         	movff	Line@v+1,postdec2
 11972                           
 11973                           ; BSR set to: 0
 11974  0028A6  0100               	movlb	0	; () banked
 11975  0028A8  4B6D               	infsnz	Line@j_1803& (0+255),f,b
 11976  0028AA  2B6E               	incf	(Line@j_1803+1)& (0+255),f,b
 11977                           
 11978                           ; BSR set to: 0
 11979  0028AC  0100               	movlb	0	; () banked
 11980  0028AE  BF6E               	btfsc	(Line@j_1803+1)& (0+255),7,b
 11981  0028B0  D6B0               	goto	l6600
 11982  0028B2  0100               	movlb	0	; () banked
 11983  0028B4  516E               	movf	(Line@j_1803+1)& (0+255),w,b
 11984  0028B6  E102               	bnz	l6622
 11985  0028B8  D6A5               	goto	L17
 11986  0028BA  D000               	goto	l6622
 11987  0028BC                     l6622:
 11988                           
 11989                           ; BSR set to: 0
 11990                           ;main.c: 326: }
 11991                           ;main.c: 328: if (g == 0){
 11992  0028BC  0100               	movlb	0	; () banked
 11993  0028BE  516C               	movf	Line@g& (0+255),w,b
 11994  0028C0  0100               	movlb	0	; () banked
 11995  0028C2  A4D8               	btfss	status,2,c
 11996  0028C4  D010               	goto	l6632
 11997                           
 11998                           ; BSR set to: 0
 11999                           ;main.c: 329: line = line > 0 ? 200 : -200;
 12000  0028C6  BE4B               	btfsc	_line+1,7,c
 12001  0028C8  D005               	goto	l6626
 12002  0028CA  504B               	movf	_line+1,w,c
 12003  0028CC  E107               	bnz	l6628
 12004  0028CE  044A               	decf	_line,w,c
 12005  0028D0  B0D8               	btfsc	status,0,c
 12006  0028D2  D004               	goto	l6628
 12007  0028D4                     l6626:
 12008                           
 12009                           ; BSR set to: 0
 12010  0028D4  0EFF               	movlw	255
 12011  0028D6  6E4B               	movwf	_line+1,c
 12012  0028D8  0E38               	movlw	56
 12013  0028DA  D003               	goto	L18
 12014  0028DC                     l6628:
 12015                           
 12016                           ; BSR set to: 0
 12017  0028DC  0E00               	movlw	0
 12018  0028DE  6E4B               	movwf	_line+1,c
 12019  0028E0  0EC8               	movlw	200
 12020  0028E2                     L18:
 12021  0028E2  6E4A               	movwf	_line,c
 12022                           
 12023                           ; BSR set to: 0
 12024                           ;main.c: 330: return;
 12025                           
 12026                           ; BSR set to: 0
 12027  0028E4  D016               	goto	l438
 12028  0028E6                     l6632:
 12029                           
 12030                           ; BSR set to: 0
 12031                           ;main.c: 331: }
 12032                           ;main.c: 332: line = a / b;
 12033  0028E6  C064  F00F         	movff	Line@a,___aldiv@dividend
 12034  0028EA  C065  F010         	movff	Line@a+1,___aldiv@dividend+1
 12035  0028EE  C066  F011         	movff	Line@a+2,___aldiv@dividend+2
 12036  0028F2  C067  F012         	movff	Line@a+3,___aldiv@dividend+3
 12037  0028F6  C068  F013         	movff	Line@b,___aldiv@divisor
 12038  0028FA  C069  F014         	movff	Line@b+1,___aldiv@divisor+1
 12039  0028FE  C06A  F015         	movff	Line@b+2,___aldiv@divisor+2
 12040  002902  C06B  F016         	movff	Line@b+3,___aldiv@divisor+3
 12041  002906  EC5D  F01F         	call	___aldiv	;wreg free
 12042  00290A  C00F  F04A         	movff	?___aldiv,_line
 12043  00290E  C010  F04B         	movff	?___aldiv+1,_line+1
 12044  002912                     l438:
 12045  002912  0012               	return		;funcret
 12046  002914                     __end_of_Line:
 12047                           	opt stack 0
 12048                           tblptru	equ	0xFF8
 12049                           tblptrh	equ	0xFF7
 12050                           tblptrl	equ	0xFF6
 12051                           tablat	equ	0xFF5
 12052                           prodh	equ	0xFF4
 12053                           prodl	equ	0xFF3
 12054                           intcon	equ	0xFF2
 12055                           intcon2	equ	0xFF1
 12056                           postinc0	equ	0xFEE
 12057                           wreg	equ	0xFE8
 12058                           postinc1	equ	0xFE6
 12059                           postdec1	equ	0xFE5
 12060                           fsr1h	equ	0xFE2
 12061                           fsr1l	equ	0xFE1
 12062                           indf2	equ	0xFDF
 12063                           postinc2	equ	0xFDE
 12064                           postdec2	equ	0xFDD
 12065                           plusw2	equ	0xFDB
 12066                           fsr2h	equ	0xFDA
 12067                           fsr2l	equ	0xFD9
 12068                           status	equ	0xFD8
 12069                           
 12070 ;; *************** function ___lmul *****************
 12071 ;; Defined at:
 12072 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/Umul32.c"
 12073 ;; Parameters:    Size  Location     Type
 12074 ;;  multiplier      4   28[COMRAM] unsigned long 
 12075 ;;  multiplicand    4   32[COMRAM] unsigned long 
 12076 ;; Auto vars:     Size  Location     Type
 12077 ;;  product         4   36[COMRAM] unsigned long 
 12078 ;; Return value:  Size  Location     Type
 12079 ;;                  4   28[COMRAM] unsigned long 
 12080 ;; Registers used:
 12081 ;;		wreg, status,2, status,0
 12082 ;; Tracked objects:
 12083 ;;		On entry : 0/0
 12084 ;;		On exit  : 0/0
 12085 ;;		Unchanged: 0/0
 12086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12087 ;;      Params:         8       0       0       0       0       0       0       0       0
 12088 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12089 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12090 ;;      Totals:        12       0       0       0       0       0       0       0       0
 12091 ;;Total ram usage:       12 bytes
 12092 ;; Hardware stack levels used:    1
 12093 ;; Hardware stack levels required when called:    1
 12094 ;; This function calls:
 12095 ;;		Nothing
 12096 ;; This function is called by:
 12097 ;;		_Line
 12098 ;;		_main
 12099 ;; This function uses a non-reentrant model
 12100 ;;
 12101                           
 12102                           	psect	text24
 12103  004B18                     __ptext24:
 12104                           	opt stack 0
 12105  004B18                     ___lmul:
 12106                           	opt stack 29
 12107                           
 12108                           ;incstack = 0
 12109  004B18  0E00               	movlw	0
 12110  004B1A  6E25               	movwf	___lmul@product,c
 12111  004B1C  0E00               	movlw	0
 12112  004B1E  6E26               	movwf	___lmul@product+1,c
 12113  004B20  0E00               	movlw	0
 12114  004B22  6E27               	movwf	___lmul@product+2,c
 12115  004B24  0E00               	movlw	0
 12116  004B26  6E28               	movwf	___lmul@product+3,c
 12117  004B28  D000               	goto	l6340
 12118  004B2A                     l6340:
 12119  004B2A  A01D               	btfss	___lmul@multiplier,0,c
 12120  004B2C  D009               	goto	l6344
 12121  004B2E  5021               	movf	___lmul@multiplicand,w,c
 12122  004B30  2625               	addwf	___lmul@product,f,c
 12123  004B32  5022               	movf	___lmul@multiplicand+1,w,c
 12124  004B34  2226               	addwfc	___lmul@product+1,f,c
 12125  004B36  5023               	movf	___lmul@multiplicand+2,w,c
 12126  004B38  2227               	addwfc	___lmul@product+2,f,c
 12127  004B3A  5024               	movf	___lmul@multiplicand+3,w,c
 12128  004B3C  2228               	addwfc	___lmul@product+3,f,c
 12129  004B3E  D000               	goto	l6344
 12130  004B40                     l6344:
 12131  004B40  90D8               	bcf	status,0,c
 12132  004B42  3621               	rlcf	___lmul@multiplicand,f,c
 12133  004B44  3622               	rlcf	___lmul@multiplicand+1,f,c
 12134  004B46  3623               	rlcf	___lmul@multiplicand+2,f,c
 12135  004B48  3624               	rlcf	___lmul@multiplicand+3,f,c
 12136  004B4A  90D8               	bcf	status,0,c
 12137  004B4C  3220               	rrcf	___lmul@multiplier+3,f,c
 12138  004B4E  321F               	rrcf	___lmul@multiplier+2,f,c
 12139  004B50  321E               	rrcf	___lmul@multiplier+1,f,c
 12140  004B52  321D               	rrcf	___lmul@multiplier,f,c
 12141  004B54  501D               	movf	___lmul@multiplier,w,c
 12142  004B56  101E               	iorwf	___lmul@multiplier+1,w,c
 12143  004B58  101F               	iorwf	___lmul@multiplier+2,w,c
 12144  004B5A  1020               	iorwf	___lmul@multiplier+3,w,c
 12145  004B5C  A4D8               	btfss	status,2,c
 12146  004B5E  D7E5               	goto	l6340
 12147  004B60  C025  F01D         	movff	___lmul@product,?___lmul
 12148  004B64  C026  F01E         	movff	___lmul@product+1,?___lmul+1
 12149  004B68  C027  F01F         	movff	___lmul@product+2,?___lmul+2
 12150  004B6C  C028  F020         	movff	___lmul@product+3,?___lmul+3
 12151  004B70  0012               	return		;funcret
 12152  004B72                     __end_of___lmul:
 12153                           	opt stack 0
 12154                           tblptru	equ	0xFF8
 12155                           tblptrh	equ	0xFF7
 12156                           tblptrl	equ	0xFF6
 12157                           tablat	equ	0xFF5
 12158                           prodh	equ	0xFF4
 12159                           prodl	equ	0xFF3
 12160                           intcon	equ	0xFF2
 12161                           intcon2	equ	0xFF1
 12162                           postinc0	equ	0xFEE
 12163                           wreg	equ	0xFE8
 12164                           postinc1	equ	0xFE6
 12165                           postdec1	equ	0xFE5
 12166                           fsr1h	equ	0xFE2
 12167                           fsr1l	equ	0xFE1
 12168                           indf2	equ	0xFDF
 12169                           postinc2	equ	0xFDE
 12170                           postdec2	equ	0xFDD
 12171                           plusw2	equ	0xFDB
 12172                           fsr2h	equ	0xFDA
 12173                           fsr2l	equ	0xFD9
 12174                           status	equ	0xFD8
 12175                           
 12176 ;; *************** function ___aldiv *****************
 12177 ;; Defined at:
 12178 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/aldiv.c"
 12179 ;; Parameters:    Size  Location     Type
 12180 ;;  dividend        4   14[COMRAM] long 
 12181 ;;  divisor         4   18[COMRAM] long 
 12182 ;; Auto vars:     Size  Location     Type
 12183 ;;  quotient        4   24[COMRAM] long 
 12184 ;;  sign            1   23[COMRAM] unsigned char 
 12185 ;;  counter         1   22[COMRAM] unsigned char 
 12186 ;; Return value:  Size  Location     Type
 12187 ;;                  4   14[COMRAM] long 
 12188 ;; Registers used:
 12189 ;;		wreg, status,2, status,0
 12190 ;; Tracked objects:
 12191 ;;		On entry : 0/0
 12192 ;;		On exit  : 0/0
 12193 ;;		Unchanged: 0/0
 12194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12195 ;;      Params:         8       0       0       0       0       0       0       0       0
 12196 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12197 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12198 ;;      Totals:        14       0       0       0       0       0       0       0       0
 12199 ;;Total ram usage:       14 bytes
 12200 ;; Hardware stack levels used:    1
 12201 ;; Hardware stack levels required when called:    1
 12202 ;; This function calls:
 12203 ;;		Nothing
 12204 ;; This function is called by:
 12205 ;;		_Line
 12206 ;;		_main
 12207 ;; This function uses a non-reentrant model
 12208 ;;
 12209                           
 12210                           	psect	text25
 12211  003EBA                     __ptext25:
 12212                           	opt stack 0
 12213  003EBA                     ___aldiv:
 12214                           	opt stack 29
 12215                           
 12216                           ;incstack = 0
 12217  003EBA  0E00               	movlw	0
 12218  003EBC  6E18               	movwf	___aldiv@sign,c
 12219  003EBE  AE16               	btfss	___aldiv@divisor+3,7,c
 12220  003EC0  D00B               	goto	l6356
 12221  003EC2  1E16               	comf	___aldiv@divisor+3,f,c
 12222  003EC4  1E15               	comf	___aldiv@divisor+2,f,c
 12223  003EC6  1E14               	comf	___aldiv@divisor+1,f,c
 12224  003EC8  6C13               	negf	___aldiv@divisor,c
 12225  003ECA  0E00               	movlw	0
 12226  003ECC  2214               	addwfc	___aldiv@divisor+1,f,c
 12227  003ECE  2215               	addwfc	___aldiv@divisor+2,f,c
 12228  003ED0  2216               	addwfc	___aldiv@divisor+3,f,c
 12229  003ED2  0E01               	movlw	1
 12230  003ED4  6E18               	movwf	___aldiv@sign,c
 12231  003ED6  D000               	goto	l6356
 12232  003ED8                     l6356:
 12233  003ED8  AE12               	btfss	___aldiv@dividend+3,7,c
 12234  003EDA  D00B               	goto	l6362
 12235  003EDC  1E12               	comf	___aldiv@dividend+3,f,c
 12236  003EDE  1E11               	comf	___aldiv@dividend+2,f,c
 12237  003EE0  1E10               	comf	___aldiv@dividend+1,f,c
 12238  003EE2  6C0F               	negf	___aldiv@dividend,c
 12239  003EE4  0E00               	movlw	0
 12240  003EE6  2210               	addwfc	___aldiv@dividend+1,f,c
 12241  003EE8  2211               	addwfc	___aldiv@dividend+2,f,c
 12242  003EEA  2212               	addwfc	___aldiv@dividend+3,f,c
 12243  003EEC  0E01               	movlw	1
 12244  003EEE  1A18               	xorwf	___aldiv@sign,f,c
 12245  003EF0  D000               	goto	l6362
 12246  003EF2                     l6362:
 12247  003EF2  0E00               	movlw	0
 12248  003EF4  6E19               	movwf	___aldiv@quotient,c
 12249  003EF6  0E00               	movlw	0
 12250  003EF8  6E1A               	movwf	___aldiv@quotient+1,c
 12251  003EFA  0E00               	movlw	0
 12252  003EFC  6E1B               	movwf	___aldiv@quotient+2,c
 12253  003EFE  0E00               	movlw	0
 12254  003F00  6E1C               	movwf	___aldiv@quotient+3,c
 12255  003F02  5013               	movf	___aldiv@divisor,w,c
 12256  003F04  1014               	iorwf	___aldiv@divisor+1,w,c
 12257  003F06  1015               	iorwf	___aldiv@divisor+2,w,c
 12258  003F08  1016               	iorwf	___aldiv@divisor+3,w,c
 12259  003F0A  B4D8               	btfsc	status,2,c
 12260  003F0C  D02F               	goto	l6384
 12261  003F0E  0E01               	movlw	1
 12262  003F10  6E17               	movwf	___aldiv@counter,c
 12263  003F12  D007               	goto	l6370
 12264  003F14                     l6368:
 12265  003F14  90D8               	bcf	status,0,c
 12266  003F16  3613               	rlcf	___aldiv@divisor,f,c
 12267  003F18  3614               	rlcf	___aldiv@divisor+1,f,c
 12268  003F1A  3615               	rlcf	___aldiv@divisor+2,f,c
 12269  003F1C  3616               	rlcf	___aldiv@divisor+3,f,c
 12270  003F1E  2A17               	incf	___aldiv@counter,f,c
 12271  003F20  D000               	goto	l6370
 12272  003F22                     l6370:
 12273  003F22  BE16               	btfsc	___aldiv@divisor+3,7,c
 12274  003F24  D002               	goto	l6372
 12275  003F26  D7F6               	goto	l6368
 12276  003F28  D000               	goto	l6372
 12277  003F2A                     l6372:
 12278  003F2A  90D8               	bcf	status,0,c
 12279  003F2C  3619               	rlcf	___aldiv@quotient,f,c
 12280  003F2E  361A               	rlcf	___aldiv@quotient+1,f,c
 12281  003F30  361B               	rlcf	___aldiv@quotient+2,f,c
 12282  003F32  361C               	rlcf	___aldiv@quotient+3,f,c
 12283  003F34  5013               	movf	___aldiv@divisor,w,c
 12284  003F36  5C0F               	subwf	___aldiv@dividend,w,c
 12285  003F38  5014               	movf	___aldiv@divisor+1,w,c
 12286  003F3A  5810               	subwfb	___aldiv@dividend+1,w,c
 12287  003F3C  5015               	movf	___aldiv@divisor+2,w,c
 12288  003F3E  5811               	subwfb	___aldiv@dividend+2,w,c
 12289  003F40  5016               	movf	___aldiv@divisor+3,w,c
 12290  003F42  5812               	subwfb	___aldiv@dividend+3,w,c
 12291  003F44  A0D8               	btfss	status,0,c
 12292  003F46  D00A               	goto	l6380
 12293  003F48  5013               	movf	___aldiv@divisor,w,c
 12294  003F4A  5E0F               	subwf	___aldiv@dividend,f,c
 12295  003F4C  5014               	movf	___aldiv@divisor+1,w,c
 12296  003F4E  5A10               	subwfb	___aldiv@dividend+1,f,c
 12297  003F50  5015               	movf	___aldiv@divisor+2,w,c
 12298  003F52  5A11               	subwfb	___aldiv@dividend+2,f,c
 12299  003F54  5016               	movf	___aldiv@divisor+3,w,c
 12300  003F56  5A12               	subwfb	___aldiv@dividend+3,f,c
 12301  003F58  8019               	bsf	___aldiv@quotient,0,c
 12302  003F5A  D000               	goto	l6380
 12303  003F5C                     l6380:
 12304  003F5C  90D8               	bcf	status,0,c
 12305  003F5E  3216               	rrcf	___aldiv@divisor+3,f,c
 12306  003F60  3215               	rrcf	___aldiv@divisor+2,f,c
 12307  003F62  3214               	rrcf	___aldiv@divisor+1,f,c
 12308  003F64  3213               	rrcf	___aldiv@divisor,f,c
 12309  003F66  2E17               	decfsz	___aldiv@counter,f,c
 12310  003F68  D7E0               	goto	l6372
 12311  003F6A  D000               	goto	l6384
 12312  003F6C                     l6384:
 12313  003F6C  5018               	movf	___aldiv@sign,w,c
 12314  003F6E  B4D8               	btfsc	status,2,c
 12315  003F70  D009               	goto	l6388
 12316  003F72  1E1C               	comf	___aldiv@quotient+3,f,c
 12317  003F74  1E1B               	comf	___aldiv@quotient+2,f,c
 12318  003F76  1E1A               	comf	___aldiv@quotient+1,f,c
 12319  003F78  6C19               	negf	___aldiv@quotient,c
 12320  003F7A  0E00               	movlw	0
 12321  003F7C  221A               	addwfc	___aldiv@quotient+1,f,c
 12322  003F7E  221B               	addwfc	___aldiv@quotient+2,f,c
 12323  003F80  221C               	addwfc	___aldiv@quotient+3,f,c
 12324  003F82  D000               	goto	l6388
 12325  003F84                     l6388:
 12326  003F84  C019  F00F         	movff	___aldiv@quotient,?___aldiv
 12327  003F88  C01A  F010         	movff	___aldiv@quotient+1,?___aldiv+1
 12328  003F8C  C01B  F011         	movff	___aldiv@quotient+2,?___aldiv+2
 12329  003F90  C01C  F012         	movff	___aldiv@quotient+3,?___aldiv+3
 12330  003F94  D000               	goto	l740
 12331  003F96                     l740:
 12332  003F96  0012               	return		;funcret
 12333  003F98                     __end_of___aldiv:
 12334                           	opt stack 0
 12335                           tblptru	equ	0xFF8
 12336                           tblptrh	equ	0xFF7
 12337                           tblptrl	equ	0xFF6
 12338                           tablat	equ	0xFF5
 12339                           prodh	equ	0xFF4
 12340                           prodl	equ	0xFF3
 12341                           intcon	equ	0xFF2
 12342                           intcon2	equ	0xFF1
 12343                           postinc0	equ	0xFEE
 12344                           wreg	equ	0xFE8
 12345                           postinc1	equ	0xFE6
 12346                           postdec1	equ	0xFE5
 12347                           fsr1h	equ	0xFE2
 12348                           fsr1l	equ	0xFE1
 12349                           indf2	equ	0xFDF
 12350                           postinc2	equ	0xFDE
 12351                           postdec2	equ	0xFDD
 12352                           plusw2	equ	0xFDB
 12353                           fsr2h	equ	0xFDA
 12354                           fsr2l	equ	0xFD9
 12355                           status	equ	0xFD8
 12356                           
 12357 ;; *************** function _EreaseAll *****************
 12358 ;; Defined at:
 12359 ;;		line 119 in file "../main.c"
 12360 ;; Parameters:    Size  Location     Type
 12361 ;;		None
 12362 ;; Auto vars:     Size  Location     Type
 12363 ;;		None
 12364 ;; Return value:  Size  Location     Type
 12365 ;;		None               void
 12366 ;; Registers used:
 12367 ;;		wreg, status,2, cstack
 12368 ;; Tracked objects:
 12369 ;;		On entry : 0/0
 12370 ;;		On exit  : 0/0
 12371 ;;		Unchanged: 0/0
 12372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12373 ;;      Params:         0       0       0       0       0       0       0       0       0
 12374 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12375 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12376 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12377 ;;Total ram usage:        0 bytes
 12378 ;; Hardware stack levels used:    1
 12379 ;; Hardware stack levels required when called:    2
 12380 ;; This function calls:
 12381 ;;		_WriteMem
 12382 ;; This function is called by:
 12383 ;;		_main
 12384 ;; This function uses a non-reentrant model
 12385 ;;
 12386                           
 12387                           	psect	text26
 12388  004ED2                     __ptext26:
 12389                           	opt stack 0
 12390  004ED2                     _EreaseAll:
 12391                           	opt stack 28
 12392                           
 12393                           ;main.c: 122: WriteMem(0 ,0);
 12394                           
 12395                           ;incstack = 0
 12396  004ED2  0E00               	movlw	0
 12397  004ED4  6E0F               	movwf	WriteMem@data,c
 12398  004ED6  0E00               	movlw	0
 12399  004ED8  ECFC  F026         	call	_WriteMem
 12400                           
 12401                           ;main.c: 123: WriteMem(128,0);
 12402  004EDC  0E00               	movlw	0
 12403  004EDE  6E0F               	movwf	WriteMem@data,c
 12404  004EE0  0E80               	movlw	128
 12405  004EE2  ECFC  F026         	call	_WriteMem
 12406  004EE6  0012               	return		;funcret
 12407  004EE8                     __end_of_EreaseAll:
 12408                           	opt stack 0
 12409                           tblptru	equ	0xFF8
 12410                           tblptrh	equ	0xFF7
 12411                           tblptrl	equ	0xFF6
 12412                           tablat	equ	0xFF5
 12413                           prodh	equ	0xFF4
 12414                           prodl	equ	0xFF3
 12415                           intcon	equ	0xFF2
 12416                           intcon2	equ	0xFF1
 12417                           postinc0	equ	0xFEE
 12418                           wreg	equ	0xFE8
 12419                           postinc1	equ	0xFE6
 12420                           postdec1	equ	0xFE5
 12421                           fsr1h	equ	0xFE2
 12422                           fsr1l	equ	0xFE1
 12423                           indf2	equ	0xFDF
 12424                           postinc2	equ	0xFDE
 12425                           postdec2	equ	0xFDD
 12426                           plusw2	equ	0xFDB
 12427                           fsr2h	equ	0xFDA
 12428                           fsr2l	equ	0xFD9
 12429                           status	equ	0xFD8
 12430                           
 12431 ;; *************** function _WriteMem *****************
 12432 ;; Defined at:
 12433 ;;		line 210 in file "../config.c"
 12434 ;; Parameters:    Size  Location     Type
 12435 ;;  addr            1    wreg     unsigned char 
 12436 ;;  data            1   14[COMRAM] unsigned char 
 12437 ;; Auto vars:     Size  Location     Type
 12438 ;;  addr            1   15[COMRAM] unsigned char 
 12439 ;; Return value:  Size  Location     Type
 12440 ;;		None               void
 12441 ;; Registers used:
 12442 ;;		wreg, status,2
 12443 ;; Tracked objects:
 12444 ;;		On entry : 0/0
 12445 ;;		On exit  : 0/0
 12446 ;;		Unchanged: 0/0
 12447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12448 ;;      Params:         1       0       0       0       0       0       0       0       0
 12449 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12450 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12451 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12452 ;;Total ram usage:        2 bytes
 12453 ;; Hardware stack levels used:    1
 12454 ;; Hardware stack levels required when called:    1
 12455 ;; This function calls:
 12456 ;;		Nothing
 12457 ;; This function is called by:
 12458 ;;		_EreaseAll
 12459 ;;		_Save
 12460 ;; This function uses a non-reentrant model
 12461 ;;
 12462                           
 12463                           	psect	text27
 12464  004DF8                     __ptext27:
 12465                           	opt stack 0
 12466  004DF8                     _WriteMem:
 12467                           	opt stack 28
 12468                           
 12469                           ;incstack = 0
 12470                           ;WriteMem@addr stored from wreg
 12471  004DF8  6E10               	movwf	WriteMem@addr,c
 12472                           
 12473                           ;config.c: 211: EEADR = addr;
 12474  004DFA  C010  FFA9         	movff	WriteMem@addr,4009	;volatile
 12475                           
 12476                           ;config.c: 212: EEDATA = data;
 12477  004DFE  C00F  FFA8         	movff	WriteMem@data,4008	;volatile
 12478                           
 12479                           ;config.c: 213: EECON1bits.EEPGD = 0;
 12480  004E02  9EA6               	bcf	4006,7,c	;volatile
 12481                           
 12482                           ;config.c: 214: EECON1bits.CFGS = 0;
 12483  004E04  9CA6               	bcf	4006,6,c	;volatile
 12484                           
 12485                           ;config.c: 215: EECON1bits.WREN = 1;
 12486  004E06  84A6               	bsf	4006,2,c	;volatile
 12487                           
 12488                           ;config.c: 216: INTCONbits.GIE = 0;
 12489  004E08  9EF2               	bcf	intcon,7,c	;volatile
 12490                           
 12491                           ;config.c: 217: EECON2 = 0x55;
 12492  004E0A  0E55               	movlw	85
 12493  004E0C  6EA7               	movwf	4007,c	;volatile
 12494                           
 12495                           ;config.c: 218: EECON2 = 0xAA;
 12496  004E0E  0EAA               	movlw	170
 12497  004E10  6EA7               	movwf	4007,c	;volatile
 12498                           
 12499                           ;config.c: 219: EECON1bits.WR = 1;
 12500  004E12  82A6               	bsf	4006,1,c	;volatile
 12501                           
 12502                           ;config.c: 220: INTCONbits.GIE = 1;
 12503  004E14  8EF2               	bsf	intcon,7,c	;volatile
 12504                           
 12505                           ;config.c: 221: while (EECON1bits.WR == 1){}
 12506  004E16  D000               	goto	l173
 12507  004E18                     l173:
 12508  004E18  B2A6               	btfsc	4006,1,c	;volatile
 12509  004E1A  D7FE               	goto	l173
 12510                           
 12511                           ;config.c: 222: EECON1bits.WREN = 0;
 12512  004E1C  94A6               	bcf	4006,2,c	;volatile
 12513  004E1E  0012               	return		;funcret
 12514  004E20                     __end_of_WriteMem:
 12515                           	opt stack 0
 12516                           tblptru	equ	0xFF8
 12517                           tblptrh	equ	0xFF7
 12518                           tblptrl	equ	0xFF6
 12519                           tablat	equ	0xFF5
 12520                           prodh	equ	0xFF4
 12521                           prodl	equ	0xFF3
 12522                           intcon	equ	0xFF2
 12523                           intcon2	equ	0xFF1
 12524                           postinc0	equ	0xFEE
 12525                           wreg	equ	0xFE8
 12526                           postinc1	equ	0xFE6
 12527                           postdec1	equ	0xFE5
 12528                           fsr1h	equ	0xFE2
 12529                           fsr1l	equ	0xFE1
 12530                           indf2	equ	0xFDF
 12531                           postinc2	equ	0xFDE
 12532                           postdec2	equ	0xFDD
 12533                           plusw2	equ	0xFDB
 12534                           fsr2h	equ	0xFDA
 12535                           fsr2l	equ	0xFD9
 12536                           status	equ	0xFD8
 12537                           
 12538 ;; *************** function _EnhancedRead *****************
 12539 ;; Defined at:
 12540 ;;		line 198 in file "../config.c"
 12541 ;; Parameters:    Size  Location     Type
 12542 ;;		None
 12543 ;; Auto vars:     Size  Location     Type
 12544 ;;  aux             2   23[COMRAM] unsigned int 
 12545 ;;  i               1   25[COMRAM] unsigned char 
 12546 ;; Return value:  Size  Location     Type
 12547 ;;		None               void
 12548 ;; Registers used:
 12549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12550 ;; Tracked objects:
 12551 ;;		On entry : 0/0
 12552 ;;		On exit  : 0/0
 12553 ;;		Unchanged: 0/0
 12554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12555 ;;      Params:         0       0       0       0       0       0       0       0       0
 12556 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12557 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12558 ;;      Totals:         4       0       0       0       0       0       0       0       0
 12559 ;;Total ram usage:        4 bytes
 12560 ;; Hardware stack levels used:    1
 12561 ;; Hardware stack levels required when called:    2
 12562 ;; This function calls:
 12563 ;;		___awdiv
 12564 ;; This function is called by:
 12565 ;;		_main
 12566 ;; This function uses a non-reentrant model
 12567 ;;
 12568                           
 12569                           	psect	text28
 12570  004872                     __ptext28:
 12571                           	opt stack 0
 12572  004872                     _EnhancedRead:
 12573                           	opt stack 28
 12574                           
 12575                           ;config.c: 199: unsigned char i;
 12576                           ;config.c: 200: unsigned int aux;
 12577                           ;config.c: 201: for (i=0;i<11;i++){
 12578                           
 12579                           ;incstack = 0
 12580  004872  0E00               	movlw	0
 12581  004874  6E1A               	movwf	EnhancedRead@i,c
 12582  004876                     l6414:
 12583  004876  0E0A               	movlw	10
 12584  004878  641A               	cpfsgt	EnhancedRead@i,c
 12585  00487A  D001               	goto	l6418
 12586  00487C  D030               	goto	l170
 12587  00487E                     l6418:
 12588                           
 12589                           ;config.c: 202: ADCON0bits.CHS=i;
 12590  00487E  C01A  F017         	movff	EnhancedRead@i,??_EnhancedRead
 12591  004882  4617               	rlncf	??_EnhancedRead,f,c
 12592  004884  4617               	rlncf	??_EnhancedRead,f,c
 12593  004886  50C2               	movf	4034,w,c	;volatile
 12594  004888  1817               	xorwf	??_EnhancedRead,w,c
 12595  00488A  0BC3               	andlw	-61
 12596  00488C  1817               	xorwf	??_EnhancedRead,w,c
 12597  00488E  6EC2               	movwf	4034,c	;volatile
 12598                           
 12599                           ;config.c: 203: ADCON0bits.GODONE=1;
 12600  004890  82C2               	bsf	4034,1,c	;volatile
 12601                           
 12602                           ;config.c: 204: while (ADCON0bits.GODONE==1) {}
 12603  004892  D000               	goto	l167
 12604  004894                     l167:
 12605  004894  B2C2               	btfsc	4034,1,c	;volatile
 12606  004896  D7FE               	goto	l167
 12607                           
 12608                           ;config.c: 205: aux=ADRESH*4;
 12609  004898  50C4               	movf	4036,w,c	;volatile
 12610  00489A  0D04               	mullw	4
 12611  00489C  CFF3 F018          	movff	prodl,EnhancedRead@aux
 12612  0048A0  CFF4 F019          	movff	prodh,EnhancedRead@aux+1
 12613                           
 12614                           ;config.c: 206: aux=aux+ADRESL/64;
 12615  0048A4  CFC3 F00F          	movff	4035,___awdiv@dividend	;volatile
 12616  0048A8  6A10               	clrf	___awdiv@dividend+1,c
 12617  0048AA  0E00               	movlw	0
 12618  0048AC  6E12               	movwf	___awdiv@divisor+1,c
 12619  0048AE  0E40               	movlw	64
 12620  0048B0  6E11               	movwf	___awdiv@divisor,c
 12621  0048B2  EC72  F022         	call	___awdiv	;wreg free
 12622  0048B6  5018               	movf	EnhancedRead@aux,w,c
 12623  0048B8  240F               	addwf	?___awdiv,w,c
 12624  0048BA  6E18               	movwf	EnhancedRead@aux,c
 12625  0048BC  5019               	movf	EnhancedRead@aux+1,w,c
 12626  0048BE  2010               	addwfc	?___awdiv+1,w,c
 12627  0048C0  6E19               	movwf	EnhancedRead@aux+1,c
 12628                           
 12629                           ;config.c: 207: V[i]=aux;
 12630  0048C2  501A               	movf	EnhancedRead@i,w,c
 12631  0048C4  0D02               	mullw	2
 12632  0048C6  0EC8               	movlw	low _V
 12633  0048C8  24F3               	addwf	prodl,w,c
 12634  0048CA  6ED9               	movwf	fsr2l,c
 12635  0048CC  0E02               	movlw	high _V
 12636  0048CE  20F4               	addwfc	prodh,w,c
 12637  0048D0  6EDA               	movwf	fsr2h,c
 12638  0048D2  C018  FFDE         	movff	EnhancedRead@aux,postinc2
 12639  0048D6  C019  FFDD         	movff	EnhancedRead@aux+1,postdec2
 12640  0048DA  2A1A               	incf	EnhancedRead@i,f,c
 12641  0048DC  D7CC               	goto	l6414
 12642  0048DE                     l170:
 12643  0048DE  0012               	return		;funcret
 12644  0048E0                     __end_of_EnhancedRead:
 12645                           	opt stack 0
 12646                           tblptru	equ	0xFF8
 12647                           tblptrh	equ	0xFF7
 12648                           tblptrl	equ	0xFF6
 12649                           tablat	equ	0xFF5
 12650                           prodh	equ	0xFF4
 12651                           prodl	equ	0xFF3
 12652                           intcon	equ	0xFF2
 12653                           intcon2	equ	0xFF1
 12654                           postinc0	equ	0xFEE
 12655                           wreg	equ	0xFE8
 12656                           postinc1	equ	0xFE6
 12657                           postdec1	equ	0xFE5
 12658                           fsr1h	equ	0xFE2
 12659                           fsr1l	equ	0xFE1
 12660                           indf2	equ	0xFDF
 12661                           postinc2	equ	0xFDE
 12662                           postdec2	equ	0xFDD
 12663                           plusw2	equ	0xFDB
 12664                           fsr2h	equ	0xFDA
 12665                           fsr2l	equ	0xFD9
 12666                           status	equ	0xFD8
 12667                           
 12668 ;; *************** function _Compute *****************
 12669 ;; Defined at:
 12670 ;;		line 90 in file "../main.c"
 12671 ;; Parameters:    Size  Location     Type
 12672 ;;		None
 12673 ;; Auto vars:     Size  Location     Type
 12674 ;;  x               2   69[BANK0 ] int 
 12675 ;; Return value:  Size  Location     Type
 12676 ;;		None               void
 12677 ;; Registers used:
 12678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12679 ;; Tracked objects:
 12680 ;;		On entry : 0/0
 12681 ;;		On exit  : 0/0
 12682 ;;		Unchanged: 0/0
 12683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12684 ;;      Params:         0       0       0       0       0       0       0       0       0
 12685 ;;      Locals:         0       8       0       0       0       0       0       0       0
 12686 ;;      Temps:          0       2       0       0       0       0       0       0       0
 12687 ;;      Totals:         0      10       0       0       0       0       0       0       0
 12688 ;;Total ram usage:       10 bytes
 12689 ;; Hardware stack levels used:    1
 12690 ;; Hardware stack levels required when called:    6
 12691 ;; This function calls:
 12692 ;;		___awtoft
 12693 ;;		___ftadd
 12694 ;;		___ftdiv
 12695 ;;		___ftneg
 12696 ;;		___wmul
 12697 ;;		_pow
 12698 ;; This function is called by:
 12699 ;;		_main
 12700 ;; This function uses a non-reentrant model
 12701 ;;
 12702                           
 12703                           	psect	text29
 12704  0030EA                     __ptext29:
 12705                           	opt stack 0
 12706  0030EA                     _Compute:
 12707                           	opt stack 24
 12708                           
 12709                           ;main.c: 91: int x;
 12710                           ;main.c: 92: for (x = 0;x < 101;x++){
 12711                           
 12712                           ;incstack = 0
 12713  0030EA  0E00               	movlw	0
 12714  0030EC  0100               	movlb	0	; () banked
 12715  0030EE  6FA6               	movwf	(Compute@x+1)& (0+255),b
 12716  0030F0  0E00               	movlw	0
 12717  0030F2  6FA5               	movwf	Compute@x& (0+255),b
 12718                           
 12719                           ; BSR set to: 0
 12720  0030F4  0100               	movlb	0	; () banked
 12721  0030F6  BFA6               	btfsc	(Compute@x+1)& (0+255),7,b
 12722  0030F8  D00A               	goto	l6438
 12723  0030FA  0100               	movlb	0	; () banked
 12724  0030FC  51A6               	movf	(Compute@x+1)& (0+255),w,b
 12725  0030FE  E106               	bnz	u7800
 12726  003100  0E65               	movlw	101
 12727  003102  0100               	movlb	0	; () banked
 12728  003104  5DA5               	subwf	Compute@x& (0+255),w,b
 12729  003106  B0D8               	btfsc	status,0,c
 12730  003108  D0EA               	goto	l267
 12731  00310A  D001               	goto	l6438
 12732  00310C                     u7800:
 12733                           
 12734                           ; BSR set to: 0
 12735  00310C  D0E8               	goto	l267
 12736  00310E                     l6438:
 12737                           
 12738                           ; BSR set to: 0
 12739                           ;main.c: 93: ACEL[x] = 1.0 - pow( 2.718 , - (double)(x)/(double)20.0);
 12740  00310E  0E00               	movlw	0
 12741  003110  6E24               	movwf	___ftdiv@f2,c
 12742  003112  0EA0               	movlw	160
 12743  003114  6E25               	movwf	___ftdiv@f2+1,c
 12744  003116  0E41               	movlw	65
 12745  003118  6E26               	movwf	___ftdiv@f2+2,c
 12746  00311A  C0A5  F01D         	movff	Compute@x,___awtoft@c
 12747  00311E  C0A6  F01E         	movff	Compute@x+1,___awtoft@c+1
 12748  003122  ECB5  F026         	call	___awtoft	;wreg free
 12749  003126  C01D  F03F         	movff	?___awtoft,___ftneg@f1
 12750  00312A  C01E  F040         	movff	?___awtoft+1,___ftneg@f1+1
 12751  00312E  C01F  F041         	movff	?___awtoft+2,___ftneg@f1+2
 12752  003132  EC36  F027         	call	___ftneg	;wreg free
 12753  003136  C03F  F021         	movff	?___ftneg,___ftdiv@f1
 12754  00313A  C040  F022         	movff	?___ftneg+1,___ftdiv@f1+1
 12755  00313E  C041  F023         	movff	?___ftneg+2,___ftdiv@f1+2
 12756  003142  ECEC  F01E         	call	___ftdiv	;wreg free
 12757  003146  C021  F09F         	movff	?___ftdiv,_Compute$2565
 12758  00314A  C022  F0A0         	movff	?___ftdiv+1,_Compute$2565+1
 12759  00314E  C023  F0A1         	movff	?___ftdiv+2,_Compute$2565+2
 12760                           
 12761                           ;main.c: 93: ACEL[x] = 1.0 - pow( 2.718 , - (double)(x)/(double)20.0);
 12762  003152  C09F  F08F         	movff	_Compute$2565,pow@y
 12763  003156  C0A0  F090         	movff	_Compute$2565+1,pow@y+1
 12764  00315A  C0A1  F091         	movff	_Compute$2565+2,pow@y+2
 12765  00315E  0EF4               	movlw	244
 12766  003160  0100               	movlb	0	; () banked
 12767  003162  6F8C               	movwf	pow@x& (0+255),b
 12768  003164  0E2D               	movlw	45
 12769  003166  0100               	movlb	0	; () banked
 12770  003168  6F8D               	movwf	(pow@x+1)& (0+255),b
 12771  00316A  0E40               	movlw	64
 12772  00316C  0100               	movlb	0	; () banked
 12773  00316E  6F8E               	movwf	(pow@x+2)& (0+255),b
 12774  003170  EC52  F01A         	call	_pow	;wreg free
 12775  003174  C08C  F0A2         	movff	?_pow,_Compute$2566
 12776  003178  C08D  F0A3         	movff	?_pow+1,_Compute$2566+1
 12777  00317C  C08E  F0A4         	movff	?_pow+2,_Compute$2566+2
 12778                           
 12779                           ;main.c: 93: ACEL[x] = 1.0 - pow( 2.718 , - (double)(x)/(double)20.0);
 12780  003180  C0A5  F017         	movff	Compute@x,___wmul@multiplier
 12781  003184  C0A6  F018         	movff	Compute@x+1,___wmul@multiplier+1
 12782  003188  0E00               	movlw	0
 12783  00318A  6E1A               	movwf	___wmul@multiplicand+1,c
 12784  00318C  0E03               	movlw	3
 12785  00318E  6E19               	movwf	___wmul@multiplicand,c
 12786  003190  EC10  F027         	call	___wmul	;wreg free
 12787  003194  0E4B               	movlw	low _ACEL
 12788  003196  2417               	addwf	?___wmul,w,c
 12789  003198  6ED9               	movwf	fsr2l,c
 12790  00319A  0E03               	movlw	high _ACEL
 12791  00319C  2018               	addwfc	?___wmul+1,w,c
 12792  00319E  6EDA               	movwf	fsr2h,c
 12793  0031A0  C0A2  F03F         	movff	_Compute$2566,___ftneg@f1
 12794  0031A4  C0A3  F040         	movff	_Compute$2566+1,___ftneg@f1+1
 12795  0031A8  C0A4  F041         	movff	_Compute$2566+2,___ftneg@f1+2
 12796  0031AC  EC36  F027         	call	___ftneg	;wreg free
 12797  0031B0  C03F  F060         	movff	?___ftneg,___ftadd@f1
 12798  0031B4  C040  F061         	movff	?___ftneg+1,___ftadd@f1+1
 12799  0031B8  C041  F062         	movff	?___ftneg+2,___ftadd@f1+2
 12800  0031BC  0E00               	movlw	0
 12801  0031BE  0100               	movlb	0	; () banked
 12802  0031C0  6F63               	movwf	___ftadd@f2& (0+255),b
 12803  0031C2  0E80               	movlw	128
 12804  0031C4  0100               	movlb	0	; () banked
 12805  0031C6  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
 12806  0031C8  0E3F               	movlw	63
 12807  0031CA  0100               	movlb	0	; () banked
 12808  0031CC  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
 12809  0031CE  EC28  F016         	call	___ftadd	;wreg free
 12810  0031D2  C060  FFDE         	movff	?___ftadd,postinc2
 12811  0031D6  C061  FFDE         	movff	?___ftadd+1,postinc2
 12812  0031DA  C062  FFDE         	movff	?___ftadd+2,postinc2
 12813                           
 12814                           ;main.c: 94: ICEL[x] = 1.0 - pow( 2.718 , - (double)(100-x)/(double)20.0);
 12815  0031DE  0E00               	movlw	0
 12816  0031E0  6E24               	movwf	___ftdiv@f2,c
 12817  0031E2  0EA0               	movlw	160
 12818  0031E4  6E25               	movwf	___ftdiv@f2+1,c
 12819  0031E6  0E41               	movlw	65
 12820  0031E8  6E26               	movwf	___ftdiv@f2+2,c
 12821  0031EA  C0A5  F09D         	movff	Compute@x,??_Compute
 12822  0031EE  C0A6  F09E         	movff	Compute@x+1,??_Compute+1
 12823  0031F2  0100               	movlb	0	; () banked
 12824  0031F4  1F9D               	comf	??_Compute& (0+255),f,b
 12825  0031F6  1F9E               	comf	(??_Compute+1)& (0+255),f,b
 12826  0031F8  4B9D               	infsnz	??_Compute& (0+255),f,b
 12827  0031FA  2B9E               	incf	(??_Compute+1)& (0+255),f,b
 12828  0031FC  0E64               	movlw	100
 12829  0031FE  0100               	movlb	0	; () banked
 12830  003200  259D               	addwf	??_Compute& (0+255),w,b
 12831  003202  6E1D               	movwf	___awtoft@c,c
 12832  003204  0E00               	movlw	0
 12833  003206  0100               	movlb	0	; () banked
 12834  003208  219E               	addwfc	(??_Compute+1)& (0+255),w,b
 12835  00320A  6E1E               	movwf	___awtoft@c+1,c
 12836  00320C  ECB5  F026         	call	___awtoft	;wreg free
 12837  003210  C01D  F03F         	movff	?___awtoft,___ftneg@f1
 12838  003214  C01E  F040         	movff	?___awtoft+1,___ftneg@f1+1
 12839  003218  C01F  F041         	movff	?___awtoft+2,___ftneg@f1+2
 12840  00321C  EC36  F027         	call	___ftneg	;wreg free
 12841  003220  C03F  F021         	movff	?___ftneg,___ftdiv@f1
 12842  003224  C040  F022         	movff	?___ftneg+1,___ftdiv@f1+1
 12843  003228  C041  F023         	movff	?___ftneg+2,___ftdiv@f1+2
 12844  00322C  ECEC  F01E         	call	___ftdiv	;wreg free
 12845  003230  C021  F09F         	movff	?___ftdiv,_Compute$2565
 12846  003234  C022  F0A0         	movff	?___ftdiv+1,_Compute$2565+1
 12847  003238  C023  F0A1         	movff	?___ftdiv+2,_Compute$2565+2
 12848                           
 12849                           ;main.c: 94: ICEL[x] = 1.0 - pow( 2.718 , - (double)(100-x)/(double)20.0);
 12850  00323C  C09F  F08F         	movff	_Compute$2565,pow@y
 12851  003240  C0A0  F090         	movff	_Compute$2565+1,pow@y+1
 12852  003244  C0A1  F091         	movff	_Compute$2565+2,pow@y+2
 12853  003248  0EF4               	movlw	244
 12854  00324A  0100               	movlb	0	; () banked
 12855  00324C  6F8C               	movwf	pow@x& (0+255),b
 12856  00324E  0E2D               	movlw	45
 12857  003250  0100               	movlb	0	; () banked
 12858  003252  6F8D               	movwf	(pow@x+1)& (0+255),b
 12859  003254  0E40               	movlw	64
 12860  003256  0100               	movlb	0	; () banked
 12861  003258  6F8E               	movwf	(pow@x+2)& (0+255),b
 12862  00325A  EC52  F01A         	call	_pow	;wreg free
 12863  00325E  C08C  F0A2         	movff	?_pow,_Compute$2566
 12864  003262  C08D  F0A3         	movff	?_pow+1,_Compute$2566+1
 12865  003266  C08E  F0A4         	movff	?_pow+2,_Compute$2566+2
 12866                           
 12867                           ;main.c: 94: ICEL[x] = 1.0 - pow( 2.718 , - (double)(100-x)/(double)20.0);
 12868  00326A  C0A5  F017         	movff	Compute@x,___wmul@multiplier
 12869  00326E  C0A6  F018         	movff	Compute@x+1,___wmul@multiplier+1
 12870  003272  0E00               	movlw	0
 12871  003274  6E1A               	movwf	___wmul@multiplicand+1,c
 12872  003276  0E03               	movlw	3
 12873  003278  6E19               	movwf	___wmul@multiplicand,c
 12874  00327A  EC10  F027         	call	___wmul	;wreg free
 12875  00327E  0E86               	movlw	low _ICEL
 12876  003280  2417               	addwf	?___wmul,w,c
 12877  003282  6ED9               	movwf	fsr2l,c
 12878  003284  0E04               	movlw	high _ICEL
 12879  003286  2018               	addwfc	?___wmul+1,w,c
 12880  003288  6EDA               	movwf	fsr2h,c
 12881  00328A  C0A2  F03F         	movff	_Compute$2566,___ftneg@f1
 12882  00328E  C0A3  F040         	movff	_Compute$2566+1,___ftneg@f1+1
 12883  003292  C0A4  F041         	movff	_Compute$2566+2,___ftneg@f1+2
 12884  003296  EC36  F027         	call	___ftneg	;wreg free
 12885  00329A  C03F  F060         	movff	?___ftneg,___ftadd@f1
 12886  00329E  C040  F061         	movff	?___ftneg+1,___ftadd@f1+1
 12887  0032A2  C041  F062         	movff	?___ftneg+2,___ftadd@f1+2
 12888  0032A6  0E00               	movlw	0
 12889  0032A8  0100               	movlb	0	; () banked
 12890  0032AA  6F63               	movwf	___ftadd@f2& (0+255),b
 12891  0032AC  0E80               	movlw	128
 12892  0032AE  0100               	movlb	0	; () banked
 12893  0032B0  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
 12894  0032B2  0E3F               	movlw	63
 12895  0032B4  0100               	movlb	0	; () banked
 12896  0032B6  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
 12897  0032B8  EC28  F016         	call	___ftadd	;wreg free
 12898  0032BC  C060  FFDE         	movff	?___ftadd,postinc2
 12899  0032C0  C061  FFDE         	movff	?___ftadd+1,postinc2
 12900  0032C4  C062  FFDE         	movff	?___ftadd+2,postinc2
 12901  0032C8  0100               	movlb	0	; () banked
 12902  0032CA  4BA5               	infsnz	Compute@x& (0+255),f,b
 12903  0032CC  2BA6               	incf	(Compute@x+1)& (0+255),f,b
 12904                           
 12905                           ; BSR set to: 0
 12906  0032CE  0100               	movlb	0	; () banked
 12907  0032D0  BFA6               	btfsc	(Compute@x+1)& (0+255),7,b
 12908  0032D2  D71D               	goto	l6438
 12909  0032D4  0100               	movlb	0	; () banked
 12910  0032D6  51A6               	movf	(Compute@x+1)& (0+255),w,b
 12911  0032D8  E102               	bnz	l267
 12912  0032DA  D712               	goto	L19
 12913  0032DC  D000               	goto	l267
 12914  0032DE                     l267:
 12915                           
 12916                           ; BSR set to: 0
 12917  0032DE  0012               	return		;funcret
 12918  0032E0                     __end_of_Compute:
 12919                           	opt stack 0
 12920                           tblptru	equ	0xFF8
 12921                           tblptrh	equ	0xFF7
 12922                           tblptrl	equ	0xFF6
 12923                           tablat	equ	0xFF5
 12924                           prodh	equ	0xFF4
 12925                           prodl	equ	0xFF3
 12926                           intcon	equ	0xFF2
 12927                           intcon2	equ	0xFF1
 12928                           postinc0	equ	0xFEE
 12929                           wreg	equ	0xFE8
 12930                           postinc1	equ	0xFE6
 12931                           postdec1	equ	0xFE5
 12932                           fsr1h	equ	0xFE2
 12933                           fsr1l	equ	0xFE1
 12934                           indf2	equ	0xFDF
 12935                           postinc2	equ	0xFDE
 12936                           postdec2	equ	0xFDD
 12937                           plusw2	equ	0xFDB
 12938                           fsr2h	equ	0xFDA
 12939                           fsr2l	equ	0xFD9
 12940                           status	equ	0xFD8
 12941                           
 12942 ;; *************** function _pow *****************
 12943 ;; Defined at:
 12944 ;;		line 5 in file "/opt/microchip/xc8/v1.34/sources/common/pow.c"
 12945 ;; Parameters:    Size  Location     Type
 12946 ;;  x               3   44[BANK0 ] int 
 12947 ;;  y               3   47[BANK0 ] int 
 12948 ;; Auto vars:     Size  Location     Type
 12949 ;;  yi              4   57[BANK0 ] unsigned long 
 12950 ;;  sign            1   56[BANK0 ] unsigned char 
 12951 ;; Return value:  Size  Location     Type
 12952 ;;                  3   44[BANK0 ] unsigned char 
 12953 ;; Registers used:
 12954 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12955 ;; Tracked objects:
 12956 ;;		On entry : 0/0
 12957 ;;		On exit  : 0/0
 12958 ;;		Unchanged: 0/0
 12959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12960 ;;      Params:         0       6       0       0       0       0       0       0       0
 12961 ;;      Locals:         0      11       0       0       0       0       0       0       0
 12962 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12963 ;;      Totals:         0      17       0       0       0       0       0       0       0
 12964 ;;Total ram usage:       17 bytes
 12965 ;; Hardware stack levels used:    1
 12966 ;; Hardware stack levels required when called:    5
 12967 ;; This function calls:
 12968 ;;		___ftge
 12969 ;;		___ftmul
 12970 ;;		___ftneg
 12971 ;;		___fttol
 12972 ;;		___lltoft
 12973 ;;		_exp
 12974 ;;		_log
 12975 ;; This function is called by:
 12976 ;;		_Compute
 12977 ;; This function uses a non-reentrant model
 12978 ;;
 12979                           
 12980                           	psect	text30
 12981  0034A4                     __ptext30:
 12982                           	opt stack 0
 12983  0034A4                     _pow:
 12984                           	opt stack 24
 12985                           
 12986                           ; BSR set to: 0
 12987                           ;incstack = 0
 12988  0034A4  0E00               	movlw	0
 12989  0034A6  0100               	movlb	0	; () banked
 12990  0034A8  6F98               	movwf	pow@sign& (0+255),b
 12991                           
 12992                           ; BSR set to: 0
 12993  0034AA  0100               	movlb	0	; () banked
 12994  0034AC  518C               	movf	pow@x& (0+255),w,b
 12995  0034AE  0100               	movlb	0	; () banked
 12996  0034B0  118D               	iorwf	(pow@x+1)& (0+255),w,b
 12997  0034B2  0100               	movlb	0	; () banked
 12998  0034B4  118E               	iorwf	(pow@x+2)& (0+255),w,b
 12999  0034B6  A4D8               	btfss	status,2,c
 13000  0034B8  D016               	goto	l6260
 13001                           
 13002                           ; BSR set to: 0
 13003  0034BA  0E00               	movlw	0
 13004  0034BC  0100               	movlb	0	; () banked
 13005  0034BE  6F6C               	movwf	___ftge@ff1& (0+255),b
 13006  0034C0  0E00               	movlw	0
 13007  0034C2  0100               	movlb	0	; () banked
 13008  0034C4  6F6D               	movwf	(___ftge@ff1+1)& (0+255),b
 13009  0034C6  0E00               	movlw	0
 13010  0034C8  0100               	movlb	0	; () banked
 13011  0034CA  6F6E               	movwf	(___ftge@ff1+2)& (0+255),b
 13012  0034CC  C08F  F06F         	movff	pow@y,___ftge@ff2
 13013  0034D0  C090  F070         	movff	pow@y+1,___ftge@ff2+1
 13014  0034D4  C091  F071         	movff	pow@y+2,___ftge@ff2+2
 13015  0034D8  EC39  F020         	call	___ftge	;wreg free
 13016  0034DC  0100               	movlb	0	; () banked
 13017  0034DE  A0D8               	btfss	status,0,c
 13018  0034E0  D042               	goto	L22
 13019  0034E2  D03C               	goto	u7630
 13020                           
 13021                           ; BSR set to: 0
 13022                           
 13023                           ; BSR set to: 0
 13024  0034E4  D0A8               	goto	l1232
 13025  0034E6                     l6260:
 13026                           
 13027                           ; BSR set to: 0
 13028  0034E6  0100               	movlb	0	; () banked
 13029  0034E8  518F               	movf	pow@y& (0+255),w,b
 13030  0034EA  0100               	movlb	0	; () banked
 13031  0034EC  1190               	iorwf	(pow@y+1)& (0+255),w,b
 13032  0034EE  0100               	movlb	0	; () banked
 13033  0034F0  1191               	iorwf	(pow@y+2)& (0+255),w,b
 13034  0034F2  A4D8               	btfss	status,2,c
 13035  0034F4  D009               	goto	l6266
 13036                           
 13037                           ; BSR set to: 0
 13038  0034F6  0E00               	movlw	0
 13039  0034F8  0100               	movlb	0	; () banked
 13040  0034FA  6F8C               	movwf	?_pow& (0+255),b
 13041  0034FC  0E80               	movlw	128
 13042  0034FE  0100               	movlb	0	; () banked
 13043  003500  6F8D               	movwf	(?_pow+1)& (0+255),b
 13044  003502  0E3F               	movlw	63
 13045  003504  D037               	goto	L21
 13046                           
 13047                           ; BSR set to: 0
 13048  003506  D097               	goto	l1232
 13049  003508                     l6266:
 13050                           
 13051                           ; BSR set to: 0
 13052  003508  0100               	movlb	0	; () banked
 13053  00350A  AF8E               	btfss	(pow@x+2)& (0+255),7,b
 13054  00350C  D04A               	goto	l6278
 13055                           
 13056                           ; BSR set to: 0
 13057  00350E  C08F  F06C         	movff	pow@y,___fttol@f1
 13058  003512  C090  F06D         	movff	pow@y+1,___fttol@f1+1
 13059  003516  C091  F06E         	movff	pow@y+2,___fttol@f1+2
 13060  00351A  EC1C  F01B         	call	___fttol	;wreg free
 13061  00351E  C06C  F099         	movff	?___fttol,pow@yi
 13062  003522  C06D  F09A         	movff	?___fttol+1,pow@yi+1
 13063  003526  C06E  F09B         	movff	?___fttol+2,pow@yi+2
 13064  00352A  C06F  F09C         	movff	?___fttol+3,pow@yi+3
 13065  00352E  C099  F017         	movff	pow@yi,___lltoft@c
 13066  003532  C09A  F018         	movff	pow@yi+1,___lltoft@c+1
 13067  003536  C09B  F019         	movff	pow@yi+2,___lltoft@c+2
 13068  00353A  C09C  F01A         	movff	pow@yi+3,___lltoft@c+3
 13069  00353E  ECD3  F024         	call	___lltoft	;wreg free
 13070  003542  0100               	movlb	0	; () banked
 13071  003544  518F               	movf	pow@y& (0+255),w,b
 13072  003546  1817               	xorwf	?___lltoft,w,c
 13073  003548  E109               	bnz	u7630
 13074  00354A  0100               	movlb	0	; () banked
 13075  00354C  5190               	movf	(pow@y+1)& (0+255),w,b
 13076  00354E  1818               	xorwf	?___lltoft+1,w,c
 13077  003550  E105               	bnz	u7630
 13078  003552  0100               	movlb	0	; () banked
 13079  003554  5191               	movf	(pow@y+2)& (0+255),w,b
 13080  003556  1819               	xorwf	?___lltoft+2,w,c
 13081  003558  B4D8               	btfsc	status,2,c
 13082  00355A  D00F               	goto	l6274
 13083  00355C                     u7630:
 13084                           
 13085                           ; BSR set to: 0
 13086  00355C  0E00               	movlw	0
 13087  00355E  0101               	movlb	1	; () banked
 13088  003560  6F87               	movwf	(_errno+1)& (0+255),b
 13089  003562  0E21               	movlw	33
 13090  003564  6F86               	movwf	_errno& (0+255),b
 13091  003566                     L22:
 13092  003566  0E00               	movlw	0
 13093  003568  0100               	movlb	0	; () banked
 13094  00356A  6F8C               	movwf	?_pow& (0+255),b
 13095  00356C  0E00               	movlw	0
 13096  00356E  0100               	movlb	0	; () banked
 13097  003570  6F8D               	movwf	(?_pow+1)& (0+255),b
 13098  003572  0E00               	movlw	0
 13099  003574                     L21:
 13100  003574  0100               	movlb	0	; () banked
 13101  003576  6F8E               	movwf	(?_pow+2)& (0+255),b
 13102                           
 13103                           ; BSR set to: 0
 13104  003578  D05E               	goto	l1232
 13105  00357A                     l6274:
 13106                           
 13107                           ; BSR set to: 0
 13108  00357A  0100               	movlb	0	; () banked
 13109  00357C  5199               	movf	pow@yi& (0+255),w,b
 13110  00357E  0B01               	andlw	1
 13111  003580  0100               	movlb	0	; () banked
 13112  003582  6F98               	movwf	pow@sign& (0+255),b
 13113                           
 13114                           ; BSR set to: 0
 13115  003584  C08C  F03F         	movff	pow@x,___ftneg@f1
 13116  003588  C08D  F040         	movff	pow@x+1,___ftneg@f1+1
 13117  00358C  C08E  F041         	movff	pow@x+2,___ftneg@f1+2
 13118  003590  EC36  F027         	call	___ftneg	;wreg free
 13119  003594  C03F  F08C         	movff	?___ftneg,pow@x
 13120  003598  C040  F08D         	movff	?___ftneg+1,pow@x+1
 13121  00359C  C041  F08E         	movff	?___ftneg+2,pow@x+2
 13122  0035A0  D000               	goto	l6278
 13123  0035A2                     l6278:
 13124  0035A2  C08C  F076         	movff	pow@x,log@x
 13125  0035A6  C08D  F077         	movff	pow@x+1,log@x+1
 13126  0035AA  C08E  F078         	movff	pow@x+2,log@x+2
 13127  0035AE  ECB5  F01B         	call	_log	;wreg free
 13128  0035B2  C076  F092         	movff	?_log,_pow$2576
 13129  0035B6  C077  F093         	movff	?_log+1,_pow$2576+1
 13130  0035BA  C078  F094         	movff	?_log+2,_pow$2576+2
 13131  0035BE  C092  F030         	movff	_pow$2576,___ftmul@f1
 13132  0035C2  C093  F031         	movff	_pow$2576+1,___ftmul@f1+1
 13133  0035C6  C094  F032         	movff	_pow$2576+2,___ftmul@f1+2
 13134  0035CA  C08F  F033         	movff	pow@y,___ftmul@f2
 13135  0035CE  C090  F034         	movff	pow@y+1,___ftmul@f2+1
 13136  0035D2  C091  F035         	movff	pow@y+2,___ftmul@f2+2
 13137  0035D6  EC70  F01E         	call	___ftmul	;wreg free
 13138  0035DA  C030  F095         	movff	?___ftmul,_pow$2577
 13139  0035DE  C031  F096         	movff	?___ftmul+1,_pow$2577+1
 13140  0035E2  C032  F097         	movff	?___ftmul+2,_pow$2577+2
 13141  0035E6  C095  F083         	movff	_pow$2577,exp@x
 13142  0035EA  C096  F084         	movff	_pow$2577+1,exp@x+1
 13143  0035EE  C097  F085         	movff	_pow$2577+2,exp@x+2
 13144  0035F2  EC67  F017         	call	_exp	;wreg free
 13145  0035F6  C083  F08C         	movff	?_exp,pow@x
 13146  0035FA  C084  F08D         	movff	?_exp+1,pow@x+1
 13147  0035FE  C085  F08E         	movff	?_exp+2,pow@x+2
 13148  003602  0100               	movlb	0	; () banked
 13149  003604  5198               	movf	pow@sign& (0+255),w,b
 13150  003606  0100               	movlb	0	; () banked
 13151  003608  B4D8               	btfsc	status,2,c
 13152  00360A  D00F               	goto	l1236
 13153                           
 13154                           ; BSR set to: 0
 13155  00360C  C08C  F03F         	movff	pow@x,___ftneg@f1
 13156  003610  C08D  F040         	movff	pow@x+1,___ftneg@f1+1
 13157  003614  C08E  F041         	movff	pow@x+2,___ftneg@f1+2
 13158  003618  EC36  F027         	call	___ftneg	;wreg free
 13159  00361C  C03F  F08C         	movff	?___ftneg,?_pow
 13160  003620  C040  F08D         	movff	?___ftneg+1,?_pow+1
 13161  003624  C041  F08E         	movff	?___ftneg+2,?_pow+2
 13162  003628  D006               	goto	l1232
 13163  00362A                     l1236:
 13164                           
 13165                           ; BSR set to: 0
 13166  00362A  C08C  F08C         	movff	pow@x,?_pow
 13167  00362E  C08D  F08D         	movff	pow@x+1,?_pow+1
 13168  003632  C08E  F08E         	movff	pow@x+2,?_pow+2
 13169  003636                     l1232:
 13170  003636  0012               	return		;funcret
 13171  003638                     __end_of_pow:
 13172                           	opt stack 0
 13173                           tblptru	equ	0xFF8
 13174                           tblptrh	equ	0xFF7
 13175                           tblptrl	equ	0xFF6
 13176                           tablat	equ	0xFF5
 13177                           prodh	equ	0xFF4
 13178                           prodl	equ	0xFF3
 13179                           intcon	equ	0xFF2
 13180                           intcon2	equ	0xFF1
 13181                           postinc0	equ	0xFEE
 13182                           wreg	equ	0xFE8
 13183                           postinc1	equ	0xFE6
 13184                           postdec1	equ	0xFE5
 13185                           fsr1h	equ	0xFE2
 13186                           fsr1l	equ	0xFE1
 13187                           indf2	equ	0xFDF
 13188                           postinc2	equ	0xFDE
 13189                           postdec2	equ	0xFDD
 13190                           plusw2	equ	0xFDB
 13191                           fsr2h	equ	0xFDA
 13192                           fsr2l	equ	0xFD9
 13193                           status	equ	0xFD8
 13194                           
 13195 ;; *************** function _log *****************
 13196 ;; Defined at:
 13197 ;;		line 5 in file "/opt/microchip/xc8/v1.34/sources/common/log.c"
 13198 ;; Parameters:    Size  Location     Type
 13199 ;;  x               3   22[BANK0 ] unsigned char 
 13200 ;; Auto vars:     Size  Location     Type
 13201 ;;  exponent        2   25[BANK0 ] int 
 13202 ;; Return value:  Size  Location     Type
 13203 ;;                  3   22[BANK0 ] int 
 13204 ;; Registers used:
 13205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13206 ;; Tracked objects:
 13207 ;;		On entry : 0/0
 13208 ;;		On exit  : 0/0
 13209 ;;		Unchanged: 0/0
 13210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13211 ;;      Params:         0       3       0       0       0       0       0       0       0
 13212 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13213 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13214 ;;      Totals:         0       5       0       0       0       0       0       0       0
 13215 ;;Total ram usage:        5 bytes
 13216 ;; Hardware stack levels used:    1
 13217 ;; Hardware stack levels required when called:    4
 13218 ;; This function calls:
 13219 ;;		___awtoft
 13220 ;;		___ftadd
 13221 ;;		___ftmul
 13222 ;;		_eval_poly
 13223 ;;		_frexp
 13224 ;; This function is called by:
 13225 ;;		_pow
 13226 ;; This function uses a non-reentrant model
 13227 ;;
 13228                           
 13229                           	psect	text31
 13230  00376A                     __ptext31:
 13231                           	opt stack 0
 13232  00376A                     _log:
 13233                           	opt stack 24
 13234                           
 13235                           ;incstack = 0
 13236  00376A  0100               	movlb	0	; () banked
 13237  00376C  AF78               	btfss	(log@x+2)& (0+255),7,b
 13238  00376E  D006               	goto	l6058
 13239                           
 13240                           ; BSR set to: 0
 13241  003770  0E00               	movlw	0
 13242  003772  0101               	movlb	1	; () banked
 13243  003774  6F87               	movwf	(_errno+1)& (0+255),b
 13244  003776  0E21               	movlw	33
 13245  003778  D00D               	goto	L23
 13246                           
 13247                           ; BSR set to: 0
 13248  00377A  D08E               	goto	l1294
 13249  00377C                     l6058:
 13250                           
 13251                           ; BSR set to: 0
 13252  00377C  0100               	movlb	0	; () banked
 13253  00377E  5176               	movf	log@x& (0+255),w,b
 13254  003780  0100               	movlb	0	; () banked
 13255  003782  1177               	iorwf	(log@x+1)& (0+255),w,b
 13256  003784  0100               	movlb	0	; () banked
 13257  003786  1178               	iorwf	(log@x+2)& (0+255),w,b
 13258  003788  A4D8               	btfss	status,2,c
 13259  00378A  D00F               	goto	l6064
 13260                           
 13261                           ; BSR set to: 0
 13262  00378C  0E00               	movlw	0
 13263  00378E  0101               	movlb	1	; () banked
 13264  003790  6F87               	movwf	(_errno+1)& (0+255),b
 13265  003792  0E22               	movlw	34
 13266  003794                     L23:
 13267  003794  6F86               	movwf	_errno& (0+255),b
 13268  003796  0E00               	movlw	0
 13269  003798  0100               	movlb	0	; () banked
 13270  00379A  6F76               	movwf	?_log& (0+255),b
 13271  00379C  0E00               	movlw	0
 13272  00379E  0100               	movlb	0	; () banked
 13273  0037A0  6F77               	movwf	(?_log+1)& (0+255),b
 13274  0037A2  0E00               	movlw	0
 13275  0037A4  0100               	movlb	0	; () banked
 13276  0037A6  6F78               	movwf	(?_log+2)& (0+255),b
 13277                           
 13278                           ; BSR set to: 0
 13279  0037A8  D077               	goto	l1294
 13280  0037AA                     l6064:
 13281                           
 13282                           ; BSR set to: 0
 13283  0037AA  0E00               	movlw	0
 13284  0037AC  6E33               	movwf	___ftmul@f2,c
 13285  0037AE  0E00               	movlw	0
 13286  0037B0  6E34               	movwf	___ftmul@f2+1,c
 13287  0037B2  0E40               	movlw	64
 13288  0037B4  6E35               	movwf	___ftmul@f2+2,c
 13289  0037B6  0E79               	movlw	low log@exponent
 13290  0037B8  6E12               	movwf	frexp@eptr,c
 13291  0037BA  0E00               	movlw	high log@exponent
 13292  0037BC  6E13               	movwf	frexp@eptr+1,c
 13293  0037BE  C076  F00F         	movff	log@x,frexp@value
 13294  0037C2  C077  F010         	movff	log@x+1,frexp@value+1
 13295  0037C6  C078  F011         	movff	log@x+2,frexp@value+2
 13296  0037CA  EC07  F023         	call	_frexp	;wreg free
 13297  0037CE  C00F  F030         	movff	?_frexp,___ftmul@f1
 13298  0037D2  C010  F031         	movff	?_frexp+1,___ftmul@f1+1
 13299  0037D6  C011  F032         	movff	?_frexp+2,___ftmul@f1+2
 13300  0037DA  EC70  F01E         	call	___ftmul	;wreg free
 13301  0037DE  C030  F060         	movff	?___ftmul,___ftadd@f1
 13302  0037E2  C031  F061         	movff	?___ftmul+1,___ftadd@f1+1
 13303  0037E6  C032  F062         	movff	?___ftmul+2,___ftadd@f1+2
 13304  0037EA  0E00               	movlw	0
 13305  0037EC  0100               	movlb	0	; () banked
 13306  0037EE  6F63               	movwf	___ftadd@f2& (0+255),b
 13307  0037F0  0E80               	movlw	128
 13308  0037F2  0100               	movlb	0	; () banked
 13309  0037F4  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
 13310  0037F6  0EBF               	movlw	191
 13311  0037F8  0100               	movlb	0	; () banked
 13312  0037FA  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
 13313  0037FC  EC28  F016         	call	___ftadd	;wreg free
 13314  003800  C060  F076         	movff	?___ftadd,log@x
 13315  003804  C061  F077         	movff	?___ftadd+1,log@x+1
 13316  003808  C062  F078         	movff	?___ftadd+2,log@x+2
 13317  00380C  0100               	movlb	0	; () banked
 13318  00380E  0779               	decf	log@exponent& (0+255),f,b
 13319  003810  A0D8               	btfss	status,0,c
 13320  003812  077A               	decf	(log@exponent+1)& (0+255),f,b
 13321                           
 13322                           ; BSR set to: 0
 13323  003814  C076  F06C         	movff	log@x,eval_poly@x
 13324  003818  C077  F06D         	movff	log@x+1,eval_poly@x+1
 13325  00381C  C078  F06E         	movff	log@x+2,eval_poly@x+2
 13326  003820  0E99               	movlw	low log@coeff
 13327  003822  0100               	movlb	0	; () banked
 13328  003824  6F6F               	movwf	eval_poly@d& (0+255),b
 13329  003826  0E7A               	movlw	high log@coeff
 13330  003828  0100               	movlb	0	; () banked
 13331  00382A  6F70               	movwf	(eval_poly@d+1)& (0+255),b
 13332  00382C  0E00               	movlw	0
 13333  00382E  0100               	movlb	0	; () banked
 13334  003830  6F72               	movwf	(eval_poly@n+1)& (0+255),b
 13335  003832  0E08               	movlw	8
 13336  003834  6F71               	movwf	eval_poly@n& (0+255),b
 13337  003836  ECCC  F01F         	call	_eval_poly	;wreg free
 13338  00383A  C06C  F076         	movff	?_eval_poly,log@x
 13339  00383E  C06D  F077         	movff	?_eval_poly+1,log@x+1
 13340  003842  C06E  F078         	movff	?_eval_poly+2,log@x+2
 13341  003846  0E72               	movlw	114
 13342  003848  6E33               	movwf	___ftmul@f2,c
 13343  00384A  0E31               	movlw	49
 13344  00384C  6E34               	movwf	___ftmul@f2+1,c
 13345  00384E  0E3F               	movlw	63
 13346  003850  6E35               	movwf	___ftmul@f2+2,c
 13347  003852  C079  F01D         	movff	log@exponent,___awtoft@c
 13348  003856  C07A  F01E         	movff	log@exponent+1,___awtoft@c+1
 13349  00385A  ECB5  F026         	call	___awtoft	;wreg free
 13350  00385E  C01D  F030         	movff	?___awtoft,___ftmul@f1
 13351  003862  C01E  F031         	movff	?___awtoft+1,___ftmul@f1+1
 13352  003866  C01F  F032         	movff	?___awtoft+2,___ftmul@f1+2
 13353  00386A  EC70  F01E         	call	___ftmul	;wreg free
 13354  00386E  C030  F060         	movff	?___ftmul,___ftadd@f1
 13355  003872  C031  F061         	movff	?___ftmul+1,___ftadd@f1+1
 13356  003876  C032  F062         	movff	?___ftmul+2,___ftadd@f1+2
 13357  00387A  C076  F063         	movff	log@x,___ftadd@f2
 13358  00387E  C077  F064         	movff	log@x+1,___ftadd@f2+1
 13359  003882  C078  F065         	movff	log@x+2,___ftadd@f2+2
 13360  003886  EC28  F016         	call	___ftadd	;wreg free
 13361  00388A  C060  F076         	movff	?___ftadd,?_log
 13362  00388E  C061  F077         	movff	?___ftadd+1,?_log+1
 13363  003892  C062  F078         	movff	?___ftadd+2,?_log+2
 13364  003896  D000               	goto	l1294
 13365  003898                     l1294:
 13366  003898  0012               	return		;funcret
 13367  00389A                     __end_of_log:
 13368                           	opt stack 0
 13369                           tblptru	equ	0xFF8
 13370                           tblptrh	equ	0xFF7
 13371                           tblptrl	equ	0xFF6
 13372                           tablat	equ	0xFF5
 13373                           prodh	equ	0xFF4
 13374                           prodl	equ	0xFF3
 13375                           intcon	equ	0xFF2
 13376                           intcon2	equ	0xFF1
 13377                           postinc0	equ	0xFEE
 13378                           wreg	equ	0xFE8
 13379                           postinc1	equ	0xFE6
 13380                           postdec1	equ	0xFE5
 13381                           fsr1h	equ	0xFE2
 13382                           fsr1l	equ	0xFE1
 13383                           indf2	equ	0xFDF
 13384                           postinc2	equ	0xFDE
 13385                           postdec2	equ	0xFDD
 13386                           plusw2	equ	0xFDB
 13387                           fsr2h	equ	0xFDA
 13388                           fsr2l	equ	0xFD9
 13389                           status	equ	0xFD8
 13390                           
 13391 ;; *************** function _exp *****************
 13392 ;; Defined at:
 13393 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/common/exp.c"
 13394 ;; Parameters:    Size  Location     Type
 13395 ;;  x               3   35[BANK0 ] int 
 13396 ;; Auto vars:     Size  Location     Type
 13397 ;;  exponent        2   41[BANK0 ] int 
 13398 ;;  sign            1   43[BANK0 ] unsigned char 
 13399 ;; Return value:  Size  Location     Type
 13400 ;;                  3   35[BANK0 ] unsigned char 
 13401 ;; Registers used:
 13402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13403 ;; Tracked objects:
 13404 ;;		On entry : 0/0
 13405 ;;		On exit  : 0/0
 13406 ;;		Unchanged: 0/0
 13407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13408 ;;      Params:         0       3       0       0       0       0       0       0       0
 13409 ;;      Locals:         0       6       0       0       0       0       0       0       0
 13410 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13411 ;;      Totals:         0       9       0       0       0       0       0       0       0
 13412 ;;Total ram usage:        9 bytes
 13413 ;; Hardware stack levels used:    1
 13414 ;; Hardware stack levels required when called:    4
 13415 ;; This function calls:
 13416 ;;		___awtoft
 13417 ;;		___ftdiv
 13418 ;;		___ftge
 13419 ;;		___ftmul
 13420 ;;		___ftneg
 13421 ;;		___ftsub
 13422 ;;		___fttol
 13423 ;;		_eval_poly
 13424 ;;		_floor
 13425 ;;		_ldexp
 13426 ;; This function is called by:
 13427 ;;		_pow
 13428 ;; This function uses a non-reentrant model
 13429 ;;
 13430                           
 13431                           	psect	text32
 13432  002ECE                     __ptext32:
 13433                           	opt stack 0
 13434  002ECE                     _exp:
 13435                           	opt stack 24
 13436                           
 13437                           ;incstack = 0
 13438  002ECE  0100               	movlb	0	; () banked
 13439  002ED0  5183               	movf	exp@x& (0+255),w,b
 13440  002ED2  0100               	movlb	0	; () banked
 13441  002ED4  1184               	iorwf	(exp@x+1)& (0+255),w,b
 13442  002ED6  0100               	movlb	0	; () banked
 13443  002ED8  1185               	iorwf	(exp@x+2)& (0+255),w,b
 13444  002EDA  A4D8               	btfss	status,2,c
 13445  002EDC  D009               	goto	l6080
 13446                           
 13447                           ; BSR set to: 0
 13448  002EDE  0E00               	movlw	0
 13449  002EE0  0100               	movlb	0	; () banked
 13450  002EE2  6F83               	movwf	?_exp& (0+255),b
 13451  002EE4  0E80               	movlw	128
 13452  002EE6  0100               	movlb	0	; () banked
 13453  002EE8  6F84               	movwf	(?_exp+1)& (0+255),b
 13454  002EEA  0E3F               	movlw	63
 13455  002EEC  D03D               	goto	L25
 13456                           
 13457                           ; BSR set to: 0
 13458  002EEE  D0FC               	goto	l1252
 13459  002EF0                     l6080:
 13460                           
 13461                           ; BSR set to: 0
 13462  002EF0  0E72               	movlw	114
 13463  002EF2  0100               	movlb	0	; () banked
 13464  002EF4  6F6C               	movwf	___ftge@ff1& (0+255),b
 13465  002EF6  0E31               	movlw	49
 13466  002EF8  0100               	movlb	0	; () banked
 13467  002EFA  6F6D               	movwf	(___ftge@ff1+1)& (0+255),b
 13468  002EFC  0E44               	movlw	68
 13469  002EFE  0100               	movlb	0	; () banked
 13470  002F00  6F6E               	movwf	(___ftge@ff1+2)& (0+255),b
 13471  002F02  C083  F06F         	movff	exp@x,___ftge@ff2
 13472  002F06  C084  F070         	movff	exp@x+1,___ftge@ff2+1
 13473  002F0A  C085  F071         	movff	exp@x+2,___ftge@ff2+2
 13474  002F0E  EC39  F020         	call	___ftge	;wreg free
 13475  002F12  0100               	movlb	0	; () banked
 13476  002F14  B0D8               	btfsc	status,0,c
 13477  002F16  D00E               	goto	l6086
 13478                           
 13479                           ; BSR set to: 0
 13480  002F18  0E00               	movlw	0
 13481  002F1A  0101               	movlb	1	; () banked
 13482  002F1C  6F87               	movwf	(_errno+1)& (0+255),b
 13483  002F1E  0E22               	movlw	34
 13484  002F20  6F86               	movwf	_errno& (0+255),b
 13485  002F22  0EFF               	movlw	255
 13486  002F24  0100               	movlb	0	; () banked
 13487  002F26  6F83               	movwf	?_exp& (0+255),b
 13488  002F28  0E7F               	movlw	127
 13489  002F2A  0100               	movlb	0	; () banked
 13490  002F2C  6F84               	movwf	(?_exp+1)& (0+255),b
 13491  002F2E  0E7F               	movlw	127
 13492  002F30  D01B               	goto	L25
 13493                           
 13494                           ; BSR set to: 0
 13495  002F32  D0DA               	goto	l1252
 13496  002F34                     l6086:
 13497                           
 13498                           ; BSR set to: 0
 13499  002F34  C083  F06C         	movff	exp@x,___ftge@ff1
 13500  002F38  C084  F06D         	movff	exp@x+1,___ftge@ff1+1
 13501  002F3C  C085  F06E         	movff	exp@x+2,___ftge@ff1+2
 13502  002F40  0E49               	movlw	73
 13503  002F42  0100               	movlb	0	; () banked
 13504  002F44  6F6F               	movwf	___ftge@ff2& (0+255),b
 13505  002F46  0E3A               	movlw	58
 13506  002F48  0100               	movlb	0	; () banked
 13507  002F4A  6F70               	movwf	(___ftge@ff2+1)& (0+255),b
 13508  002F4C  0EC4               	movlw	196
 13509  002F4E  0100               	movlb	0	; () banked
 13510  002F50  6F71               	movwf	(___ftge@ff2+2)& (0+255),b
 13511  002F52  EC39  F020         	call	___ftge	;wreg free
 13512  002F56  0100               	movlb	0	; () banked
 13513  002F58  B0D8               	btfsc	status,0,c
 13514  002F5A  D009               	goto	l6092
 13515                           
 13516                           ; BSR set to: 0
 13517  002F5C  0E00               	movlw	0
 13518  002F5E  0101               	movlb	1	; () banked
 13519  002F60  6F87               	movwf	(_errno+1)& (0+255),b
 13520  002F62  0E22               	movlw	34
 13521  002F64  6F86               	movwf	_errno& (0+255),b
 13522  002F66  D09C               	goto	l6110
 13523  002F68                     L25:
 13524  002F68  0100               	movlb	0	; () banked
 13525  002F6A  6F85               	movwf	(?_exp+2)& (0+255),b
 13526                           
 13527                           ; BSR set to: 0
 13528  002F6C  D0BD               	goto	l1252
 13529  002F6E                     l6092:
 13530                           
 13531                           ; BSR set to: 0
 13532  002F6E  0100               	movlb	0	; () banked
 13533  002F70  AF85               	btfss	(exp@x+2)& (0+255),7,b
 13534  002F72  D002               	goto	u7530
 13535  002F74  0E01               	movlw	1
 13536  002F76  D001               	goto	u7540
 13537  002F78                     u7530:
 13538  002F78  0E00               	movlw	0
 13539  002F7A                     u7540:
 13540  002F7A  0100               	movlb	0	; () banked
 13541  002F7C  6F8B               	movwf	exp@sign& (0+255),b
 13542                           
 13543                           ; BSR set to: 0
 13544  002F7E  0100               	movlb	0	; () banked
 13545  002F80  518B               	movf	exp@sign& (0+255),w,b
 13546  002F82  0100               	movlb	0	; () banked
 13547  002F84  B4D8               	btfsc	status,2,c
 13548  002F86  D00E               	goto	l1255
 13549                           
 13550                           ; BSR set to: 0
 13551  002F88  C083  F03F         	movff	exp@x,___ftneg@f1
 13552  002F8C  C084  F040         	movff	exp@x+1,___ftneg@f1+1
 13553  002F90  C085  F041         	movff	exp@x+2,___ftneg@f1+2
 13554  002F94  EC36  F027         	call	___ftneg	;wreg free
 13555  002F98  C03F  F083         	movff	?___ftneg,exp@x
 13556  002F9C  C040  F084         	movff	?___ftneg+1,exp@x+1
 13557  002FA0  C041  F085         	movff	?___ftneg+2,exp@x+2
 13558  002FA4                     l1255:
 13559  002FA4  C083  F030         	movff	exp@x,___ftmul@f1
 13560  002FA8  C084  F031         	movff	exp@x+1,___ftmul@f1+1
 13561  002FAC  C085  F032         	movff	exp@x+2,___ftmul@f1+2
 13562  002FB0  0EAA               	movlw	170
 13563  002FB2  6E33               	movwf	___ftmul@f2,c
 13564  002FB4  0EB8               	movlw	184
 13565  002FB6  6E34               	movwf	___ftmul@f2+1,c
 13566  002FB8  0E3F               	movlw	63
 13567  002FBA  6E35               	movwf	___ftmul@f2+2,c
 13568  002FBC  EC70  F01E         	call	___ftmul	;wreg free
 13569  002FC0  C030  F083         	movff	?___ftmul,exp@x
 13570  002FC4  C031  F084         	movff	?___ftmul+1,exp@x+1
 13571  002FC8  C032  F085         	movff	?___ftmul+2,exp@x+2
 13572  002FCC  C083  F07B         	movff	exp@x,floor@x
 13573  002FD0  C084  F07C         	movff	exp@x+1,floor@x+1
 13574  002FD4  C085  F07D         	movff	exp@x+2,floor@x+2
 13575  002FD8  ECF4  F01D         	call	_floor	;wreg free
 13576  002FDC  C07B  F086         	movff	?_floor,_exp$2578
 13577  002FE0  C07C  F087         	movff	?_floor+1,_exp$2578+1
 13578  002FE4  C07D  F088         	movff	?_floor+2,_exp$2578+2
 13579  002FE8  C086  F06C         	movff	_exp$2578,___fttol@f1
 13580  002FEC  C087  F06D         	movff	_exp$2578+1,___fttol@f1+1
 13581  002FF0  C088  F06E         	movff	_exp$2578+2,___fttol@f1+2
 13582  002FF4  EC1C  F01B         	call	___fttol	;wreg free
 13583  002FF8  C06C  F089         	movff	?___fttol,exp@exponent
 13584  002FFC  C06D  F08A         	movff	?___fttol+1,exp@exponent+1
 13585  003000  C083  F06C         	movff	exp@x,___ftsub@f1
 13586  003004  C084  F06D         	movff	exp@x+1,___ftsub@f1+1
 13587  003008  C085  F06E         	movff	exp@x+2,___ftsub@f1+2
 13588  00300C  C089  F01D         	movff	exp@exponent,___awtoft@c
 13589  003010  C08A  F01E         	movff	exp@exponent+1,___awtoft@c+1
 13590  003014  ECB5  F026         	call	___awtoft	;wreg free
 13591  003018  C01D  F06F         	movff	?___awtoft,___ftsub@f2
 13592  00301C  C01E  F070         	movff	?___awtoft+1,___ftsub@f2+1
 13593  003020  C01F  F071         	movff	?___awtoft+2,___ftsub@f2+2
 13594  003024  ECB9  F025         	call	___ftsub	;wreg free
 13595  003028  C06C  F083         	movff	?___ftsub,exp@x
 13596  00302C  C06D  F084         	movff	?___ftsub+1,exp@x+1
 13597  003030  C06E  F085         	movff	?___ftsub+2,exp@x+2
 13598  003034  C083  F06C         	movff	exp@x,eval_poly@x
 13599  003038  C084  F06D         	movff	exp@x+1,eval_poly@x+1
 13600  00303C  C085  F06E         	movff	exp@x+2,eval_poly@x+2
 13601  003040  0E7B               	movlw	low exp@coeff
 13602  003042  0100               	movlb	0	; () banked
 13603  003044  6F6F               	movwf	eval_poly@d& (0+255),b
 13604  003046  0E7A               	movlw	high exp@coeff
 13605  003048  0100               	movlb	0	; () banked
 13606  00304A  6F70               	movwf	(eval_poly@d+1)& (0+255),b
 13607  00304C  0E00               	movlw	0
 13608  00304E  0100               	movlb	0	; () banked
 13609  003050  6F72               	movwf	(eval_poly@n+1)& (0+255),b
 13610  003052  0E09               	movlw	9
 13611  003054  6F71               	movwf	eval_poly@n& (0+255),b
 13612  003056  ECCC  F01F         	call	_eval_poly	;wreg free
 13613  00305A  C06C  F076         	movff	?_eval_poly,ldexp@value
 13614  00305E  C06D  F077         	movff	?_eval_poly+1,ldexp@value+1
 13615  003062  C06E  F078         	movff	?_eval_poly+2,ldexp@value+2
 13616  003066  C089  F079         	movff	exp@exponent,ldexp@newexp
 13617  00306A  C08A  F07A         	movff	exp@exponent+1,ldexp@newexp+1
 13618  00306E  ECE5  F01C         	call	_ldexp	;wreg free
 13619  003072  C076  F083         	movff	?_ldexp,exp@x
 13620  003076  C077  F084         	movff	?_ldexp+1,exp@x+1
 13621  00307A  C078  F085         	movff	?_ldexp+2,exp@x+2
 13622  00307E  0100               	movlb	0	; () banked
 13623  003080  518B               	movf	exp@sign& (0+255),w,b
 13624  003082  0100               	movlb	0	; () banked
 13625  003084  B4D8               	btfsc	status,2,c
 13626  003086  D02A               	goto	l1256
 13627                           
 13628                           ; BSR set to: 0
 13629  003088  0100               	movlb	0	; () banked
 13630  00308A  2983               	incf	exp@x& (0+255),w,b
 13631  00308C  E112               	bnz	l6114
 13632  00308E  0E7F               	movlw	127
 13633  003090  0100               	movlb	0	; () banked
 13634  003092  1984               	xorwf	(exp@x+1)& (0+255),w,b
 13635  003094  E10E               	bnz	l6114
 13636  003096  0E7F               	movlw	127
 13637  003098  0100               	movlb	0	; () banked
 13638  00309A  1985               	xorwf	(exp@x+2)& (0+255),w,b
 13639  00309C  A4D8               	btfss	status,2,c
 13640  00309E  D009               	goto	l6114
 13641  0030A0                     l6110:
 13642                           
 13643                           ; BSR set to: 0
 13644  0030A0  0E00               	movlw	0
 13645  0030A2  0100               	movlb	0	; () banked
 13646  0030A4  6F83               	movwf	?_exp& (0+255),b
 13647  0030A6  0E00               	movlw	0
 13648  0030A8  0100               	movlb	0	; () banked
 13649  0030AA  6F84               	movwf	(?_exp+1)& (0+255),b
 13650  0030AC  0E00               	movlw	0
 13651  0030AE  D75C               	goto	L25
 13652                           
 13653                           ; BSR set to: 0
 13654  0030B0  D01B               	goto	l1252
 13655  0030B2                     l6114:
 13656                           
 13657                           ; BSR set to: 0
 13658  0030B2  0E00               	movlw	0
 13659  0030B4  6E21               	movwf	___ftdiv@f1,c
 13660  0030B6  0E80               	movlw	128
 13661  0030B8  6E22               	movwf	___ftdiv@f1+1,c
 13662  0030BA  0E3F               	movlw	63
 13663  0030BC  6E23               	movwf	___ftdiv@f1+2,c
 13664  0030BE  C083  F024         	movff	exp@x,___ftdiv@f2
 13665  0030C2  C084  F025         	movff	exp@x+1,___ftdiv@f2+1
 13666  0030C6  C085  F026         	movff	exp@x+2,___ftdiv@f2+2
 13667  0030CA  ECEC  F01E         	call	___ftdiv	;wreg free
 13668  0030CE  C021  F083         	movff	?___ftdiv,?_exp
 13669  0030D2  C022  F084         	movff	?___ftdiv+1,?_exp+1
 13670  0030D6  C023  F085         	movff	?___ftdiv+2,?_exp+2
 13671  0030DA  D006               	goto	l1252
 13672  0030DC                     l1256:
 13673                           
 13674                           ; BSR set to: 0
 13675  0030DC  C083  F083         	movff	exp@x,?_exp
 13676  0030E0  C084  F084         	movff	exp@x+1,?_exp+1
 13677  0030E4  C085  F085         	movff	exp@x+2,?_exp+2
 13678  0030E8                     l1252:
 13679  0030E8  0012               	return		;funcret
 13680  0030EA                     __end_of_exp:
 13681                           	opt stack 0
 13682                           tblptru	equ	0xFF8
 13683                           tblptrh	equ	0xFF7
 13684                           tblptrl	equ	0xFF6
 13685                           tablat	equ	0xFF5
 13686                           prodh	equ	0xFF4
 13687                           prodl	equ	0xFF3
 13688                           intcon	equ	0xFF2
 13689                           intcon2	equ	0xFF1
 13690                           postinc0	equ	0xFEE
 13691                           wreg	equ	0xFE8
 13692                           postinc1	equ	0xFE6
 13693                           postdec1	equ	0xFE5
 13694                           fsr1h	equ	0xFE2
 13695                           fsr1l	equ	0xFE1
 13696                           indf2	equ	0xFDF
 13697                           postinc2	equ	0xFDE
 13698                           postdec2	equ	0xFDD
 13699                           plusw2	equ	0xFDB
 13700                           fsr2h	equ	0xFDA
 13701                           fsr2l	equ	0xFD9
 13702                           status	equ	0xFD8
 13703                           
 13704 ;; *************** function _ldexp *****************
 13705 ;; Defined at:
 13706 ;;		line 277 in file "/opt/microchip/xc8/v1.34/sources/common/frexp.c"
 13707 ;; Parameters:    Size  Location     Type
 13708 ;;  value           3   22[BANK0 ] unsigned char 
 13709 ;;  newexp          2   25[BANK0 ] int 
 13710 ;; Auto vars:     Size  Location     Type
 13711 ;;		None
 13712 ;; Return value:  Size  Location     Type
 13713 ;;                  3   22[BANK0 ] int 
 13714 ;; Registers used:
 13715 ;;		wreg, status,2, status,0
 13716 ;; Tracked objects:
 13717 ;;		On entry : 0/0
 13718 ;;		On exit  : 0/0
 13719 ;;		Unchanged: 0/0
 13720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13721 ;;      Params:         0       5       0       0       0       0       0       0       0
 13722 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13723 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13724 ;;      Totals:         0       7       0       0       0       0       0       0       0
 13725 ;;Total ram usage:        7 bytes
 13726 ;; Hardware stack levels used:    1
 13727 ;; Hardware stack levels required when called:    1
 13728 ;; This function calls:
 13729 ;;		Nothing
 13730 ;; This function is called by:
 13731 ;;		_exp
 13732 ;; This function uses a non-reentrant model
 13733 ;;
 13734                           
 13735                           	psect	text33
 13736  0039CA                     __ptext33:
 13737                           	opt stack 0
 13738  0039CA                     _ldexp:
 13739                           	opt stack 26
 13740                           
 13741                           ;incstack = 0
 13742  0039CA  0100               	movlb	0	; () banked
 13743  0039CC  5176               	movf	ldexp@value& (0+255),w,b
 13744  0039CE  0100               	movlb	0	; () banked
 13745  0039D0  1177               	iorwf	(ldexp@value+1)& (0+255),w,b
 13746  0039D2  0100               	movlb	0	; () banked
 13747  0039D4  1178               	iorwf	(ldexp@value+2)& (0+255),w,b
 13748  0039D6  A4D8               	btfss	status,2,c
 13749  0039D8  D002               	goto	l5862
 13750  0039DA  D02A               	goto	L26
 13751                           
 13752                           ; BSR set to: 0
 13753                           
 13754                           ; BSR set to: 0
 13755  0039DC  D080               	goto	l1276
 13756  0039DE                     l5862:
 13757                           
 13758                           ; BSR set to: 0
 13759  0039DE  0100               	movlb	0	; () banked
 13760  0039E0  5178               	movf	(ldexp@value+2)& (0+255),w,b
 13761  0039E2  0B7F               	andlw	127
 13762  0039E4  0100               	movlb	0	; () banked
 13763  0039E6  6F7B               	movwf	??_ldexp& (0+255),b
 13764  0039E8  6B7C               	clrf	(??_ldexp+1)& (0+255),b
 13765  0039EA  90D8               	bcf	status,0,c
 13766  0039EC  0100               	movlb	0	; () banked
 13767  0039EE  377B               	rlcf	??_ldexp& (0+255),f,b
 13768  0039F0  377C               	rlcf	(??_ldexp+1)& (0+255),f,b
 13769  0039F2  0100               	movlb	0	; () banked
 13770  0039F4  517B               	movf	??_ldexp& (0+255),w,b
 13771  0039F6  0100               	movlb	0	; () banked
 13772  0039F8  2779               	addwf	ldexp@newexp& (0+255),f,b
 13773  0039FA  0100               	movlb	0	; () banked
 13774  0039FC  517C               	movf	(??_ldexp+1)& (0+255),w,b
 13775  0039FE  0100               	movlb	0	; () banked
 13776  003A00  237A               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13777  003A02  0100               	movlb	0	; () banked
 13778  003A04  AF77               	btfss	(ldexp@value+1)& (0+255),7,b
 13779  003A06  D004               	goto	u7120
 13780  003A08  0100               	movlb	0	; () banked
 13781  003A0A  6B7B               	clrf	??_ldexp& (0+255),b
 13782  003A0C  2B7B               	incf	??_ldexp& (0+255),f,b
 13783  003A0E  D002               	goto	u7128
 13784  003A10                     u7120:
 13785  003A10  0100               	movlb	0	; () banked
 13786  003A12  6B7B               	clrf	??_ldexp& (0+255),b
 13787  003A14                     u7128:
 13788  003A14  0100               	movlb	0	; () banked
 13789  003A16  517B               	movf	??_ldexp& (0+255),w,b
 13790  003A18  0100               	movlb	0	; () banked
 13791  003A1A  2779               	addwf	ldexp@newexp& (0+255),f,b
 13792  003A1C  0E00               	movlw	0
 13793  003A1E  237A               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13794  003A20  0100               	movlb	0	; () banked
 13795  003A22  AF7A               	btfss	(ldexp@newexp+1)& (0+255),7,b
 13796  003A24  D00F               	goto	l5870
 13797                           
 13798                           ; BSR set to: 0
 13799  003A26  0E00               	movlw	0
 13800  003A28  0101               	movlb	1	; () banked
 13801  003A2A  6F87               	movwf	(_errno+1)& (0+255),b
 13802  003A2C  0E22               	movlw	34
 13803  003A2E  6F86               	movwf	_errno& (0+255),b
 13804  003A30                     L26:
 13805  003A30  0E00               	movlw	0
 13806  003A32  0100               	movlb	0	; () banked
 13807  003A34  6F76               	movwf	?_ldexp& (0+255),b
 13808  003A36  0E00               	movlw	0
 13809  003A38  0100               	movlb	0	; () banked
 13810  003A3A  6F77               	movwf	(?_ldexp+1)& (0+255),b
 13811  003A3C  0E00               	movlw	0
 13812  003A3E  D022               	goto	L28
 13813                           
 13814                           ; BSR set to: 0
 13815  003A40  D04E               	goto	l1276
 13816                           
 13817                           ; BSR set to: 0
 13818  003A42  D046               	goto	l5888
 13819  003A44                     l5870:
 13820                           
 13821                           ; BSR set to: 0
 13822  003A44  0100               	movlb	0	; () banked
 13823  003A46  BF7A               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 13824  003A48  D021               	goto	l5886
 13825  003A4A  0100               	movlb	0	; () banked
 13826  003A4C  057A               	decf	(ldexp@newexp+1)& (0+255),w,b
 13827  003A4E  A0D8               	btfss	status,0,c
 13828  003A50  D01D               	goto	l5886
 13829                           
 13830                           ; BSR set to: 0
 13831  003A52  0E00               	movlw	0
 13832  003A54  0101               	movlb	1	; () banked
 13833  003A56  6F87               	movwf	(_errno+1)& (0+255),b
 13834  003A58  0E22               	movlw	34
 13835  003A5A  6F86               	movwf	_errno& (0+255),b
 13836                           
 13837                           ; BSR set to: 1
 13838  003A5C  0100               	movlb	0	; () banked
 13839  003A5E  AF78               	btfss	(ldexp@value+2)& (0+255),7,b
 13840  003A60  D00A               	goto	l5882
 13841                           
 13842                           ; BSR set to: 0
 13843  003A62  0EFF               	movlw	255
 13844  003A64  0100               	movlb	0	; () banked
 13845  003A66  6F76               	movwf	?_ldexp& (0+255),b
 13846  003A68  0E7F               	movlw	127
 13847  003A6A  0100               	movlb	0	; () banked
 13848  003A6C  6F77               	movwf	(?_ldexp+1)& (0+255),b
 13849  003A6E  0EFF               	movlw	255
 13850  003A70  D009               	goto	L28
 13851                           
 13852                           ; BSR set to: 0
 13853  003A72  D035               	goto	l1276
 13854                           
 13855                           ; BSR set to: 0
 13856  003A74  D02D               	goto	l5888
 13857  003A76                     l5882:
 13858                           
 13859                           ; BSR set to: 0
 13860  003A76  0EFF               	movlw	255
 13861  003A78  0100               	movlb	0	; () banked
 13862  003A7A  6F76               	movwf	?_ldexp& (0+255),b
 13863  003A7C  0E7F               	movlw	127
 13864  003A7E  0100               	movlb	0	; () banked
 13865  003A80  6F77               	movwf	(?_ldexp+1)& (0+255),b
 13866  003A82  0E7F               	movlw	127
 13867  003A84                     L28:
 13868  003A84  0100               	movlb	0	; () banked
 13869  003A86  6F78               	movwf	(?_ldexp+2)& (0+255),b
 13870                           
 13871                           ; BSR set to: 0
 13872  003A88  D02A               	goto	l1276
 13873                           
 13874                           ; BSR set to: 0
 13875  003A8A  D022               	goto	l5888
 13876  003A8C                     l5886:
 13877                           
 13878                           ; BSR set to: 0
 13879  003A8C  0100               	movlb	0	; () banked
 13880  003A8E  357A               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 13881  003A90  317A               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 13882  003A92  0100               	movlb	0	; () banked
 13883  003A94  6F7C               	movwf	(??_ldexp+1)& (0+255),b
 13884  003A96  0100               	movlb	0	; () banked
 13885  003A98  3179               	rrcf	ldexp@newexp& (0+255),w,b
 13886  003A9A  0100               	movlb	0	; () banked
 13887  003A9C  6F7B               	movwf	??_ldexp& (0+255),b
 13888  003A9E  0100               	movlb	0	; () banked
 13889  003AA0  5178               	movf	(ldexp@value+2)& (0+255),w,b
 13890  003AA2  0100               	movlb	0	; () banked
 13891  003AA4  197B               	xorwf	??_ldexp& (0+255),w,b
 13892  003AA6  0B80               	andlw	-128
 13893  003AA8  197B               	xorwf	??_ldexp& (0+255),w,b
 13894  003AAA  0100               	movlb	0	; () banked
 13895  003AAC  6F78               	movwf	(ldexp@value+2)& (0+255),b
 13896  003AAE  C079  F07B         	movff	ldexp@newexp,??_ldexp
 13897  003AB2  0E01               	movlw	1
 13898  003AB4  0100               	movlb	0	; () banked
 13899  003AB6  177B               	andwf	??_ldexp& (0+255),f,b
 13900  003AB8  0100               	movlb	0	; () banked
 13901  003ABA  337B               	rrcf	??_ldexp& (0+255),f,b
 13902  003ABC  337B               	rrcf	??_ldexp& (0+255),f,b
 13903  003ABE  0100               	movlb	0	; () banked
 13904  003AC0  5177               	movf	(ldexp@value+1)& (0+255),w,b
 13905  003AC2  0100               	movlb	0	; () banked
 13906  003AC4  197B               	xorwf	??_ldexp& (0+255),w,b
 13907  003AC6  0B7F               	andlw	-129
 13908  003AC8  197B               	xorwf	??_ldexp& (0+255),w,b
 13909  003ACA  0100               	movlb	0	; () banked
 13910  003ACC  6F77               	movwf	(ldexp@value+1)& (0+255),b
 13911                           
 13912                           ; BSR set to: 0
 13913  003ACE  D000               	goto	l5888
 13914  003AD0                     l5888:
 13915                           
 13916                           ; BSR set to: 0
 13917  003AD0  C076  F076         	movff	ldexp@value,?_ldexp
 13918  003AD4  C077  F077         	movff	ldexp@value+1,?_ldexp+1
 13919  003AD8  C078  F078         	movff	ldexp@value+2,?_ldexp+2
 13920  003ADC  D000               	goto	l1276
 13921  003ADE                     l1276:
 13922                           
 13923                           ; BSR set to: 0
 13924  003ADE  0012               	return		;funcret
 13925  003AE0                     __end_of_ldexp:
 13926                           	opt stack 0
 13927                           tblptru	equ	0xFF8
 13928                           tblptrh	equ	0xFF7
 13929                           tblptrl	equ	0xFF6
 13930                           tablat	equ	0xFF5
 13931                           prodh	equ	0xFF4
 13932                           prodl	equ	0xFF3
 13933                           intcon	equ	0xFF2
 13934                           intcon2	equ	0xFF1
 13935                           postinc0	equ	0xFEE
 13936                           wreg	equ	0xFE8
 13937                           postinc1	equ	0xFE6
 13938                           postdec1	equ	0xFE5
 13939                           fsr1h	equ	0xFE2
 13940                           fsr1l	equ	0xFE1
 13941                           indf2	equ	0xFDF
 13942                           postinc2	equ	0xFDE
 13943                           postdec2	equ	0xFDD
 13944                           plusw2	equ	0xFDB
 13945                           fsr2h	equ	0xFDA
 13946                           fsr2l	equ	0xFD9
 13947                           status	equ	0xFD8
 13948                           
 13949 ;; *************** function _floor *****************
 13950 ;; Defined at:
 13951 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/common/floor.c"
 13952 ;; Parameters:    Size  Location     Type
 13953 ;;  x               3   27[BANK0 ] int 
 13954 ;; Auto vars:     Size  Location     Type
 13955 ;;  i               3   30[BANK0 ] int 
 13956 ;;  expon           2   33[BANK0 ] int 
 13957 ;; Return value:  Size  Location     Type
 13958 ;;                  3   27[BANK0 ] int 
 13959 ;; Registers used:
 13960 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13961 ;; Tracked objects:
 13962 ;;		On entry : 0/0
 13963 ;;		On exit  : 0/0
 13964 ;;		Unchanged: 0/0
 13965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13966 ;;      Params:         0       3       0       0       0       0       0       0       0
 13967 ;;      Locals:         0       5       0       0       0       0       0       0       0
 13968 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13969 ;;      Totals:         0       8       0       0       0       0       0       0       0
 13970 ;;Total ram usage:        8 bytes
 13971 ;; Hardware stack levels used:    1
 13972 ;; Hardware stack levels required when called:    3
 13973 ;; This function calls:
 13974 ;;		___altoft
 13975 ;;		___ftadd
 13976 ;;		___ftge
 13977 ;;		___fttol
 13978 ;;		_frexp
 13979 ;; This function is called by:
 13980 ;;		_exp
 13981 ;; This function uses a non-reentrant model
 13982 ;;
 13983                           
 13984                           	psect	text34
 13985  003BE8                     __ptext34:
 13986                           	opt stack 0
 13987  003BE8                     _floor:
 13988                           	opt stack 24
 13989                           
 13990                           ; BSR set to: 0
 13991                           ;incstack = 0
 13992  003BE8  C07B  F00F         	movff	floor@x,frexp@value
 13993  003BEC  C07C  F010         	movff	floor@x+1,frexp@value+1
 13994  003BF0  C07D  F011         	movff	floor@x+2,frexp@value+2
 13995  003BF4  0E81               	movlw	low floor@expon
 13996  003BF6  6E12               	movwf	frexp@eptr,c
 13997  003BF8  0E00               	movlw	high floor@expon
 13998  003BFA  6E13               	movwf	frexp@eptr+1,c
 13999  003BFC  EC07  F023         	call	_frexp	;wreg free
 14000  003C00  0100               	movlb	0	; () banked
 14001  003C02  AF82               	btfss	(floor@expon+1)& (0+255),7,b
 14002  003C04  D016               	goto	l5840
 14003                           
 14004                           ; BSR set to: 0
 14005  003C06  0100               	movlb	0	; () banked
 14006  003C08  AF7D               	btfss	(floor@x+2)& (0+255),7,b
 14007  003C0A  D009               	goto	l5836
 14008                           
 14009                           ; BSR set to: 0
 14010  003C0C  0E00               	movlw	0
 14011  003C0E  0100               	movlb	0	; () banked
 14012  003C10  6F7B               	movwf	?_floor& (0+255),b
 14013  003C12  0E80               	movlw	128
 14014  003C14  0100               	movlb	0	; () banked
 14015  003C16  6F7C               	movwf	(?_floor+1)& (0+255),b
 14016  003C18  0EBF               	movlw	191
 14017  003C1A  D008               	goto	L29
 14018                           
 14019                           ; BSR set to: 0
 14020  003C1C  D060               	goto	l1264
 14021  003C1E                     l5836:
 14022                           
 14023                           ; BSR set to: 0
 14024  003C1E  0E00               	movlw	0
 14025  003C20  0100               	movlb	0	; () banked
 14026  003C22  6F7B               	movwf	?_floor& (0+255),b
 14027  003C24  0E00               	movlw	0
 14028  003C26  0100               	movlb	0	; () banked
 14029  003C28  6F7C               	movwf	(?_floor+1)& (0+255),b
 14030  003C2A  0E00               	movlw	0
 14031  003C2C                     L29:
 14032  003C2C  0100               	movlb	0	; () banked
 14033  003C2E  6F7D               	movwf	(?_floor+2)& (0+255),b
 14034                           
 14035                           ; BSR set to: 0
 14036  003C30  D056               	goto	l1264
 14037  003C32                     l5840:
 14038                           
 14039                           ; BSR set to: 0
 14040  003C32  0100               	movlb	0	; () banked
 14041  003C34  5182               	movf	(floor@expon+1)& (0+255),w,b
 14042  003C36  E105               	bnz	u7080
 14043  003C38  0E15               	movlw	21
 14044  003C3A  0100               	movlb	0	; () banked
 14045  003C3C  5D81               	subwf	floor@expon& (0+255),w,b
 14046  003C3E  A0D8               	btfss	status,0,c
 14047  003C40  D007               	goto	l5844
 14048  003C42                     u7080:
 14049                           
 14050                           ; BSR set to: 0
 14051  003C42  C07B  F07B         	movff	floor@x,?_floor
 14052  003C46  C07C  F07C         	movff	floor@x+1,?_floor+1
 14053  003C4A  C07D  F07D         	movff	floor@x+2,?_floor+2
 14054  003C4E  D047               	goto	l1264
 14055  003C50                     l5844:
 14056                           
 14057                           ; BSR set to: 0
 14058  003C50  C07B  F06C         	movff	floor@x,___fttol@f1
 14059  003C54  C07C  F06D         	movff	floor@x+1,___fttol@f1+1
 14060  003C58  C07D  F06E         	movff	floor@x+2,___fttol@f1+2
 14061  003C5C  EC1C  F01B         	call	___fttol	;wreg free
 14062  003C60  C06C  F01D         	movff	?___fttol,___altoft@c
 14063  003C64  C06D  F01E         	movff	?___fttol+1,___altoft@c+1
 14064  003C68  C06E  F01F         	movff	?___fttol+2,___altoft@c+2
 14065  003C6C  C06F  F020         	movff	?___fttol+3,___altoft@c+3
 14066  003C70  EC50  F023         	call	___altoft	;wreg free
 14067  003C74  C01D  F07E         	movff	?___altoft,floor@i
 14068  003C78  C01E  F07F         	movff	?___altoft+1,floor@i+1
 14069  003C7C  C01F  F080         	movff	?___altoft+2,floor@i+2
 14070  003C80  C07B  F06C         	movff	floor@x,___ftge@ff1
 14071  003C84  C07C  F06D         	movff	floor@x+1,___ftge@ff1+1
 14072  003C88  C07D  F06E         	movff	floor@x+2,___ftge@ff1+2
 14073  003C8C  C07E  F06F         	movff	floor@i,___ftge@ff2
 14074  003C90  C07F  F070         	movff	floor@i+1,___ftge@ff2+1
 14075  003C94  C080  F071         	movff	floor@i+2,___ftge@ff2+2
 14076  003C98  EC39  F020         	call	___ftge	;wreg free
 14077  003C9C  0100               	movlb	0	; () banked
 14078  003C9E  B0D8               	btfsc	status,0,c
 14079  003CA0  D018               	goto	l1266
 14080                           
 14081                           ; BSR set to: 0
 14082  003CA2  C07E  F060         	movff	floor@i,___ftadd@f1
 14083  003CA6  C07F  F061         	movff	floor@i+1,___ftadd@f1+1
 14084  003CAA  C080  F062         	movff	floor@i+2,___ftadd@f1+2
 14085  003CAE  0E00               	movlw	0
 14086  003CB0  0100               	movlb	0	; () banked
 14087  003CB2  6F63               	movwf	___ftadd@f2& (0+255),b
 14088  003CB4  0E80               	movlw	128
 14089  003CB6  0100               	movlb	0	; () banked
 14090  003CB8  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
 14091  003CBA  0EBF               	movlw	191
 14092  003CBC  0100               	movlb	0	; () banked
 14093  003CBE  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
 14094  003CC0  EC28  F016         	call	___ftadd	;wreg free
 14095  003CC4  C060  F07B         	movff	?___ftadd,?_floor
 14096  003CC8  C061  F07C         	movff	?___ftadd+1,?_floor+1
 14097  003CCC  C062  F07D         	movff	?___ftadd+2,?_floor+2
 14098  003CD0  D006               	goto	l1264
 14099  003CD2                     l1266:
 14100                           
 14101                           ; BSR set to: 0
 14102  003CD2  C07E  F07B         	movff	floor@i,?_floor
 14103  003CD6  C07F  F07C         	movff	floor@i+1,?_floor+1
 14104  003CDA  C080  F07D         	movff	floor@i+2,?_floor+2
 14105  003CDE                     l1264:
 14106  003CDE  0012               	return		;funcret
 14107  003CE0                     __end_of_floor:
 14108                           	opt stack 0
 14109                           tblptru	equ	0xFF8
 14110                           tblptrh	equ	0xFF7
 14111                           tblptrl	equ	0xFF6
 14112                           tablat	equ	0xFF5
 14113                           prodh	equ	0xFF4
 14114                           prodl	equ	0xFF3
 14115                           intcon	equ	0xFF2
 14116                           intcon2	equ	0xFF1
 14117                           postinc0	equ	0xFEE
 14118                           wreg	equ	0xFE8
 14119                           postinc1	equ	0xFE6
 14120                           postdec1	equ	0xFE5
 14121                           fsr1h	equ	0xFE2
 14122                           fsr1l	equ	0xFE1
 14123                           indf2	equ	0xFDF
 14124                           postinc2	equ	0xFDE
 14125                           postdec2	equ	0xFDD
 14126                           plusw2	equ	0xFDB
 14127                           fsr2h	equ	0xFDA
 14128                           fsr2l	equ	0xFD9
 14129                           status	equ	0xFD8
 14130                           
 14131 ;; *************** function _frexp *****************
 14132 ;; Defined at:
 14133 ;;		line 254 in file "/opt/microchip/xc8/v1.34/sources/common/frexp.c"
 14134 ;; Parameters:    Size  Location     Type
 14135 ;;  value           3   14[COMRAM] int 
 14136 ;;  eptr            2   17[COMRAM] PTR int 
 14137 ;;		 -> log@exponent(2), floor@expon(2), 
 14138 ;; Auto vars:     Size  Location     Type
 14139 ;;		None
 14140 ;; Return value:  Size  Location     Type
 14141 ;;                  3   14[COMRAM] PTR int 
 14142 ;; Registers used:
 14143 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14144 ;; Tracked objects:
 14145 ;;		On entry : 0/0
 14146 ;;		On exit  : 0/0
 14147 ;;		Unchanged: 0/0
 14148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14149 ;;      Params:         5       0       0       0       0       0       0       0       0
 14150 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14151 ;;      Temps:          2       0       0       0       0       0       0       0       0
 14152 ;;      Totals:         7       0       0       0       0       0       0       0       0
 14153 ;;Total ram usage:        7 bytes
 14154 ;; Hardware stack levels used:    1
 14155 ;; Hardware stack levels required when called:    1
 14156 ;; This function calls:
 14157 ;;		Nothing
 14158 ;; This function is called by:
 14159 ;;		_floor
 14160 ;;		_log
 14161 ;; This function uses a non-reentrant model
 14162 ;;
 14163                           
 14164                           	psect	text35
 14165  00460E                     __ptext35:
 14166                           	opt stack 0
 14167  00460E                     _frexp:
 14168                           	opt stack 26
 14169                           
 14170                           ;incstack = 0
 14171  00460E  500F               	movf	frexp@value,w,c
 14172  004610  1010               	iorwf	frexp@value+1,w,c
 14173  004612  1011               	iorwf	frexp@value+2,w,c
 14174  004614  A4D8               	btfss	status,2,c
 14175  004616  D00F               	goto	l5646
 14176  004618  C012  FFD9         	movff	frexp@eptr,fsr2l
 14177  00461C  C013  FFDA         	movff	frexp@eptr+1,fsr2h
 14178  004620  0E00               	movlw	0
 14179  004622  6EDE               	movwf	postinc2,c
 14180  004624  0E00               	movlw	0
 14181  004626  6EDD               	movwf	postdec2,c
 14182  004628  0E00               	movlw	0
 14183  00462A  6E0F               	movwf	?_frexp,c
 14184  00462C  0E00               	movlw	0
 14185  00462E  6E10               	movwf	?_frexp+1,c
 14186  004630  0E00               	movlw	0
 14187  004632  6E11               	movwf	?_frexp+2,c
 14188  004634  D034               	goto	l1272
 14189  004636                     l5646:
 14190  004636  5011               	movf	frexp@value+2,w,c
 14191  004638  0B7F               	andlw	127
 14192  00463A  6E14               	movwf	??_frexp& (0+255),c
 14193  00463C  6A15               	clrf	(??_frexp+1)& (0+255),c
 14194  00463E  90D8               	bcf	status,0,c
 14195  004640  3614               	rlcf	??_frexp,f,c
 14196  004642  3615               	rlcf	??_frexp+1,f,c
 14197  004644  C012  FFD9         	movff	frexp@eptr,fsr2l
 14198  004648  C013  FFDA         	movff	frexp@eptr+1,fsr2h
 14199  00464C  C014  FFDE         	movff	??_frexp,postinc2
 14200  004650  C015  FFDD         	movff	??_frexp+1,postdec2
 14201  004654  AE10               	btfss	frexp@value+1,7,c
 14202  004656  D003               	goto	u6820
 14203  004658  6A14               	clrf	??_frexp& (0+255),c
 14204  00465A  2A14               	incf	??_frexp& (0+255),f,c
 14205  00465C  D001               	goto	u6828
 14206  00465E                     u6820:
 14207  00465E  6A14               	clrf	??_frexp& (0+255),c
 14208  004660                     u6828:
 14209  004660  5014               	movf	??_frexp,w,c
 14210  004662  C012  FFD9         	movff	frexp@eptr,fsr2l
 14211  004666  C013  FFDA         	movff	frexp@eptr+1,fsr2h
 14212  00466A  12DE               	iorwf	postinc2,f,c
 14213  00466C  0E00               	movlw	0
 14214  00466E  12DD               	iorwf	postdec2,f,c
 14215  004670  C012  FFD9         	movff	frexp@eptr,fsr2l
 14216  004674  C013  FFDA         	movff	frexp@eptr+1,fsr2h
 14217  004678  0E82               	movlw	130
 14218  00467A  26DE               	addwf	postinc2,f,c
 14219  00467C  0EFF               	movlw	255
 14220  00467E  22DD               	addwfc	postdec2,f,c
 14221  004680  8011               	bsf	frexp@value+2,0,c
 14222  004682  8211               	bsf	frexp@value+2,1,c
 14223  004684  8411               	bsf	frexp@value+2,2,c
 14224  004686  8611               	bsf	frexp@value+2,3,c
 14225  004688  8811               	bsf	frexp@value+2,4,c
 14226  00468A  8A11               	bsf	frexp@value+2,5,c
 14227  00468C  9C11               	bcf	frexp@value+2,6,c
 14228  00468E  9E10               	bcf	frexp@value+1,7,c
 14229  004690  C00F  F00F         	movff	frexp@value,?_frexp
 14230  004694  C010  F010         	movff	frexp@value+1,?_frexp+1
 14231  004698  C011  F011         	movff	frexp@value+2,?_frexp+2
 14232  00469C  D000               	goto	l1272
 14233  00469E                     l1272:
 14234  00469E  0012               	return		;funcret
 14235  0046A0                     __end_of_frexp:
 14236                           	opt stack 0
 14237                           tblptru	equ	0xFF8
 14238                           tblptrh	equ	0xFF7
 14239                           tblptrl	equ	0xFF6
 14240                           tablat	equ	0xFF5
 14241                           prodh	equ	0xFF4
 14242                           prodl	equ	0xFF3
 14243                           intcon	equ	0xFF2
 14244                           intcon2	equ	0xFF1
 14245                           postinc0	equ	0xFEE
 14246                           wreg	equ	0xFE8
 14247                           postinc1	equ	0xFE6
 14248                           postdec1	equ	0xFE5
 14249                           fsr1h	equ	0xFE2
 14250                           fsr1l	equ	0xFE1
 14251                           indf2	equ	0xFDF
 14252                           postinc2	equ	0xFDE
 14253                           postdec2	equ	0xFDD
 14254                           plusw2	equ	0xFDB
 14255                           fsr2h	equ	0xFDA
 14256                           fsr2l	equ	0xFD9
 14257                           status	equ	0xFD8
 14258                           
 14259 ;; *************** function ___ftge *****************
 14260 ;; Defined at:
 14261 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
 14262 ;; Parameters:    Size  Location     Type
 14263 ;;  ff1             3   12[BANK0 ] float 
 14264 ;;  ff2             3   15[BANK0 ] float 
 14265 ;; Auto vars:     Size  Location     Type
 14266 ;;		None
 14267 ;; Return value:  Size  Location     Type
 14268 ;;		None               void
 14269 ;; Registers used:
 14270 ;;		wreg, status,2, status,0
 14271 ;; Tracked objects:
 14272 ;;		On entry : 0/0
 14273 ;;		On exit  : 0/0
 14274 ;;		Unchanged: 0/0
 14275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14276 ;;      Params:         0       6       0       0       0       0       0       0       0
 14277 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14278 ;;      Temps:          0       3       0       0       0       0       0       0       0
 14279 ;;      Totals:         0       9       0       0       0       0       0       0       0
 14280 ;;Total ram usage:        9 bytes
 14281 ;; Hardware stack levels used:    1
 14282 ;; Hardware stack levels required when called:    1
 14283 ;; This function calls:
 14284 ;;		Nothing
 14285 ;; This function is called by:
 14286 ;;		_main
 14287 ;;		_pow
 14288 ;;		_exp
 14289 ;;		_floor
 14290 ;; This function uses a non-reentrant model
 14291 ;;
 14292                           
 14293                           	psect	text36
 14294  004072                     __ptext36:
 14295                           	opt stack 0
 14296  004072                     ___ftge:
 14297                           	opt stack 29
 14298                           
 14299                           ;incstack = 0
 14300  004072  0100               	movlb	0	; () banked
 14301  004074  AF6E               	btfss	(___ftge@ff1+2)& (0+255),7,b
 14302  004076  D01E               	goto	l5578
 14303                           
 14304                           ; BSR set to: 0
 14305  004078  C06C  F072         	movff	___ftge@ff1,??___ftge
 14306  00407C  C06D  F073         	movff	___ftge@ff1+1,??___ftge+1
 14307  004080  C06E  F074         	movff	___ftge@ff1+2,??___ftge+2
 14308  004084  0100               	movlb	0	; () banked
 14309  004086  1F72               	comf	??___ftge& (0+255),f,b
 14310  004088  1F73               	comf	(??___ftge+1)& (0+255),f,b
 14311  00408A  1F74               	comf	(??___ftge+2)& (0+255),f,b
 14312  00408C  2B72               	incf	??___ftge& (0+255),f,b
 14313  00408E  0E00               	movlw	0
 14314  004090  2373               	addwfc	(??___ftge+1)& (0+255),f,b
 14315  004092  2374               	addwfc	(??___ftge+2)& (0+255),f,b
 14316  004094  0E00               	movlw	0
 14317  004096  0100               	movlb	0	; () banked
 14318  004098  2572               	addwf	??___ftge& (0+255),w,b
 14319  00409A  0100               	movlb	0	; () banked
 14320  00409C  6F6C               	movwf	___ftge@ff1& (0+255),b
 14321  00409E  0E00               	movlw	0
 14322  0040A0  0100               	movlb	0	; () banked
 14323  0040A2  2173               	addwfc	(??___ftge+1)& (0+255),w,b
 14324  0040A4  0100               	movlb	0	; () banked
 14325  0040A6  6F6D               	movwf	(___ftge@ff1+1)& (0+255),b
 14326  0040A8  0E80               	movlw	128
 14327  0040AA  0100               	movlb	0	; () banked
 14328  0040AC  2174               	addwfc	(??___ftge+2)& (0+255),w,b
 14329  0040AE  0100               	movlb	0	; () banked
 14330  0040B0  6F6E               	movwf	(___ftge@ff1+2)& (0+255),b
 14331  0040B2  D000               	goto	l5578
 14332  0040B4                     l5578:
 14333                           
 14334                           ; BSR set to: 0
 14335  0040B4  0100               	movlb	0	; () banked
 14336  0040B6  AF71               	btfss	(___ftge@ff2+2)& (0+255),7,b
 14337  0040B8  D01E               	goto	l5582
 14338                           
 14339                           ; BSR set to: 0
 14340  0040BA  C06F  F072         	movff	___ftge@ff2,??___ftge
 14341  0040BE  C070  F073         	movff	___ftge@ff2+1,??___ftge+1
 14342  0040C2  C071  F074         	movff	___ftge@ff2+2,??___ftge+2
 14343  0040C6  0100               	movlb	0	; () banked
 14344  0040C8  1F72               	comf	??___ftge& (0+255),f,b
 14345  0040CA  1F73               	comf	(??___ftge+1)& (0+255),f,b
 14346  0040CC  1F74               	comf	(??___ftge+2)& (0+255),f,b
 14347  0040CE  2B72               	incf	??___ftge& (0+255),f,b
 14348  0040D0  0E00               	movlw	0
 14349  0040D2  2373               	addwfc	(??___ftge+1)& (0+255),f,b
 14350  0040D4  2374               	addwfc	(??___ftge+2)& (0+255),f,b
 14351  0040D6  0E00               	movlw	0
 14352  0040D8  0100               	movlb	0	; () banked
 14353  0040DA  2572               	addwf	??___ftge& (0+255),w,b
 14354  0040DC  0100               	movlb	0	; () banked
 14355  0040DE  6F6F               	movwf	___ftge@ff2& (0+255),b
 14356  0040E0  0E00               	movlw	0
 14357  0040E2  0100               	movlb	0	; () banked
 14358  0040E4  2173               	addwfc	(??___ftge+1)& (0+255),w,b
 14359  0040E6  0100               	movlb	0	; () banked
 14360  0040E8  6F70               	movwf	(___ftge@ff2+1)& (0+255),b
 14361  0040EA  0E80               	movlw	128
 14362  0040EC  0100               	movlb	0	; () banked
 14363  0040EE  2174               	addwfc	(??___ftge+2)& (0+255),w,b
 14364  0040F0  0100               	movlb	0	; () banked
 14365  0040F2  6F71               	movwf	(___ftge@ff2+2)& (0+255),b
 14366  0040F4  D000               	goto	l5582
 14367  0040F6                     l5582:
 14368                           
 14369                           ; BSR set to: 0
 14370  0040F6  0E00               	movlw	0
 14371  0040F8  0100               	movlb	0	; () banked
 14372  0040FA  1B6C               	xorwf	___ftge@ff1& (0+255),f,b
 14373  0040FC  0E00               	movlw	0
 14374  0040FE  0100               	movlb	0	; () banked
 14375  004100  1B6D               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 14376  004102  0E80               	movlw	128
 14377  004104  0100               	movlb	0	; () banked
 14378  004106  1B6E               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 14379                           
 14380                           ; BSR set to: 0
 14381  004108  0E00               	movlw	0
 14382  00410A  0100               	movlb	0	; () banked
 14383  00410C  1B6F               	xorwf	___ftge@ff2& (0+255),f,b
 14384  00410E  0E00               	movlw	0
 14385  004110  0100               	movlb	0	; () banked
 14386  004112  1B70               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 14387  004114  0E80               	movlw	128
 14388  004116  0100               	movlb	0	; () banked
 14389  004118  1B71               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 14390  00411A  0100               	movlb	0	; () banked
 14391  00411C  516F               	movf	___ftge@ff2& (0+255),w,b
 14392  00411E  0100               	movlb	0	; () banked
 14393  004120  5D6C               	subwf	___ftge@ff1& (0+255),w,b
 14394  004122  0100               	movlb	0	; () banked
 14395  004124  5170               	movf	(___ftge@ff2+1)& (0+255),w,b
 14396  004126  0100               	movlb	0	; () banked
 14397  004128  596D               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 14398  00412A  0100               	movlb	0	; () banked
 14399  00412C  5171               	movf	(___ftge@ff2+2)& (0+255),w,b
 14400  00412E  0100               	movlb	0	; () banked
 14401  004130  596E               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 14402  004132  B0D8               	btfsc	status,0,c
 14403  004134  D002               	goto	l5588
 14404                           
 14405                           ; BSR set to: 0
 14406  004136  90D8               	bcf	status,0,c
 14407  004138  D002               	goto	l1060
 14408  00413A                     l5588:
 14409                           
 14410                           ; BSR set to: 0
 14411  00413A  80D8               	bsf	status,0,c
 14412                           
 14413                           ; BSR set to: 0
 14414  00413C  D000               	goto	l1060
 14415  00413E                     l1060:
 14416                           
 14417                           ; BSR set to: 0
 14418  00413E  0012               	return		;funcret
 14419  004140                     __end_of___ftge:
 14420                           	opt stack 0
 14421                           tblptru	equ	0xFF8
 14422                           tblptrh	equ	0xFF7
 14423                           tblptrl	equ	0xFF6
 14424                           tablat	equ	0xFF5
 14425                           prodh	equ	0xFF4
 14426                           prodl	equ	0xFF3
 14427                           intcon	equ	0xFF2
 14428                           intcon2	equ	0xFF1
 14429                           postinc0	equ	0xFEE
 14430                           wreg	equ	0xFE8
 14431                           postinc1	equ	0xFE6
 14432                           postdec1	equ	0xFE5
 14433                           fsr1h	equ	0xFE2
 14434                           fsr1l	equ	0xFE1
 14435                           indf2	equ	0xFDF
 14436                           postinc2	equ	0xFDE
 14437                           postdec2	equ	0xFDD
 14438                           plusw2	equ	0xFDB
 14439                           fsr2h	equ	0xFDA
 14440                           fsr2l	equ	0xFD9
 14441                           status	equ	0xFD8
 14442                           
 14443 ;; *************** function ___altoft *****************
 14444 ;; Defined at:
 14445 ;;		line 42 in file "/opt/microchip/xc8/v1.34/sources/common/altoft.c"
 14446 ;; Parameters:    Size  Location     Type
 14447 ;;  c               4   28[COMRAM] long 
 14448 ;; Auto vars:     Size  Location     Type
 14449 ;;  sign            1   37[COMRAM] unsigned char 
 14450 ;;  exp             1   36[COMRAM] unsigned char 
 14451 ;; Return value:  Size  Location     Type
 14452 ;;                  3   28[COMRAM] float 
 14453 ;; Registers used:
 14454 ;;		wreg, status,2, status,0, cstack
 14455 ;; Tracked objects:
 14456 ;;		On entry : 0/0
 14457 ;;		On exit  : 0/0
 14458 ;;		Unchanged: 0/0
 14459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14460 ;;      Params:         4       0       0       0       0       0       0       0       0
 14461 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14462 ;;      Temps:          4       0       0       0       0       0       0       0       0
 14463 ;;      Totals:        10       0       0       0       0       0       0       0       0
 14464 ;;Total ram usage:       10 bytes
 14465 ;; Hardware stack levels used:    1
 14466 ;; Hardware stack levels required when called:    2
 14467 ;; This function calls:
 14468 ;;		___ftpack
 14469 ;; This function is called by:
 14470 ;;		_main
 14471 ;;		_floor
 14472 ;; This function uses a non-reentrant model
 14473 ;;
 14474                           
 14475                           	psect	text37
 14476  0046A0                     __ptext37:
 14477                           	opt stack 0
 14478  0046A0                     ___altoft:
 14479                           	opt stack 28
 14480                           
 14481                           ; BSR set to: 0
 14482                           ;incstack = 0
 14483  0046A0  0E00               	movlw	0
 14484  0046A2  6E26               	movwf	___altoft@sign,c
 14485  0046A4  0E8E               	movlw	142
 14486  0046A6  6E25               	movwf	___altoft@exp,c
 14487  0046A8  AE20               	btfss	___altoft@c+3,7,c
 14488  0046AA  D012               	goto	l5450
 14489  0046AC  1E20               	comf	___altoft@c+3,f,c
 14490  0046AE  1E1F               	comf	___altoft@c+2,f,c
 14491  0046B0  1E1E               	comf	___altoft@c+1,f,c
 14492  0046B2  6C1D               	negf	___altoft@c,c
 14493  0046B4  0E00               	movlw	0
 14494  0046B6  221E               	addwfc	___altoft@c+1,f,c
 14495  0046B8  221F               	addwfc	___altoft@c+2,f,c
 14496  0046BA  2220               	addwfc	___altoft@c+3,f,c
 14497  0046BC  0E01               	movlw	1
 14498  0046BE  6E26               	movwf	___altoft@sign,c
 14499  0046C0  D007               	goto	l5450
 14500  0046C2                     l5448:
 14501  0046C2  90D8               	bcf	status,0,c
 14502  0046C4  3220               	rrcf	___altoft@c+3,f,c
 14503  0046C6  321F               	rrcf	___altoft@c+2,f,c
 14504  0046C8  321E               	rrcf	___altoft@c+1,f,c
 14505  0046CA  321D               	rrcf	___altoft@c,f,c
 14506  0046CC  2A25               	incf	___altoft@exp,f,c
 14507  0046CE  D000               	goto	l5450
 14508  0046D0                     l5450:
 14509  0046D0  0E00               	movlw	0
 14510  0046D2  141D               	andwf	___altoft@c,w,c
 14511  0046D4  6E21               	movwf	??___altoft& (0+255),c
 14512  0046D6  0E00               	movlw	0
 14513  0046D8  141E               	andwf	___altoft@c+1,w,c
 14514  0046DA  6E22               	movwf	(??___altoft+1)& (0+255),c
 14515  0046DC  0E00               	movlw	0
 14516  0046DE  141F               	andwf	___altoft@c+2,w,c
 14517  0046E0  6E23               	movwf	(??___altoft+2)& (0+255),c
 14518  0046E2  0EFF               	movlw	255
 14519  0046E4  1420               	andwf	___altoft@c+3,w,c
 14520  0046E6  6E24               	movwf	(??___altoft+3)& (0+255),c
 14521  0046E8  5021               	movf	??___altoft,w,c
 14522  0046EA  1022               	iorwf	??___altoft+1,w,c
 14523  0046EC  1023               	iorwf	??___altoft+2,w,c
 14524  0046EE  1024               	iorwf	??___altoft+3,w,c
 14525  0046F0  A4D8               	btfss	status,2,c
 14526  0046F2  D7E7               	goto	l5448
 14527  0046F4  C01D  F00F         	movff	___altoft@c,___ftpack@arg
 14528  0046F8  C01E  F010         	movff	___altoft@c+1,___ftpack@arg+1
 14529  0046FC  C01F  F011         	movff	___altoft@c+2,___ftpack@arg+2
 14530  004700  C025  F012         	movff	___altoft@exp,___ftpack@exp
 14531  004704  C026  F013         	movff	___altoft@sign,___ftpack@sign
 14532  004708  EC06  F021         	call	___ftpack	;wreg free
 14533  00470C  C00F  F01D         	movff	?___ftpack,?___altoft
 14534  004710  C010  F01E         	movff	?___ftpack+1,?___altoft+1
 14535  004714  C011  F01F         	movff	?___ftpack+2,?___altoft+2
 14536  004718  D000               	goto	l768
 14537  00471A                     l768:
 14538  00471A  0012               	return		;funcret
 14539  00471C                     __end_of___altoft:
 14540                           	opt stack 0
 14541                           tblptru	equ	0xFF8
 14542                           tblptrh	equ	0xFF7
 14543                           tblptrl	equ	0xFF6
 14544                           tablat	equ	0xFF5
 14545                           prodh	equ	0xFF4
 14546                           prodl	equ	0xFF3
 14547                           intcon	equ	0xFF2
 14548                           intcon2	equ	0xFF1
 14549                           postinc0	equ	0xFEE
 14550                           wreg	equ	0xFE8
 14551                           postinc1	equ	0xFE6
 14552                           postdec1	equ	0xFE5
 14553                           fsr1h	equ	0xFE2
 14554                           fsr1l	equ	0xFE1
 14555                           indf2	equ	0xFDF
 14556                           postinc2	equ	0xFDE
 14557                           postdec2	equ	0xFDD
 14558                           plusw2	equ	0xFDB
 14559                           fsr2h	equ	0xFDA
 14560                           fsr2l	equ	0xFD9
 14561                           status	equ	0xFD8
 14562                           
 14563 ;; *************** function _eval_poly *****************
 14564 ;; Defined at:
 14565 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/evalpoly.c"
 14566 ;; Parameters:    Size  Location     Type
 14567 ;;  x               3   12[BANK0 ] float 
 14568 ;;  d               2   15[BANK0 ] PTR const 
 14569 ;;		 -> log@coeff(27), exp@coeff(30), 
 14570 ;;  n               2   17[BANK0 ] int 
 14571 ;; Auto vars:     Size  Location     Type
 14572 ;;  res             3   19[BANK0 ] int 
 14573 ;; Return value:  Size  Location     Type
 14574 ;;                  3   12[BANK0 ] int 
 14575 ;; Registers used:
 14576 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14577 ;; Tracked objects:
 14578 ;;		On entry : 0/0
 14579 ;;		On exit  : 0/0
 14580 ;;		Unchanged: 0/0
 14581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14582 ;;      Params:         0       7       0       0       0       0       0       0       0
 14583 ;;      Locals:         0       3       0       0       0       0       0       0       0
 14584 ;;      Temps:          2       0       0       0       0       0       0       0       0
 14585 ;;      Totals:         2      10       0       0       0       0       0       0       0
 14586 ;;Total ram usage:       12 bytes
 14587 ;; Hardware stack levels used:    1
 14588 ;; Hardware stack levels required when called:    3
 14589 ;; This function calls:
 14590 ;;		___ftadd
 14591 ;;		___ftmul
 14592 ;;		___wmul
 14593 ;; This function is called by:
 14594 ;;		_exp
 14595 ;;		_log
 14596 ;; This function uses a non-reentrant model
 14597 ;;
 14598                           
 14599                           	psect	text38
 14600  003F98                     __ptext38:
 14601                           	opt stack 0
 14602  003F98                     _eval_poly:
 14603                           	opt stack 24
 14604                           
 14605                           ;incstack = 0
 14606  003F98  C071  F017         	movff	eval_poly@n,___wmul@multiplier
 14607  003F9C  C072  F018         	movff	eval_poly@n+1,___wmul@multiplier+1
 14608  003FA0  0E00               	movlw	0
 14609  003FA2  6E1A               	movwf	___wmul@multiplicand+1,c
 14610  003FA4  0E03               	movlw	3
 14611  003FA6  6E19               	movwf	___wmul@multiplicand,c
 14612  003FA8  EC10  F027         	call	___wmul	;wreg free
 14613  003FAC  C06F  F042         	movff	eval_poly@d,??_eval_poly
 14614  003FB0  C070  F043         	movff	eval_poly@d+1,??_eval_poly+1
 14615  003FB4  5017               	movf	?___wmul,w,c
 14616  003FB6  2642               	addwf	??_eval_poly,f,c
 14617  003FB8  5018               	movf	?___wmul+1,w,c
 14618  003FBA  2243               	addwfc	??_eval_poly+1,f,c
 14619  003FBC  C042  FFF6         	movff	??_eval_poly,tblptrl
 14620  003FC0  C043  FFF7         	movff	??_eval_poly+1,tblptrh
 14621  003FC4                     	if	0	;tblptru may be non-zero
 14622  003FC4                     	endif
 14623  003FC4                     	if	0	;tblptru may be non-zero
 14624  003FC4                     	endif
 14625  003FC4  0009               	tblrd		*+
 14626  003FC6  CFF5 F073          	movff	tablat,eval_poly@res
 14627  003FCA  0009               	tblrd		*+
 14628  003FCC  CFF5 F074          	movff	tablat,eval_poly@res+1
 14629  003FD0  000A               	tblrd		*-
 14630  003FD2  CFF5 F075          	movff	tablat,eval_poly@res+2
 14631  003FD6  D040               	goto	l5854
 14632  003FD8                     l5852:
 14633  003FD8  C073  F033         	movff	eval_poly@res,___ftmul@f2
 14634  003FDC  C074  F034         	movff	eval_poly@res+1,___ftmul@f2+1
 14635  003FE0  C075  F035         	movff	eval_poly@res+2,___ftmul@f2+2
 14636  003FE4  C06C  F030         	movff	eval_poly@x,___ftmul@f1
 14637  003FE8  C06D  F031         	movff	eval_poly@x+1,___ftmul@f1+1
 14638  003FEC  C06E  F032         	movff	eval_poly@x+2,___ftmul@f1+2
 14639  003FF0  EC70  F01E         	call	___ftmul	;wreg free
 14640  003FF4  C030  F060         	movff	?___ftmul,___ftadd@f1
 14641  003FF8  C031  F061         	movff	?___ftmul+1,___ftadd@f1+1
 14642  003FFC  C032  F062         	movff	?___ftmul+2,___ftadd@f1+2
 14643  004000  0E00               	movlw	0
 14644  004002  6E1A               	movwf	___wmul@multiplicand+1,c
 14645  004004  0E03               	movlw	3
 14646  004006  6E19               	movwf	___wmul@multiplicand,c
 14647  004008  0100               	movlb	0	; () banked
 14648  00400A  0771               	decf	eval_poly@n& (0+255),f,b
 14649  00400C  A0D8               	btfss	status,0,c
 14650  00400E  0772               	decf	(eval_poly@n+1)& (0+255),f,b
 14651  004010  C071  F017         	movff	eval_poly@n,___wmul@multiplier
 14652  004014  C072  F018         	movff	eval_poly@n+1,___wmul@multiplier+1
 14653  004018  EC10  F027         	call	___wmul	;wreg free
 14654  00401C  C06F  F042         	movff	eval_poly@d,??_eval_poly
 14655  004020  C070  F043         	movff	eval_poly@d+1,??_eval_poly+1
 14656  004024  5017               	movf	?___wmul,w,c
 14657  004026  2642               	addwf	??_eval_poly,f,c
 14658  004028  5018               	movf	?___wmul+1,w,c
 14659  00402A  2243               	addwfc	??_eval_poly+1,f,c
 14660  00402C  C042  FFF6         	movff	??_eval_poly,tblptrl
 14661  004030  C043  FFF7         	movff	??_eval_poly+1,tblptrh
 14662  004034                     	if	0	;tblptru may be non-zero
 14663  004034                     	endif
 14664  004034                     	if	0	;tblptru may be non-zero
 14665  004034                     	endif
 14666  004034  0009               	tblrd		*+
 14667  004036  CFF5 F063          	movff	tablat,___ftadd@f2
 14668  00403A  0009               	tblrd		*+
 14669  00403C  CFF5 F064          	movff	tablat,___ftadd@f2+1
 14670  004040  000A               	tblrd		*-
 14671  004042  CFF5 F065          	movff	tablat,___ftadd@f2+2
 14672  004046  EC28  F016         	call	___ftadd	;wreg free
 14673  00404A  C060  F073         	movff	?___ftadd,eval_poly@res
 14674  00404E  C061  F074         	movff	?___ftadd+1,eval_poly@res+1
 14675  004052  C062  F075         	movff	?___ftadd+2,eval_poly@res+2
 14676  004056  D000               	goto	l5854
 14677  004058                     l5854:
 14678  004058  0100               	movlb	0	; () banked
 14679  00405A  5171               	movf	eval_poly@n& (0+255),w,b
 14680  00405C  0100               	movlb	0	; () banked
 14681  00405E  1172               	iorwf	(eval_poly@n+1)& (0+255),w,b
 14682  004060  A4D8               	btfss	status,2,c
 14683  004062  D7BA               	goto	l5852
 14684                           
 14685                           ; BSR set to: 0
 14686  004064  C073  F06C         	movff	eval_poly@res,?_eval_poly
 14687  004068  C074  F06D         	movff	eval_poly@res+1,?_eval_poly+1
 14688  00406C  C075  F06E         	movff	eval_poly@res+2,?_eval_poly+2
 14689                           
 14690                           ; BSR set to: 0
 14691  004070  0012               	return		;funcret
 14692  004072                     __end_of_eval_poly:
 14693                           	opt stack 0
 14694                           tblptru	equ	0xFF8
 14695                           tblptrh	equ	0xFF7
 14696                           tblptrl	equ	0xFF6
 14697                           tablat	equ	0xFF5
 14698                           prodh	equ	0xFF4
 14699                           prodl	equ	0xFF3
 14700                           intcon	equ	0xFF2
 14701                           intcon2	equ	0xFF1
 14702                           postinc0	equ	0xFEE
 14703                           wreg	equ	0xFE8
 14704                           postinc1	equ	0xFE6
 14705                           postdec1	equ	0xFE5
 14706                           fsr1h	equ	0xFE2
 14707                           fsr1l	equ	0xFE1
 14708                           indf2	equ	0xFDF
 14709                           postinc2	equ	0xFDE
 14710                           postdec2	equ	0xFDD
 14711                           plusw2	equ	0xFDB
 14712                           fsr2h	equ	0xFDA
 14713                           fsr2l	equ	0xFD9
 14714                           status	equ	0xFD8
 14715                           
 14716 ;; *************** function ___wmul *****************
 14717 ;; Defined at:
 14718 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/Umul16.c"
 14719 ;; Parameters:    Size  Location     Type
 14720 ;;  multiplier      2   22[COMRAM] unsigned int 
 14721 ;;  multiplicand    2   24[COMRAM] unsigned int 
 14722 ;; Auto vars:     Size  Location     Type
 14723 ;;  product         2   26[COMRAM] unsigned int 
 14724 ;; Return value:  Size  Location     Type
 14725 ;;                  2   22[COMRAM] unsigned int 
 14726 ;; Registers used:
 14727 ;;		wreg, status,2, status,0, prodl, prodh
 14728 ;; Tracked objects:
 14729 ;;		On entry : 0/0
 14730 ;;		On exit  : 0/0
 14731 ;;		Unchanged: 0/0
 14732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14733 ;;      Params:         4       0       0       0       0       0       0       0       0
 14734 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14735 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14736 ;;      Totals:         6       0       0       0       0       0       0       0       0
 14737 ;;Total ram usage:        6 bytes
 14738 ;; Hardware stack levels used:    1
 14739 ;; Hardware stack levels required when called:    1
 14740 ;; This function calls:
 14741 ;;		Nothing
 14742 ;; This function is called by:
 14743 ;;		_Compute
 14744 ;;		_Interval
 14745 ;;		_main
 14746 ;;		_printf
 14747 ;;		_eval_poly
 14748 ;; This function uses a non-reentrant model
 14749 ;;
 14750                           
 14751                           	psect	text39
 14752  004E20                     __ptext39:
 14753                           	opt stack 0
 14754  004E20                     ___wmul:
 14755                           	opt stack 28
 14756                           
 14757                           ; BSR set to: 0
 14758                           ;incstack = 0
 14759  004E20  5017               	movf	___wmul@multiplier,w,c
 14760  004E22  0219               	mulwf	___wmul@multiplicand,c
 14761  004E24  CFF3 F01B          	movff	prodl,___wmul@product
 14762  004E28  CFF4 F01C          	movff	prodh,___wmul@product+1
 14763  004E2C  5017               	movf	___wmul@multiplier,w,c
 14764  004E2E  021A               	mulwf	___wmul@multiplicand+1,c
 14765  004E30  50F3               	movf	prodl,w,c
 14766  004E32  261C               	addwf	___wmul@product+1,f,c
 14767  004E34  5018               	movf	___wmul@multiplier+1,w,c
 14768  004E36  0219               	mulwf	___wmul@multiplicand,c
 14769  004E38  50F3               	movf	prodl,w,c
 14770  004E3A  261C               	addwf	___wmul@product+1,f,c
 14771  004E3C  C01B  F017         	movff	___wmul@product,?___wmul
 14772  004E40  C01C  F018         	movff	___wmul@product+1,?___wmul+1
 14773  004E44  D000               	goto	l671
 14774  004E46                     l671:
 14775  004E46  0012               	return		;funcret
 14776  004E48                     __end_of___wmul:
 14777                           	opt stack 0
 14778                           tblptru	equ	0xFF8
 14779                           tblptrh	equ	0xFF7
 14780                           tblptrl	equ	0xFF6
 14781                           tablat	equ	0xFF5
 14782                           prodh	equ	0xFF4
 14783                           prodl	equ	0xFF3
 14784                           intcon	equ	0xFF2
 14785                           intcon2	equ	0xFF1
 14786                           postinc0	equ	0xFEE
 14787                           wreg	equ	0xFE8
 14788                           postinc1	equ	0xFE6
 14789                           postdec1	equ	0xFE5
 14790                           fsr1h	equ	0xFE2
 14791                           fsr1l	equ	0xFE1
 14792                           indf2	equ	0xFDF
 14793                           postinc2	equ	0xFDE
 14794                           postdec2	equ	0xFDD
 14795                           plusw2	equ	0xFDB
 14796                           fsr2h	equ	0xFDA
 14797                           fsr2l	equ	0xFD9
 14798                           status	equ	0xFD8
 14799                           
 14800 ;; *************** function ___ftsub *****************
 14801 ;; Defined at:
 14802 ;;		line 20 in file "/opt/microchip/xc8/v1.34/sources/common/ftsub.c"
 14803 ;; Parameters:    Size  Location     Type
 14804 ;;  f1              3   12[BANK0 ] float 
 14805 ;;  f2              3   15[BANK0 ] float 
 14806 ;; Auto vars:     Size  Location     Type
 14807 ;;		None
 14808 ;; Return value:  Size  Location     Type
 14809 ;;                  3   12[BANK0 ] float 
 14810 ;; Registers used:
 14811 ;;		wreg, status,2, status,0, cstack
 14812 ;; Tracked objects:
 14813 ;;		On entry : 0/0
 14814 ;;		On exit  : 0/0
 14815 ;;		Unchanged: 0/0
 14816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14817 ;;      Params:         0       6       0       0       0       0       0       0       0
 14818 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14819 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14820 ;;      Totals:         0       6       0       0       0       0       0       0       0
 14821 ;;Total ram usage:        6 bytes
 14822 ;; Hardware stack levels used:    1
 14823 ;; Hardware stack levels required when called:    3
 14824 ;; This function calls:
 14825 ;;		___ftadd
 14826 ;; This function is called by:
 14827 ;;		_exp
 14828 ;; This function uses a non-reentrant model
 14829 ;;
 14830                           
 14831                           	psect	text40
 14832  004B72                     __ptext40:
 14833                           	opt stack 0
 14834  004B72                     ___ftsub:
 14835                           	opt stack 24
 14836                           
 14837                           ;incstack = 0
 14838  004B72  0100               	movlb	0	; () banked
 14839  004B74  516F               	movf	___ftsub@f2& (0+255),w,b
 14840  004B76  0100               	movlb	0	; () banked
 14841  004B78  1170               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 14842  004B7A  0100               	movlb	0	; () banked
 14843  004B7C  1171               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 14844  004B7E  B4D8               	btfsc	status,2,c
 14845  004B80  D00A               	goto	l5724
 14846                           
 14847                           ; BSR set to: 0
 14848  004B82  0E00               	movlw	0
 14849  004B84  0100               	movlb	0	; () banked
 14850  004B86  1B6F               	xorwf	___ftsub@f2& (0+255),f,b
 14851  004B88  0E00               	movlw	0
 14852  004B8A  0100               	movlb	0	; () banked
 14853  004B8C  1B70               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 14854  004B8E  0E80               	movlw	128
 14855  004B90  0100               	movlb	0	; () banked
 14856  004B92  1B71               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 14857  004B94  D000               	goto	l5724
 14858  004B96                     l5724:
 14859                           
 14860                           ; BSR set to: 0
 14861  004B96  C06C  F060         	movff	___ftsub@f1,___ftadd@f1
 14862  004B9A  C06D  F061         	movff	___ftsub@f1+1,___ftadd@f1+1
 14863  004B9E  C06E  F062         	movff	___ftsub@f1+2,___ftadd@f1+2
 14864  004BA2  C06F  F063         	movff	___ftsub@f2,___ftadd@f2
 14865  004BA6  C070  F064         	movff	___ftsub@f2+1,___ftadd@f2+1
 14866  004BAA  C071  F065         	movff	___ftsub@f2+2,___ftadd@f2+2
 14867  004BAE  EC28  F016         	call	___ftadd	;wreg free
 14868  004BB2  C060  F06C         	movff	?___ftadd,?___ftsub
 14869  004BB6  C061  F06D         	movff	?___ftadd+1,?___ftsub+1
 14870  004BBA  C062  F06E         	movff	?___ftadd+2,?___ftsub+2
 14871  004BBE  D000               	goto	l1083
 14872  004BC0                     l1083:
 14873  004BC0  0012               	return		;funcret
 14874  004BC2                     __end_of___ftsub:
 14875                           	opt stack 0
 14876                           tblptru	equ	0xFF8
 14877                           tblptrh	equ	0xFF7
 14878                           tblptrl	equ	0xFF6
 14879                           tablat	equ	0xFF5
 14880                           prodh	equ	0xFF4
 14881                           prodl	equ	0xFF3
 14882                           intcon	equ	0xFF2
 14883                           intcon2	equ	0xFF1
 14884                           postinc0	equ	0xFEE
 14885                           wreg	equ	0xFE8
 14886                           postinc1	equ	0xFE6
 14887                           postdec1	equ	0xFE5
 14888                           fsr1h	equ	0xFE2
 14889                           fsr1l	equ	0xFE1
 14890                           indf2	equ	0xFDF
 14891                           postinc2	equ	0xFDE
 14892                           postdec2	equ	0xFDD
 14893                           plusw2	equ	0xFDB
 14894                           fsr2h	equ	0xFDA
 14895                           fsr2l	equ	0xFD9
 14896                           status	equ	0xFD8
 14897                           
 14898 ;; *************** function ___ftneg *****************
 14899 ;; Defined at:
 14900 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
 14901 ;; Parameters:    Size  Location     Type
 14902 ;;  f1              3   62[COMRAM] float 
 14903 ;; Auto vars:     Size  Location     Type
 14904 ;;		None
 14905 ;; Return value:  Size  Location     Type
 14906 ;;                  3   62[COMRAM] float 
 14907 ;; Registers used:
 14908 ;;		wreg, status,2, status,0
 14909 ;; Tracked objects:
 14910 ;;		On entry : 0/0
 14911 ;;		On exit  : 0/0
 14912 ;;		Unchanged: 0/0
 14913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14914 ;;      Params:         3       0       0       0       0       0       0       0       0
 14915 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14916 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14917 ;;      Totals:         3       0       0       0       0       0       0       0       0
 14918 ;;Total ram usage:        3 bytes
 14919 ;; Hardware stack levels used:    1
 14920 ;; Hardware stack levels required when called:    1
 14921 ;; This function calls:
 14922 ;;		Nothing
 14923 ;; This function is called by:
 14924 ;;		_Compute
 14925 ;;		_main
 14926 ;;		_pow
 14927 ;;		_exp
 14928 ;; This function uses a non-reentrant model
 14929 ;;
 14930                           
 14931                           	psect	text41
 14932  004E6C                     __ptext41:
 14933                           	opt stack 0
 14934  004E6C                     ___ftneg:
 14935                           	opt stack 29
 14936                           
 14937                           ;incstack = 0
 14938  004E6C  503F               	movf	___ftneg@f1,w,c
 14939  004E6E  1040               	iorwf	___ftneg@f1+1,w,c
 14940  004E70  1041               	iorwf	___ftneg@f1+2,w,c
 14941  004E72  B4D8               	btfsc	status,2,c
 14942  004E74  D006               	goto	l1076
 14943  004E76  0E00               	movlw	0
 14944  004E78  1A3F               	xorwf	___ftneg@f1,f,c
 14945  004E7A  0E00               	movlw	0
 14946  004E7C  1A40               	xorwf	___ftneg@f1+1,f,c
 14947  004E7E  0E80               	movlw	128
 14948  004E80  1A41               	xorwf	___ftneg@f1+2,f,c
 14949  004E82                     l1076:
 14950  004E82  C03F  F03F         	movff	___ftneg@f1,?___ftneg
 14951  004E86  C040  F040         	movff	___ftneg@f1+1,?___ftneg+1
 14952  004E8A  C041  F041         	movff	___ftneg@f1+2,?___ftneg+2
 14953  004E8E  0012               	return		;funcret
 14954  004E90                     __end_of___ftneg:
 14955                           	opt stack 0
 14956                           tblptru	equ	0xFF8
 14957                           tblptrh	equ	0xFF7
 14958                           tblptrl	equ	0xFF6
 14959                           tablat	equ	0xFF5
 14960                           prodh	equ	0xFF4
 14961                           prodl	equ	0xFF3
 14962                           intcon	equ	0xFF2
 14963                           intcon2	equ	0xFF1
 14964                           postinc0	equ	0xFEE
 14965                           wreg	equ	0xFE8
 14966                           postinc1	equ	0xFE6
 14967                           postdec1	equ	0xFE5
 14968                           fsr1h	equ	0xFE2
 14969                           fsr1l	equ	0xFE1
 14970                           indf2	equ	0xFDF
 14971                           postinc2	equ	0xFDE
 14972                           postdec2	equ	0xFDD
 14973                           plusw2	equ	0xFDB
 14974                           fsr2h	equ	0xFDA
 14975                           fsr2l	equ	0xFD9
 14976                           status	equ	0xFD8
 14977                           
 14978 ;; *************** function ___ftdiv *****************
 14979 ;; Defined at:
 14980 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
 14981 ;; Parameters:    Size  Location     Type
 14982 ;;  f1              3   32[COMRAM] float 
 14983 ;;  f2              3   35[COMRAM] float 
 14984 ;; Auto vars:     Size  Location     Type
 14985 ;;  f3              3   42[COMRAM] float 
 14986 ;;  sign            1   46[COMRAM] unsigned char 
 14987 ;;  exp             1   45[COMRAM] unsigned char 
 14988 ;;  cntr            1   41[COMRAM] unsigned char 
 14989 ;; Return value:  Size  Location     Type
 14990 ;;                  3   32[COMRAM] float 
 14991 ;; Registers used:
 14992 ;;		wreg, status,2, status,0, cstack
 14993 ;; Tracked objects:
 14994 ;;		On entry : 0/0
 14995 ;;		On exit  : 0/0
 14996 ;;		Unchanged: 0/0
 14997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14998 ;;      Params:         6       0       0       0       0       0       0       0       0
 14999 ;;      Locals:         6       0       0       0       0       0       0       0       0
 15000 ;;      Temps:          3       0       0       0       0       0       0       0       0
 15001 ;;      Totals:        15       0       0       0       0       0       0       0       0
 15002 ;;Total ram usage:       15 bytes
 15003 ;; Hardware stack levels used:    1
 15004 ;; Hardware stack levels required when called:    2
 15005 ;; This function calls:
 15006 ;;		___ftpack
 15007 ;; This function is called by:
 15008 ;;		_Compute
 15009 ;;		_Interval
 15010 ;;		_exp
 15011 ;; This function uses a non-reentrant model
 15012 ;;
 15013                           
 15014                           	psect	text42
 15015  003DD8                     __ptext42:
 15016                           	opt stack 0
 15017  003DD8                     ___ftdiv:
 15018                           	opt stack 26
 15019                           
 15020                           ;incstack = 0
 15021  003DD8  C023  F027         	movff	___ftdiv@f1+2,??___ftdiv
 15022  003DDC  6A28               	clrf	(??___ftdiv+1)& (0+255),c
 15023  003DDE  6A29               	clrf	(??___ftdiv+2)& (0+255),c
 15024  003DE0  3422               	rlcf	___ftdiv@f1+1,w,c
 15025  003DE2  3627               	rlcf	??___ftdiv& (0+255),f,c
 15026  003DE4  E301               	bnc	u6861
 15027  003DE6  8028               	bsf	(??___ftdiv+1)& (0+255),0,c
 15028  003DE8                     u6861:
 15029  003DE8  5027               	movf	??___ftdiv,w,c
 15030  003DEA  6E2E               	movwf	___ftdiv@exp,c
 15031  003DEC  502E               	movf	___ftdiv@exp,w,c
 15032  003DEE  A4D8               	btfss	status,2,c
 15033  003DF0  D002               	goto	l5680
 15034  003DF2  D00E               	goto	l5682
 15035  003DF4  D061               	goto	l1051
 15036  003DF6                     l5680:
 15037  003DF6  C026  F027         	movff	___ftdiv@f2+2,??___ftdiv
 15038  003DFA  6A28               	clrf	(??___ftdiv+1)& (0+255),c
 15039  003DFC  6A29               	clrf	(??___ftdiv+2)& (0+255),c
 15040  003DFE  3425               	rlcf	___ftdiv@f2+1,w,c
 15041  003E00  3627               	rlcf	??___ftdiv& (0+255),f,c
 15042  003E02  E301               	bnc	u6881
 15043  003E04  8028               	bsf	(??___ftdiv+1)& (0+255),0,c
 15044  003E06                     u6881:
 15045  003E06  5027               	movf	??___ftdiv,w,c
 15046  003E08  6E2F               	movwf	___ftdiv@sign,c
 15047  003E0A  502F               	movf	___ftdiv@sign,w,c
 15048  003E0C  A4D8               	btfss	status,2,c
 15049  003E0E  D007               	goto	l5686
 15050  003E10                     l5682:
 15051  003E10  0E00               	movlw	0
 15052  003E12  6E21               	movwf	?___ftdiv,c
 15053  003E14  0E00               	movlw	0
 15054  003E16  6E22               	movwf	?___ftdiv+1,c
 15055  003E18  0E00               	movlw	0
 15056  003E1A  6E23               	movwf	?___ftdiv+2,c
 15057  003E1C  D04D               	goto	l1051
 15058  003E1E                     l5686:
 15059  003E1E  0E00               	movlw	0
 15060  003E20  6E2B               	movwf	___ftdiv@f3,c
 15061  003E22  0E00               	movlw	0
 15062  003E24  6E2C               	movwf	___ftdiv@f3+1,c
 15063  003E26  0E00               	movlw	0
 15064  003E28  6E2D               	movwf	___ftdiv@f3+2,c
 15065  003E2A  502F               	movf	___ftdiv@sign,w,c
 15066  003E2C  0F89               	addlw	137
 15067  003E2E  5E2E               	subwf	___ftdiv@exp,f,c
 15068  003E30  C023  F02F         	movff	___ftdiv@f1+2,___ftdiv@sign
 15069  003E34  5026               	movf	___ftdiv@f2+2,w,c
 15070  003E36  1A2F               	xorwf	___ftdiv@sign,f,c
 15071  003E38  0E80               	movlw	128
 15072  003E3A  162F               	andwf	___ftdiv@sign,f,c
 15073  003E3C  8E22               	bsf	___ftdiv@f1+1,7,c
 15074  003E3E  0EFF               	movlw	255
 15075  003E40  1621               	andwf	___ftdiv@f1,f,c
 15076  003E42  0EFF               	movlw	255
 15077  003E44  1622               	andwf	___ftdiv@f1+1,f,c
 15078  003E46  0E00               	movlw	0
 15079  003E48  1623               	andwf	___ftdiv@f1+2,f,c
 15080  003E4A  8E25               	bsf	___ftdiv@f2+1,7,c
 15081  003E4C  0EFF               	movlw	255
 15082  003E4E  1624               	andwf	___ftdiv@f2,f,c
 15083  003E50  0EFF               	movlw	255
 15084  003E52  1625               	andwf	___ftdiv@f2+1,f,c
 15085  003E54  0E00               	movlw	0
 15086  003E56  1626               	andwf	___ftdiv@f2+2,f,c
 15087  003E58  0E18               	movlw	24
 15088  003E5A  6E2A               	movwf	___ftdiv@cntr,c
 15089  003E5C  D000               	goto	l5706
 15090  003E5E                     l5706:
 15091  003E5E  90D8               	bcf	status,0,c
 15092  003E60  362B               	rlcf	___ftdiv@f3,f,c
 15093  003E62  362C               	rlcf	___ftdiv@f3+1,f,c
 15094  003E64  362D               	rlcf	___ftdiv@f3+2,f,c
 15095  003E66  5024               	movf	___ftdiv@f2,w,c
 15096  003E68  5C21               	subwf	___ftdiv@f1,w,c
 15097  003E6A  5025               	movf	___ftdiv@f2+1,w,c
 15098  003E6C  5822               	subwfb	___ftdiv@f1+1,w,c
 15099  003E6E  5026               	movf	___ftdiv@f2+2,w,c
 15100  003E70  5823               	subwfb	___ftdiv@f1+2,w,c
 15101  003E72  A0D8               	btfss	status,0,c
 15102  003E74  D007               	goto	l1054
 15103  003E76  5024               	movf	___ftdiv@f2,w,c
 15104  003E78  5E21               	subwf	___ftdiv@f1,f,c
 15105  003E7A  5025               	movf	___ftdiv@f2+1,w,c
 15106  003E7C  5A22               	subwfb	___ftdiv@f1+1,f,c
 15107  003E7E  5026               	movf	___ftdiv@f2+2,w,c
 15108  003E80  5A23               	subwfb	___ftdiv@f1+2,f,c
 15109  003E82  802B               	bsf	___ftdiv@f3,0,c
 15110  003E84                     l1054:
 15111  003E84  90D8               	bcf	status,0,c
 15112  003E86  3621               	rlcf	___ftdiv@f1,f,c
 15113  003E88  3622               	rlcf	___ftdiv@f1+1,f,c
 15114  003E8A  3623               	rlcf	___ftdiv@f1+2,f,c
 15115  003E8C  2E2A               	decfsz	___ftdiv@cntr,f,c
 15116  003E8E  D7E7               	goto	l5706
 15117  003E90  D000               	goto	l5716
 15118  003E92                     l5716:
 15119  003E92  C02B  F00F         	movff	___ftdiv@f3,___ftpack@arg
 15120  003E96  C02C  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
 15121  003E9A  C02D  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
 15122  003E9E  C02E  F012         	movff	___ftdiv@exp,___ftpack@exp
 15123  003EA2  C02F  F013         	movff	___ftdiv@sign,___ftpack@sign
 15124  003EA6  EC06  F021         	call	___ftpack	;wreg free
 15125  003EAA  C00F  F021         	movff	?___ftpack,?___ftdiv
 15126  003EAE  C010  F022         	movff	?___ftpack+1,?___ftdiv+1
 15127  003EB2  C011  F023         	movff	?___ftpack+2,?___ftdiv+2
 15128  003EB6  D000               	goto	l1051
 15129  003EB8                     l1051:
 15130  003EB8  0012               	return		;funcret
 15131  003EBA                     __end_of___ftdiv:
 15132                           	opt stack 0
 15133                           tblptru	equ	0xFF8
 15134                           tblptrh	equ	0xFF7
 15135                           tblptrl	equ	0xFF6
 15136                           tablat	equ	0xFF5
 15137                           prodh	equ	0xFF4
 15138                           prodl	equ	0xFF3
 15139                           intcon	equ	0xFF2
 15140                           intcon2	equ	0xFF1
 15141                           postinc0	equ	0xFEE
 15142                           wreg	equ	0xFE8
 15143                           postinc1	equ	0xFE6
 15144                           postdec1	equ	0xFE5
 15145                           fsr1h	equ	0xFE2
 15146                           fsr1l	equ	0xFE1
 15147                           indf2	equ	0xFDF
 15148                           postinc2	equ	0xFDE
 15149                           postdec2	equ	0xFDD
 15150                           plusw2	equ	0xFDB
 15151                           fsr2h	equ	0xFDA
 15152                           fsr2l	equ	0xFD9
 15153                           status	equ	0xFD8
 15154                           
 15155 ;; *************** function ___lltoft *****************
 15156 ;; Defined at:
 15157 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/common/lltoft.c"
 15158 ;; Parameters:    Size  Location     Type
 15159 ;;  c               4   22[COMRAM] unsigned long 
 15160 ;; Auto vars:     Size  Location     Type
 15161 ;;  exp             1   30[COMRAM] unsigned char 
 15162 ;; Return value:  Size  Location     Type
 15163 ;;                  3   22[COMRAM] float 
 15164 ;; Registers used:
 15165 ;;		wreg, status,2, status,0, cstack
 15166 ;; Tracked objects:
 15167 ;;		On entry : 0/0
 15168 ;;		On exit  : 0/0
 15169 ;;		Unchanged: 0/0
 15170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15171 ;;      Params:         4       0       0       0       0       0       0       0       0
 15172 ;;      Locals:         1       0       0       0       0       0       0       0       0
 15173 ;;      Temps:          4       0       0       0       0       0       0       0       0
 15174 ;;      Totals:         9       0       0       0       0       0       0       0       0
 15175 ;;Total ram usage:        9 bytes
 15176 ;; Hardware stack levels used:    1
 15177 ;; Hardware stack levels required when called:    2
 15178 ;; This function calls:
 15179 ;;		___ftpack
 15180 ;; This function is called by:
 15181 ;;		_pow
 15182 ;; This function uses a non-reentrant model
 15183 ;;
 15184                           
 15185                           	psect	text43
 15186  0049A6                     __ptext43:
 15187                           	opt stack 0
 15188  0049A6                     ___lltoft:
 15189                           	opt stack 26
 15190                           
 15191                           ;incstack = 0
 15192  0049A6  0E8E               	movlw	142
 15193  0049A8  6E1F               	movwf	___lltoft@exp,c
 15194  0049AA  D007               	goto	l6046
 15195  0049AC                     l6044:
 15196  0049AC  90D8               	bcf	status,0,c
 15197  0049AE  321A               	rrcf	___lltoft@c+3,f,c
 15198  0049B0  3219               	rrcf	___lltoft@c+2,f,c
 15199  0049B2  3218               	rrcf	___lltoft@c+1,f,c
 15200  0049B4  3217               	rrcf	___lltoft@c,f,c
 15201  0049B6  2A1F               	incf	___lltoft@exp,f,c
 15202  0049B8  D000               	goto	l6046
 15203  0049BA                     l6046:
 15204  0049BA  0E00               	movlw	0
 15205  0049BC  1417               	andwf	___lltoft@c,w,c
 15206  0049BE  6E1B               	movwf	??___lltoft& (0+255),c
 15207  0049C0  0E00               	movlw	0
 15208  0049C2  1418               	andwf	___lltoft@c+1,w,c
 15209  0049C4  6E1C               	movwf	(??___lltoft+1)& (0+255),c
 15210  0049C6  0E00               	movlw	0
 15211  0049C8  1419               	andwf	___lltoft@c+2,w,c
 15212  0049CA  6E1D               	movwf	(??___lltoft+2)& (0+255),c
 15213  0049CC  0EFF               	movlw	255
 15214  0049CE  141A               	andwf	___lltoft@c+3,w,c
 15215  0049D0  6E1E               	movwf	(??___lltoft+3)& (0+255),c
 15216  0049D2  501B               	movf	??___lltoft,w,c
 15217  0049D4  101C               	iorwf	??___lltoft+1,w,c
 15218  0049D6  101D               	iorwf	??___lltoft+2,w,c
 15219  0049D8  101E               	iorwf	??___lltoft+3,w,c
 15220  0049DA  A4D8               	btfss	status,2,c
 15221  0049DC  D7E7               	goto	l6044
 15222  0049DE  C017  F00F         	movff	___lltoft@c,___ftpack@arg
 15223  0049E2  C018  F010         	movff	___lltoft@c+1,___ftpack@arg+1
 15224  0049E6  C019  F011         	movff	___lltoft@c+2,___ftpack@arg+2
 15225  0049EA  C01F  F012         	movff	___lltoft@exp,___ftpack@exp
 15226  0049EE  0E00               	movlw	0
 15227  0049F0  6E13               	movwf	___ftpack@sign,c
 15228  0049F2  EC06  F021         	call	___ftpack	;wreg free
 15229  0049F6  C00F  F017         	movff	?___ftpack,?___lltoft
 15230  0049FA  C010  F018         	movff	?___ftpack+1,?___lltoft+1
 15231  0049FE  C011  F019         	movff	?___ftpack+2,?___lltoft+2
 15232  004A02  D000               	goto	l1161
 15233  004A04                     l1161:
 15234  004A04  0012               	return		;funcret
 15235  004A06                     __end_of___lltoft:
 15236                           	opt stack 0
 15237                           tblptru	equ	0xFF8
 15238                           tblptrh	equ	0xFF7
 15239                           tblptrl	equ	0xFF6
 15240                           tablat	equ	0xFF5
 15241                           prodh	equ	0xFF4
 15242                           prodl	equ	0xFF3
 15243                           intcon	equ	0xFF2
 15244                           intcon2	equ	0xFF1
 15245                           postinc0	equ	0xFEE
 15246                           wreg	equ	0xFE8
 15247                           postinc1	equ	0xFE6
 15248                           postdec1	equ	0xFE5
 15249                           fsr1h	equ	0xFE2
 15250                           fsr1l	equ	0xFE1
 15251                           indf2	equ	0xFDF
 15252                           postinc2	equ	0xFDE
 15253                           postdec2	equ	0xFDD
 15254                           plusw2	equ	0xFDB
 15255                           fsr2h	equ	0xFDA
 15256                           fsr2l	equ	0xFD9
 15257                           status	equ	0xFD8
 15258                           
 15259 ;; *************** function _CheckMem *****************
 15260 ;; Defined at:
 15261 ;;		line 235 in file "../main.c"
 15262 ;; Parameters:    Size  Location     Type
 15263 ;;  data            2   17[COMRAM] PTR unsigned char 
 15264 ;;		 -> main@old_1868(1), main@old_1865(1), main@old_1863(1), main@old_1860(1), 
 15265 ;;		 -> main@old(1), 
 15266 ;; Auto vars:     Size  Location     Type
 15267 ;;  rta             1   20[COMRAM] unsigned char 
 15268 ;; Return value:  Size  Location     Type
 15269 ;;		None               void
 15270 ;; Registers used:
 15271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15272 ;; Tracked objects:
 15273 ;;		On entry : 0/0
 15274 ;;		On exit  : 0/0
 15275 ;;		Unchanged: 0/0
 15276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15277 ;;      Params:         2       0       0       0       0       0       0       0       0
 15278 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15279 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15280 ;;      Totals:         4       0       0       0       0       0       0       0       0
 15281 ;;Total ram usage:        4 bytes
 15282 ;; Hardware stack levels used:    1
 15283 ;; Hardware stack levels required when called:    2
 15284 ;; This function calls:
 15285 ;;		_ReadMem
 15286 ;; This function is called by:
 15287 ;;		_main
 15288 ;; This function uses a non-reentrant model
 15289 ;;
 15290                           
 15291                           	psect	text44
 15292  004BC2                     __ptext44:
 15293                           	opt stack 0
 15294  004BC2                     _CheckMem:
 15295                           	opt stack 28
 15296                           
 15297                           ;main.c: 236: uc rta;
 15298                           ;main.c: 237: if (MF == 0){
 15299                           
 15300                           ;incstack = 0
 15301  004BC2  5050               	movf	_MF,w,c
 15302  004BC4  A4D8               	btfss	status,2,c
 15303  004BC6  D008               	goto	l6494
 15304                           
 15305                           ;main.c: 238: ReadMem(0,&rta);
 15306  004BC8  0E15               	movlw	low CheckMem@rta
 15307  004BCA  6E0F               	movwf	ReadMem@data,c
 15308  004BCC  0E00               	movlw	high CheckMem@rta
 15309  004BCE  6E10               	movwf	ReadMem@data+1,c
 15310  004BD0  0E00               	movlw	0
 15311  004BD2  EC59  F027         	call	_ReadMem
 15312                           
 15313                           ;main.c: 239: }else if(MF == 1){
 15314  004BD6  D00B               	goto	l6498
 15315  004BD8                     l6494:
 15316  004BD8  0450               	decf	_MF,w,c
 15317  004BDA  A4D8               	btfss	status,2,c
 15318  004BDC  D008               	goto	l6498
 15319                           
 15320                           ;main.c: 240: ReadMem(128,&rta);
 15321  004BDE  0E15               	movlw	low CheckMem@rta
 15322  004BE0  6E0F               	movwf	ReadMem@data,c
 15323  004BE2  0E00               	movlw	high CheckMem@rta
 15324  004BE4  6E10               	movwf	ReadMem@data+1,c
 15325  004BE6  0E80               	movlw	128
 15326  004BE8  EC59  F027         	call	_ReadMem
 15327  004BEC  D000               	goto	l6498
 15328  004BEE                     l6498:
 15329                           
 15330                           ;main.c: 241: }
 15331                           ;main.c: 242: *data = (rta == 0 || rta == 255) ? 0 : 1;
 15332  004BEE  0E00               	movlw	0
 15333  004BF0  6E14               	movwf	_CheckMem$1772,c
 15334  004BF2  5015               	movf	CheckMem@rta,w,c
 15335  004BF4  B4D8               	btfsc	status,2,c
 15336  004BF6  D006               	goto	l6506
 15337  004BF8  2815               	incf	CheckMem@rta,w,c
 15338  004BFA  B4D8               	btfsc	status,2,c
 15339  004BFC  D003               	goto	l6506
 15340  004BFE  0E01               	movlw	1
 15341  004C00  6E14               	movwf	_CheckMem$1772,c
 15342  004C02  D000               	goto	l6506
 15343  004C04                     l6506:
 15344  004C04  C012  FFD9         	movff	CheckMem@data,fsr2l
 15345  004C08  C013  FFDA         	movff	CheckMem@data+1,fsr2h
 15346  004C0C  C014  FFDF         	movff	_CheckMem$1772,indf2
 15347  004C10  0012               	return		;funcret
 15348  004C12                     __end_of_CheckMem:
 15349                           	opt stack 0
 15350                           tblptru	equ	0xFF8
 15351                           tblptrh	equ	0xFF7
 15352                           tblptrl	equ	0xFF6
 15353                           tablat	equ	0xFF5
 15354                           prodh	equ	0xFF4
 15355                           prodl	equ	0xFF3
 15356                           intcon	equ	0xFF2
 15357                           intcon2	equ	0xFF1
 15358                           postinc0	equ	0xFEE
 15359                           wreg	equ	0xFE8
 15360                           postinc1	equ	0xFE6
 15361                           postdec1	equ	0xFE5
 15362                           fsr1h	equ	0xFE2
 15363                           fsr1l	equ	0xFE1
 15364                           indf2	equ	0xFDF
 15365                           postinc2	equ	0xFDE
 15366                           postdec2	equ	0xFDD
 15367                           plusw2	equ	0xFDB
 15368                           fsr2h	equ	0xFDA
 15369                           fsr2l	equ	0xFD9
 15370                           status	equ	0xFD8
 15371                           
 15372 ;; *************** function _ReadMem *****************
 15373 ;; Defined at:
 15374 ;;		line 224 in file "../config.c"
 15375 ;; Parameters:    Size  Location     Type
 15376 ;;  addr            1    wreg     unsigned char 
 15377 ;;  data            2   14[COMRAM] PTR unsigned char 
 15378 ;;		 -> GetValue@rta(1), Length@rta(1), CheckMem@rta(1), 
 15379 ;; Auto vars:     Size  Location     Type
 15380 ;;  addr            1   16[COMRAM] unsigned char 
 15381 ;; Return value:  Size  Location     Type
 15382 ;;		None               void
 15383 ;; Registers used:
 15384 ;;		wreg, fsr2l, fsr2h
 15385 ;; Tracked objects:
 15386 ;;		On entry : 0/0
 15387 ;;		On exit  : 0/0
 15388 ;;		Unchanged: 0/0
 15389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15390 ;;      Params:         2       0       0       0       0       0       0       0       0
 15391 ;;      Locals:         1       0       0       0       0       0       0       0       0
 15392 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15393 ;;      Totals:         3       0       0       0       0       0       0       0       0
 15394 ;;Total ram usage:        3 bytes
 15395 ;; Hardware stack levels used:    1
 15396 ;; Hardware stack levels required when called:    1
 15397 ;; This function calls:
 15398 ;;		Nothing
 15399 ;; This function is called by:
 15400 ;;		_CheckMem
 15401 ;;		_Length
 15402 ;;		_GetValue
 15403 ;; This function uses a non-reentrant model
 15404 ;;
 15405                           
 15406                           	psect	text45
 15407  004EB2                     __ptext45:
 15408                           	opt stack 0
 15409  004EB2                     _ReadMem:
 15410                           	opt stack 27
 15411                           
 15412                           ;incstack = 0
 15413                           ;ReadMem@addr stored from wreg
 15414  004EB2  6E11               	movwf	ReadMem@addr,c
 15415                           
 15416                           ;config.c: 225: EEADR = addr;
 15417  004EB4  C011  FFA9         	movff	ReadMem@addr,4009	;volatile
 15418                           
 15419                           ;config.c: 226: EECON1bits.EEPGD = 0;
 15420  004EB8  9EA6               	bcf	4006,7,c	;volatile
 15421                           
 15422                           ;config.c: 227: EECON1bits.CFGS = 0;
 15423  004EBA  9CA6               	bcf	4006,6,c	;volatile
 15424                           
 15425                           ;config.c: 228: EECON1bits.RD = 1;
 15426  004EBC  80A6               	bsf	4006,0,c	;volatile
 15427                           
 15428                           ;config.c: 229: while (EECON1bits.RD == 1){}
 15429  004EBE  D000               	goto	l179
 15430  004EC0                     l179:
 15431  004EC0  B0A6               	btfsc	4006,0,c	;volatile
 15432  004EC2  D7FE               	goto	l179
 15433                           
 15434                           ;config.c: 230: *data = EEDATA;
 15435  004EC4  C00F  FFD9         	movff	ReadMem@data,fsr2l
 15436  004EC8  C010  FFDA         	movff	ReadMem@data+1,fsr2h
 15437  004ECC  CFA8 FFDF          	movff	4008,indf2	;volatile
 15438  004ED0  0012               	return		;funcret
 15439  004ED2                     __end_of_ReadMem:
 15440                           	opt stack 0
 15441                           tblptru	equ	0xFF8
 15442                           tblptrh	equ	0xFF7
 15443                           tblptrl	equ	0xFF6
 15444                           tablat	equ	0xFF5
 15445                           prodh	equ	0xFF4
 15446                           prodl	equ	0xFF3
 15447                           intcon	equ	0xFF2
 15448                           intcon2	equ	0xFF1
 15449                           postinc0	equ	0xFEE
 15450                           wreg	equ	0xFE8
 15451                           postinc1	equ	0xFE6
 15452                           postdec1	equ	0xFE5
 15453                           fsr1h	equ	0xFE2
 15454                           fsr1l	equ	0xFE1
 15455                           indf2	equ	0xFDF
 15456                           postinc2	equ	0xFDE
 15457                           postdec2	equ	0xFDD
 15458                           plusw2	equ	0xFDB
 15459                           fsr2h	equ	0xFDA
 15460                           fsr2l	equ	0xFD9
 15461                           status	equ	0xFD8
 15462                           
 15463 ;; *************** function _AdvanceLow *****************
 15464 ;; Defined at:
 15465 ;;		line 335 in file "../main.c"
 15466 ;; Parameters:    Size  Location     Type
 15467 ;;		None
 15468 ;; Auto vars:     Size  Location     Type
 15469 ;;  kd              3   38[BANK0 ] unsigned char 
 15470 ;;  kp              3   35[BANK0 ] unsigned char 
 15471 ;;  speed           2   41[BANK0 ] int 
 15472 ;;  mod             2    0        int 
 15473 ;; Return value:  Size  Location     Type
 15474 ;;		None               void
 15475 ;; Registers used:
 15476 ;;		wreg, status,2, status,0, cstack
 15477 ;; Tracked objects:
 15478 ;;		On entry : 0/0
 15479 ;;		On exit  : 0/0
 15480 ;;		Unchanged: 0/0
 15481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15482 ;;      Params:         0       0       0       0       0       0       0       0       0
 15483 ;;      Locals:         0       8       0       0       0       0       0       0       0
 15484 ;;      Temps:          2       0       0       0       0       0       0       0       0
 15485 ;;      Totals:         2       8       0       0       0       0       0       0       0
 15486 ;;Total ram usage:       10 bytes
 15487 ;; Hardware stack levels used:    1
 15488 ;; Hardware stack levels required when called:    4
 15489 ;; This function calls:
 15490 ;;		_MotorsSpeed
 15491 ;;		___awtoft
 15492 ;;		___ftadd
 15493 ;;		___ftmul
 15494 ;;		___fttol
 15495 ;; This function is called by:
 15496 ;;		_main
 15497 ;; This function uses a non-reentrant model
 15498 ;;
 15499                           
 15500                           	psect	text46
 15501  00389A                     __ptext46:
 15502                           	opt stack 0
 15503  00389A                     _AdvanceLow:
 15504                           	opt stack 26
 15505                           
 15506                           ;main.c: 336: int speed;
 15507                           ;main.c: 337: double kp , kd;
 15508                           ;main.c: 338: int mod;
 15509                           ;main.c: 339: speed = VEL[2];
 15510                           
 15511                           ;incstack = 0
 15512  00389A  C1C4  F089         	movff	_VEL+4,AdvanceLow@speed
 15513  00389E  C1C5  F08A         	movff	_VEL+5,AdvanceLow@speed+1
 15514                           
 15515                           ;main.c: 340: kp = VKP[2];
 15516  0038A2  C1B4  F083         	movff	_VKP+6,AdvanceLow@kp
 15517  0038A6  C1B5  F084         	movff	_VKP+7,AdvanceLow@kp+1
 15518  0038AA  C1B6  F085         	movff	_VKP+8,AdvanceLow@kp+2
 15519                           
 15520                           ;main.c: 341: kd = VKD[2];
 15521  0038AE  C1A2  F086         	movff	_VKD+6,AdvanceLow@kd
 15522  0038B2  C1A3  F087         	movff	_VKD+7,AdvanceLow@kd+1
 15523  0038B6  C1A4  F088         	movff	_VKD+8,AdvanceLow@kd+2
 15524                           
 15525                           ;main.c: 343: der = line - last;
 15526  0038BA  C18E  F042         	movff	_last,??_AdvanceLow
 15527  0038BE  C18F  F043         	movff	_last+1,??_AdvanceLow+1
 15528  0038C2  1E42               	comf	??_AdvanceLow,f,c
 15529  0038C4  1E43               	comf	??_AdvanceLow+1,f,c
 15530  0038C6  4A42               	infsnz	??_AdvanceLow,f,c
 15531  0038C8  2A43               	incf	??_AdvanceLow+1,f,c
 15532  0038CA  504A               	movf	_line,w,c
 15533  0038CC  2442               	addwf	??_AdvanceLow,w,c
 15534  0038CE  0101               	movlb	1	; () banked
 15535  0038D0  6F84               	movwf	_der& (0+255),b
 15536  0038D2  504B               	movf	_line+1,w,c
 15537  0038D4  2043               	addwfc	??_AdvanceLow+1,w,c
 15538  0038D6  0101               	movlb	1	; () banked
 15539  0038D8  6F85               	movwf	(_der+1)& (0+255),b
 15540                           
 15541                           ; BSR set to: 1
 15542                           ;main.c: 344: formula = line * kp + der * kd;
 15543  0038DA  C086  F033         	movff	AdvanceLow@kd,___ftmul@f2
 15544  0038DE  C087  F034         	movff	AdvanceLow@kd+1,___ftmul@f2+1
 15545  0038E2  C088  F035         	movff	AdvanceLow@kd+2,___ftmul@f2+2
 15546  0038E6  C184  F01D         	movff	_der,___awtoft@c
 15547  0038EA  C185  F01E         	movff	_der+1,___awtoft@c+1
 15548  0038EE  ECB5  F026         	call	___awtoft	;wreg free
 15549  0038F2  C01D  F030         	movff	?___awtoft,___ftmul@f1
 15550  0038F6  C01E  F031         	movff	?___awtoft+1,___ftmul@f1+1
 15551  0038FA  C01F  F032         	movff	?___awtoft+2,___ftmul@f1+2
 15552  0038FE  EC70  F01E         	call	___ftmul	;wreg free
 15553  003902  C030  F063         	movff	?___ftmul,___ftadd@f2
 15554  003906  C031  F064         	movff	?___ftmul+1,___ftadd@f2+1
 15555  00390A  C032  F065         	movff	?___ftmul+2,___ftadd@f2+2
 15556  00390E  C083  F033         	movff	AdvanceLow@kp,___ftmul@f2
 15557  003912  C084  F034         	movff	AdvanceLow@kp+1,___ftmul@f2+1
 15558  003916  C085  F035         	movff	AdvanceLow@kp+2,___ftmul@f2+2
 15559  00391A  C04A  F01D         	movff	_line,___awtoft@c
 15560  00391E  C04B  F01E         	movff	_line+1,___awtoft@c+1
 15561  003922  ECB5  F026         	call	___awtoft	;wreg free
 15562  003926  C01D  F030         	movff	?___awtoft,___ftmul@f1
 15563  00392A  C01E  F031         	movff	?___awtoft+1,___ftmul@f1+1
 15564  00392E  C01F  F032         	movff	?___awtoft+2,___ftmul@f1+2
 15565  003932  EC70  F01E         	call	___ftmul	;wreg free
 15566  003936  C030  F060         	movff	?___ftmul,___ftadd@f1
 15567  00393A  C031  F061         	movff	?___ftmul+1,___ftadd@f1+1
 15568  00393E  C032  F062         	movff	?___ftmul+2,___ftadd@f1+2
 15569  003942  EC28  F016         	call	___ftadd	;wreg free
 15570  003946  C060  F06C         	movff	?___ftadd,___fttol@f1
 15571  00394A  C061  F06D         	movff	?___ftadd+1,___fttol@f1+1
 15572  00394E  C062  F06E         	movff	?___ftadd+2,___fttol@f1+2
 15573  003952  EC1C  F01B         	call	___fttol	;wreg free
 15574  003956  C06C  F048         	movff	?___fttol,_formula
 15575  00395A  C06D  F049         	movff	?___fttol+1,_formula+1
 15576                           
 15577                           ;main.c: 345: if (formula > 0){
 15578  00395E  BE49               	btfsc	_formula+1,7,c
 15579  003960  D01E               	goto	l6644
 15580  003962  5049               	movf	_formula+1,w,c
 15581  003964  E103               	bnz	u8060
 15582  003966  0448               	decf	_formula,w,c
 15583  003968  A0D8               	btfss	status,0,c
 15584  00396A  D019               	goto	l6644
 15585  00396C                     u8060:
 15586                           
 15587                           ;main.c: 346: MotorsSpeed(speed - formula , speed);
 15588  00396C  C048  F042         	movff	_formula,??_AdvanceLow
 15589  003970  C049  F043         	movff	_formula+1,??_AdvanceLow+1
 15590  003974  1E42               	comf	??_AdvanceLow,f,c
 15591  003976  1E43               	comf	??_AdvanceLow+1,f,c
 15592  003978  4A42               	infsnz	??_AdvanceLow,f,c
 15593  00397A  2A43               	incf	??_AdvanceLow+1,f,c
 15594  00397C  0100               	movlb	0	; () banked
 15595  00397E  5189               	movf	AdvanceLow@speed& (0+255),w,b
 15596  003980  2442               	addwf	??_AdvanceLow,w,c
 15597  003982  0100               	movlb	0	; () banked
 15598  003984  6F7B               	movwf	MotorsSpeed@A& (0+255),b
 15599  003986  0100               	movlb	0	; () banked
 15600  003988  518A               	movf	(AdvanceLow@speed+1)& (0+255),w,b
 15601  00398A  2043               	addwfc	??_AdvanceLow+1,w,c
 15602  00398C  0100               	movlb	0	; () banked
 15603  00398E  6F7C               	movwf	(MotorsSpeed@A+1)& (0+255),b
 15604  003990  C089  F07D         	movff	AdvanceLow@speed,MotorsSpeed@B
 15605  003994  C08A  F07E         	movff	AdvanceLow@speed+1,MotorsSpeed@B+1
 15606  003998  EC53  F026         	call	_MotorsSpeed	;wreg free
 15607                           
 15608                           ;main.c: 347: }else{
 15609  00399C  D011               	goto	l6646
 15610  00399E                     l6644:
 15611                           
 15612                           ;main.c: 348: MotorsSpeed(speed , speed + formula);
 15613  00399E  C089  F07B         	movff	AdvanceLow@speed,MotorsSpeed@A
 15614  0039A2  C08A  F07C         	movff	AdvanceLow@speed+1,MotorsSpeed@A+1
 15615  0039A6  5048               	movf	_formula,w,c
 15616  0039A8  0100               	movlb	0	; () banked
 15617  0039AA  2589               	addwf	AdvanceLow@speed& (0+255),w,b
 15618  0039AC  0100               	movlb	0	; () banked
 15619  0039AE  6F7D               	movwf	MotorsSpeed@B& (0+255),b
 15620  0039B0  5049               	movf	_formula+1,w,c
 15621  0039B2  0100               	movlb	0	; () banked
 15622  0039B4  218A               	addwfc	(AdvanceLow@speed+1)& (0+255),w,b
 15623  0039B6  0100               	movlb	0	; () banked
 15624  0039B8  6F7E               	movwf	(MotorsSpeed@B+1)& (0+255),b
 15625  0039BA  EC53  F026         	call	_MotorsSpeed	;wreg free
 15626  0039BE  D000               	goto	l6646
 15627  0039C0                     l6646:
 15628                           
 15629                           ;main.c: 349: }
 15630                           ;main.c: 350: last = line;
 15631  0039C0  C04A  F18E         	movff	_line,_last
 15632  0039C4  C04B  F18F         	movff	_line+1,_last+1
 15633  0039C8  0012               	return		;funcret
 15634  0039CA                     __end_of_AdvanceLow:
 15635                           	opt stack 0
 15636                           tblptru	equ	0xFF8
 15637                           tblptrh	equ	0xFF7
 15638                           tblptrl	equ	0xFF6
 15639                           tablat	equ	0xFF5
 15640                           prodh	equ	0xFF4
 15641                           prodl	equ	0xFF3
 15642                           intcon	equ	0xFF2
 15643                           intcon2	equ	0xFF1
 15644                           postinc0	equ	0xFEE
 15645                           wreg	equ	0xFE8
 15646                           postinc1	equ	0xFE6
 15647                           postdec1	equ	0xFE5
 15648                           fsr1h	equ	0xFE2
 15649                           fsr1l	equ	0xFE1
 15650                           indf2	equ	0xFDF
 15651                           postinc2	equ	0xFDE
 15652                           postdec2	equ	0xFDD
 15653                           plusw2	equ	0xFDB
 15654                           fsr2h	equ	0xFDA
 15655                           fsr2l	equ	0xFD9
 15656                           status	equ	0xFD8
 15657                           
 15658 ;; *************** function ___fttol *****************
 15659 ;; Defined at:
 15660 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
 15661 ;; Parameters:    Size  Location     Type
 15662 ;;  f1              3   12[BANK0 ] float 
 15663 ;; Auto vars:     Size  Location     Type
 15664 ;;  lval            4   22[BANK0 ] unsigned long 
 15665 ;;  exp1            1   26[BANK0 ] unsigned char 
 15666 ;;  sign1           1   21[BANK0 ] unsigned char 
 15667 ;; Return value:  Size  Location     Type
 15668 ;;                  4   12[BANK0 ] long 
 15669 ;; Registers used:
 15670 ;;		wreg, status,2, status,0
 15671 ;; Tracked objects:
 15672 ;;		On entry : 0/0
 15673 ;;		On exit  : 0/0
 15674 ;;		Unchanged: 0/0
 15675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15676 ;;      Params:         0       4       0       0       0       0       0       0       0
 15677 ;;      Locals:         0       6       0       0       0       0       0       0       0
 15678 ;;      Temps:          0       5       0       0       0       0       0       0       0
 15679 ;;      Totals:         0      15       0       0       0       0       0       0       0
 15680 ;;Total ram usage:       15 bytes
 15681 ;; Hardware stack levels used:    1
 15682 ;; Hardware stack levels required when called:    1
 15683 ;; This function calls:
 15684 ;;		Nothing
 15685 ;; This function is called by:
 15686 ;;		_Interval
 15687 ;;		_UpdateDir
 15688 ;;		_AdvanceLow
 15689 ;;		_main
 15690 ;;		_pow
 15691 ;;		_exp
 15692 ;;		_floor
 15693 ;; This function uses a non-reentrant model
 15694 ;;
 15695                           
 15696                           	psect	text47
 15697  003638                     __ptext47:
 15698                           	opt stack 0
 15699  003638                     ___fttol:
 15700                           	opt stack 29
 15701                           
 15702                           ;incstack = 0
 15703  003638  C06E  F070         	movff	___fttol@f1+2,??___fttol
 15704  00363C  0100               	movlb	0	; () banked
 15705  00363E  6B71               	clrf	(??___fttol+1)& (0+255),b
 15706  003640  6B72               	clrf	(??___fttol+2)& (0+255),b
 15707  003642  0100               	movlb	0	; () banked
 15708  003644  356D               	rlcf	(___fttol@f1+1)& (0+255),w,b
 15709  003646  0100               	movlb	0	; () banked
 15710  003648  3770               	rlcf	??___fttol& (0+255),f,b
 15711  00364A  E301               	bnc	u6731
 15712  00364C  8171               	bsf	(??___fttol+1)& (0+255),0,b
 15713  00364E                     u6731:
 15714  00364E  0100               	movlb	0	; () banked
 15715  003650  5170               	movf	??___fttol& (0+255),w,b
 15716  003652  0100               	movlb	0	; () banked
 15717  003654  6F7A               	movwf	___fttol@exp1& (0+255),b
 15718  003656  0100               	movlb	0	; () banked
 15719  003658  517A               	movf	___fttol@exp1& (0+255),w,b
 15720  00365A  A4D8               	btfss	status,2,c
 15721  00365C  D002               	goto	l5598
 15722  00365E  D051               	goto	l5622
 15723                           
 15724                           ; BSR set to: 0
 15725                           
 15726                           ; BSR set to: 0
 15727  003660  D083               	goto	l1087
 15728  003662                     l5598:
 15729                           
 15730                           ; BSR set to: 0
 15731  003662  0E17               	movlw	23
 15732  003664  0100               	movlb	0	; () banked
 15733  003666  6F70               	movwf	??___fttol& (0+255),b
 15734  003668  C06C  F071         	movff	___fttol@f1,??___fttol+1
 15735  00366C  C06D  F072         	movff	___fttol@f1+1,??___fttol+2
 15736  003670  C06E  F073         	movff	___fttol@f1+2,??___fttol+3
 15737  003674  0100               	movlb	0	; () banked
 15738  003676  2970               	incf	??___fttol& (0+255),w,b
 15739  003678  0100               	movlb	0	; () banked
 15740  00367A  6F74               	movwf	(??___fttol+4)& (0+255),b
 15741  00367C  D005               	goto	u6750
 15742  00367E                     u6755:
 15743  00367E  0100               	movlb	0	; () banked
 15744  003680  90D8               	bcf	status,0,c
 15745  003682  3373               	rrcf	(??___fttol+3)& (0+255),f,b
 15746  003684  3372               	rrcf	(??___fttol+2)& (0+255),f,b
 15747  003686  3371               	rrcf	(??___fttol+1)& (0+255),f,b
 15748  003688                     u6750:
 15749  003688  0100               	movlb	0	; () banked
 15750  00368A  2F74               	decfsz	(??___fttol+4)& (0+255),f,b
 15751  00368C  D7F8               	goto	u6755
 15752  00368E  0100               	movlb	0	; () banked
 15753  003690  5171               	movf	(??___fttol+1)& (0+255),w,b
 15754  003692  0100               	movlb	0	; () banked
 15755  003694  6F75               	movwf	___fttol@sign1& (0+255),b
 15756                           
 15757                           ; BSR set to: 0
 15758  003696  0100               	movlb	0	; () banked
 15759  003698  8F6D               	bsf	(___fttol@f1+1)& (0+255),7,b
 15760                           
 15761                           ; BSR set to: 0
 15762  00369A  0EFF               	movlw	255
 15763  00369C  0100               	movlb	0	; () banked
 15764  00369E  176C               	andwf	___fttol@f1& (0+255),f,b
 15765  0036A0  0EFF               	movlw	255
 15766  0036A2  0100               	movlb	0	; () banked
 15767  0036A4  176D               	andwf	(___fttol@f1+1)& (0+255),f,b
 15768  0036A6  0E00               	movlw	0
 15769  0036A8  0100               	movlb	0	; () banked
 15770  0036AA  176E               	andwf	(___fttol@f1+2)& (0+255),f,b
 15771                           
 15772                           ; BSR set to: 0
 15773  0036AC  0100               	movlb	0	; () banked
 15774  0036AE  516C               	movf	___fttol@f1& (0+255),w,b
 15775  0036B0  0100               	movlb	0	; () banked
 15776  0036B2  6F76               	movwf	___fttol@lval& (0+255),b
 15777  0036B4  0100               	movlb	0	; () banked
 15778  0036B6  516D               	movf	(___fttol@f1+1)& (0+255),w,b
 15779  0036B8  0100               	movlb	0	; () banked
 15780  0036BA  6F77               	movwf	(___fttol@lval+1)& (0+255),b
 15781  0036BC  0100               	movlb	0	; () banked
 15782  0036BE  516E               	movf	(___fttol@f1+2)& (0+255),w,b
 15783  0036C0  0100               	movlb	0	; () banked
 15784  0036C2  6F78               	movwf	(___fttol@lval+2)& (0+255),b
 15785  0036C4  0100               	movlb	0	; () banked
 15786  0036C6  6B79               	clrf	(___fttol@lval+3)& (0+255),b
 15787                           
 15788                           ; BSR set to: 0
 15789  0036C8  0E8E               	movlw	142
 15790  0036CA  0100               	movlb	0	; () banked
 15791  0036CC  5F7A               	subwf	___fttol@exp1& (0+255),f,b
 15792                           
 15793                           ; BSR set to: 0
 15794  0036CE  0100               	movlb	0	; () banked
 15795  0036D0  AF7A               	btfss	___fttol@exp1& (0+255),7,b
 15796  0036D2  D013               	goto	l5620
 15797                           
 15798                           ; BSR set to: 0
 15799  0036D4  0100               	movlb	0	; () banked
 15800  0036D6  517A               	movf	___fttol@exp1& (0+255),w,b
 15801  0036D8  0A80               	xorlw	128
 15802  0036DA  0F8F               	addlw	143
 15803  0036DC  B0D8               	btfsc	status,0,c
 15804  0036DE  D003               	goto	l5616
 15805  0036E0  D010               	goto	l5622
 15806                           
 15807                           ; BSR set to: 0
 15808                           
 15809                           ; BSR set to: 0
 15810  0036E2  D042               	goto	l1087
 15811                           
 15812                           ; BSR set to: 0
 15813  0036E4  D000               	goto	l5616
 15814  0036E6                     l5616:
 15815                           
 15816                           ; BSR set to: 0
 15817  0036E6  0100               	movlb	0	; () banked
 15818  0036E8  90D8               	bcf	status,0,c
 15819  0036EA  3379               	rrcf	(___fttol@lval+3)& (0+255),f,b
 15820  0036EC  3378               	rrcf	(___fttol@lval+2)& (0+255),f,b
 15821  0036EE  3377               	rrcf	(___fttol@lval+1)& (0+255),f,b
 15822  0036F0  3376               	rrcf	___fttol@lval& (0+255),f,b
 15823                           
 15824                           ; BSR set to: 0
 15825  0036F2  0100               	movlb	0	; () banked
 15826  0036F4  3F7A               	incfsz	___fttol@exp1& (0+255),f,b
 15827  0036F6  D7F7               	goto	l5616
 15828                           
 15829                           ; BSR set to: 0
 15830  0036F8  D01F               	goto	l5630
 15831  0036FA                     l5620:
 15832                           
 15833                           ; BSR set to: 0
 15834  0036FA  0E17               	movlw	23
 15835  0036FC  0100               	movlb	0	; () banked
 15836  0036FE  657A               	cpfsgt	___fttol@exp1& (0+255),b
 15837  003700  D014               	goto	l5628
 15838  003702                     l5622:
 15839                           
 15840                           ; BSR set to: 0
 15841  003702  0E00               	movlw	0
 15842  003704  0100               	movlb	0	; () banked
 15843  003706  6F6C               	movwf	?___fttol& (0+255),b
 15844  003708  0E00               	movlw	0
 15845  00370A  6F6D               	movwf	(?___fttol+1)& (0+255),b
 15846  00370C  0E00               	movlw	0
 15847  00370E  6F6E               	movwf	(?___fttol+2)& (0+255),b
 15848  003710  0E00               	movlw	0
 15849  003712  6F6F               	movwf	(?___fttol+3)& (0+255),b
 15850                           
 15851                           ; BSR set to: 0
 15852  003714  D029               	goto	l1087
 15853                           
 15854                           ; BSR set to: 0
 15855  003716  D009               	goto	l5628
 15856  003718                     l5626:
 15857                           
 15858                           ; BSR set to: 0
 15859  003718  0100               	movlb	0	; () banked
 15860  00371A  90D8               	bcf	status,0,c
 15861  00371C  3776               	rlcf	___fttol@lval& (0+255),f,b
 15862  00371E  3777               	rlcf	(___fttol@lval+1)& (0+255),f,b
 15863  003720  3778               	rlcf	(___fttol@lval+2)& (0+255),f,b
 15864  003722  3779               	rlcf	(___fttol@lval+3)& (0+255),f,b
 15865  003724  0100               	movlb	0	; () banked
 15866  003726  077A               	decf	___fttol@exp1& (0+255),f,b
 15867  003728  D000               	goto	l5628
 15868  00372A                     l5628:
 15869                           
 15870                           ; BSR set to: 0
 15871  00372A  0100               	movlb	0	; () banked
 15872  00372C  517A               	movf	___fttol@exp1& (0+255),w,b
 15873  00372E  0100               	movlb	0	; () banked
 15874  003730  B4D8               	btfsc	status,2,c
 15875  003732  D002               	goto	l5630
 15876  003734  D7F1               	goto	l5626
 15877                           
 15878                           ; BSR set to: 0
 15879  003736  D000               	goto	l5630
 15880  003738                     l5630:
 15881                           
 15882                           ; BSR set to: 0
 15883  003738  0100               	movlb	0	; () banked
 15884  00373A  5175               	movf	___fttol@sign1& (0+255),w,b
 15885  00373C  0100               	movlb	0	; () banked
 15886  00373E  B4D8               	btfsc	status,2,c
 15887  003740  D00A               	goto	l5634
 15888                           
 15889                           ; BSR set to: 0
 15890  003742  0100               	movlb	0	; () banked
 15891  003744  1F79               	comf	(___fttol@lval+3)& (0+255),f,b
 15892  003746  1F78               	comf	(___fttol@lval+2)& (0+255),f,b
 15893  003748  1F77               	comf	(___fttol@lval+1)& (0+255),f,b
 15894  00374A  6D76               	negf	___fttol@lval& (0+255),b
 15895  00374C  0E00               	movlw	0
 15896  00374E  2377               	addwfc	(___fttol@lval+1)& (0+255),f,b
 15897  003750  2378               	addwfc	(___fttol@lval+2)& (0+255),f,b
 15898  003752  2379               	addwfc	(___fttol@lval+3)& (0+255),f,b
 15899  003754  D000               	goto	l5634
 15900  003756                     l5634:
 15901                           
 15902                           ; BSR set to: 0
 15903  003756  C076  F06C         	movff	___fttol@lval,?___fttol
 15904  00375A  C077  F06D         	movff	___fttol@lval+1,?___fttol+1
 15905  00375E  C078  F06E         	movff	___fttol@lval+2,?___fttol+2
 15906  003762  C079  F06F         	movff	___fttol@lval+3,?___fttol+3
 15907  003766  D000               	goto	l1087
 15908  003768                     l1087:
 15909                           
 15910                           ; BSR set to: 0
 15911  003768  0012               	return		;funcret
 15912  00376A                     __end_of___fttol:
 15913                           	opt stack 0
 15914                           tblptru	equ	0xFF8
 15915                           tblptrh	equ	0xFF7
 15916                           tblptrl	equ	0xFF6
 15917                           tablat	equ	0xFF5
 15918                           prodh	equ	0xFF4
 15919                           prodl	equ	0xFF3
 15920                           intcon	equ	0xFF2
 15921                           intcon2	equ	0xFF1
 15922                           postinc0	equ	0xFEE
 15923                           wreg	equ	0xFE8
 15924                           postinc1	equ	0xFE6
 15925                           postdec1	equ	0xFE5
 15926                           fsr1h	equ	0xFE2
 15927                           fsr1l	equ	0xFE1
 15928                           indf2	equ	0xFDF
 15929                           postinc2	equ	0xFDE
 15930                           postdec2	equ	0xFDD
 15931                           plusw2	equ	0xFDB
 15932                           fsr2h	equ	0xFDA
 15933                           fsr2l	equ	0xFD9
 15934                           status	equ	0xFD8
 15935                           
 15936 ;; *************** function ___ftmul *****************
 15937 ;; Defined at:
 15938 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
 15939 ;; Parameters:    Size  Location     Type
 15940 ;;  f1              3   47[COMRAM] float 
 15941 ;;  f2              3   50[COMRAM] float 
 15942 ;; Auto vars:     Size  Location     Type
 15943 ;;  f3_as_produc    3   57[COMRAM] unsigned um
 15944 ;;  sign            1   61[COMRAM] unsigned char 
 15945 ;;  cntr            1   60[COMRAM] unsigned char 
 15946 ;;  exp             1   56[COMRAM] unsigned char 
 15947 ;; Return value:  Size  Location     Type
 15948 ;;                  3   47[COMRAM] float 
 15949 ;; Registers used:
 15950 ;;		wreg, status,2, status,0, cstack
 15951 ;; Tracked objects:
 15952 ;;		On entry : 0/0
 15953 ;;		On exit  : 0/0
 15954 ;;		Unchanged: 0/0
 15955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15956 ;;      Params:         6       0       0       0       0       0       0       0       0
 15957 ;;      Locals:         6       0       0       0       0       0       0       0       0
 15958 ;;      Temps:          3       0       0       0       0       0       0       0       0
 15959 ;;      Totals:        15       0       0       0       0       0       0       0       0
 15960 ;;Total ram usage:       15 bytes
 15961 ;; Hardware stack levels used:    1
 15962 ;; Hardware stack levels required when called:    2
 15963 ;; This function calls:
 15964 ;;		___ftpack
 15965 ;; This function is called by:
 15966 ;;		_Interval
 15967 ;;		_UpdateDir
 15968 ;;		_AdvanceLow
 15969 ;;		_main
 15970 ;;		_pow
 15971 ;;		_exp
 15972 ;;		_log
 15973 ;;		_eval_poly
 15974 ;; This function uses a non-reentrant model
 15975 ;;
 15976                           
 15977                           	psect	text48
 15978  003CE0                     __ptext48:
 15979                           	opt stack 0
 15980  003CE0                     ___ftmul:
 15981                           	opt stack 28
 15982                           
 15983                           ; BSR set to: 0
 15984                           ;incstack = 0
 15985  003CE0  C032  F036         	movff	___ftmul@f1+2,??___ftmul
 15986  003CE4  6A37               	clrf	(??___ftmul+1)& (0+255),c
 15987  003CE6  6A38               	clrf	(??___ftmul+2)& (0+255),c
 15988  003CE8  3431               	rlcf	___ftmul@f1+1,w,c
 15989  003CEA  3636               	rlcf	??___ftmul& (0+255),f,c
 15990  003CEC  E301               	bnc	u6641
 15991  003CEE  8037               	bsf	(??___ftmul+1)& (0+255),0,c
 15992  003CF0                     u6641:
 15993  003CF0  5036               	movf	??___ftmul,w,c
 15994  003CF2  6E39               	movwf	___ftmul@exp,c
 15995  003CF4  5039               	movf	___ftmul@exp,w,c
 15996  003CF6  A4D8               	btfss	status,2,c
 15997  003CF8  D002               	goto	l5532
 15998  003CFA  D00E               	goto	l5534
 15999  003CFC  D06C               	goto	l1066
 16000  003CFE                     l5532:
 16001  003CFE  C035  F036         	movff	___ftmul@f2+2,??___ftmul
 16002  003D02  6A37               	clrf	(??___ftmul+1)& (0+255),c
 16003  003D04  6A38               	clrf	(??___ftmul+2)& (0+255),c
 16004  003D06  3434               	rlcf	___ftmul@f2+1,w,c
 16005  003D08  3636               	rlcf	??___ftmul& (0+255),f,c
 16006  003D0A  E301               	bnc	u6661
 16007  003D0C  8037               	bsf	(??___ftmul+1)& (0+255),0,c
 16008  003D0E                     u6661:
 16009  003D0E  5036               	movf	??___ftmul,w,c
 16010  003D10  6E3E               	movwf	___ftmul@sign,c
 16011  003D12  503E               	movf	___ftmul@sign,w,c
 16012  003D14  A4D8               	btfss	status,2,c
 16013  003D16  D007               	goto	l5538
 16014  003D18                     l5534:
 16015  003D18  0E00               	movlw	0
 16016  003D1A  6E30               	movwf	?___ftmul,c
 16017  003D1C  0E00               	movlw	0
 16018  003D1E  6E31               	movwf	?___ftmul+1,c
 16019  003D20  0E00               	movlw	0
 16020  003D22  6E32               	movwf	?___ftmul+2,c
 16021  003D24  D058               	goto	l1066
 16022  003D26                     l5538:
 16023  003D26  503E               	movf	___ftmul@sign,w,c
 16024  003D28  0F7B               	addlw	123
 16025  003D2A  2639               	addwf	___ftmul@exp,f,c
 16026  003D2C  C032  F03E         	movff	___ftmul@f1+2,___ftmul@sign
 16027  003D30  5035               	movf	___ftmul@f2+2,w,c
 16028  003D32  1A3E               	xorwf	___ftmul@sign,f,c
 16029  003D34  0E80               	movlw	128
 16030  003D36  163E               	andwf	___ftmul@sign,f,c
 16031  003D38  8E31               	bsf	___ftmul@f1+1,7,c
 16032  003D3A  8E34               	bsf	___ftmul@f2+1,7,c
 16033  003D3C  0EFF               	movlw	255
 16034  003D3E  1633               	andwf	___ftmul@f2,f,c
 16035  003D40  0EFF               	movlw	255
 16036  003D42  1634               	andwf	___ftmul@f2+1,f,c
 16037  003D44  0E00               	movlw	0
 16038  003D46  1635               	andwf	___ftmul@f2+2,f,c
 16039  003D48  0E00               	movlw	0
 16040  003D4A  6E3A               	movwf	___ftmul@f3_as_product,c
 16041  003D4C  0E00               	movlw	0
 16042  003D4E  6E3B               	movwf	___ftmul@f3_as_product+1,c
 16043  003D50  0E00               	movlw	0
 16044  003D52  6E3C               	movwf	___ftmul@f3_as_product+2,c
 16045  003D54  0E07               	movlw	7
 16046  003D56  6E3D               	movwf	___ftmul@cntr,c
 16047  003D58  D000               	goto	l5552
 16048  003D5A                     l5552:
 16049  003D5A  A030               	btfss	___ftmul@f1,0,c
 16050  003D5C  D007               	goto	l5556
 16051  003D5E  5033               	movf	___ftmul@f2,w,c
 16052  003D60  263A               	addwf	___ftmul@f3_as_product,f,c
 16053  003D62  5034               	movf	___ftmul@f2+1,w,c
 16054  003D64  223B               	addwfc	___ftmul@f3_as_product+1,f,c
 16055  003D66  5035               	movf	___ftmul@f2+2,w,c
 16056  003D68  223C               	addwfc	___ftmul@f3_as_product+2,f,c
 16057  003D6A  D000               	goto	l5556
 16058  003D6C                     l5556:
 16059  003D6C  90D8               	bcf	status,0,c
 16060  003D6E  3232               	rrcf	___ftmul@f1+2,f,c
 16061  003D70  3231               	rrcf	___ftmul@f1+1,f,c
 16062  003D72  3230               	rrcf	___ftmul@f1,f,c
 16063  003D74  90D8               	bcf	status,0,c
 16064  003D76  3633               	rlcf	___ftmul@f2,f,c
 16065  003D78  3634               	rlcf	___ftmul@f2+1,f,c
 16066  003D7A  3635               	rlcf	___ftmul@f2+2,f,c
 16067  003D7C  2E3D               	decfsz	___ftmul@cntr,f,c
 16068  003D7E  D7ED               	goto	l5552
 16069  003D80  D000               	goto	l5560
 16070  003D82                     l5560:
 16071  003D82  0E09               	movlw	9
 16072  003D84  6E3D               	movwf	___ftmul@cntr,c
 16073  003D86  D000               	goto	l5562
 16074  003D88                     l5562:
 16075  003D88  A030               	btfss	___ftmul@f1,0,c
 16076  003D8A  D007               	goto	l5566
 16077  003D8C  5033               	movf	___ftmul@f2,w,c
 16078  003D8E  263A               	addwf	___ftmul@f3_as_product,f,c
 16079  003D90  5034               	movf	___ftmul@f2+1,w,c
 16080  003D92  223B               	addwfc	___ftmul@f3_as_product+1,f,c
 16081  003D94  5035               	movf	___ftmul@f2+2,w,c
 16082  003D96  223C               	addwfc	___ftmul@f3_as_product+2,f,c
 16083  003D98  D000               	goto	l5566
 16084  003D9A                     l5566:
 16085  003D9A  90D8               	bcf	status,0,c
 16086  003D9C  3232               	rrcf	___ftmul@f1+2,f,c
 16087  003D9E  3231               	rrcf	___ftmul@f1+1,f,c
 16088  003DA0  3230               	rrcf	___ftmul@f1,f,c
 16089  003DA2  90D8               	bcf	status,0,c
 16090  003DA4  323C               	rrcf	___ftmul@f3_as_product+2,f,c
 16091  003DA6  323B               	rrcf	___ftmul@f3_as_product+1,f,c
 16092  003DA8  323A               	rrcf	___ftmul@f3_as_product,f,c
 16093  003DAA  2E3D               	decfsz	___ftmul@cntr,f,c
 16094  003DAC  D7ED               	goto	l5562
 16095  003DAE  D000               	goto	l5570
 16096  003DB0                     l5570:
 16097  003DB0  C03A  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
 16098  003DB4  C03B  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 16099  003DB8  C03C  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 16100  003DBC  C039  F012         	movff	___ftmul@exp,___ftpack@exp
 16101  003DC0  C03E  F013         	movff	___ftmul@sign,___ftpack@sign
 16102  003DC4  EC06  F021         	call	___ftpack	;wreg free
 16103  003DC8  C00F  F030         	movff	?___ftpack,?___ftmul
 16104  003DCC  C010  F031         	movff	?___ftpack+1,?___ftmul+1
 16105  003DD0  C011  F032         	movff	?___ftpack+2,?___ftmul+2
 16106  003DD4  D000               	goto	l1066
 16107  003DD6                     l1066:
 16108  003DD6  0012               	return		;funcret
 16109  003DD8                     __end_of___ftmul:
 16110                           	opt stack 0
 16111                           tblptru	equ	0xFF8
 16112                           tblptrh	equ	0xFF7
 16113                           tblptrl	equ	0xFF6
 16114                           tablat	equ	0xFF5
 16115                           prodh	equ	0xFF4
 16116                           prodl	equ	0xFF3
 16117                           intcon	equ	0xFF2
 16118                           intcon2	equ	0xFF1
 16119                           postinc0	equ	0xFEE
 16120                           wreg	equ	0xFE8
 16121                           postinc1	equ	0xFE6
 16122                           postdec1	equ	0xFE5
 16123                           fsr1h	equ	0xFE2
 16124                           fsr1l	equ	0xFE1
 16125                           indf2	equ	0xFDF
 16126                           postinc2	equ	0xFDE
 16127                           postdec2	equ	0xFDD
 16128                           plusw2	equ	0xFDB
 16129                           fsr2h	equ	0xFDA
 16130                           fsr2l	equ	0xFD9
 16131                           status	equ	0xFD8
 16132                           
 16133 ;; *************** function ___ftadd *****************
 16134 ;; Defined at:
 16135 ;;		line 86 in file "/opt/microchip/xc8/v1.34/sources/common/ftadd.c"
 16136 ;; Parameters:    Size  Location     Type
 16137 ;;  f1              3    0[BANK0 ] float 
 16138 ;;  f2              3    3[BANK0 ] float 
 16139 ;; Auto vars:     Size  Location     Type
 16140 ;;  exp1            1   11[BANK0 ] unsigned char 
 16141 ;;  exp2            1   10[BANK0 ] unsigned char 
 16142 ;;  sign            1    9[BANK0 ] unsigned char 
 16143 ;; Return value:  Size  Location     Type
 16144 ;;                  3    0[BANK0 ] float 
 16145 ;; Registers used:
 16146 ;;		wreg, status,2, status,0, cstack
 16147 ;; Tracked objects:
 16148 ;;		On entry : 0/0
 16149 ;;		On exit  : 0/0
 16150 ;;		Unchanged: 0/0
 16151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16152 ;;      Params:         0       6       0       0       0       0       0       0       0
 16153 ;;      Locals:         0       3       0       0       0       0       0       0       0
 16154 ;;      Temps:          0       3       0       0       0       0       0       0       0
 16155 ;;      Totals:         0      12       0       0       0       0       0       0       0
 16156 ;;Total ram usage:       12 bytes
 16157 ;; Hardware stack levels used:    1
 16158 ;; Hardware stack levels required when called:    2
 16159 ;; This function calls:
 16160 ;;		___ftpack
 16161 ;; This function is called by:
 16162 ;;		_Compute
 16163 ;;		_Interval
 16164 ;;		_UpdateDir
 16165 ;;		_AdvanceLow
 16166 ;;		_main
 16167 ;;		___ftsub
 16168 ;;		_floor
 16169 ;;		_log
 16170 ;;		_eval_poly
 16171 ;; This function uses a non-reentrant model
 16172 ;;
 16173                           
 16174                           	psect	text49
 16175  002C50                     __ptext49:
 16176                           	opt stack 0
 16177  002C50                     ___ftadd:
 16178                           	opt stack 28
 16179                           
 16180                           ;incstack = 0
 16181  002C50  C062  F066         	movff	___ftadd@f1+2,??___ftadd
 16182  002C54  0100               	movlb	0	; () banked
 16183  002C56  6B67               	clrf	(??___ftadd+1)& (0+255),b
 16184  002C58  6B68               	clrf	(??___ftadd+2)& (0+255),b
 16185  002C5A  0100               	movlb	0	; () banked
 16186  002C5C  3561               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 16187  002C5E  0100               	movlb	0	; () banked
 16188  002C60  3766               	rlcf	??___ftadd& (0+255),f,b
 16189  002C62  E301               	bnc	u6431
 16190  002C64  8167               	bsf	(??___ftadd+1)& (0+255),0,b
 16191  002C66                     u6431:
 16192  002C66  0100               	movlb	0	; () banked
 16193  002C68  5166               	movf	??___ftadd& (0+255),w,b
 16194  002C6A  0100               	movlb	0	; () banked
 16195  002C6C  6F6B               	movwf	___ftadd@exp1& (0+255),b
 16196  002C6E  C065  F066         	movff	___ftadd@f2+2,??___ftadd
 16197  002C72  0100               	movlb	0	; () banked
 16198  002C74  6B67               	clrf	(??___ftadd+1)& (0+255),b
 16199  002C76  6B68               	clrf	(??___ftadd+2)& (0+255),b
 16200  002C78  0100               	movlb	0	; () banked
 16201  002C7A  3564               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 16202  002C7C  0100               	movlb	0	; () banked
 16203  002C7E  3766               	rlcf	??___ftadd& (0+255),f,b
 16204  002C80  E301               	bnc	u6441
 16205  002C82  8167               	bsf	(??___ftadd+1)& (0+255),0,b
 16206  002C84                     u6441:
 16207  002C84  0100               	movlb	0	; () banked
 16208  002C86  5166               	movf	??___ftadd& (0+255),w,b
 16209  002C88  0100               	movlb	0	; () banked
 16210  002C8A  6F6A               	movwf	___ftadd@exp2& (0+255),b
 16211                           
 16212                           ; BSR set to: 0
 16213  002C8C  0100               	movlb	0	; () banked
 16214  002C8E  516B               	movf	___ftadd@exp1& (0+255),w,b
 16215  002C90  0100               	movlb	0	; () banked
 16216  002C92  B4D8               	btfsc	status,2,c
 16217  002C94  D011               	goto	l1019
 16218                           
 16219                           ; BSR set to: 0
 16220  002C96  0100               	movlb	0	; () banked
 16221  002C98  516A               	movf	___ftadd@exp2& (0+255),w,b
 16222  002C9A  0100               	movlb	0	; () banked
 16223  002C9C  5D6B               	subwf	___ftadd@exp1& (0+255),w,b
 16224  002C9E  B0D8               	btfsc	status,0,c
 16225  002CA0  D012               	goto	l5464
 16226                           
 16227                           ; BSR set to: 0
 16228  002CA2  0100               	movlb	0	; () banked
 16229  002CA4  516B               	movf	___ftadd@exp1& (0+255),w,b
 16230  002CA6  0800               	sublw	0
 16231  002CA8  0100               	movlb	0	; () banked
 16232  002CAA  256A               	addwf	___ftadd@exp2& (0+255),w,b
 16233  002CAC  0100               	movlb	0	; () banked
 16234  002CAE  6F66               	movwf	??___ftadd& (0+255),b
 16235  002CB0  0E18               	movlw	24
 16236  002CB2  0100               	movlb	0	; () banked
 16237  002CB4  6566               	cpfsgt	??___ftadd& (0+255),b
 16238  002CB6  D007               	goto	l5464
 16239  002CB8                     l1019:
 16240                           
 16241                           ; BSR set to: 0
 16242  002CB8  C063  F060         	movff	___ftadd@f2,?___ftadd
 16243  002CBC  C064  F061         	movff	___ftadd@f2+1,?___ftadd+1
 16244  002CC0  C065  F062         	movff	___ftadd@f2+2,?___ftadd+2
 16245  002CC4  D103               	goto	l1020
 16246  002CC6                     l5464:
 16247                           
 16248                           ; BSR set to: 0
 16249  002CC6  0100               	movlb	0	; () banked
 16250  002CC8  516A               	movf	___ftadd@exp2& (0+255),w,b
 16251  002CCA  0100               	movlb	0	; () banked
 16252  002CCC  B4D8               	btfsc	status,2,c
 16253  002CCE  D011               	goto	l1023
 16254                           
 16255                           ; BSR set to: 0
 16256  002CD0  0100               	movlb	0	; () banked
 16257  002CD2  516B               	movf	___ftadd@exp1& (0+255),w,b
 16258  002CD4  0100               	movlb	0	; () banked
 16259  002CD6  5D6A               	subwf	___ftadd@exp2& (0+255),w,b
 16260  002CD8  B0D8               	btfsc	status,0,c
 16261  002CDA  D012               	goto	l5470
 16262                           
 16263                           ; BSR set to: 0
 16264  002CDC  0100               	movlb	0	; () banked
 16265  002CDE  516A               	movf	___ftadd@exp2& (0+255),w,b
 16266  002CE0  0800               	sublw	0
 16267  002CE2  0100               	movlb	0	; () banked
 16268  002CE4  256B               	addwf	___ftadd@exp1& (0+255),w,b
 16269  002CE6  0100               	movlb	0	; () banked
 16270  002CE8  6F66               	movwf	??___ftadd& (0+255),b
 16271  002CEA  0E18               	movlw	24
 16272  002CEC  0100               	movlb	0	; () banked
 16273  002CEE  6566               	cpfsgt	??___ftadd& (0+255),b
 16274  002CF0  D007               	goto	l5470
 16275  002CF2                     l1023:
 16276                           
 16277                           ; BSR set to: 0
 16278  002CF2  C060  F060         	movff	___ftadd@f1,?___ftadd
 16279  002CF6  C061  F061         	movff	___ftadd@f1+1,?___ftadd+1
 16280  002CFA  C062  F062         	movff	___ftadd@f1+2,?___ftadd+2
 16281  002CFE  D0E6               	goto	l1020
 16282  002D00                     l5470:
 16283                           
 16284                           ; BSR set to: 0
 16285  002D00  0E06               	movlw	6
 16286  002D02  0100               	movlb	0	; () banked
 16287  002D04  6F69               	movwf	___ftadd@sign& (0+255),b
 16288                           
 16289                           ; BSR set to: 0
 16290  002D06  0100               	movlb	0	; () banked
 16291  002D08  AF62               	btfss	(___ftadd@f1+2)& (0+255),7,b
 16292  002D0A  D003               	goto	l5476
 16293                           
 16294                           ; BSR set to: 0
 16295  002D0C  0100               	movlb	0	; () banked
 16296  002D0E  8F69               	bsf	___ftadd@sign& (0+255),7,b
 16297  002D10  D000               	goto	l5476
 16298  002D12                     l5476:
 16299                           
 16300                           ; BSR set to: 0
 16301  002D12  0100               	movlb	0	; () banked
 16302  002D14  AF65               	btfss	(___ftadd@f2+2)& (0+255),7,b
 16303  002D16  D002               	goto	l1025
 16304                           
 16305                           ; BSR set to: 0
 16306  002D18  0100               	movlb	0	; () banked
 16307  002D1A  8D69               	bsf	___ftadd@sign& (0+255),6,b
 16308  002D1C                     l1025:
 16309                           
 16310                           ; BSR set to: 0
 16311  002D1C  0100               	movlb	0	; () banked
 16312  002D1E  8F61               	bsf	(___ftadd@f1+1)& (0+255),7,b
 16313                           
 16314                           ; BSR set to: 0
 16315  002D20  0EFF               	movlw	255
 16316  002D22  0100               	movlb	0	; () banked
 16317  002D24  1760               	andwf	___ftadd@f1& (0+255),f,b
 16318  002D26  0EFF               	movlw	255
 16319  002D28  0100               	movlb	0	; () banked
 16320  002D2A  1761               	andwf	(___ftadd@f1+1)& (0+255),f,b
 16321  002D2C  0E00               	movlw	0
 16322  002D2E  0100               	movlb	0	; () banked
 16323  002D30  1762               	andwf	(___ftadd@f1+2)& (0+255),f,b
 16324  002D32  0100               	movlb	0	; () banked
 16325  002D34  8F64               	bsf	(___ftadd@f2+1)& (0+255),7,b
 16326                           
 16327                           ; BSR set to: 0
 16328  002D36  0EFF               	movlw	255
 16329  002D38  0100               	movlb	0	; () banked
 16330  002D3A  1763               	andwf	___ftadd@f2& (0+255),f,b
 16331  002D3C  0EFF               	movlw	255
 16332  002D3E  0100               	movlb	0	; () banked
 16333  002D40  1764               	andwf	(___ftadd@f2+1)& (0+255),f,b
 16334  002D42  0E00               	movlw	0
 16335  002D44  0100               	movlb	0	; () banked
 16336  002D46  1765               	andwf	(___ftadd@f2+2)& (0+255),f,b
 16337                           
 16338                           ; BSR set to: 0
 16339  002D48  0100               	movlb	0	; () banked
 16340  002D4A  516A               	movf	___ftadd@exp2& (0+255),w,b
 16341  002D4C  0100               	movlb	0	; () banked
 16342  002D4E  5D6B               	subwf	___ftadd@exp1& (0+255),w,b
 16343  002D50  B0D8               	btfsc	status,0,c
 16344  002D52  D028               	goto	l5496
 16345  002D54                     l5486:
 16346                           
 16347                           ; BSR set to: 0
 16348  002D54  0100               	movlb	0	; () banked
 16349  002D56  90D8               	bcf	status,0,c
 16350  002D58  3763               	rlcf	___ftadd@f2& (0+255),f,b
 16351  002D5A  3764               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 16352  002D5C  3765               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 16353  002D5E  0100               	movlb	0	; () banked
 16354  002D60  076A               	decf	___ftadd@exp2& (0+255),f,b
 16355                           
 16356                           ; BSR set to: 0
 16357  002D62  0100               	movlb	0	; () banked
 16358  002D64  516B               	movf	___ftadd@exp1& (0+255),w,b
 16359  002D66  0100               	movlb	0	; () banked
 16360  002D68  196A               	xorwf	___ftadd@exp2& (0+255),w,b
 16361  002D6A  B4D8               	btfsc	status,2,c
 16362  002D6C  D013               	goto	l5494
 16363                           
 16364                           ; BSR set to: 0
 16365  002D6E  0100               	movlb	0	; () banked
 16366  002D70  0769               	decf	___ftadd@sign& (0+255),f,b
 16367  002D72  C069  F066         	movff	___ftadd@sign,??___ftadd
 16368  002D76  0E07               	movlw	7
 16369  002D78  0100               	movlb	0	; () banked
 16370  002D7A  1766               	andwf	??___ftadd& (0+255),f,b
 16371  002D7C  B4D8               	btfsc	status,2,c
 16372  002D7E  D00A               	goto	l5494
 16373  002D80  D7E9               	goto	l5486
 16374                           
 16375                           ; BSR set to: 0
 16376                           
 16377                           ; BSR set to: 0
 16378  002D82  D008               	goto	l5494
 16379  002D84                     l5492:
 16380                           
 16381                           ; BSR set to: 0
 16382  002D84  0100               	movlb	0	; () banked
 16383  002D86  90D8               	bcf	status,0,c
 16384  002D88  3362               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 16385  002D8A  3361               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 16386  002D8C  3360               	rrcf	___ftadd@f1& (0+255),f,b
 16387  002D8E  0100               	movlb	0	; () banked
 16388  002D90  2B6B               	incf	___ftadd@exp1& (0+255),f,b
 16389  002D92  D000               	goto	l5494
 16390  002D94                     l5494:
 16391                           
 16392                           ; BSR set to: 0
 16393  002D94  0100               	movlb	0	; () banked
 16394  002D96  516A               	movf	___ftadd@exp2& (0+255),w,b
 16395  002D98  0100               	movlb	0	; () banked
 16396  002D9A  196B               	xorwf	___ftadd@exp1& (0+255),w,b
 16397  002D9C  B4D8               	btfsc	status,2,c
 16398  002D9E  D030               	goto	l1034
 16399  002DA0  D7F1               	goto	l5492
 16400                           
 16401                           ; BSR set to: 0
 16402  002DA2  D02E               	goto	l1034
 16403  002DA4                     l5496:
 16404                           
 16405                           ; BSR set to: 0
 16406  002DA4  0100               	movlb	0	; () banked
 16407  002DA6  516B               	movf	___ftadd@exp1& (0+255),w,b
 16408  002DA8  0100               	movlb	0	; () banked
 16409  002DAA  5D6A               	subwf	___ftadd@exp2& (0+255),w,b
 16410  002DAC  B0D8               	btfsc	status,0,c
 16411  002DAE  D028               	goto	l1034
 16412  002DB0                     l5498:
 16413                           
 16414                           ; BSR set to: 0
 16415  002DB0  0100               	movlb	0	; () banked
 16416  002DB2  90D8               	bcf	status,0,c
 16417  002DB4  3760               	rlcf	___ftadd@f1& (0+255),f,b
 16418  002DB6  3761               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 16419  002DB8  3762               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 16420  002DBA  0100               	movlb	0	; () banked
 16421  002DBC  076B               	decf	___ftadd@exp1& (0+255),f,b
 16422                           
 16423                           ; BSR set to: 0
 16424  002DBE  0100               	movlb	0	; () banked
 16425  002DC0  516B               	movf	___ftadd@exp1& (0+255),w,b
 16426  002DC2  0100               	movlb	0	; () banked
 16427  002DC4  196A               	xorwf	___ftadd@exp2& (0+255),w,b
 16428  002DC6  B4D8               	btfsc	status,2,c
 16429  002DC8  D013               	goto	l5506
 16430                           
 16431                           ; BSR set to: 0
 16432  002DCA  0100               	movlb	0	; () banked
 16433  002DCC  0769               	decf	___ftadd@sign& (0+255),f,b
 16434  002DCE  C069  F066         	movff	___ftadd@sign,??___ftadd
 16435  002DD2  0E07               	movlw	7
 16436  002DD4  0100               	movlb	0	; () banked
 16437  002DD6  1766               	andwf	??___ftadd& (0+255),f,b
 16438  002DD8  B4D8               	btfsc	status,2,c
 16439  002DDA  D00A               	goto	l5506
 16440  002DDC  D7E9               	goto	l5498
 16441                           
 16442                           ; BSR set to: 0
 16443                           
 16444                           ; BSR set to: 0
 16445  002DDE  D008               	goto	l5506
 16446  002DE0                     l5504:
 16447                           
 16448                           ; BSR set to: 0
 16449  002DE0  0100               	movlb	0	; () banked
 16450  002DE2  90D8               	bcf	status,0,c
 16451  002DE4  3365               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 16452  002DE6  3364               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 16453  002DE8  3363               	rrcf	___ftadd@f2& (0+255),f,b
 16454  002DEA  0100               	movlb	0	; () banked
 16455  002DEC  2B6A               	incf	___ftadd@exp2& (0+255),f,b
 16456  002DEE  D000               	goto	l5506
 16457  002DF0                     l5506:
 16458                           
 16459                           ; BSR set to: 0
 16460  002DF0  0100               	movlb	0	; () banked
 16461  002DF2  516A               	movf	___ftadd@exp2& (0+255),w,b
 16462  002DF4  0100               	movlb	0	; () banked
 16463  002DF6  196B               	xorwf	___ftadd@exp1& (0+255),w,b
 16464  002DF8  B4D8               	btfsc	status,2,c
 16465  002DFA  D002               	goto	l1034
 16466  002DFC  D7F1               	goto	l5504
 16467                           
 16468                           ; BSR set to: 0
 16469  002DFE  D000               	goto	l1034
 16470  002E00                     l1034:
 16471                           
 16472                           ; BSR set to: 0
 16473  002E00  0100               	movlb	0	; () banked
 16474  002E02  AF69               	btfss	___ftadd@sign& (0+255),7,b
 16475  002E04  D012               	goto	l1043
 16476                           
 16477                           ; BSR set to: 0
 16478  002E06  0EFF               	movlw	255
 16479  002E08  0100               	movlb	0	; () banked
 16480  002E0A  1B60               	xorwf	___ftadd@f1& (0+255),f,b
 16481  002E0C  0EFF               	movlw	255
 16482  002E0E  0100               	movlb	0	; () banked
 16483  002E10  1B61               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 16484  002E12  0EFF               	movlw	255
 16485  002E14  0100               	movlb	0	; () banked
 16486  002E16  1B62               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 16487  002E18  0E01               	movlw	1
 16488  002E1A  0100               	movlb	0	; () banked
 16489  002E1C  2760               	addwf	___ftadd@f1& (0+255),f,b
 16490  002E1E  0E00               	movlw	0
 16491  002E20  0100               	movlb	0	; () banked
 16492  002E22  2361               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 16493  002E24  0E00               	movlw	0
 16494  002E26  0100               	movlb	0	; () banked
 16495  002E28  2362               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 16496  002E2A                     l1043:
 16497                           
 16498                           ; BSR set to: 0
 16499  002E2A  0100               	movlb	0	; () banked
 16500  002E2C  AD69               	btfss	___ftadd@sign& (0+255),6,b
 16501  002E2E  D013               	goto	l5512
 16502                           
 16503                           ; BSR set to: 0
 16504  002E30  0EFF               	movlw	255
 16505  002E32  0100               	movlb	0	; () banked
 16506  002E34  1B63               	xorwf	___ftadd@f2& (0+255),f,b
 16507  002E36  0EFF               	movlw	255
 16508  002E38  0100               	movlb	0	; () banked
 16509  002E3A  1B64               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 16510  002E3C  0EFF               	movlw	255
 16511  002E3E  0100               	movlb	0	; () banked
 16512  002E40  1B65               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 16513  002E42  0E01               	movlw	1
 16514  002E44  0100               	movlb	0	; () banked
 16515  002E46  2763               	addwf	___ftadd@f2& (0+255),f,b
 16516  002E48  0E00               	movlw	0
 16517  002E4A  0100               	movlb	0	; () banked
 16518  002E4C  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 16519  002E4E  0E00               	movlw	0
 16520  002E50  0100               	movlb	0	; () banked
 16521  002E52  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 16522  002E54  D000               	goto	l5512
 16523  002E56                     l5512:
 16524                           
 16525                           ; BSR set to: 0
 16526  002E56  0E00               	movlw	0
 16527  002E58  0100               	movlb	0	; () banked
 16528  002E5A  6F69               	movwf	___ftadd@sign& (0+255),b
 16529                           
 16530                           ; BSR set to: 0
 16531  002E5C  0100               	movlb	0	; () banked
 16532  002E5E  5160               	movf	___ftadd@f1& (0+255),w,b
 16533  002E60  0100               	movlb	0	; () banked
 16534  002E62  2763               	addwf	___ftadd@f2& (0+255),f,b
 16535  002E64  0100               	movlb	0	; () banked
 16536  002E66  5161               	movf	(___ftadd@f1+1)& (0+255),w,b
 16537  002E68  0100               	movlb	0	; () banked
 16538  002E6A  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 16539  002E6C  0100               	movlb	0	; () banked
 16540  002E6E  5162               	movf	(___ftadd@f1+2)& (0+255),w,b
 16541  002E70  0100               	movlb	0	; () banked
 16542  002E72  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 16543                           
 16544                           ; BSR set to: 0
 16545  002E74  0100               	movlb	0	; () banked
 16546  002E76  AF65               	btfss	(___ftadd@f2+2)& (0+255),7,b
 16547  002E78  D016               	goto	l5522
 16548                           
 16549                           ; BSR set to: 0
 16550  002E7A  0EFF               	movlw	255
 16551  002E7C  0100               	movlb	0	; () banked
 16552  002E7E  1B63               	xorwf	___ftadd@f2& (0+255),f,b
 16553  002E80  0EFF               	movlw	255
 16554  002E82  0100               	movlb	0	; () banked
 16555  002E84  1B64               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 16556  002E86  0EFF               	movlw	255
 16557  002E88  0100               	movlb	0	; () banked
 16558  002E8A  1B65               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 16559  002E8C  0E01               	movlw	1
 16560  002E8E  0100               	movlb	0	; () banked
 16561  002E90  2763               	addwf	___ftadd@f2& (0+255),f,b
 16562  002E92  0E00               	movlw	0
 16563  002E94  0100               	movlb	0	; () banked
 16564  002E96  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 16565  002E98  0E00               	movlw	0
 16566  002E9A  0100               	movlb	0	; () banked
 16567  002E9C  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 16568                           
 16569                           ; BSR set to: 0
 16570  002E9E  0E01               	movlw	1
 16571  002EA0  0100               	movlb	0	; () banked
 16572  002EA2  6F69               	movwf	___ftadd@sign& (0+255),b
 16573  002EA4  D000               	goto	l5522
 16574  002EA6                     l5522:
 16575                           
 16576                           ; BSR set to: 0
 16577  002EA6  C063  F00F         	movff	___ftadd@f2,___ftpack@arg
 16578  002EAA  C064  F010         	movff	___ftadd@f2+1,___ftpack@arg+1
 16579  002EAE  C065  F011         	movff	___ftadd@f2+2,___ftpack@arg+2
 16580  002EB2  C06B  F012         	movff	___ftadd@exp1,___ftpack@exp
 16581  002EB6  C069  F013         	movff	___ftadd@sign,___ftpack@sign
 16582  002EBA  EC06  F021         	call	___ftpack	;wreg free
 16583  002EBE  C00F  F060         	movff	?___ftpack,?___ftadd
 16584  002EC2  C010  F061         	movff	?___ftpack+1,?___ftadd+1
 16585  002EC6  C011  F062         	movff	?___ftpack+2,?___ftadd+2
 16586  002ECA  D000               	goto	l1020
 16587  002ECC                     l1020:
 16588  002ECC  0012               	return		;funcret
 16589  002ECE                     __end_of___ftadd:
 16590                           	opt stack 0
 16591                           tblptru	equ	0xFF8
 16592                           tblptrh	equ	0xFF7
 16593                           tblptrl	equ	0xFF6
 16594                           tablat	equ	0xFF5
 16595                           prodh	equ	0xFF4
 16596                           prodl	equ	0xFF3
 16597                           intcon	equ	0xFF2
 16598                           intcon2	equ	0xFF1
 16599                           postinc0	equ	0xFEE
 16600                           wreg	equ	0xFE8
 16601                           postinc1	equ	0xFE6
 16602                           postdec1	equ	0xFE5
 16603                           fsr1h	equ	0xFE2
 16604                           fsr1l	equ	0xFE1
 16605                           indf2	equ	0xFDF
 16606                           postinc2	equ	0xFDE
 16607                           postdec2	equ	0xFDD
 16608                           plusw2	equ	0xFDB
 16609                           fsr2h	equ	0xFDA
 16610                           fsr2l	equ	0xFD9
 16611                           status	equ	0xFD8
 16612                           
 16613 ;; *************** function ___awtoft *****************
 16614 ;; Defined at:
 16615 ;;		line 32 in file "/opt/microchip/xc8/v1.34/sources/common/awtoft.c"
 16616 ;; Parameters:    Size  Location     Type
 16617 ;;  c               2   28[COMRAM] int 
 16618 ;; Auto vars:     Size  Location     Type
 16619 ;;  sign            1   31[COMRAM] unsigned char 
 16620 ;; Return value:  Size  Location     Type
 16621 ;;                  3   28[COMRAM] float 
 16622 ;; Registers used:
 16623 ;;		wreg, status,2, status,0, cstack
 16624 ;; Tracked objects:
 16625 ;;		On entry : 0/0
 16626 ;;		On exit  : 0/0
 16627 ;;		Unchanged: 0/0
 16628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16629 ;;      Params:         3       0       0       0       0       0       0       0       0
 16630 ;;      Locals:         1       0       0       0       0       0       0       0       0
 16631 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16632 ;;      Totals:         4       0       0       0       0       0       0       0       0
 16633 ;;Total ram usage:        4 bytes
 16634 ;; Hardware stack levels used:    1
 16635 ;; Hardware stack levels required when called:    2
 16636 ;; This function calls:
 16637 ;;		___ftpack
 16638 ;; This function is called by:
 16639 ;;		_Compute
 16640 ;;		_Interval
 16641 ;;		_UpdateDir
 16642 ;;		_AdvanceLow
 16643 ;;		_main
 16644 ;;		_exp
 16645 ;;		_log
 16646 ;; This function uses a non-reentrant model
 16647 ;;
 16648                           
 16649                           	psect	text50
 16650  004D6A                     __ptext50:
 16651                           	opt stack 0
 16652  004D6A                     ___awtoft:
 16653                           	opt stack 28
 16654                           
 16655                           ;incstack = 0
 16656  004D6A  0E00               	movlw	0
 16657  004D6C  6E20               	movwf	___awtoft@sign,c
 16658  004D6E  AE1E               	btfss	___awtoft@c+1,7,c
 16659  004D70  D007               	goto	l5780
 16660  004D72  6C1D               	negf	___awtoft@c,c
 16661  004D74  1E1E               	comf	___awtoft@c+1,f,c
 16662  004D76  B0D8               	btfsc	status,0,c
 16663  004D78  2A1E               	incf	___awtoft@c+1,f,c
 16664  004D7A  0E01               	movlw	1
 16665  004D7C  6E20               	movwf	___awtoft@sign,c
 16666  004D7E  D000               	goto	l5780
 16667  004D80                     l5780:
 16668  004D80  C01D  F00F         	movff	___awtoft@c,___ftpack@arg
 16669  004D84  C01E  F010         	movff	___awtoft@c+1,___ftpack@arg+1
 16670  004D88  6A11               	clrf	___ftpack@arg+2,c
 16671  004D8A  0E8E               	movlw	142
 16672  004D8C  6E12               	movwf	___ftpack@exp,c
 16673  004D8E  C020  F013         	movff	___awtoft@sign,___ftpack@sign
 16674  004D92  EC06  F021         	call	___ftpack	;wreg free
 16675  004D96  C00F  F01D         	movff	?___ftpack,?___awtoft
 16676  004D9A  C010  F01E         	movff	?___ftpack+1,?___awtoft+1
 16677  004D9E  C011  F01F         	movff	?___ftpack+2,?___awtoft+2
 16678  004DA2  D000               	goto	l889
 16679  004DA4                     l889:
 16680  004DA4  0012               	return		;funcret
 16681  004DA6                     __end_of___awtoft:
 16682                           	opt stack 0
 16683                           tblptru	equ	0xFF8
 16684                           tblptrh	equ	0xFF7
 16685                           tblptrl	equ	0xFF6
 16686                           tablat	equ	0xFF5
 16687                           prodh	equ	0xFF4
 16688                           prodl	equ	0xFF3
 16689                           intcon	equ	0xFF2
 16690                           intcon2	equ	0xFF1
 16691                           postinc0	equ	0xFEE
 16692                           wreg	equ	0xFE8
 16693                           postinc1	equ	0xFE6
 16694                           postdec1	equ	0xFE5
 16695                           fsr1h	equ	0xFE2
 16696                           fsr1l	equ	0xFE1
 16697                           indf2	equ	0xFDF
 16698                           postinc2	equ	0xFDE
 16699                           postdec2	equ	0xFDD
 16700                           plusw2	equ	0xFDB
 16701                           fsr2h	equ	0xFDA
 16702                           fsr2l	equ	0xFD9
 16703                           status	equ	0xFD8
 16704                           
 16705 ;; *************** function ___ftpack *****************
 16706 ;; Defined at:
 16707 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
 16708 ;; Parameters:    Size  Location     Type
 16709 ;;  arg             3   14[COMRAM] unsigned um
 16710 ;;  exp             1   17[COMRAM] unsigned char 
 16711 ;;  sign            1   18[COMRAM] unsigned char 
 16712 ;; Auto vars:     Size  Location     Type
 16713 ;;		None
 16714 ;; Return value:  Size  Location     Type
 16715 ;;                  3   14[COMRAM] float 
 16716 ;; Registers used:
 16717 ;;		wreg, status,2, status,0
 16718 ;; Tracked objects:
 16719 ;;		On entry : 0/0
 16720 ;;		On exit  : 0/0
 16721 ;;		Unchanged: 0/0
 16722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16723 ;;      Params:         5       0       0       0       0       0       0       0       0
 16724 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16725 ;;      Temps:          3       0       0       0       0       0       0       0       0
 16726 ;;      Totals:         8       0       0       0       0       0       0       0       0
 16727 ;;Total ram usage:        8 bytes
 16728 ;; Hardware stack levels used:    1
 16729 ;; Hardware stack levels required when called:    1
 16730 ;; This function calls:
 16731 ;;		Nothing
 16732 ;; This function is called by:
 16733 ;;		___altoft
 16734 ;;		___awtoft
 16735 ;;		___ftadd
 16736 ;;		___ftdiv
 16737 ;;		___ftmul
 16738 ;;		___lltoft
 16739 ;; This function uses a non-reentrant model
 16740 ;;
 16741                           
 16742                           	psect	text51
 16743  00420C                     __ptext51:
 16744                           	opt stack 0
 16745  00420C                     ___ftpack:
 16746                           	opt stack 28
 16747                           
 16748                           ;incstack = 0
 16749  00420C  5012               	movf	___ftpack@exp,w,c
 16750  00420E  B4D8               	btfsc	status,2,c
 16751  004210  D005               	goto	l5402
 16752  004212  500F               	movf	___ftpack@arg,w,c
 16753  004214  1010               	iorwf	___ftpack@arg+1,w,c
 16754  004216  1011               	iorwf	___ftpack@arg+2,w,c
 16755  004218  A4D8               	btfss	status,2,c
 16756  00421A  D00E               	goto	l5408
 16757  00421C                     l5402:
 16758  00421C  0E00               	movlw	0
 16759  00421E  6E0F               	movwf	?___ftpack,c
 16760  004220  0E00               	movlw	0
 16761  004222  6E10               	movwf	?___ftpack+1,c
 16762  004224  0E00               	movlw	0
 16763  004226  6E11               	movwf	?___ftpack+2,c
 16764  004228  D053               	goto	l979
 16765  00422A  D006               	goto	l5408
 16766  00422C                     l5406:
 16767  00422C  2A12               	incf	___ftpack@exp,f,c
 16768  00422E  90D8               	bcf	status,0,c
 16769  004230  3211               	rrcf	___ftpack@arg+2,f,c
 16770  004232  3210               	rrcf	___ftpack@arg+1,f,c
 16771  004234  320F               	rrcf	___ftpack@arg,f,c
 16772  004236  D000               	goto	l5408
 16773  004238                     l5408:
 16774  004238  0E00               	movlw	0
 16775  00423A  140F               	andwf	___ftpack@arg,w,c
 16776  00423C  6E14               	movwf	??___ftpack& (0+255),c
 16777  00423E  0E00               	movlw	0
 16778  004240  1410               	andwf	___ftpack@arg+1,w,c
 16779  004242  6E15               	movwf	(??___ftpack+1)& (0+255),c
 16780  004244  0EFE               	movlw	254
 16781  004246  1411               	andwf	___ftpack@arg+2,w,c
 16782  004248  6E16               	movwf	(??___ftpack+2)& (0+255),c
 16783  00424A  5014               	movf	??___ftpack,w,c
 16784  00424C  1015               	iorwf	??___ftpack+1,w,c
 16785  00424E  1016               	iorwf	??___ftpack+2,w,c
 16786  004250  B4D8               	btfsc	status,2,c
 16787  004252  D00E               	goto	l5414
 16788  004254  D7EB               	goto	l5406
 16789  004256  D00C               	goto	l5414
 16790  004258                     l5410:
 16791  004258  2A12               	incf	___ftpack@exp,f,c
 16792  00425A  0E01               	movlw	1
 16793  00425C  260F               	addwf	___ftpack@arg,f,c
 16794  00425E  0E00               	movlw	0
 16795  004260  2210               	addwfc	___ftpack@arg+1,f,c
 16796  004262  0E00               	movlw	0
 16797  004264  2211               	addwfc	___ftpack@arg+2,f,c
 16798  004266  90D8               	bcf	status,0,c
 16799  004268  3211               	rrcf	___ftpack@arg+2,f,c
 16800  00426A  3210               	rrcf	___ftpack@arg+1,f,c
 16801  00426C  320F               	rrcf	___ftpack@arg,f,c
 16802  00426E  D000               	goto	l5414
 16803  004270                     l5414:
 16804  004270  0E00               	movlw	0
 16805  004272  140F               	andwf	___ftpack@arg,w,c
 16806  004274  6E14               	movwf	??___ftpack& (0+255),c
 16807  004276  0E00               	movlw	0
 16808  004278  1410               	andwf	___ftpack@arg+1,w,c
 16809  00427A  6E15               	movwf	(??___ftpack+1)& (0+255),c
 16810  00427C  0EFF               	movlw	255
 16811  00427E  1411               	andwf	___ftpack@arg+2,w,c
 16812  004280  6E16               	movwf	(??___ftpack+2)& (0+255),c
 16813  004282  5014               	movf	??___ftpack,w,c
 16814  004284  1015               	iorwf	??___ftpack+1,w,c
 16815  004286  1016               	iorwf	??___ftpack+2,w,c
 16816  004288  B4D8               	btfsc	status,2,c
 16817  00428A  D008               	goto	l5418
 16818  00428C  D7E5               	goto	l5410
 16819  00428E  D006               	goto	l5418
 16820  004290                     l5416:
 16821  004290  0612               	decf	___ftpack@exp,f,c
 16822  004292  90D8               	bcf	status,0,c
 16823  004294  360F               	rlcf	___ftpack@arg,f,c
 16824  004296  3610               	rlcf	___ftpack@arg+1,f,c
 16825  004298  3611               	rlcf	___ftpack@arg+2,f,c
 16826  00429A  D000               	goto	l5418
 16827  00429C                     l5418:
 16828  00429C  BE10               	btfsc	___ftpack@arg+1,7,c
 16829  00429E  D004               	goto	l990
 16830  0042A0  0E02               	movlw	2
 16831  0042A2  6012               	cpfslt	___ftpack@exp,c
 16832  0042A4  D7F5               	goto	l5416
 16833  0042A6  D000               	goto	l990
 16834  0042A8                     l990:
 16835  0042A8  B012               	btfsc	___ftpack@exp,0,c
 16836  0042AA  D002               	goto	l5424
 16837  0042AC  9E10               	bcf	___ftpack@arg+1,7,c
 16838  0042AE  D000               	goto	l5424
 16839  0042B0                     l5424:
 16840  0042B0  90D8               	bcf	status,0,c
 16841  0042B2  3212               	rrcf	___ftpack@exp,f,c
 16842  0042B4  5012               	movf	___ftpack@exp,w,c
 16843  0042B6  1211               	iorwf	___ftpack@arg+2,f,c
 16844  0042B8  5013               	movf	___ftpack@sign,w,c
 16845  0042BA  B4D8               	btfsc	status,2,c
 16846  0042BC  D002               	goto	l5430
 16847  0042BE  8E11               	bsf	___ftpack@arg+2,7,c
 16848  0042C0  D000               	goto	l5430
 16849  0042C2                     l5430:
 16850  0042C2  C00F  F00F         	movff	___ftpack@arg,?___ftpack
 16851  0042C6  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
 16852  0042CA  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
 16853  0042CE  D000               	goto	l979
 16854  0042D0                     l979:
 16855  0042D0  0012               	return		;funcret
 16856  0042D2                     __end_of___ftpack:
 16857                           	opt stack 0
 16858                           tblptru	equ	0xFF8
 16859                           tblptrh	equ	0xFF7
 16860                           tblptrl	equ	0xFF6
 16861                           tablat	equ	0xFF5
 16862                           prodh	equ	0xFF4
 16863                           prodl	equ	0xFF3
 16864                           intcon	equ	0xFF2
 16865                           intcon2	equ	0xFF1
 16866                           postinc0	equ	0xFEE
 16867                           wreg	equ	0xFE8
 16868                           postinc1	equ	0xFE6
 16869                           postdec1	equ	0xFE5
 16870                           fsr1h	equ	0xFE2
 16871                           fsr1l	equ	0xFE1
 16872                           indf2	equ	0xFDF
 16873                           postinc2	equ	0xFDE
 16874                           postdec2	equ	0xFDD
 16875                           plusw2	equ	0xFDB
 16876                           fsr2h	equ	0xFDA
 16877                           fsr2l	equ	0xFD9
 16878                           status	equ	0xFD8
 16879                           
 16880 ;; *************** function _MotorsSpeed *****************
 16881 ;; Defined at:
 16882 ;;		line 193 in file "../config.c"
 16883 ;; Parameters:    Size  Location     Type
 16884 ;;  A               2   27[BANK0 ] int 
 16885 ;;  B               2   29[BANK0 ] int 
 16886 ;; Auto vars:     Size  Location     Type
 16887 ;;		None
 16888 ;; Return value:  Size  Location     Type
 16889 ;;		None               void
 16890 ;; Registers used:
 16891 ;;		wreg, status,2, status,0, cstack
 16892 ;; Tracked objects:
 16893 ;;		On entry : 0/0
 16894 ;;		On exit  : 0/0
 16895 ;;		Unchanged: 0/0
 16896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16897 ;;      Params:         0       4       0       0       0       0       0       0       0
 16898 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16899 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16900 ;;      Totals:         0       8       0       0       0       0       0       0       0
 16901 ;;Total ram usage:        8 bytes
 16902 ;; Hardware stack levels used:    1
 16903 ;; Hardware stack levels required when called:    3
 16904 ;; This function calls:
 16905 ;;		_MotorASpeed
 16906 ;;		_MotorBSpeed
 16907 ;; This function is called by:
 16908 ;;		_UpdateDir
 16909 ;;		_AdvanceLow
 16910 ;;		_main
 16911 ;; This function uses a non-reentrant model
 16912 ;;
 16913                           
 16914                           	psect	text52
 16915  004CA6                     __ptext52:
 16916                           	opt stack 0
 16917  004CA6                     _MotorsSpeed:
 16918                           	opt stack 26
 16919                           
 16920                           ;config.c: 194: MotorASpeed(ALFA == ALFA ? A : B);
 16921                           
 16922                           ;incstack = 0
 16923  004CA6  D005               	goto	l155
 16924  004CA8  C07D  F07F         	movff	MotorsSpeed@B,_MotorsSpeed$1455
 16925  004CAC  C07E  F080         	movff	MotorsSpeed@B+1,_MotorsSpeed$1455+1
 16926  004CB0  D005               	goto	l6224
 16927  004CB2                     l155:
 16928  004CB2  C07B  F07F         	movff	MotorsSpeed@A,_MotorsSpeed$1455
 16929  004CB6  C07C  F080         	movff	MotorsSpeed@A+1,_MotorsSpeed$1455+1
 16930  004CBA  D000               	goto	l6224
 16931  004CBC                     l6224:
 16932                           
 16933                           ;config.c: 195: MotorBSpeed(ALFA == BETA ? A : B);
 16934  004CBC  C07F  F017         	movff	_MotorsSpeed$1455,MotorASpeed@S
 16935  004CC0  C080  F018         	movff	_MotorsSpeed$1455+1,MotorASpeed@S+1
 16936  004CC4  EC1D  F022         	call	_MotorASpeed	;wreg free
 16937  004CC8  C07D  F081         	movff	MotorsSpeed@B,_MotorsSpeed$1457
 16938  004CCC  C07E  F082         	movff	MotorsSpeed@B+1,_MotorsSpeed$1457+1
 16939  004CD0  D005               	goto	l6228
 16940  004CD2  C07B  F081         	movff	MotorsSpeed@A,_MotorsSpeed$1457
 16941  004CD6  C07C  F082         	movff	MotorsSpeed@A+1,_MotorsSpeed$1457+1
 16942  004CDA  D000               	goto	l6228
 16943  004CDC                     l6228:
 16944  004CDC  C081  F017         	movff	_MotorsSpeed$1457,MotorBSpeed@S
 16945  004CE0  C082  F018         	movff	_MotorsSpeed$1457+1,MotorBSpeed@S+1
 16946  004CE4  ECC8  F021         	call	_MotorBSpeed	;wreg free
 16947  004CE8  0012               	return		;funcret
 16948  004CEA                     __end_of_MotorsSpeed:
 16949                           	opt stack 0
 16950                           tblptru	equ	0xFF8
 16951                           tblptrh	equ	0xFF7
 16952                           tblptrl	equ	0xFF6
 16953                           tablat	equ	0xFF5
 16954                           prodh	equ	0xFF4
 16955                           prodl	equ	0xFF3
 16956                           intcon	equ	0xFF2
 16957                           intcon2	equ	0xFF1
 16958                           postinc0	equ	0xFEE
 16959                           wreg	equ	0xFE8
 16960                           postinc1	equ	0xFE6
 16961                           postdec1	equ	0xFE5
 16962                           fsr1h	equ	0xFE2
 16963                           fsr1l	equ	0xFE1
 16964                           indf2	equ	0xFDF
 16965                           postinc2	equ	0xFDE
 16966                           postdec2	equ	0xFDD
 16967                           plusw2	equ	0xFDB
 16968                           fsr2h	equ	0xFDA
 16969                           fsr2l	equ	0xFD9
 16970                           status	equ	0xFD8
 16971                           
 16972 ;; *************** function _MotorBSpeed *****************
 16973 ;; Defined at:
 16974 ;;		line 181 in file "../config.c"
 16975 ;; Parameters:    Size  Location     Type
 16976 ;;  S               2   22[COMRAM] int 
 16977 ;; Auto vars:     Size  Location     Type
 16978 ;;		None
 16979 ;; Return value:  Size  Location     Type
 16980 ;;		None               void
 16981 ;; Registers used:
 16982 ;;		wreg, status,2, status,0, cstack
 16983 ;; Tracked objects:
 16984 ;;		On entry : 0/0
 16985 ;;		On exit  : 0/0
 16986 ;;		Unchanged: 0/0
 16987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16988 ;;      Params:         2       0       0       0       0       0       0       0       0
 16989 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16990 ;;      Temps:          1       0       0       0       0       0       0       0       0
 16991 ;;      Totals:         3       0       0       0       0       0       0       0       0
 16992 ;;Total ram usage:        3 bytes
 16993 ;; Hardware stack levels used:    1
 16994 ;; Hardware stack levels required when called:    2
 16995 ;; This function calls:
 16996 ;;		___awdiv
 16997 ;; This function is called by:
 16998 ;;		_MotorsSpeed
 16999 ;; This function uses a non-reentrant model
 17000 ;;
 17001                           
 17002                           	psect	text53
 17003  004390                     __ptext53:
 17004                           	opt stack 0
 17005  004390                     _MotorBSpeed:
 17006                           	opt stack 26
 17007                           
 17008                           ;config.c: 182: S = -S;
 17009                           
 17010                           ;incstack = 0
 17011  004390  6C17               	negf	MotorBSpeed@S,c
 17012  004392  1E18               	comf	MotorBSpeed@S+1,f,c
 17013  004394  B0D8               	btfsc	status,0,c
 17014  004396  2A18               	incf	MotorBSpeed@S+1,f,c
 17015                           
 17016                           ;config.c: 183: S = (((S) < (1000)) ? (S) : (1000));
 17017  004398  BE18               	btfsc	MotorBSpeed@S+1,7,c
 17018  00439A  D00B               	goto	l5916
 17019  00439C  0EE8               	movlw	232
 17020  00439E  5C17               	subwf	MotorBSpeed@S,w,c
 17021  0043A0  0E03               	movlw	3
 17022  0043A2  5818               	subwfb	MotorBSpeed@S+1,w,c
 17023  0043A4  A0D8               	btfss	status,0,c
 17024  0043A6  D005               	goto	l5916
 17025  0043A8  0E03               	movlw	3
 17026  0043AA  6E18               	movwf	MotorBSpeed@S+1,c
 17027  0043AC  0EE8               	movlw	232
 17028  0043AE  6E17               	movwf	MotorBSpeed@S,c
 17029  0043B0  D000               	goto	l5916
 17030  0043B2                     l5916:
 17031                           
 17032                           ;config.c: 184: S = (((S) > (-1000)) ? (S) : (-1000));
 17033  0043B2  AE18               	btfss	MotorBSpeed@S+1,7,c
 17034  0043B4  D00B               	goto	l5920
 17035  0043B6  0E19               	movlw	25
 17036  0043B8  5C17               	subwf	MotorBSpeed@S,w,c
 17037  0043BA  0EFC               	movlw	252
 17038  0043BC  5818               	subwfb	MotorBSpeed@S+1,w,c
 17039  0043BE  B0D8               	btfsc	status,0,c
 17040  0043C0  D005               	goto	l5920
 17041  0043C2  0EFC               	movlw	252
 17042  0043C4  6E18               	movwf	MotorBSpeed@S+1,c
 17043  0043C6  0E18               	movlw	24
 17044  0043C8  6E17               	movwf	MotorBSpeed@S,c
 17045  0043CA  D000               	goto	l5920
 17046  0043CC                     l5920:
 17047                           
 17048                           ;config.c: 186: PORTDbits.RD2 = S > 0 ? 0 : 1;
 17049  0043CC  BE18               	btfsc	MotorBSpeed@S+1,7,c
 17050  0043CE  D005               	goto	u7231
 17051  0043D0  5018               	movf	MotorBSpeed@S+1,w,c
 17052  0043D2  E106               	bnz	u7230
 17053  0043D4  0417               	decf	MotorBSpeed@S,w,c
 17054  0043D6  B0D8               	btfsc	status,0,c
 17055  0043D8  D003               	goto	u7230
 17056  0043DA                     u7231:
 17057  0043DA  6A19               	clrf	??_MotorBSpeed& (0+255),c
 17058  0043DC  2A19               	incf	??_MotorBSpeed& (0+255),f,c
 17059  0043DE  D001               	goto	u7248
 17060  0043E0                     u7230:
 17061  0043E0  6A19               	clrf	??_MotorBSpeed& (0+255),c
 17062  0043E2                     u7248:
 17063  0043E2  4619               	rlncf	??_MotorBSpeed,f,c
 17064  0043E4  4619               	rlncf	??_MotorBSpeed,f,c
 17065  0043E6  5083               	movf	3971,w,c	;volatile
 17066  0043E8  1819               	xorwf	??_MotorBSpeed,w,c
 17067  0043EA  0BFB               	andlw	-5
 17068  0043EC  1819               	xorwf	??_MotorBSpeed,w,c
 17069  0043EE  6E83               	movwf	3971,c	;volatile
 17070                           
 17071                           ;config.c: 187: S = S > 0 ? S : 1000 + S;
 17072  0043F0  BE18               	btfsc	MotorBSpeed@S+1,7,c
 17073  0043F2  D005               	goto	l5922
 17074  0043F4  5018               	movf	MotorBSpeed@S+1,w,c
 17075  0043F6  E10A               	bnz	l5924
 17076  0043F8  0417               	decf	MotorBSpeed@S,w,c
 17077  0043FA  B0D8               	btfsc	status,0,c
 17078  0043FC  D007               	goto	l5924
 17079  0043FE                     l5922:
 17080  0043FE  0EE8               	movlw	232
 17081  004400  2417               	addwf	MotorBSpeed@S,w,c
 17082  004402  6E17               	movwf	MotorBSpeed@S,c
 17083  004404  0E03               	movlw	3
 17084  004406  2018               	addwfc	MotorBSpeed@S+1,w,c
 17085  004408  6E18               	movwf	MotorBSpeed@S+1,c
 17086  00440A  D000               	goto	l5924
 17087  00440C                     l5924:
 17088                           
 17089                           ;config.c: 189: CCP2CONbits.DC2B = S % 4;
 17090  00440C  C017  F019         	movff	MotorBSpeed@S,??_MotorBSpeed
 17091  004410  0E03               	movlw	3
 17092  004412  1619               	andwf	??_MotorBSpeed,f,c
 17093  004414  3A19               	swapf	??_MotorBSpeed,f,c
 17094  004416  50BA               	movf	4026,w,c	;volatile
 17095  004418  1819               	xorwf	??_MotorBSpeed,w,c
 17096  00441A  0BCF               	andlw	-49
 17097  00441C  1819               	xorwf	??_MotorBSpeed,w,c
 17098  00441E  6EBA               	movwf	4026,c	;volatile
 17099                           
 17100                           ;config.c: 190: CCPR2L = S / 4;
 17101  004420  C017  F00F         	movff	MotorBSpeed@S,___awdiv@dividend
 17102  004424  C018  F010         	movff	MotorBSpeed@S+1,___awdiv@dividend+1
 17103  004428  0E00               	movlw	0
 17104  00442A  6E12               	movwf	___awdiv@divisor+1,c
 17105  00442C  0E04               	movlw	4
 17106  00442E  6E11               	movwf	___awdiv@divisor,c
 17107  004430  EC72  F022         	call	___awdiv	;wreg free
 17108  004434  500F               	movf	?___awdiv,w,c
 17109  004436  6EBB               	movwf	4027,c	;volatile
 17110  004438  0012               	return		;funcret
 17111  00443A                     __end_of_MotorBSpeed:
 17112                           	opt stack 0
 17113                           tblptru	equ	0xFF8
 17114                           tblptrh	equ	0xFF7
 17115                           tblptrl	equ	0xFF6
 17116                           tablat	equ	0xFF5
 17117                           prodh	equ	0xFF4
 17118                           prodl	equ	0xFF3
 17119                           intcon	equ	0xFF2
 17120                           intcon2	equ	0xFF1
 17121                           postinc0	equ	0xFEE
 17122                           wreg	equ	0xFE8
 17123                           postinc1	equ	0xFE6
 17124                           postdec1	equ	0xFE5
 17125                           fsr1h	equ	0xFE2
 17126                           fsr1l	equ	0xFE1
 17127                           indf2	equ	0xFDF
 17128                           postinc2	equ	0xFDE
 17129                           postdec2	equ	0xFDD
 17130                           plusw2	equ	0xFDB
 17131                           fsr2h	equ	0xFDA
 17132                           fsr2l	equ	0xFD9
 17133                           status	equ	0xFD8
 17134                           
 17135 ;; *************** function _MotorASpeed *****************
 17136 ;; Defined at:
 17137 ;;		line 170 in file "../config.c"
 17138 ;; Parameters:    Size  Location     Type
 17139 ;;  S               2   22[COMRAM] int 
 17140 ;; Auto vars:     Size  Location     Type
 17141 ;;		None
 17142 ;; Return value:  Size  Location     Type
 17143 ;;		None               void
 17144 ;; Registers used:
 17145 ;;		wreg, status,2, status,0, cstack
 17146 ;; Tracked objects:
 17147 ;;		On entry : 0/0
 17148 ;;		On exit  : 0/0
 17149 ;;		Unchanged: 0/0
 17150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17151 ;;      Params:         2       0       0       0       0       0       0       0       0
 17152 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17153 ;;      Temps:          1       0       0       0       0       0       0       0       0
 17154 ;;      Totals:         3       0       0       0       0       0       0       0       0
 17155 ;;Total ram usage:        3 bytes
 17156 ;; Hardware stack levels used:    1
 17157 ;; Hardware stack levels required when called:    2
 17158 ;; This function calls:
 17159 ;;		___awdiv
 17160 ;; This function is called by:
 17161 ;;		_MotorsSpeed
 17162 ;; This function uses a non-reentrant model
 17163 ;;
 17164                           
 17165                           	psect	text54
 17166  00443A                     __ptext54:
 17167                           	opt stack 0
 17168  00443A                     _MotorASpeed:
 17169                           	opt stack 26
 17170                           
 17171                           ;config.c: 171: S = -S;
 17172                           
 17173                           ;incstack = 0
 17174  00443A  6C17               	negf	MotorASpeed@S,c
 17175  00443C  1E18               	comf	MotorASpeed@S+1,f,c
 17176  00443E  B0D8               	btfsc	status,0,c
 17177  004440  2A18               	incf	MotorASpeed@S+1,f,c
 17178                           
 17179                           ;config.c: 172: S = (((S) < (1000)) ? (S) : (1000));
 17180  004442  BE18               	btfsc	MotorASpeed@S+1,7,c
 17181  004444  D00B               	goto	l5898
 17182  004446  0EE8               	movlw	232
 17183  004448  5C17               	subwf	MotorASpeed@S,w,c
 17184  00444A  0E03               	movlw	3
 17185  00444C  5818               	subwfb	MotorASpeed@S+1,w,c
 17186  00444E  A0D8               	btfss	status,0,c
 17187  004450  D005               	goto	l5898
 17188  004452  0E03               	movlw	3
 17189  004454  6E18               	movwf	MotorASpeed@S+1,c
 17190  004456  0EE8               	movlw	232
 17191  004458  6E17               	movwf	MotorASpeed@S,c
 17192  00445A  D000               	goto	l5898
 17193  00445C                     l5898:
 17194                           
 17195                           ;config.c: 173: S = (((S) > (-1000)) ? (S) : (-1000));
 17196  00445C  AE18               	btfss	MotorASpeed@S+1,7,c
 17197  00445E  D00B               	goto	l5902
 17198  004460  0E19               	movlw	25
 17199  004462  5C17               	subwf	MotorASpeed@S,w,c
 17200  004464  0EFC               	movlw	252
 17201  004466  5818               	subwfb	MotorASpeed@S+1,w,c
 17202  004468  B0D8               	btfsc	status,0,c
 17203  00446A  D005               	goto	l5902
 17204  00446C  0EFC               	movlw	252
 17205  00446E  6E18               	movwf	MotorASpeed@S+1,c
 17206  004470  0E18               	movlw	24
 17207  004472  6E17               	movwf	MotorASpeed@S,c
 17208  004474  D000               	goto	l5902
 17209  004476                     l5902:
 17210                           
 17211                           ;config.c: 175: PORTDbits.RD1 = S > 0 ? 0 : 1;
 17212  004476  BE18               	btfsc	MotorASpeed@S+1,7,c
 17213  004478  D005               	goto	u7181
 17214  00447A  5018               	movf	MotorASpeed@S+1,w,c
 17215  00447C  E106               	bnz	u7180
 17216  00447E  0417               	decf	MotorASpeed@S,w,c
 17217  004480  B0D8               	btfsc	status,0,c
 17218  004482  D003               	goto	u7180
 17219  004484                     u7181:
 17220  004484  6A19               	clrf	??_MotorASpeed& (0+255),c
 17221  004486  2A19               	incf	??_MotorASpeed& (0+255),f,c
 17222  004488  D001               	goto	u7198
 17223  00448A                     u7180:
 17224  00448A  6A19               	clrf	??_MotorASpeed& (0+255),c
 17225  00448C                     u7198:
 17226  00448C  4619               	rlncf	??_MotorASpeed,f,c
 17227  00448E  5083               	movf	3971,w,c	;volatile
 17228  004490  1819               	xorwf	??_MotorASpeed,w,c
 17229  004492  0BFD               	andlw	-3
 17230  004494  1819               	xorwf	??_MotorASpeed,w,c
 17231  004496  6E83               	movwf	3971,c	;volatile
 17232                           
 17233                           ;config.c: 176: S = S > 0 ? S : 1000 + S;
 17234  004498  BE18               	btfsc	MotorASpeed@S+1,7,c
 17235  00449A  D005               	goto	l5904
 17236  00449C  5018               	movf	MotorASpeed@S+1,w,c
 17237  00449E  E10A               	bnz	l5906
 17238  0044A0  0417               	decf	MotorASpeed@S,w,c
 17239  0044A2  B0D8               	btfsc	status,0,c
 17240  0044A4  D007               	goto	l5906
 17241  0044A6                     l5904:
 17242  0044A6  0EE8               	movlw	232
 17243  0044A8  2417               	addwf	MotorASpeed@S,w,c
 17244  0044AA  6E17               	movwf	MotorASpeed@S,c
 17245  0044AC  0E03               	movlw	3
 17246  0044AE  2018               	addwfc	MotorASpeed@S+1,w,c
 17247  0044B0  6E18               	movwf	MotorASpeed@S+1,c
 17248  0044B2  D000               	goto	l5906
 17249  0044B4                     l5906:
 17250                           
 17251                           ;config.c: 178: CCP1CONbits.DC1B1 = S % 4;
 17252  0044B4  C017  F019         	movff	MotorASpeed@S,??_MotorASpeed
 17253  0044B8  0E03               	movlw	3
 17254  0044BA  1619               	andwf	??_MotorASpeed,f,c
 17255  0044BC  3A19               	swapf	??_MotorASpeed,f,c
 17256  0044BE  4619               	rlncf	??_MotorASpeed,f,c
 17257  0044C0  50BD               	movf	4029,w,c	;volatile
 17258  0044C2  1819               	xorwf	??_MotorASpeed,w,c
 17259  0044C4  0BDF               	andlw	-33
 17260  0044C6  1819               	xorwf	??_MotorASpeed,w,c
 17261  0044C8  6EBD               	movwf	4029,c	;volatile
 17262                           
 17263                           ;config.c: 179: CCPR1L = S / 4;
 17264  0044CA  C017  F00F         	movff	MotorASpeed@S,___awdiv@dividend
 17265  0044CE  C018  F010         	movff	MotorASpeed@S+1,___awdiv@dividend+1
 17266  0044D2  0E00               	movlw	0
 17267  0044D4  6E12               	movwf	___awdiv@divisor+1,c
 17268  0044D6  0E04               	movlw	4
 17269  0044D8  6E11               	movwf	___awdiv@divisor,c
 17270  0044DA  EC72  F022         	call	___awdiv	;wreg free
 17271  0044DE  500F               	movf	?___awdiv,w,c
 17272  0044E0  6EBE               	movwf	4030,c	;volatile
 17273  0044E2  0012               	return		;funcret
 17274  0044E4                     __end_of_MotorASpeed:
 17275                           	opt stack 0
 17276                           tblptru	equ	0xFF8
 17277                           tblptrh	equ	0xFF7
 17278                           tblptrl	equ	0xFF6
 17279                           tablat	equ	0xFF5
 17280                           prodh	equ	0xFF4
 17281                           prodl	equ	0xFF3
 17282                           intcon	equ	0xFF2
 17283                           intcon2	equ	0xFF1
 17284                           postinc0	equ	0xFEE
 17285                           wreg	equ	0xFE8
 17286                           postinc1	equ	0xFE6
 17287                           postdec1	equ	0xFE5
 17288                           fsr1h	equ	0xFE2
 17289                           fsr1l	equ	0xFE1
 17290                           indf2	equ	0xFDF
 17291                           postinc2	equ	0xFDE
 17292                           postdec2	equ	0xFDD
 17293                           plusw2	equ	0xFDB
 17294                           fsr2h	equ	0xFDA
 17295                           fsr2l	equ	0xFD9
 17296                           status	equ	0xFD8
 17297                           
 17298 ;; *************** function ___awdiv *****************
 17299 ;; Defined at:
 17300 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/awdiv.c"
 17301 ;; Parameters:    Size  Location     Type
 17302 ;;  dividend        2   14[COMRAM] int 
 17303 ;;  divisor         2   16[COMRAM] int 
 17304 ;; Auto vars:     Size  Location     Type
 17305 ;;  quotient        2   20[COMRAM] int 
 17306 ;;  sign            1   19[COMRAM] unsigned char 
 17307 ;;  counter         1   18[COMRAM] unsigned char 
 17308 ;; Return value:  Size  Location     Type
 17309 ;;                  2   14[COMRAM] int 
 17310 ;; Registers used:
 17311 ;;		wreg, status,2, status,0
 17312 ;; Tracked objects:
 17313 ;;		On entry : 0/0
 17314 ;;		On exit  : 0/0
 17315 ;;		Unchanged: 0/0
 17316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17317 ;;      Params:         4       0       0       0       0       0       0       0       0
 17318 ;;      Locals:         4       0       0       0       0       0       0       0       0
 17319 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17320 ;;      Totals:         8       0       0       0       0       0       0       0       0
 17321 ;;Total ram usage:        8 bytes
 17322 ;; Hardware stack levels used:    1
 17323 ;; Hardware stack levels required when called:    1
 17324 ;; This function calls:
 17325 ;;		Nothing
 17326 ;; This function is called by:
 17327 ;;		_MotorASpeed
 17328 ;;		_MotorBSpeed
 17329 ;;		_EnhancedRead
 17330 ;;		_main
 17331 ;; This function uses a non-reentrant model
 17332 ;;
 17333                           
 17334                           	psect	text55
 17335  0044E4                     __ptext55:
 17336                           	opt stack 0
 17337  0044E4                     ___awdiv:
 17338                           	opt stack 29
 17339                           
 17340                           ;incstack = 0
 17341  0044E4  0E00               	movlw	0
 17342  0044E6  6E14               	movwf	___awdiv@sign,c
 17343  0044E8  AE12               	btfss	___awdiv@divisor+1,7,c
 17344  0044EA  D007               	goto	l5736
 17345  0044EC  6C11               	negf	___awdiv@divisor,c
 17346  0044EE  1E12               	comf	___awdiv@divisor+1,f,c
 17347  0044F0  B0D8               	btfsc	status,0,c
 17348  0044F2  2A12               	incf	___awdiv@divisor+1,f,c
 17349  0044F4  0E01               	movlw	1
 17350  0044F6  6E14               	movwf	___awdiv@sign,c
 17351  0044F8  D000               	goto	l5736
 17352  0044FA                     l5736:
 17353  0044FA  AE10               	btfss	___awdiv@dividend+1,7,c
 17354  0044FC  D007               	goto	l5742
 17355  0044FE  6C0F               	negf	___awdiv@dividend,c
 17356  004500  1E10               	comf	___awdiv@dividend+1,f,c
 17357  004502  B0D8               	btfsc	status,0,c
 17358  004504  2A10               	incf	___awdiv@dividend+1,f,c
 17359  004506  0E01               	movlw	1
 17360  004508  1A14               	xorwf	___awdiv@sign,f,c
 17361  00450A  D000               	goto	l5742
 17362  00450C                     l5742:
 17363  00450C  0E00               	movlw	0
 17364  00450E  6E16               	movwf	___awdiv@quotient+1,c
 17365  004510  0E00               	movlw	0
 17366  004512  6E15               	movwf	___awdiv@quotient,c
 17367  004514  5011               	movf	___awdiv@divisor,w,c
 17368  004516  1012               	iorwf	___awdiv@divisor+1,w,c
 17369  004518  B4D8               	btfsc	status,2,c
 17370  00451A  D021               	goto	l5764
 17371  00451C  0E01               	movlw	1
 17372  00451E  6E13               	movwf	___awdiv@counter,c
 17373  004520  D005               	goto	l5750
 17374  004522                     l5748:
 17375  004522  90D8               	bcf	status,0,c
 17376  004524  3611               	rlcf	___awdiv@divisor,f,c
 17377  004526  3612               	rlcf	___awdiv@divisor+1,f,c
 17378  004528  2A13               	incf	___awdiv@counter,f,c
 17379  00452A  D000               	goto	l5750
 17380  00452C                     l5750:
 17381  00452C  BE12               	btfsc	___awdiv@divisor+1,7,c
 17382  00452E  D002               	goto	l5752
 17383  004530  D7F8               	goto	l5748
 17384  004532  D000               	goto	l5752
 17385  004534                     l5752:
 17386  004534  90D8               	bcf	status,0,c
 17387  004536  3615               	rlcf	___awdiv@quotient,f,c
 17388  004538  3616               	rlcf	___awdiv@quotient+1,f,c
 17389  00453A  5011               	movf	___awdiv@divisor,w,c
 17390  00453C  5C0F               	subwf	___awdiv@dividend,w,c
 17391  00453E  5012               	movf	___awdiv@divisor+1,w,c
 17392  004540  5810               	subwfb	___awdiv@dividend+1,w,c
 17393  004542  A0D8               	btfss	status,0,c
 17394  004544  D006               	goto	l5760
 17395  004546  5011               	movf	___awdiv@divisor,w,c
 17396  004548  5E0F               	subwf	___awdiv@dividend,f,c
 17397  00454A  5012               	movf	___awdiv@divisor+1,w,c
 17398  00454C  5A10               	subwfb	___awdiv@dividend+1,f,c
 17399  00454E  8015               	bsf	___awdiv@quotient,0,c
 17400  004550  D000               	goto	l5760
 17401  004552                     l5760:
 17402  004552  90D8               	bcf	status,0,c
 17403  004554  3212               	rrcf	___awdiv@divisor+1,f,c
 17404  004556  3211               	rrcf	___awdiv@divisor,f,c
 17405  004558  2E13               	decfsz	___awdiv@counter,f,c
 17406  00455A  D7EC               	goto	l5752
 17407  00455C  D000               	goto	l5764
 17408  00455E                     l5764:
 17409  00455E  5014               	movf	___awdiv@sign,w,c
 17410  004560  B4D8               	btfsc	status,2,c
 17411  004562  D005               	goto	l5768
 17412  004564  6C15               	negf	___awdiv@quotient,c
 17413  004566  1E16               	comf	___awdiv@quotient+1,f,c
 17414  004568  B0D8               	btfsc	status,0,c
 17415  00456A  2A16               	incf	___awdiv@quotient+1,f,c
 17416  00456C  D000               	goto	l5768
 17417  00456E                     l5768:
 17418  00456E  C015  F00F         	movff	___awdiv@quotient,?___awdiv
 17419  004572  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
 17420  004576  D000               	goto	l864
 17421  004578                     l864:
 17422  004578  0012               	return		;funcret
 17423  00457A                     __end_of___awdiv:
 17424                           	opt stack 0
 17425                           tblptru	equ	0xFF8
 17426                           tblptrh	equ	0xFF7
 17427                           tblptrl	equ	0xFF6
 17428                           tablat	equ	0xFF5
 17429                           prodh	equ	0xFF4
 17430                           prodl	equ	0xFF3
 17431                           intcon	equ	0xFF2
 17432                           intcon2	equ	0xFF1
 17433                           postinc0	equ	0xFEE
 17434                           wreg	equ	0xFE8
 17435                           postinc1	equ	0xFE6
 17436                           postdec1	equ	0xFE5
 17437                           fsr1h	equ	0xFE2
 17438                           fsr1l	equ	0xFE1
 17439                           indf2	equ	0xFDF
 17440                           postinc2	equ	0xFDE
 17441                           postdec2	equ	0xFDD
 17442                           plusw2	equ	0xFDB
 17443                           fsr2h	equ	0xFDA
 17444                           fsr2l	equ	0xFD9
 17445                           status	equ	0xFD8
 17446                           
 17447 ;; *************** function _enc *****************
 17448 ;; Defined at:
 17449 ;;		line 153 in file "../main.c"
 17450 ;; Parameters:    Size  Location     Type
 17451 ;;		None
 17452 ;; Auto vars:     Size  Location     Type
 17453 ;;		None
 17454 ;; Return value:  Size  Location     Type
 17455 ;;		None               void
 17456 ;; Registers used:
 17457 ;;		wreg, status,2, status,0
 17458 ;; Tracked objects:
 17459 ;;		On entry : 0/0
 17460 ;;		On exit  : 0/0
 17461 ;;		Unchanged: 0/0
 17462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17463 ;;      Params:         0       0       0       0       0       0       0       0       0
 17464 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17465 ;;      Temps:         14       0       0       0       0       0       0       0       0
 17466 ;;      Totals:        14       0       0       0       0       0       0       0       0
 17467 ;;Total ram usage:       14 bytes
 17468 ;; Hardware stack levels used:    1
 17469 ;; This function calls:
 17470 ;;		Nothing
 17471 ;; This function is called by:
 17472 ;;		Interrupt level 2
 17473 ;; This function uses a non-reentrant model
 17474 ;;
 17475                           
 17476                           	psect	intcode
 17477  000008                     __pintcode:
 17478                           	opt stack 0
 17479  000008                     _enc:
 17480                           	opt stack 24
 17481                           
 17482                           ;incstack = 0
 17483  000008  CFFA F001          	movff	pclath,??_enc
 17484  00000C  CFFB F002          	movff	pclatu,??_enc+1
 17485  000010  CFE9 F003          	movff	fsr0l,??_enc+2
 17486  000014  EDA0  F020         	call	int_func,f	;refresh shadow registers
 17487                           pclatu	equ	0xFFB
 17488                           pclath	equ	0xFFA
 17489                           tblptru	equ	0xFF8
 17490                           tblptrh	equ	0xFF7
 17491                           tblptrl	equ	0xFF6
 17492                           tablat	equ	0xFF5
 17493                           prodh	equ	0xFF4
 17494                           prodl	equ	0xFF3
 17495                           intcon	equ	0xFF2
 17496                           intcon2	equ	0xFF1
 17497                           postinc0	equ	0xFEE
 17498                           fsr0l	equ	0xFE9
 17499                           wreg	equ	0xFE8
 17500                           postinc1	equ	0xFE6
 17501                           postdec1	equ	0xFE5
 17502                           fsr1h	equ	0xFE2
 17503                           fsr1l	equ	0xFE1
 17504                           indf2	equ	0xFDF
 17505                           postinc2	equ	0xFDE
 17506                           postdec2	equ	0xFDD
 17507                           plusw2	equ	0xFDB
 17508                           fsr2h	equ	0xFDA
 17509                           fsr2l	equ	0xFD9
 17510                           status	equ	0xFD8
 17511                           
 17512                           	psect	intcode_body
 17513  004140                     __pintcode_body:
 17514                           	opt stack 24
 17515  004140                     int_func:
 17516                           	opt stack 24
 17517  004140  0006               	pop		; remove dummy address from shadow register refresh
 17518  004142  CFEA F004          	movff	fsr0h,??_enc+3
 17519  004146  CFE1 F005          	movff	fsr1l,??_enc+4
 17520  00414A  CFE2 F006          	movff	fsr1h,??_enc+5
 17521  00414E  CFD9 F007          	movff	fsr2l,??_enc+6
 17522  004152  CFDA F008          	movff	fsr2h,??_enc+7
 17523  004156  CFF3 F009          	movff	prodl,??_enc+8
 17524  00415A  CFF4 F00A          	movff	prodh,??_enc+9
 17525  00415E  CFF6 F00B          	movff	tblptrl,??_enc+10
 17526  004162  CFF7 F00C          	movff	tblptrh,??_enc+11
 17527  004166  CFF8 F00D          	movff	tblptru,??_enc+12
 17528  00416A  CFF5 F00E          	movff	tablat,??_enc+13
 17529                           
 17530                           ;main.c: 154: if (TMR0IF){
 17531  00416E  A4F2               	btfss	intcon,2,c	;volatile
 17532  004170  D030               	goto	i2l306
 17533                           
 17534                           ;main.c: 155: TIME ++;
 17535  004172  0E01               	movlw	1
 17536  004174  0100               	movlb	0	; () banked
 17537  004176  27B1               	addwf	_TIME& (0+255),f,b
 17538  004178  0E00               	movlw	0
 17539  00417A  23B2               	addwfc	(_TIME+1)& (0+255),f,b
 17540  00417C  23B3               	addwfc	(_TIME+2)& (0+255),f,b
 17541  00417E  23B4               	addwfc	(_TIME+3)& (0+255),f,b
 17542                           
 17543                           ;main.c: 156: TIME2 ++;
 17544  004180  0E01               	movlw	1
 17545  004182  0101               	movlb	1	; () banked
 17546  004184  2760               	addwf	_TIME2& (0+255),f,b
 17547  004186  0E00               	movlw	0
 17548  004188  2361               	addwfc	(_TIME2+1)& (0+255),f,b
 17549  00418A  2362               	addwfc	(_TIME2+2)& (0+255),f,b
 17550  00418C  2363               	addwfc	(_TIME2+3)& (0+255),f,b
 17551                           
 17552                           ;main.c: 157: TIME3 ++;
 17553  00418E  0E01               	movlw	1
 17554  004190  0101               	movlb	1	; () banked
 17555  004192  2764               	addwf	_TIME3& (0+255),f,b
 17556  004194  0E00               	movlw	0
 17557  004196  2365               	addwfc	(_TIME3+1)& (0+255),f,b
 17558  004198  2366               	addwfc	(_TIME3+2)& (0+255),f,b
 17559  00419A  2367               	addwfc	(_TIME3+3)& (0+255),f,b
 17560                           
 17561                           ;main.c: 158: TIME4 ++;
 17562  00419C  0E01               	movlw	1
 17563  00419E  0100               	movlb	0	; () banked
 17564  0041A0  27B5               	addwf	_TIME4& (0+255),f,b
 17565  0041A2  0E00               	movlw	0
 17566  0041A4  23B6               	addwfc	(_TIME4+1)& (0+255),f,b
 17567  0041A6  23B7               	addwfc	(_TIME4+2)& (0+255),f,b
 17568  0041A8  23B8               	addwfc	(_TIME4+3)& (0+255),f,b
 17569                           
 17570                           ;main.c: 159: TIME5 ++;
 17571  0041AA  0E01               	movlw	1
 17572  0041AC  0101               	movlb	1	; () banked
 17573  0041AE  2768               	addwf	_TIME5& (0+255),f,b
 17574  0041B0  0E00               	movlw	0
 17575  0041B2  2369               	addwfc	(_TIME5+1)& (0+255),f,b
 17576  0041B4  236A               	addwfc	(_TIME5+2)& (0+255),f,b
 17577  0041B6  236B               	addwfc	(_TIME5+3)& (0+255),f,b
 17578                           
 17579                           ;main.c: 160: TIME6 ++;
 17580  0041B8  0E01               	movlw	1
 17581  0041BA  0101               	movlb	1	; () banked
 17582  0041BC  276C               	addwf	_TIME6& (0+255),f,b
 17583  0041BE  0E00               	movlw	0
 17584  0041C0  236D               	addwfc	(_TIME6+1)& (0+255),f,b
 17585  0041C2  236E               	addwfc	(_TIME6+2)& (0+255),f,b
 17586  0041C4  236F               	addwfc	(_TIME6+3)& (0+255),f,b
 17587                           
 17588                           ; BSR set to: 1
 17589                           ;main.c: 161: TMR0H = 0xF8;
 17590  0041C6  0EF8               	movlw	248
 17591  0041C8  6ED7               	movwf	4055,c	;volatile
 17592                           
 17593                           ; BSR set to: 1
 17594                           ;main.c: 162: TMR0L = 0x2F;
 17595  0041CA  0E2F               	movlw	47
 17596  0041CC  6ED6               	movwf	4054,c	;volatile
 17597                           
 17598                           ; BSR set to: 1
 17599                           ;main.c: 163: TMR0IF = 0;
 17600  0041CE  94F2               	bcf	intcon,2,c	;volatile
 17601  0041D0  D000               	goto	i2l306
 17602  0041D2                     i2l306:
 17603  0041D2  C00E  FFF5         	movff	??_enc+13,tablat
 17604  0041D6  C00D  FFF8         	movff	??_enc+12,tblptru
 17605  0041DA  C00C  FFF7         	movff	??_enc+11,tblptrh
 17606  0041DE  C00B  FFF6         	movff	??_enc+10,tblptrl
 17607  0041E2  C00A  FFF4         	movff	??_enc+9,prodh
 17608  0041E6  C009  FFF3         	movff	??_enc+8,prodl
 17609  0041EA  C008  FFDA         	movff	??_enc+7,fsr2h
 17610  0041EE  C007  FFD9         	movff	??_enc+6,fsr2l
 17611  0041F2  C006  FFE2         	movff	??_enc+5,fsr1h
 17612  0041F6  C005  FFE1         	movff	??_enc+4,fsr1l
 17613  0041FA  C004  FFEA         	movff	??_enc+3,fsr0h
 17614  0041FE  C003  FFE9         	movff	??_enc+2,fsr0l
 17615  004202  C002  FFFB         	movff	??_enc+1,pclatu
 17616  004206  C001  FFFA         	movff	??_enc,pclath
 17617  00420A  0011               	retfie		f
 17618  00420C                     __end_of_enc:
 17619                           	opt stack 0
 17620                           pclatu	equ	0xFFB
 17621                           pclath	equ	0xFFA
 17622                           tblptru	equ	0xFF8
 17623                           tblptrh	equ	0xFF7
 17624                           tblptrl	equ	0xFF6
 17625                           tablat	equ	0xFF5
 17626                           prodh	equ	0xFF4
 17627                           prodl	equ	0xFF3
 17628                           intcon	equ	0xFF2
 17629                           intcon2	equ	0xFF1
 17630                           postinc0	equ	0xFEE
 17631                           fsr0h	equ	0xFEA
 17632                           fsr0l	equ	0xFE9
 17633                           wreg	equ	0xFE8
 17634                           postinc1	equ	0xFE6
 17635                           postdec1	equ	0xFE5
 17636                           fsr1h	equ	0xFE2
 17637                           fsr1l	equ	0xFE1
 17638                           indf2	equ	0xFDF
 17639                           postinc2	equ	0xFDE
 17640                           postdec2	equ	0xFDD
 17641                           plusw2	equ	0xFDB
 17642                           fsr2h	equ	0xFDA
 17643                           fsr2l	equ	0xFD9
 17644                           status	equ	0xFD8
 17645                           pclatu	equ	0xFFB
 17646                           pclath	equ	0xFFA
 17647                           tblptru	equ	0xFF8
 17648                           tblptrh	equ	0xFF7
 17649                           tblptrl	equ	0xFF6
 17650                           tablat	equ	0xFF5
 17651                           prodh	equ	0xFF4
 17652                           prodl	equ	0xFF3
 17653                           intcon	equ	0xFF2
 17654                           intcon2	equ	0xFF1
 17655                           postinc0	equ	0xFEE
 17656                           fsr0h	equ	0xFEA
 17657                           fsr0l	equ	0xFE9
 17658                           wreg	equ	0xFE8
 17659                           postinc1	equ	0xFE6
 17660                           postdec1	equ	0xFE5
 17661                           fsr1h	equ	0xFE2
 17662                           fsr1l	equ	0xFE1
 17663                           indf2	equ	0xFDF
 17664                           postinc2	equ	0xFDE
 17665                           postdec2	equ	0xFDD
 17666                           plusw2	equ	0xFDB
 17667                           fsr2h	equ	0xFDA
 17668                           fsr2l	equ	0xFD9
 17669                           status	equ	0xFD8
 17670                           
 17671                           	psect	rparam
 17672  0000                     pclatu	equ	0xFFB
 17673                           pclath	equ	0xFFA
 17674                           tblptru	equ	0xFF8
 17675                           tblptrh	equ	0xFF7
 17676                           tblptrl	equ	0xFF6
 17677                           tablat	equ	0xFF5
 17678                           prodh	equ	0xFF4
 17679                           prodl	equ	0xFF3
 17680                           intcon	equ	0xFF2
 17681                           intcon2	equ	0xFF1
 17682                           postinc0	equ	0xFEE
 17683                           fsr0h	equ	0xFEA
 17684                           fsr0l	equ	0xFE9
 17685                           wreg	equ	0xFE8
 17686                           postinc1	equ	0xFE6
 17687                           postdec1	equ	0xFE5
 17688                           fsr1h	equ	0xFE2
 17689                           fsr1l	equ	0xFE1
 17690                           indf2	equ	0xFDF
 17691                           postinc2	equ	0xFDE
 17692                           postdec2	equ	0xFDD
 17693                           plusw2	equ	0xFDB
 17694                           fsr2h	equ	0xFDA
 17695                           fsr2l	equ	0xFD9
 17696                           status	equ	0xFD8


Data Sizes:
    Strings     1354
    Constant    67
    Data        96
    BSS         1050
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     67      81
    BANK0           160     81      99
    BANK1           256      0     252
    BANK2           256      0     232
    BANK3           256     75      75
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 63
		 -> STR_32(CODE[16]), STR_31(CODE[43]), STR_30(CODE[57]), STR_29(CODE[63]), 
		 -> STR_28(CODE[41]), STR_27(CODE[63]), STR_26(CODE[36]), STR_25(CODE[42]), 
		 -> STR_24(CODE[40]), STR_23(CODE[19]), STR_22(CODE[40]), STR_21(CODE[49]), 
		 -> STR_20(CODE[47]), STR_19(CODE[38]), STR_18(CODE[47]), STR_17(CODE[45]), 
		 -> STR_16(CODE[61]), STR_15(CODE[60]), STR_14(CODE[53]), STR_13(CODE[39]), 
		 -> STR_12(CODE[44]), STR_11(CODE[47]), STR_10(CODE[48]), STR_9(CODE[38]), 
		 -> STR_8(CODE[43]), STR_7(CODE[39]), STR_6(CODE[45]), STR_5(CODE[41]), 
		 -> STR_4(CODE[37]), STR_3(CODE[37]), STR_2(CODE[36]), STR_1(CODE[63]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    GetValue@data	PTR int  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    Length@data	PTR int  size(2) Largest target is 2
		 -> TOTAL(BANK0[2]), 

    CheckMem@data	PTR unsigned char  size(2) Largest target is 1
		 -> main@old_1868(BANK3[1]), main@old_1865(BANK3[1]), main@old_1863(BANK3[1]), main@old_1860(BANK3[1]), 
		 -> main@old(BANK3[1]), 

    ReadMem@data	PTR unsigned char  size(2) Largest target is 1
		 -> GetValue@rta(COMRAM[1]), Length@rta(COMRAM[1]), CheckMem@rta(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_AdvanceLow
    _main->_UpdateDir
    _PlotCompute->_Interval
    _printf->_Interval
    ___lwmod->___lwdiv
    _Load->_GetValue
    _Length->_ReadMem
    _GetValue->_ReadMem
    _Line->___lmul
    ___lmul->___aldiv
    _EreaseAll->_WriteMem
    _EnhancedRead->___awdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    ___altoft->___aldiv
    ___wmul->___awdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___lltoft->___ftpack
    _CheckMem->_ReadMem
    ___fttol->___ftneg
    ___ftmul->___ftdiv
    ___ftadd->___ftneg
    ___awtoft->___wmul
    _MotorBSpeed->___awdiv
    _MotorASpeed->___awdiv

Critical Paths under _enc in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_Compute
    _main->_Save
    _UpdateDir->_MotorsSpeed
    _Save->_ShowMem
    _ShowMem->_printf
    _PlotCompute->_printf
    _printf->_Interval
    _Interval->___fttol
    _Compute->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___fttol
    ___ftge->___ftadd
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _AdvanceLow->_MotorsSpeed
    ___fttol->___ftadd
    _MotorsSpeed->___fttol

Critical Paths under _enc in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _enc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _enc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _enc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _enc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _enc in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _enc in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _enc in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               143   138      5  302669
                                             71 BANK0     10     5      5
                                              0 BANK3     75    75      0
                         _AdvanceLow
                           _CheckMem
                            _Compute
                       _EnhancedRead
                          _EreaseAll
                               _Line
                               _Load
                        _MotorsSpeed
                        _PlotCompute
                               _Save
                            _ShowMem
                          _UpdateDir
                              _Wixel
                            ___aldiv
                            ___almod
                           ___altoft
                            ___awdiv
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___lmul
                             ___wmul
                            _initLED
                           _initYBOT
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initYBOT                                             0     0      0       0
                         _InitAnalog
                         _InitTIMERS
                          _MotorsPWM
                       _ResetCounter
                _configurations_init
 ---------------------------------------------------------------------------------
 (2) _configurations_init                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ResetCounter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorsPWM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitTIMERS                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitAnalog                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLED                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8    1973
                                             14 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (1) _Wixel                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UpdateDir                                            2     2      0   27165
                                             65 COMRAM     2     2      0
                        _MotorsSpeed
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _Save                                                 6     6      0    8979
                                             65 BANK0      6     6      0
                            _ShowMem
                           _WriteMem
 ---------------------------------------------------------------------------------
 (1) _ShowMem                                              3     3      0    8408
                                             62 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _PlotCompute                                          2     2      0   35842
                                             62 BANK0      2     2      0
                           _Interval
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              34    22     12    8309
                                             37 BANK0     25    13     12
                           _Interval (ARG)
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     395
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _Interval                                            12     4      8   27434
                                             65 COMRAM     2     2      0
                                             27 BANK0     10     2      8
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Load                                                 4     4      0    1441
                                             27 COMRAM     4     4      0
                           _GetValue
                             _Length
 ---------------------------------------------------------------------------------
 (2) _Length                                               8     6      2     617
                                             17 COMRAM     8     6      2
                            _ReadMem
 ---------------------------------------------------------------------------------
 (2) _GetValue                                            10     6      4     725
                                             17 COMRAM    10     6      4
                            _ReadMem
 ---------------------------------------------------------------------------------
 (1) _Line                                                32    32      0    5254
                                             40 COMRAM     7     7      0
                                              0 BANK0     25    25      0
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8    1020
                                             28 COMRAM    12     4      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8    2755
                                             14 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _EreaseAll                                            0     0      0     370
                           _WriteMem
 ---------------------------------------------------------------------------------
 (2) _WriteMem                                             2     1      1     370
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _EnhancedRead                                         4     4      0    2953
                                             22 COMRAM     4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Compute                                             16    16      0  126944
                                             61 BANK0     10    10      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                             ___wmul
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6  107185
                                             44 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   36681
                                             22 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   56976
                                             35 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     513
                                             22 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   12975
                                             27 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     630
                                             14 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6    1122
                                             12 BANK0      9     3      6
                            ___aldiv (ARG)
                           ___altoft (ARG)
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___altoft                                            10     6      4    3096
                                             28 COMRAM    10     6      4
                            ___aldiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   17719
                                             65 COMRAM     2     2      0
                                             12 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3774
                                             22 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    6751
                                             12 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (1) ___ftneg                                              3     0      3     681
                                             62 COMRAM     3     0      3
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3734
                                             32 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             22 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _CheckMem                                             4     2      2    1030
                                             17 COMRAM     4     2      2
                            _ReadMem
 ---------------------------------------------------------------------------------
 (3) _ReadMem                                              3     1      2     370
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _AdvanceLow                                          12    12      0   27360
                                             65 COMRAM     2     2      0
                                             35 BANK0      8     8      0
                        _MotorsSpeed
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4    1295
                                             12 BANK0     15    11      4
                            ___aldiv (ARG)
                           ___altoft (ARG)
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             15     9      6    6842
                                             47 COMRAM    15     9      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftadd                                             12     6      6    6387
                                              0 BANK0     12     6      6
                            ___aldiv (ARG)
                           ___altoft (ARG)
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    4719
                                             28 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    2584
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _MotorsSpeed                                          8     4      4    7922
                                             27 BANK0      8     4      4
                        _MotorASpeed
                        _MotorBSpeed
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _MotorBSpeed                                          3     1      2    3092
                                             22 COMRAM     3     1      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) _MotorASpeed                                          3     1      2    3092
                                             22 COMRAM     3     1      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    2755
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _enc                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdvanceLow
     _MotorsSpeed
       _MotorASpeed
         ___awdiv
       _MotorBSpeed
         ___awdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___aldiv (ARG)
         ___altoft (ARG)
           ___aldiv (ARG)
           ___ftpack (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftadd (ARG)
           ___aldiv (ARG)
           ___altoft (ARG)
             ___aldiv (ARG)
             ___ftpack (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftadd
       ___aldiv (ARG)
       ___altoft (ARG)
         ___aldiv (ARG)
         ___ftpack (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftmul
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___fttol
       ___aldiv (ARG)
       ___altoft (ARG)
         ___aldiv (ARG)
         ___ftpack (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftadd (ARG)
         ___aldiv (ARG)
         ___altoft (ARG)
           ___aldiv (ARG)
           ___ftpack (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
   _CheckMem
     _ReadMem
   _Compute
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftadd
       ___aldiv (ARG)
       ___altoft (ARG)
         ___aldiv (ARG)
         ___ftpack (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftneg
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___wmul
       ___awdiv (ARG)
     _pow
       ___ftge
         ___aldiv (ARG)
         ___altoft (ARG)
           ___aldiv (ARG)
           ___ftpack (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftadd (ARG)
           ___aldiv (ARG)
           ___altoft (ARG)
             ___aldiv (ARG)
             ___ftpack (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftneg
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___fttol
         ___aldiv (ARG)
         ___altoft (ARG)
           ___aldiv (ARG)
           ___ftpack (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftadd (ARG)
           ___aldiv (ARG)
           ___altoft (ARG)
             ___aldiv (ARG)
             ___ftpack (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftge
           ___aldiv (ARG)
           ___altoft (ARG)
             ___aldiv (ARG)
             ___ftpack (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftadd (ARG)
             ___aldiv (ARG)
             ___altoft (ARG)
               ___aldiv (ARG)
               ___ftpack (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftmul
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftneg
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftadd (ARG)
             ___aldiv (ARG)
             ___altoft (ARG)
               ___aldiv (ARG)
               ___ftpack (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
         ___fttol
           ___aldiv (ARG)
           ___altoft (ARG)
             ___aldiv (ARG)
             ___ftpack (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftadd (ARG)
             ___aldiv (ARG)
             ___altoft (ARG)
               ___aldiv (ARG)
               ___ftpack (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         _eval_poly
           ___ftadd
             ___aldiv (ARG)
             ___altoft (ARG)
               ___aldiv (ARG)
               ___ftpack (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftmul
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
         _floor
           ___altoft
             ___aldiv (ARG)
             ___ftpack (ARG)
           ___ftadd
             ___aldiv (ARG)
             ___altoft (ARG)
               ___aldiv (ARG)
               ___ftpack (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftge
             ___aldiv (ARG)
             ___altoft (ARG)
               ___aldiv (ARG)
               ___ftpack (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftadd (ARG)
               ___aldiv (ARG)
               ___altoft (ARG)
                 ___aldiv (ARG)
                 ___ftpack (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                   _frexp (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___fttol
             ___aldiv (ARG)
             ___altoft (ARG)
               ___aldiv (ARG)
               ___ftpack (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftadd (ARG)
               ___aldiv (ARG)
               ___altoft (ARG)
                 ___aldiv (ARG)
                 ___ftpack (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                   _frexp (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___aldiv (ARG)
               ___altoft (ARG)
                 ___aldiv (ARG)
                 ___ftpack (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                   _frexp (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___ftmul
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
         _log (ARG)
           ___awtoft
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftadd
             ___aldiv (ARG)
             ___altoft (ARG)
               ___aldiv (ARG)
               ___ftpack (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftmul
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___aldiv (ARG)
               ___altoft (ARG)
                 ___aldiv (ARG)
                 ___ftpack (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                   _frexp (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___ftmul
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
           _frexp
       _log
         ___awtoft
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftadd
           ___aldiv (ARG)
           ___altoft (ARG)
             ___aldiv (ARG)
             ___ftpack (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftmul
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___aldiv (ARG)
             ___altoft (ARG)
               ___aldiv (ARG)
               ___ftpack (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftmul
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
         _frexp
   _EnhancedRead
     ___awdiv
   _EreaseAll
     _WriteMem
   _Line
     ___aldiv
     ___lmul
       ___aldiv (ARG)
   _Load
     _GetValue
       _ReadMem
     _Length
       _ReadMem
   _MotorsSpeed
     _MotorASpeed
       ___awdiv
     _MotorBSpeed
       ___awdiv
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___fttol (ARG)
       ___aldiv (ARG)
       ___altoft (ARG)
         ___aldiv (ARG)
         ___ftpack (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftadd (ARG)
         ___aldiv (ARG)
         ___altoft (ARG)
           ___aldiv (ARG)
           ___ftpack (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
   _PlotCompute
     _Interval
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftadd
         ___aldiv (ARG)
         ___altoft (ARG)
           ___aldiv (ARG)
           ___ftpack (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___fttol
         ___aldiv (ARG)
         ___altoft (ARG)
           ___aldiv (ARG)
           ___ftpack (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftadd (ARG)
           ___aldiv (ARG)
           ___altoft (ARG)
             ___aldiv (ARG)
             ___ftpack (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___awdiv (ARG)
     _printf
       _Interval (ARG)
         ___awtoft
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftadd
           ___aldiv (ARG)
           ___altoft (ARG)
             ___aldiv (ARG)
             ___ftpack (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___fttol
           ___aldiv (ARG)
           ___altoft (ARG)
             ___aldiv (ARG)
             ___ftpack (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftadd (ARG)
             ___aldiv (ARG)
             ___altoft (ARG)
               ___aldiv (ARG)
               ___ftpack (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___wmul
           ___awdiv (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftadd (ARG)
         ___aldiv (ARG)
         ___altoft (ARG)
           ___aldiv (ARG)
           ___ftpack (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _isdigit (ARG)
       _putch (ARG)
   _Save
     _ShowMem
       _printf
         _Interval (ARG)
           ___awtoft
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftadd
             ___aldiv (ARG)
             ___altoft (ARG)
               ___aldiv (ARG)
               ___ftpack (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___fttol
             ___aldiv (ARG)
             ___altoft (ARG)
               ___aldiv (ARG)
               ___ftpack (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftadd (ARG)
               ___aldiv (ARG)
               ___altoft (ARG)
                 ___aldiv (ARG)
                 ___ftpack (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                   _frexp (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___wmul
             ___awdiv (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftadd (ARG)
           ___aldiv (ARG)
           ___altoft (ARG)
             ___aldiv (ARG)
             ___ftpack (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _isdigit (ARG)
         _putch (ARG)
     _WriteMem
   _ShowMem
     _printf
       _Interval (ARG)
         ___awtoft
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftadd
           ___aldiv (ARG)
           ___altoft (ARG)
             ___aldiv (ARG)
             ___ftpack (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___fttol
           ___aldiv (ARG)
           ___altoft (ARG)
             ___aldiv (ARG)
             ___ftpack (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftadd (ARG)
             ___aldiv (ARG)
             ___altoft (ARG)
               ___aldiv (ARG)
               ___ftpack (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___wmul
           ___awdiv (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftadd (ARG)
         ___aldiv (ARG)
         ___altoft (ARG)
           ___aldiv (ARG)
           ___ftpack (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _isdigit (ARG)
       _putch (ARG)
   _UpdateDir
     _MotorsSpeed
       _MotorASpeed
         ___awdiv
       _MotorBSpeed
         ___awdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___aldiv (ARG)
         ___altoft (ARG)
           ___aldiv (ARG)
           ___ftpack (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftadd (ARG)
           ___aldiv (ARG)
           ___altoft (ARG)
             ___aldiv (ARG)
             ___ftpack (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftadd
       ___aldiv (ARG)
       ___altoft (ARG)
         ___aldiv (ARG)
         ___ftpack (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftmul
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___fttol
       ___aldiv (ARG)
       ___altoft (ARG)
         ___aldiv (ARG)
         ___ftpack (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftadd (ARG)
         ___aldiv (ARG)
         ___altoft (ARG)
           ___aldiv (ARG)
           ___ftpack (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
   _Wixel
   ___aldiv
   ___almod
   ___altoft
     ___aldiv (ARG)
     ___ftpack (ARG)
   ___awdiv
   ___awtoft
     ___awdiv (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
   ___ftadd
     ___aldiv (ARG)
     ___altoft (ARG)
       ___aldiv (ARG)
       ___ftpack (ARG)
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
     _frexp (ARG)
   ___ftge
     ___aldiv (ARG)
     ___altoft (ARG)
       ___aldiv (ARG)
       ___ftpack (ARG)
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftadd (ARG)
       ___aldiv (ARG)
       ___altoft (ARG)
         ___aldiv (ARG)
         ___ftpack (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
   ___ftmul
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
     _frexp (ARG)
   ___ftneg
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
   ___fttol
     ___aldiv (ARG)
     ___altoft (ARG)
       ___aldiv (ARG)
       ___ftpack (ARG)
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftadd (ARG)
       ___aldiv (ARG)
       ___altoft (ARG)
         ___aldiv (ARG)
         ___ftpack (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Aug  8 01:33:50 2016

                ___altoft@exp 0025                             _P 0100                             _V 02C8  
                           _f 0044                             _x 004E                 ___altoft@sign 0026  
                          _MF 0050                            _b2 019A                  ___awdiv@sign 0014  
                          _ca 017E                            _cb 0180                            _fa 0188  
                          _fb 018A                            _gf 018C                            _kd 0178  
                          _ma 00BB                            _mb 00BD                            _fw 01CC  
                          _pd 01D6                            _kp 017B                            _mm 019B  
                          _rf 0194                            _sd 01E0           ___wmul@multiplicand 0019  
                 __CFG_BORV$3 000000                    Line@i_1804 0073                    Line@j_1803 006D  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                  ___ftadd@exp1 006B                  ___ftadd@exp2 006A  
                ___ftadd@sign 0069                           l106 4F10                           l311 4B16  
                         l170 48DE                           l155 4CB2                           l173 4E18  
                         l167 4894                           l272 4802                           l512 0CD2  
                         l179 4EC0                           l267 32DE                           l603 20B4  
                         l276 34A2                           l533 10A4                           l438 2912  
                         l518 0EFA                           l470 02B4                           l463 0278  
                         l544 1194                           l529 102E                           l465 0270  
                         l642 2A42                           l563 19EE                           l555 15E6  
                         l483 04D0                           l740 3F96                           l572 1A56  
                         l556 15BE                           l548 120E                           l468 02BC  
                         l557 15CC                           l486 0532                           l671 4E46  
                         l584 1DE8                           l576 1ACC                           l496 087A  
                         l753 438E                           l587 1E40                           l668 2C4E  
                         l599 203E                           l864 4578                           l768 471A  
                         l990 42A8                           l889 4DA4                           l979 42D0  
                __CFG_CPB$OFF 000000                           _LEN 0200                           _PR2 000FCB  
                __CFG_CPD$OFF 000000                           _VEL 01C0                           _VKD 019C  
                         _VKP 01AE                           _RWM 0051                  __CFG_BOR$OFF 000000  
                         _der 0184                           _enc 0008                           _cox 0182  
                         _fns 00B9                           _exp 2ECE                           _log 376A  
                         _mod 0190                           _pow 34A4                           prod 000FF3  
                         wreg 000FE8          ?_configurations_init 0001                  __CFG_LVP$OFF 000000  
                ___ftdiv@cntr 002A                  ___ftdiv@sign 002F                  __CFG_WDT$OFF 000000  
                        l1020 2ECC                          l1102 4EB0                          l1023 2CF2  
                        l1025 2D1C                          l1034 2E00                          l1043 2E2A  
                        l1019 2CB8                          l1051 3EB8                          l1060 413E  
                        l1204 4C54                          l1054 3E84                          l1232 3636  
                        l1161 4A04                          l1066 3DD6                          l1083 4BC0  
                        l1076 4E82                          l1252 30E8                          l1236 362A  
                        l1087 3768                          l1255 2FA4                          l1272 469E  
                        l1264 3CDE                          l1256 30DC                          l1266 3CD2  
                        l1194 4A58                          l1276 3ADE                          l1294 3898  
                        ?_enc 0001                          l6010 2B42                          l6004 2AFE  
                        l6110 30A0                          l6022 2B88                          l6024 2B94  
                        l6032 2BC8                          l6016 2B5E                          l6008 2B36  
                        l6040 2C2E                          l5410 4258                          l5402 421C  
                        l6114 30B2                          l6034 2BCE                          l6018 2B6A  
                        l6044 49AC                          l6300 3400                          l6028 2BB2  
                        l7100 11B8                          l5430 42C2                          l5414 4270  
                        l5406 422C                          l6046 49BA                          l6038 2C1E  
                        l7014 0DAA                          l7006 0D80                          l6224 4CBC  
                        l5424 42B0                          l5416 4290                          l5408 4238  
                        l5512 2E56                          l5504 2DE0                          l6080 2EF0  
                        l6064 37AA                          l6320 4D02                          l6312 4772  
                        l7200 1CC4                          l7104 11F2                          l7032 0EB0  
                        l5418 429C                          l5522 2EA6                          l5506 2DF0  
                        l5450 46D0                          l6058 377C                          l6330 4C6C  
                        l7106 1218                          l6228 4CDC                          l5532 3CFE  
                        l5620 36FA                          l6092 2F6E                          l6260 34E6  
                        l6340 4B2A                          l6332 4C76                          l6308 4728  
                        l7220 1E02                          l7124 1444                          l7116 12BC  
                        l7108 1230                          l7044 0F0E                          l5470 2D00  
                        l5534 3D18                          l5622 3702                          l5630 3738  
                        l6086 2F34                          l6414 4876                          l6318 4CF8  
                        l7206 1D08                          l7070 1012                          l5390 09A6  
                        l5464 2CC6                          l5560 3D82                          l5552 3D5A  
                        l5616 36E6                          l5448 46C2                          l6344 4B40  
                        l6600 2612                          l6520 45B2                          l6512 458A  
                        l7216 1DDC                          l7160 17C8                          l7128 145E  
                        l7080 10AE                          l7072 1038                          l7048 0F2E  
                        l5384 0930                          l5570 3DB0                          l5562 3D88  
                        l5538 3D26                          l5634 3756                          l5626 3718  
                        l6506 4C04                          l5706 3E5E                          l6274 357A  
                        l6266 3508                          l6418 487E                          l6370 3F22  
                        l6362 3EF2                          l6610 2754                          l6514 4596  
                        l7090 1136                          l7082 10C4                          l7074 1052  
                        _ACEL 034B                          l5492 2D84                          l5476 2D12  
                        l5556 3D6C                          l5628 372A                          l5716 3E92  
                        l5724 4B96                          l6380 3F5C                          l6372 3F2A  
                        l6356 3ED8                          l6532 4A78                          l6524 45E8  
                        l7260 2022                          l7252 1FC2                          l7236 1E50  
                        l7180 1AB0                          l7172 1A3A                          l7156 1702  
                        l7164 19F8                          l7084 10F2                          l6700 0070  
                        ?_exp 0083                          ?_log 0076                          l5750 452C  
                        l5742 450C                          l5902 4476                          l5494 2D94  
                        l5486 2D54                          l5566 3D9A                          l5582 40F6  
                        l5646 4636                          l6278 35A2                          l6438 310E  
                        l6606 26D8                          l6622 28BC                          l5806 4A4C  
                        l5822 4C48                          l5814 4C20                          l5670 4EA8  
                        l6454 479E                          l7270 20BE                          l7262 2048  
                        l7254 1FE4                          l7238 1E5C                          l7182 1AD6  
                        l7174 1A60                          l7078 1088                          l6702 0076  
                        l5760 4552                          l5752 4534                          l5736 44FA  
                        l5904 44A6                          l5920 43CC                          l5496 2DA4  
                        l5680 3DF6                          l5840 3C32                          l6368 3F14  
                        l6384 3F6C                          l6632 28E6                          l6536 4AA4  
                        l5816 4C2A                          l6480 4AC6                          l7272 20D4  
                        l7264 2062                          l7184 1AEC                          l7176 1A7A  
                        l7096 1178                          l6800 042A                          l6704 009A  
                        l5906 44B4                          l5922 43FE                          l5498 2DB0  
                        l5682 3E10                          l5578 40B4                          l6626 28D4  
                        l6562 232C                          l5818 4C32                          l6458 47B8  
                        l6546 3BC0                          l7194 1B38                          l7098 119E  
                        l6802 043C                          l6730 01AA                          l6722 018A  
                        l6714 0112                          l5748 4522                          l5764 455E  
                        l5924 440C                          l5916 43B2                          l5780 4D80  
                        l6644 399E                          l5852 3FD8                          l5588 413A  
                        l5844 3C50                          l5836 3C1E                          l6388 3F84  
                        l6628 28DC                          l6556 2266                          l5940 2922  
                        l6548 3BDE                          l6660 4306                          l6484 4ADA  
                        l7292 2194                          l7284 213C                          l7268 2098  
                        l6740 0234                          l6708 00AC                          l5598 3662  
                        l6646 39C0                          l6494 4BD8                          l5686 3E1E  
                        l5854 4058                          l5870 3A44                          l5862 39DE  
                        l6590 25D8                          l6566 23A8                          l5950 2956  
                        l7278 20F8                          l7198 1CAA                          l6910 098A  
                        l6902 0914                          l6822 050A                          l6734 020C  
                        l6726 019A                          l6718 0122                          l5768 456E  
                        l6576 24FA                          l5952 296C                          l5944 2936  
                        l6680 437C                          l6672 4354                          l6664 4318  
                        l6656 42F0                          l7288 2160                          l6912 09B0  
                        l6904 093A                          l6760 02CC                          l7296 219E  
                        l6498 4BEE                          l5882 3A76                          l6578 250E  
                        l6594 25EE                          l5794 4A1C                          l5946 2948  
                        l6666 4326                          l6914 09CA                          l6906 0954  
                        l6850 06F6                          l6834 05A8                          l6842 062C  
                        l5796 4A26                          l5980 2A7A                          l5964 2A0A  
                        l5956 298C                          l6668 432E                          l6676 4364  
                        l6916 09D2                          l6852 06FE                          l6764 02DC  
                        l5886 3A8C                          l5798 4A2E                          l5990 2AAA  
                        l6934 0A78                          l6838 0616                          l6782 03CA  
                        l6766 0364                          l5888 3AD0                          l5984 2A96  
                        l5968 2A10                          l6960 0BCC                          l6880 07F0  
                        l6864 078C                          l5898 445C                          l5994 2AD4  
                        l5986 2A9C                          l6954 0BA2                          l6890 088E  
                        l6794 0410                          l6972 0C14                          l6956 0BBC  
                        l6788 03E4                          l5998 2ADA                          l6894 08BA  
                  _AdvanceLow 389A                          l6984 0C4E                          l6996 0C9A  
                        ?_pow 008C                          STR_1 7AF3                          STR_2 7FB7  
                        STR_3 7F6E                          STR_4 7F49                          STR_5 7E36  
                        STR_6 7D34                          STR_7 7ED6                          STR_8 7DB8  
                        STR_9 7F23                          _ICEL 0486                          u7120 3A10  
                        u8000 2610                          u7230 43E0                          u7231 43DA  
                        u6431 2C66                          u7080 3C42                          u7128 3A14  
                        u6441 2C84                          u7180 448A                          u8060 396C  
                        u8140 00EE                          u7181 4484                          u8141 00E6  
                        u7248 43E2                          u8240 01FA                          u8208 0176  
                        u6641 3CF0                          u8241 01F2                          u7530 2F78  
                        u8410 04FA                          u6731 364E                          u9131 122C  
                        u6820 465E                          u7540 2F7A                          u9060 111A  
                        u8420 0530                          u6661 3D0E                          u7198 448C  
                        u6750 3688                          u7630 355C                          u9310 1CEC  
                        u8510 074A                          u8190 0172                          u8158 00F2  
                        u8511 0742                          u8191 016A                          u7800 310C  
                        u9160 1480                          u9321 1D48                          u8505 0708  
                        u8506 070A                          u8258 01FE                          u6755 367E  
                        u6828 4660                          u9340 1E24                          u8700 0A42  
                        u8460 066C                          u8380 0480                          u6861 3DE8  
                        u8461 0664                          u8381 0478                          u8710 0A76  
                        u8550 07EC                          u9360 1F8A                          u8800 0DB8  
                        u8608 08CC                          u8560 0876                          u8528 074E  
                        u8480 06BE                          u6881 3E06                          u9281 1AEA  
                        u7930 3B92                          u9450 2120                          u7940 2264  
                        u8820 0E0A                          u8821 0E02                          u9470 2180  
                        u8910 0F3C                          u8590 08C8                          u8478 0670  
                        u8398 0484                    Length@data 0012                          u8840 0E2C  
                        u8680 09EC                          u8930 0F62                          u8818 0DBC  
                        u8675 09DC                          u7980 25D0                          u8676 09DE  
                        u8950 0F84                          u8838 0E0E                          u8928 0F40  
                        u8880 0ECE                          u8970 0FB6                          u8858 0E30  
                        u8698 09F0                          _TIME 00B1                          u8948 0F66  
                        u8968 0F88                          _TXIF 007CF4                          _Load 4A62  
                        _Line 2218                          _Save 457A                          _amax 0120  
                        _amin 0140                          _main 001C                          _last 018E  
                        _line 004A                  ___ftpack@arg 000F                  ___ftpack@exp 0012  
                        fsr0h 000FEA                          fsr1h 000FE2                          fsr0l 000FE9  
                        fsr2h 000FDA                          fsr1l 000FE1                          indf2 000FDF  
                        fsr2l 000FD9                          exp@x 0083                          log@x 0076  
                        pclat 000FFA                          pow@x 008C                          pow@y 008F  
                        prodh 000FF4                          prodl 000FF3                          start 0018  
               __CFG_IESO$OFF 000000                  ___ftmul@cntr 003D                  ___param_bank 000010  
                ___ftmul@sign 003E               __end_of_Compute 32E0               __end_of_ReadMem 4ED2  
                ___fttol@exp1 007A                         ??_enc 0001                         ??_exp 0044  
                       ??_log 0044                  ___fttol@lval 0076                         ??_pow 0044  
               __CFG_PLLDIV$5 000000               __end_of_ShowMem 4794                         ?_Load 0001  
                       ?_Line 0001                         ?_Save 0001                __CFG_CCP2MX$ON 000000  
                main@old_1860 0330                  main@old_1863 0328                  main@old_1865 0331  
                main@old_1868 0329               __end_of___aldiv 3F98               __end_of___almod 4390  
                       ?_main 00A7               __end_of___awdiv 457A                         _EEADR 000FA9  
             __end_of___ftadd 2ECE                         STR_10 7C4A                         STR_11 7C7A  
                       STR_12 7D61                         STR_20 7CD8                         STR_13 7EAF  
                       STR_21 7C19                         STR_22 7E5F                         STR_14 7BE4  
                       STR_30 7BAB                         STR_23 7FDB                         STR_31 7D8D  
                       STR_15 7B6F                         STR_32 7FEE                         STR_24 7E87  
                       STR_16 7B32                         STR_25 7DE3                         STR_17 7D07  
                       STR_26 7F93                         STR_18 7CA9                         STR_19 7EFD  
                       STR_27 7AB4                         STR_28 7E0D                         STR_29 7AB4  
             __end_of___ftdiv 3EBA                         _CMCON 000FB4               __end_of___ftneg 4E90  
             __end_of___ftmul 3DD8               ___awdiv@divisor 0011               __end_of___ftsub 4BC2  
             __end_of___fttol 376A                __CFG_DEBUG$OFF 000000               __end_of___lwdiv 4A62  
             __end_of___lwmod 4C5E                         i2l306 41D2               ___awdiv@counter 0013  
                       _TIME2 0160                         _TIME3 0164                         _TIME4 00B5  
                       _TIME5 0168                         _TIME6 016C                         _TMR0H 000FD7  
                       _TMR1H 000FCF                         _TMR0L 000FD6                         _TMR1L 000FCE  
                       _SPBRG 000FAF                 __CFG_USBDIV$2 000000                         _TOTAL 00C1  
                       Line@a 0064                         Line@b 0068                         _TXREG 000FAD  
                       Line@g 006C                         Line@i 0071                         Line@j 006F  
                       Load@x 001E                         Line@v 0075                         Line@w 0060  
               __CFG_PWRT$OFF 000000         ??_configurations_init 000F                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000           ___lmul@multiplicand 0021  
               __CFG_WRT3$OFF 000000                         Save@x 00A5                  ___lltoft@exp 001F  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                   ReadMem@addr 0011  
                 ReadMem@data 000F                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
                       _Wixel 4E48                 __CFG_WRTD$OFF 000000               __end_of_initLED 4B18  
              __CFG_EBTRB$OFF 000000                 ___awtoft@sign 0020               __end_of_dpowers 7A7B  
                       _floor 3BE8                         _ldexp 39CA                         _frexp 460E  
                       _errno 0186               __end_of_isdigit 4EB2                 ___ftpack@sign 0013  
                       _speed 004C                         _putch 4F0C                         main@i 0338  
                       main@j 0347                         main@s 030A                         main@v 0306  
                       tablat 000FF5                         pow@yi 0099                         plusw2 000FDB  
                       status 000FD8              __end_of_CheckMem 4C12                    _InitTIMERS 48E0  
              __CFG_ICPRT$OFF 000000                    _InitAnalog 4DA6                   exp@exponent 0089  
        __end_of_EnhancedRead 48E0               _CURVE_ACEL_TIME 01F4              __end_of_GetValue 4CA6  
                 ldexp@newexp 0079                __CFG_MCLRE$OFF 000000               __initialization 4804  
                __end_of_Load 4ABE                  __end_of_Line 2914                  __end_of_Save 460E  
                 log@exponent 0079                  __end_of_main 2218                        ??_Load 001C  
                      ??_Line 0029                        ??_Save 00A1              __end_of_Interval 34A4  
                      ??_main 00AC                 ___fttol@sign1 0075                 __activetblptr 000002  
                      ?_Wixel 0001            __size_of_EreaseAll 0016                        ?_floor 007B  
                      ?_ldexp 0076                        ?_frexp 000F              __end_of___altoft 471C  
                      _ADRESH 000FC4                        _ADRESL 000FC3                        _EEDATA 000FA8  
                      _CCPR1L 000FBE                        _CCPR2L 000FBB                        _EECON2 000FA7  
            ___awdiv@dividend 000F              __end_of___awtoft 4DA6                        ?_putch 0001  
            __end_of___ftpack 42D2                   ?_AdvanceLow 0001              __end_of_WriteMem 4E20  
            __end_of___lltoft 4A06                        _TMR0IF 007F92                        _SPBRGH 000FB0  
                      _TMR2ON 007E52                 ??_PlotCompute 0044                 ??_MotorASpeed 0019  
               ??_MotorBSpeed 0019                     ??_Compute 009D                     ??_ReadMem 0011  
                      _Length 4CEA                __CFG_XINST$OFF 000000                     ??_ShowMem 009E  
                      ___ftge 4072                        ___lmul 4B18                     ??___aldiv 0017  
                   ??___almod 0017                        ___wmul 4E20                     ??___awdiv 0013  
                   ??___ftadd 0066                __CFG_STVREN$ON 000000                     ??___ftdiv 0027  
                   ??___ftneg 0042                     ??___ftmul 0036                     ??___ftsub 0042  
                   ??___fttol 0070              __end_of_initYBOT 4DF8                     ??___lwdiv 0013  
                   ??___lwmod 001A                   Interval@end 007D                        _pasada 0192  
               ??_MotorsSpeed 0042                        clear_0 480C                        clear_1 481E  
                      clear_2 482A                        clear_3 4836                        clear_4 4842  
            ___awdiv@quotient 0015                        _rcount 00BF                        _printf 2914  
                      _status 0198                        main@kd 0303                        main@kp 0300  
                      main@ms 0308            __size_of_MotorsPWM 003E                        floor@i 007E  
                      floor@x 007B         ___ftmul@f3_as_product 003A                     ??_initLED 000F  
                   ??_isdigit 000F                  __mediumconst 7A70            __size_of_UpdateDir 0108  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                 _Length$1781 0017              __end_ofexp@coeff 7A99              __end_oflog@coeff 7AB4  
                  __accesstop 0060       __end_of__initialization 4868                    ___altoft@c 001D  
             __CFG_PBADEN$OFF 000000                   ?_InitTIMERS 0001                    ___ftadd@f1 0060  
                  ___ftadd@f2 0063                    ___ftge@ff1 006C                    ___ftge@ff2 006F  
                eval_poly@res 0073                 ___rparam_used 000001                    ___ftdiv@f1 0021  
                  ___ftdiv@f2 0024                    ___ftdiv@f3 002B                   ?_InitAnalog 0001  
                  ___ftneg@f1 003F                    ___awtoft@c 001D                    ___ftmul@f1 0030  
                  ___ftmul@f2 0033                    ___ftsub@f1 006C                    ___ftsub@f2 006F  
                  ___fttol@f1 006C                __pcstackCOMRAM 0001           __end_of_PlotCompute 4804  
           __end_of_EreaseAll 4EE8                 __end_of_Wixel 4E6C                  __pidataBANK1 4946  
         __end_of_MotorASpeed 44E4           __end_of_MotorBSpeed 443A                    ___lltoft@c 0017  
               _CheckMem$1772 0014                 __end_of_floor 3CE0                 __end_of_ldexp 3AE0  
               __end_of_frexp 46A0                 __end_of_putch 4F1A           __size_of_AdvanceLow 0130  
               ?_ResetCounter 0001                     ?_CheckMem 0012              _MotorsSpeed$1455 007F  
            _MotorsSpeed$1457 0081           __end_of_MotorsSpeed 4CEA                       ??_Wixel 000F  
                   ?_GetValue 0012                       ??_floor 0042                       ??_ldexp 007B  
                     ??_frexp 0014                  WriteMem@addr 0010                  WriteMem@data 000F  
                     ??_putch 000F                    __pbssBANK0 00B1                    __pbssBANK1 0100  
                  __pbssBANK2 0200         __size_of_EnhancedRead 006E            __size_of_eval_poly 00DA  
           __end_of_MotorsPWM 4D6A                     ?_Interval 007B                       ?_Length 0012  
           __end_of_UpdateDir 3BE8                       ?___ftge 006C                       ?___lmul 001D  
                     ?___wmul 0017                     ?___altoft 001D                ___lmul@product 0025  
              ??_ResetCounter 000F                     ?___awtoft 001D                     ?___ftpack 000F  
                   ?_WriteMem 000F                       ?_printf 0085                     ?___lltoft 0017  
                     _T2CKPS0 007E50                       _T2CKPS1 007E51           __size_of_InitTIMERS 0066  
                  ??_CheckMem 0014                  _EnhancedRead 4872           __size_of_InitAnalog 002A  
                     _WAITIME 0174                    ??_GetValue 0016                     ?_initYBOT 0001  
             __CFG_VREGEN$OFF 000000                   _PlotCompute 4794                       _Compute 30EA  
                 _MotorASpeed 443A                    ??_Interval 0042                   _MotorBSpeed 4390  
                     Save@sum 00A4                       _ReadMem 4EB2                       __Hparam 0000  
             __size_of_Length 0042                       __Lparam 0000                       _ShowMem 471C  
                     ___aldiv 3EBA                       ___almod 42D2               __size_of___ftge 00CE  
                     ___awdiv 44E4               __size_of___lmul 005A                       ___ftadd 2C50  
                     ___ftdiv 3DD8                       ___ftneg 4E6C               __size_of___wmul 0028  
                     ___ftmul 3CE0                       ___ftsub 4B72                       ___fttol 3638  
                     ___lwdiv 4A06                       ___lwmod 4C12                    ??___altoft 0021  
 __end_of_configurations_init 4F0C                       __pcinit 4804                    ??___awtoft 0020  
                  ??___ftpack 0014             __end_of_eval_poly 4072                   _MotorsSpeed 4CA6  
                     __ramtop 0800                    ??_WriteMem 0010                    ??___lltoft 001B  
                     __ptext0 001C                       __ptext1 4DD0                       __ptext2 4EFC  
                     __ptext3 4EE8                       __ptext4 4D2C                       __ptext5 48E0  
                     __ptext6 4DA6                       __ptext7 4ABE                       __ptext8 42D2  
                     __ptext9 4E48               __size_of_printf 033C                     _T0CONbits 000FD5  
                     _initLED 4ABE                     _T1CONbits 000FCD                  _Compute$2565 009F  
                _Compute$2566 00A2                       _dpowers 7A71                     _T2CONbits 000FCA  
                __size_of_enc 4204                       _formula 0048                  __size_of_exp 021C  
                __size_of_log 0130                       _isdigit 4E90                  __size_of_pow 0194  
                CheckMem@data 0012              ___aldiv@dividend 000F                       _test_kd 01EE  
                     _test_kp 01F1                       main@mod 033E                       main@old 0346  
                ??_AdvanceLow 0042                __pintcode_body 4140          end_of_initialization 4868  
                     exp@sign 008B                    ??_initYBOT 000F                 __Lmediumconst 7A70  
                     int_func 4140                       pow@sign 0098                     _RCSTAbits 000FAB  
                     printf@c 009D                       printf@f 0085              ___aldiv@quotient 0019  
                   _TIMEFRENO 01EA                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc1 000FE6                       postinc2 000FDE  
                   _LOW_SPEED 01F6                  AdvanceLow@kd 0086                  AdvanceLow@kp 0083  
          __end_of_AdvanceLow 39CA                     _PORTAbits 000F80                     _PORTBbits 000F81  
                   _PORTDbits 000F83                     _PORTEbits 000F84                     _TRISAbits 000F92  
                   _TRISBbits 000F93                     _TRISCbits 000F94                     _TRISDbits 000F95  
                   _TRISEbits 000F96                    main@i_1851 033A                    main@i_1856 0349  
                  main@j_1852 0336                    main@j_1857 033C          __end_of_ResetCounter 4EFC  
                ??_InitTIMERS 000F                   _CCP1CONbits 000FBD                   ___ftdiv@exp 002E  
                 printf@width 009B                   _CCP2CONbits 000FBA                     _TXSTAbits 000FAC  
                   Length@add 0016                     Length@rta 0019                  ??_InitAnalog 000F  
                 ___ftmul@exp 0039                __end_of_Length 4D2C                __end_of___ftge 4140  
              __end_of___lmul 4B72                __end_of___wmul 4E48                   _BAUDCONbits 000FB8  
                   _EreaseAll 4ED2                     Interval@a 0083                     Interval@t 007F  
                  floor@expon 0081                __end_of_printf 2C50            __end_of_InitTIMERS 4946  
                   _Save$1775 00A2           start_initialization 4804                    eval_poly@d 006F  
                  eval_poly@n 0071                    eval_poly@x 006C                    ldexp@value 0076  
          __end_of_InitAnalog 4DD0                   __end_of_enc 420C             __size_of_CheckMem 0050  
                 __end_of_exp 30EA                   __end_of_log 389A                   __end_of_pow 3638  
              _RECT_ACEL_TIME 01F8             __size_of_GetValue 0048                    frexp@value 000F  
                    ??_Length 0014             __size_of_Interval 01C4                     _MotorsPWM 4D2C  
                    ??___ftge 0072                      ??___lmul 0025                      ??___wmul 001B  
                 __pdataBANK1 019C              __CFG_LPT1OSC$OFF 000000                     _UpdateDir 3AE0  
                  ?_EreaseAll 0001                      ??_printf 0091             __size_of___altoft 007C  
               _GetValue$1791 0019             __size_of___awtoft 003C             __size_of___ftpack 00C6  
                 __pbssBIGRAM 034B             __size_of_WriteMem 0028             __size_of___lltoft 0060  
                 __pbssCOMRAM 0044                 __pcstackBANK0 0060                 __pcstackBANK3 0300  
                _isdigit$2200 0010                  ?_PlotCompute 0001                  ?_MotorASpeed 0017  
                    ?_Compute 0001                  ?_MotorBSpeed 0017             __size_of_initYBOT 0028  
                    ?_ReadMem 000F                     _main$2570 0312                     _main$2571 0314  
                   _main$2572 0316                     _main$2573 0340                     _main$1854 0334  
                   _main$2574 032A                     _main$2575 032D                     _main$2567 030C  
                   _main$1848 0332                     _main$1880 031E                     _main$2568 030E  
                   _main$2569 0310                     _main$1884 0320                     _main$1885 0322  
                   _main$1877 0318                     _main$1878 031A                     _main$1879 031C  
                   _main$1897 0324                     _main$1898 0326              ___lwdiv@dividend 000F  
                    ?_ShowMem 0001                    ?_MotorsPWM 0001                     __pintcode 0008  
               __pmediumconst 7A70                      ?___aldiv 000F                      ?___almod 000F  
                    ?___awdiv 000F                      ?___ftadd 0060                      ?___ftdiv 0021  
                   _flag_line 0046                      ?___ftneg 003F                      ?___ftmul 0030  
                    ?___ftsub 006C                      ?___fttol 006C                      ?___lwdiv 000F  
                    ?___lwmod 0016                    ?_UpdateDir 0001                  ?_MotorsSpeed 007B  
            ___almod@dividend 000F                  PlotCompute@x 009E                      ?_initLED 0001  
                MotorASpeed@S 0017                      ?_isdigit 0001                     _eval_poly 3F98  
                MotorBSpeed@S 0017                _RECT_STOP_TIME 01FA                __size_of_Wixel 0024  
       __size_of_ResetCounter 0014              ___lwdiv@quotient 0014                __size_of_floor 00F8  
              __size_of_ldexp 0116                __size_of_frexp 0092                __size_of_putch 000E  
                 CheckMem@rta 0015               ___aldiv@divisor 0013                      _T2OUTPS0 007E53  
                    _T2OUTPS1 007E54                      _T2OUTPS2 007E55                      _T2OUTPS3 007E56  
             ___aldiv@counter 0017                 EnhancedRead@i 001A                ___wmul@product 001B  
                    _UCFGbits 000F6F                      _RCONbits 000FD0              __CFG_WDTPS$32768 000000  
                   _speedMode 0196                      _UCONbits 000F6D                   ??_EreaseAll 0011  
                    Compute@x 00A5                    _ADCON0bits 000FC2                    _ADCON1bits 000FC1  
                  _ADCON2bits 000FC0             ___wmul@multiplier 0017                  _ResetCounter 4EE8  
                  printf@flag 009A                      _CheckMem 4BC2                    printf@prec 0095  
                  ?_eval_poly 006C                     main@speed 0344  __size_of_configurations_init 0010  
                    _GetValue 4C5E             ___lmul@multiplier 001D                   _INTCON2bits 000FF1  
                   copy_data0 485C                  GetValue@data 0014                  GetValue@item 0012  
                    _Interval 32E0                     frexp@eptr 0012                    _EECON1bits 000FA6  
            __size_of_Compute 01F6                      __Hrparam 0000              __size_of_ReadMem 0020  
                    ShowMem@x 009F                  MotorsSpeed@A 007B                  MotorsSpeed@B 007D  
                    __Lrparam 0000                   ??_MotorsPWM 000F              __size_of_ShowMem 0078  
            __size_of___aldiv 00DE              __size_of___almod 00BE              __size_of___awdiv 0096  
            __size_of___ftadd 027E              __size_of___ftdiv 00E2                   ??_UpdateDir 0042  
            __size_of___ftneg 0024                      ___altoft 46A0              __size_of___ftmul 00F8  
            __size_of___ftsub 0050              __size_of___fttol 0132              __size_of___lwdiv 005C  
            __size_of___lwmod 004C                      ___awtoft 4D6A                      ___ftpack 420C  
                    _WriteMem 4DF8                      ___lltoft 49A6                      _exp$2578 0086  
            __size_of_initLED 005A              __size_of_isdigit 0022               ___lwdiv@divisor 0011  
             ___lwdiv@counter 0013                      __ptext10 3AE0                      __ptext11 457A  
                    __ptext20 4A62                      __ptext12 471C                      __ptext21 4CEA  
                    __ptext13 4794                      __ptext30 34A4                      __ptext22 4C5E  
                    __ptext14 2914                      __ptext31 376A                      __ptext23 2218  
                    __ptext15 4F0C                      __ptext40 4B72                      __ptext32 2ECE  
                    __ptext24 4B18                      __ptext16 4E90                      __ptext41 4E6C  
                    __ptext33 39CA                      __ptext25 3EBA                      __ptext17 4C12  
                    __ptext50 4D6A                      __ptext42 3DD8                      __ptext34 3BE8  
                    __ptext26 4ED2                      __ptext18 4A06                      __ptext51 420C  
                    __ptext43 49A6                      __ptext35 460E                      __ptext27 4DF8  
                    __ptext19 32E0                      __ptext52 4CA6                      __ptext44 4BC2  
                    __ptext36 4072                      __ptext28 4872                      __ptext53 4390  
                    __ptext45 4EB2                      __ptext37 46A0                      __ptext29 30EA  
                    __ptext54 443A                      __ptext46 389A                      __ptext38 3F98  
                    __ptext55 44E4                      __ptext47 3638                      __ptext39 4E20  
                    __ptext48 3CE0                      __ptext49 2C50                      _pow$2576 0092  
             ___almod@divisor 0013                      _pow$2577 0095               ___almod@counter 0017  
               Interval@start 007B                 Interval@total 0081                      _initYBOT 4DD0  
               __size_of_Load 005C                 __size_of_Line 06FC                 __size_of_Save 0094  
               __size_of_main 21FC          __size_of_PlotCompute 0070          __size_of_MotorASpeed 00AA  
        __size_of_MotorBSpeed 00AA               AdvanceLow@speed 0089               EnhancedRead@aux 0018  
                    main@argc 00A7                      main@argv 00A9                     printf@val 0098  
       __CFG_CPUDIV$OSC1_PLL2 000000                      exp@coeff 7A7B                   GetValue@add 0018  
                    log@coeff 7A99                   GetValue@rta 001B          __size_of_MotorsSpeed 0044  
                   putch@data 000F                 ?_EnhancedRead 0001                    _INTCONbits 000FF2  
                 ??_eval_poly 0042                      isdigit@c 0011                      intlevel2 0000  
            ___lwmod@dividend 0016                    _OSCCONbits 000FD3                      printf@ap 0096  
                  _WAITFRENAR 0170                ??_EnhancedRead 0017               ___lwmod@divisor 0018  
             ___lwmod@counter 001A                  ___aldiv@sign 0018            __CFG_FOSC$HSPLL_HS 000000  
                ___almod@sign 0018           _configurations_init 4EFC  
