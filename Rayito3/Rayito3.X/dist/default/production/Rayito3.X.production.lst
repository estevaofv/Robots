

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Feb  9 14:36:41 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           ; Version 1.41
    61                           ; Generated 25/01/2017 GMT
    62                           ; 
    63                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F4550 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95                           	psect	idataCOMRAM
    96  002444                     __pidataCOMRAM:
    97                           	opt stack 0
    98                           
    99                           ;initializer for _es
   100  002444  0003               	dw	3
   101  002446  0005               	dw	5
   102                           
   103                           ;initializer for _ckp
   104                           ;twiddle.c: 7: double kp = 4, kd = 100;
   105  002448  CD                 	db	205
   106  002449  CC                 	db	204
   107  00244A  3D                 	db	61
   108                           
   109                           ;initializer for _kp
   110  00244B  00                 	db	0
   111  00244C  80                 	db	128
   112  00244D  40                 	db	64
   113                           
   114                           	psect	idataBANK0
   115  002422                     __pidataBANK0:
   116                           	opt stack 0
   117                           
   118                           ;initializer for _ls
   119  002422  0008               	dw	8
   120  002424  0007               	dw	7
   121  002426  0006               	dw	6
   122  002428  0004               	dw	4
   123  00242A  0002               	dw	2
   124                           
   125                           ;initializer for _cs
   126  00242C  0000               	dw	0
   127  00242E  0001               	dw	1
   128                           
   129                           ;initializer for _ckd
   130                           ;twiddle.c: 7: double kp = 4, kd = 100;
   131  002430  CD                 	db	205
   132  002431  CC                 	db	204
   133  002432  3D                 	db	61
   134                           
   135                           ;initializer for _kd
   136  002433  00                 	db	0
   137  002434  C8                 	db	200
   138  002435  42                 	db	66
   139                           
   140                           ;initializer for _status
   141  002436  0001               	dw	1
   142                           
   143                           	psect	mediumconst
   144  007E2C                     __pmediumconst:
   145                           	opt stack 0
   146  007E2C  00                 	db	0
   147  007E2D                     _dpowers:
   148                           	opt stack 0
   149  007E2D  0001               	dw	1
   150  007E2F  000A               	dw	10
   151  007E31  0064               	dw	100
   152  007E33  03E8               	dw	1000
   153  007E35  2710               	dw	10000
   154  007E37                     __end_of_dpowers:
   155                           	opt stack 0
   156  0000                     _TXREG	set	4013
   157  0000                     _RCSTAbits	set	4011
   158  0000                     _TXSTAbits	set	4012
   159  0000                     _SPBRGH	set	4016
   160  0000                     _SPBRG	set	4015
   161  0000                     _BAUDCONbits	set	4024
   162  0000                     _PORTEbits	set	3972
   163  0000                     _TRISEbits	set	3990
   164  0000                     _TRISAbits	set	3986
   165  0000                     _TRISDbits	set	3989
   166  0000                     _TRISCbits	set	3988
   167  0000                     _TRISBbits	set	3987
   168  0000                     _CCPR2L	set	4027
   169  0000                     _CCPR1L	set	4030
   170  0000                     _CCP2CONbits	set	4026
   171  0000                     _CCP1CONbits	set	4029
   172  0000                     _PR2	set	4043
   173  0000                     _T2CONbits	set	4042
   174  0000                     _TMR1L	set	4046
   175  0000                     _TMR1H	set	4047
   176  0000                     _T1CONbits	set	4045
   177  0000                     _INTCONbits	set	4082
   178  0000                     _RCONbits	set	4048
   179  0000                     _INTCON2bits	set	4081
   180  0000                     _TMR0L	set	4054
   181  0000                     _TMR0H	set	4055
   182  0000                     _T0CONbits	set	4053
   183  0000                     _UCFGbits	set	3951
   184  0000                     _UCONbits	set	3949
   185  0000                     _CMCON	set	4020
   186  0000                     _OSCCONbits	set	4051
   187  0000                     _ADRESL	set	4035
   188  0000                     _ADRESH	set	4036
   189  0000                     _ADCON0bits	set	4034
   190  0000                     _ADCON2bits	set	4032
   191  0000                     _ADCON1bits	set	4033
   192  0000                     _PORTAbits	set	3968
   193  0000                     _PORTCbits	set	3970
   194  0000                     _PORTBbits	set	3969
   195  0000                     _PORTDbits	set	3971
   196  0000                     _TXIF	set	31988
   197  0000                     _TMR0IF	set	32658
   198  0000                     _T2CKPS1	set	32337
   199  0000                     _T2CKPS0	set	32336
   200  0000                     _TMR2ON	set	32338
   201  0000                     _T2OUTPS3	set	32342
   202  0000                     _T2OUTPS2	set	32341
   203  0000                     _T2OUTPS1	set	32340
   204  0000                     _T2OUTPS0	set	32339
   205  007E37                     STR_5:
   206  007E37  7B                 	db	123
   207  007E38  27                 	db	39
   208  007E39  43                 	db	67	;'C'
   209  007E3A  4F                 	db	79	;'O'
   210  007E3B  4D                 	db	77	;'M'
   211  007E3C  27                 	db	39
   212  007E3D  3A                 	db	58	;':'
   213  007E3E  27                 	db	39
   214  007E3F  6C                 	db	108	;'l'
   215  007E40  69                 	db	105	;'i'
   216  007E41  6E                 	db	110	;'n'
   217  007E42  65                 	db	101	;'e'
   218  007E43  27                 	db	39
   219  007E44  2C                 	db	44
   220  007E45  27                 	db	39
   221  007E46  76                 	db	118	;'v'
   222  007E47  61                 	db	97	;'a'
   223  007E48  6C                 	db	108	;'l'
   224  007E49  75                 	db	117	;'u'
   225  007E4A  65                 	db	101	;'e'
   226  007E4B  27                 	db	39
   227  007E4C  3A                 	db	58	;':'
   228  007E4D  27                 	db	39
   229  007E4E  43                 	db	67	;'C'
   230  007E4F  61                 	db	97	;'a'
   231  007E50  6C                 	db	108	;'l'
   232  007E51  69                 	db	105	;'i'
   233  007E52  62                 	db	98	;'b'
   234  007E53  72                 	db	114	;'r'
   235  007E54  61                 	db	97	;'a'
   236  007E55  74                 	db	116	;'t'
   237  007E56  69                 	db	105	;'i'
   238  007E57  6F                 	db	111	;'o'
   239  007E58  6E                 	db	110	;'n'
   240  007E59  20                 	db	32
   241  007E5A  66                 	db	102	;'f'
   242  007E5B  69                 	db	105	;'i'
   243  007E5C  6E                 	db	110	;'n'
   244  007E5D  69                 	db	105	;'i'
   245  007E5E  73                 	db	115	;'s'
   246  007E5F  68                 	db	104	;'h'
   247  007E60  65                 	db	101	;'e'
   248  007E61  64                 	db	100	;'d'
   249  007E62  27                 	db	39
   250  007E63  7D                 	db	125
   251  007E64  0A                 	db	10
   252  007E65  00                 	db	0
   253  007E66                     STR_4:
   254  007E66  7B                 	db	123
   255  007E67  27                 	db	39
   256  007E68  43                 	db	67	;'C'
   257  007E69  4F                 	db	79	;'O'
   258  007E6A  4D                 	db	77	;'M'
   259  007E6B  27                 	db	39
   260  007E6C  3A                 	db	58	;':'
   261  007E6D  27                 	db	39
   262  007E6E  6C                 	db	108	;'l'
   263  007E6F  69                 	db	105	;'i'
   264  007E70  6E                 	db	110	;'n'
   265  007E71  65                 	db	101	;'e'
   266  007E72  27                 	db	39
   267  007E73  2C                 	db	44
   268  007E74  27                 	db	39
   269  007E75  76                 	db	118	;'v'
   270  007E76  61                 	db	97	;'a'
   271  007E77  6C                 	db	108	;'l'
   272  007E78  75                 	db	117	;'u'
   273  007E79  65                 	db	101	;'e'
   274  007E7A  27                 	db	39
   275  007E7B  3A                 	db	58	;':'
   276  007E7C  27                 	db	39
   277  007E7D  43                 	db	67	;'C'
   278  007E7E  61                 	db	97	;'a'
   279  007E7F  6C                 	db	108	;'l'
   280  007E80  69                 	db	105	;'i'
   281  007E81  62                 	db	98	;'b'
   282  007E82  72                 	db	114	;'r'
   283  007E83  61                 	db	97	;'a'
   284  007E84  74                 	db	116	;'t'
   285  007E85  69                 	db	105	;'i'
   286  007E86  6F                 	db	111	;'o'
   287  007E87  6E                 	db	110	;'n'
   288  007E88  20                 	db	32
   289  007E89  73                 	db	115	;'s'
   290  007E8A  74                 	db	116	;'t'
   291  007E8B  61                 	db	97	;'a'
   292  007E8C  72                 	db	114	;'r'
   293  007E8D  74                 	db	116	;'t'
   294  007E8E  65                 	db	101	;'e'
   295  007E8F  64                 	db	100	;'d'
   296  007E90  27                 	db	39
   297  007E91  7D                 	db	125
   298  007E92  0A                 	db	10
   299  007E93  00                 	db	0
   300  007E94                     STR_9:
   301  007E94  7B                 	db	123
   302  007E95  27                 	db	39
   303  007E96  43                 	db	67	;'C'
   304  007E97  4F                 	db	79	;'O'
   305  007E98  4D                 	db	77	;'M'
   306  007E99  27                 	db	39
   307  007E9A  3A                 	db	58	;':'
   308  007E9B  27                 	db	39
   309  007E9C  70                 	db	112	;'p'
   310  007E9D  6C                 	db	108	;'l'
   311  007E9E  6F                 	db	111	;'o'
   312  007E9F  74                 	db	116	;'t'
   313  007EA0  27                 	db	39
   314  007EA1  2C                 	db	44
   315  007EA2  20                 	db	32
   316  007EA3  27                 	db	39
   317  007EA4  6E                 	db	110	;'n'
   318  007EA5  61                 	db	97	;'a'
   319  007EA6  6D                 	db	109	;'m'
   320  007EA7  65                 	db	101	;'e'
   321  007EA8  27                 	db	39
   322  007EA9  3A                 	db	58	;':'
   323  007EAA  27                 	db	39
   324  007EAB  6C                 	db	108	;'l'
   325  007EAC  69                 	db	105	;'i'
   326  007EAD  6E                 	db	110	;'n'
   327  007EAE  65                 	db	101	;'e'
   328  007EAF  20                 	db	32
   329  007EB0  25                 	db	37
   330  007EB1  69                 	db	105	;'i'
   331  007EB2  27                 	db	39
   332  007EB3  2C                 	db	44
   333  007EB4  27                 	db	39
   334  007EB5  76                 	db	118	;'v'
   335  007EB6  61                 	db	97	;'a'
   336  007EB7  6C                 	db	108	;'l'
   337  007EB8  75                 	db	117	;'u'
   338  007EB9  65                 	db	101	;'e'
   339  007EBA  27                 	db	39
   340  007EBB  3A                 	db	58	;':'
   341  007EBC  25                 	db	37
   342  007EBD  69                 	db	105	;'i'
   343  007EBE  7D                 	db	125
   344  007EBF  0A                 	db	10
   345  007EC0  00                 	db	0
   346  007EC1                     STR_8:
   347  007EC1  7B                 	db	123
   348  007EC2  27                 	db	39
   349  007EC3  43                 	db	67	;'C'
   350  007EC4  4F                 	db	79	;'O'
   351  007EC5  4D                 	db	77	;'M'
   352  007EC6  27                 	db	39
   353  007EC7  3A                 	db	58	;':'
   354  007EC8  27                 	db	39
   355  007EC9  70                 	db	112	;'p'
   356  007ECA  6C                 	db	108	;'l'
   357  007ECB  6F                 	db	111	;'o'
   358  007ECC  74                 	db	116	;'t'
   359  007ECD  27                 	db	39
   360  007ECE  2C                 	db	44
   361  007ECF  20                 	db	32
   362  007ED0  27                 	db	39
   363  007ED1  6E                 	db	110	;'n'
   364  007ED2  61                 	db	97	;'a'
   365  007ED3  6D                 	db	109	;'m'
   366  007ED4  65                 	db	101	;'e'
   367  007ED5  27                 	db	39
   368  007ED6  3A                 	db	58	;':'
   369  007ED7  27                 	db	39
   370  007ED8  50                 	db	80	;'P'
   371  007ED9  6C                 	db	108	;'l'
   372  007EDA  6F                 	db	111	;'o'
   373  007EDB  74                 	db	116	;'t'
   374  007EDC  20                 	db	32
   375  007EDD  31                 	db	49	;'1'
   376  007EDE  27                 	db	39
   377  007EDF  2C                 	db	44
   378  007EE0  27                 	db	39
   379  007EE1  76                 	db	118	;'v'
   380  007EE2  61                 	db	97	;'a'
   381  007EE3  6C                 	db	108	;'l'
   382  007EE4  75                 	db	117	;'u'
   383  007EE5  65                 	db	101	;'e'
   384  007EE6  27                 	db	39
   385  007EE7  3A                 	db	58	;':'
   386  007EE8  25                 	db	37
   387  007EE9  69                 	db	105	;'i'
   388  007EEA  7D                 	db	125
   389  007EEB  0A                 	db	10
   390  007EEC  00                 	db	0
   391  007EED                     STR_7:
   392  007EED  7B                 	db	123
   393  007EEE  27                 	db	39
   394  007EEF  43                 	db	67	;'C'
   395  007EF0  4F                 	db	79	;'O'
   396  007EF1  4D                 	db	77	;'M'
   397  007EF2  27                 	db	39
   398  007EF3  3A                 	db	58	;':'
   399  007EF4  27                 	db	39
   400  007EF5  6C                 	db	108	;'l'
   401  007EF6  69                 	db	105	;'i'
   402  007EF7  6E                 	db	110	;'n'
   403  007EF8  65                 	db	101	;'e'
   404  007EF9  27                 	db	39
   405  007EFA  2C                 	db	44
   406  007EFB  27                 	db	39
   407  007EFC  76                 	db	118	;'v'
   408  007EFD  61                 	db	97	;'a'
   409  007EFE  6C                 	db	108	;'l'
   410  007EFF  75                 	db	117	;'u'
   411  007F00  65                 	db	101	;'e'
   412  007F01  27                 	db	39
   413  007F02  3A                 	db	58	;':'
   414  007F03  27                 	db	39
   415  007F04  25                 	db	37
   416  007F05  64                 	db	100	;'d'
   417  007F06  20                 	db	32
   418  007F07  3A                 	db	58	;':'
   419  007F08  20                 	db	32
   420  007F09  5B                 	db	91	;'['
   421  007F0A  25                 	db	37
   422  007F0B  30                 	db	48	;'0'
   423  007F0C  34                 	db	52	;'4'
   424  007F0D  64                 	db	100	;'d'
   425  007F0E  2C                 	db	44
   426  007F0F  25                 	db	37
   427  007F10  30                 	db	48	;'0'
   428  007F11  34                 	db	52	;'4'
   429  007F12  64                 	db	100	;'d'
   430  007F13  5D                 	db	93	;']'
   431  007F14  27                 	db	39
   432  007F15  7D                 	db	125
   433  007F16  0A                 	db	10
   434  007F17  00                 	db	0
   435  007F18                     STR_11:
   436  007F18  7B                 	db	123
   437  007F19  27                 	db	39
   438  007F1A  43                 	db	67	;'C'
   439  007F1B  4F                 	db	79	;'O'
   440  007F1C  4D                 	db	77	;'M'
   441  007F1D  27                 	db	39
   442  007F1E  3A                 	db	58	;':'
   443  007F1F  27                 	db	39
   444  007F20  70                 	db	112	;'p'
   445  007F21  6C                 	db	108	;'l'
   446  007F22  6F                 	db	111	;'o'
   447  007F23  74                 	db	116	;'t'
   448  007F24  27                 	db	39
   449  007F25  2C                 	db	44
   450  007F26  20                 	db	32
   451  007F27  27                 	db	39
   452  007F28  6E                 	db	110	;'n'
   453  007F29  61                 	db	97	;'a'
   454  007F2A  6D                 	db	109	;'m'
   455  007F2B  65                 	db	101	;'e'
   456  007F2C  27                 	db	39
   457  007F2D  3A                 	db	58	;':'
   458  007F2E  27                 	db	39
   459  007F2F  63                 	db	99	;'c'
   460  007F30  6B                 	db	107	;'k'
   461  007F31  64                 	db	100	;'d'
   462  007F32  27                 	db	39
   463  007F33  2C                 	db	44
   464  007F34  27                 	db	39
   465  007F35  76                 	db	118	;'v'
   466  007F36  61                 	db	97	;'a'
   467  007F37  6C                 	db	108	;'l'
   468  007F38  75                 	db	117	;'u'
   469  007F39  65                 	db	101	;'e'
   470  007F3A  27                 	db	39
   471  007F3B  3A                 	db	58	;':'
   472  007F3C  25                 	db	37
   473  007F3D  69                 	db	105	;'i'
   474  007F3E  7D                 	db	125
   475  007F3F  0A                 	db	10
   476  007F40  00                 	db	0
   477  007F41                     STR_10:
   478  007F41  7B                 	db	123
   479  007F42  27                 	db	39
   480  007F43  43                 	db	67	;'C'
   481  007F44  4F                 	db	79	;'O'
   482  007F45  4D                 	db	77	;'M'
   483  007F46  27                 	db	39
   484  007F47  3A                 	db	58	;':'
   485  007F48  27                 	db	39
   486  007F49  70                 	db	112	;'p'
   487  007F4A  6C                 	db	108	;'l'
   488  007F4B  6F                 	db	111	;'o'
   489  007F4C  74                 	db	116	;'t'
   490  007F4D  27                 	db	39
   491  007F4E  2C                 	db	44
   492  007F4F  20                 	db	32
   493  007F50  27                 	db	39
   494  007F51  6E                 	db	110	;'n'
   495  007F52  61                 	db	97	;'a'
   496  007F53  6D                 	db	109	;'m'
   497  007F54  65                 	db	101	;'e'
   498  007F55  27                 	db	39
   499  007F56  3A                 	db	58	;':'
   500  007F57  27                 	db	39
   501  007F58  6B                 	db	107	;'k'
   502  007F59  64                 	db	100	;'d'
   503  007F5A  27                 	db	39
   504  007F5B  2C                 	db	44
   505  007F5C  27                 	db	39
   506  007F5D  76                 	db	118	;'v'
   507  007F5E  61                 	db	97	;'a'
   508  007F5F  6C                 	db	108	;'l'
   509  007F60  75                 	db	117	;'u'
   510  007F61  65                 	db	101	;'e'
   511  007F62  27                 	db	39
   512  007F63  3A                 	db	58	;':'
   513  007F64  25                 	db	37
   514  007F65  69                 	db	105	;'i'
   515  007F66  7D                 	db	125
   516  007F67  0A                 	db	10
   517  007F68  00                 	db	0
   518  007F69                     STR_1:
   519  007F69  7B                 	db	123
   520  007F6A  27                 	db	39
   521  007F6B  43                 	db	67	;'C'
   522  007F6C  4F                 	db	79	;'O'
   523  007F6D  4D                 	db	77	;'M'
   524  007F6E  27                 	db	39
   525  007F6F  3A                 	db	58	;':'
   526  007F70  27                 	db	39
   527  007F71  70                 	db	112	;'p'
   528  007F72  6C                 	db	108	;'l'
   529  007F73  6F                 	db	111	;'o'
   530  007F74  74                 	db	116	;'t'
   531  007F75  27                 	db	39
   532  007F76  2C                 	db	44
   533  007F77  20                 	db	32
   534  007F78  27                 	db	39
   535  007F79  6E                 	db	110	;'n'
   536  007F7A  61                 	db	97	;'a'
   537  007F7B  6D                 	db	109	;'m'
   538  007F7C  65                 	db	101	;'e'
   539  007F7D  27                 	db	39
   540  007F7E  3A                 	db	58	;':'
   541  007F7F  27                 	db	39
   542  007F80  61                 	db	97	;'a'
   543  007F81  27                 	db	39
   544  007F82  2C                 	db	44
   545  007F83  27                 	db	39
   546  007F84  76                 	db	118	;'v'
   547  007F85  61                 	db	97	;'a'
   548  007F86  6C                 	db	108	;'l'
   549  007F87  75                 	db	117	;'u'
   550  007F88  65                 	db	101	;'e'
   551  007F89  27                 	db	39
   552  007F8A  3A                 	db	58	;':'
   553  007F8B  25                 	db	37
   554  007F8C  69                 	db	105	;'i'
   555  007F8D  7D                 	db	125
   556  007F8E  0A                 	db	10
   557  007F8F  00                 	db	0
   558  007F90                     STR_2:
   559  007F90  7B                 	db	123
   560  007F91  27                 	db	39
   561  007F92  43                 	db	67	;'C'
   562  007F93  4F                 	db	79	;'O'
   563  007F94  4D                 	db	77	;'M'
   564  007F95  27                 	db	39
   565  007F96  3A                 	db	58	;':'
   566  007F97  27                 	db	39
   567  007F98  70                 	db	112	;'p'
   568  007F99  6C                 	db	108	;'l'
   569  007F9A  6F                 	db	111	;'o'
   570  007F9B  74                 	db	116	;'t'
   571  007F9C  27                 	db	39
   572  007F9D  2C                 	db	44
   573  007F9E  20                 	db	32
   574  007F9F  27                 	db	39
   575  007FA0  6E                 	db	110	;'n'
   576  007FA1  61                 	db	97	;'a'
   577  007FA2  6D                 	db	109	;'m'
   578  007FA3  65                 	db	101	;'e'
   579  007FA4  27                 	db	39
   580  007FA5  3A                 	db	58	;':'
   581  007FA6  27                 	db	39
   582  007FA7  62                 	db	98	;'b'
   583  007FA8  27                 	db	39
   584  007FA9  2C                 	db	44
   585  007FAA  27                 	db	39
   586  007FAB  76                 	db	118	;'v'
   587  007FAC  61                 	db	97	;'a'
   588  007FAD  6C                 	db	108	;'l'
   589  007FAE  75                 	db	117	;'u'
   590  007FAF  65                 	db	101	;'e'
   591  007FB0  27                 	db	39
   592  007FB1  3A                 	db	58	;':'
   593  007FB2  25                 	db	37
   594  007FB3  69                 	db	105	;'i'
   595  007FB4  7D                 	db	125
   596  007FB5  0A                 	db	10
   597  007FB6  00                 	db	0
   598  007FB7                     STR_6:
   599  007FB7  7B                 	db	123
   600  007FB8  27                 	db	39
   601  007FB9  43                 	db	67	;'C'
   602  007FBA  4F                 	db	79	;'O'
   603  007FBB  4D                 	db	77	;'M'
   604  007FBC  27                 	db	39
   605  007FBD  3A                 	db	58	;':'
   606  007FBE  27                 	db	39
   607  007FBF  6C                 	db	108	;'l'
   608  007FC0  69                 	db	105	;'i'
   609  007FC1  6E                 	db	110	;'n'
   610  007FC2  65                 	db	101	;'e'
   611  007FC3  27                 	db	39
   612  007FC4  2C                 	db	44
   613  007FC5  27                 	db	39
   614  007FC6  76                 	db	118	;'v'
   615  007FC7  61                 	db	97	;'a'
   616  007FC8  6C                 	db	108	;'l'
   617  007FC9  75                 	db	117	;'u'
   618  007FCA  65                 	db	101	;'e'
   619  007FCB  27                 	db	39
   620  007FCC  3A                 	db	58	;':'
   621  007FCD  27                 	db	39
   622  007FCE  52                 	db	82	;'R'
   623  007FCF  65                 	db	101	;'e'
   624  007FD0  73                 	db	115	;'s'
   625  007FD1  75                 	db	117	;'u'
   626  007FD2  6C                 	db	108	;'l'
   627  007FD3  74                 	db	116	;'t'
   628  007FD4  73                 	db	115	;'s'
   629  007FD5  20                 	db	32
   630  007FD6  3A                 	db	58	;':'
   631  007FD7  27                 	db	39
   632  007FD8  7D                 	db	125
   633  007FD9  0A                 	db	10
   634  007FDA  00                 	db	0
   635  007FDB                     STR_3:
   636  007FDB  7B                 	db	123
   637  007FDC  27                 	db	39
   638  007FDD  43                 	db	67	;'C'
   639  007FDE  4F                 	db	79	;'O'
   640  007FDF  4D                 	db	77	;'M'
   641  007FE0  27                 	db	39
   642  007FE1  3A                 	db	58	;':'
   643  007FE2  27                 	db	39
   644  007FE3  6C                 	db	108	;'l'
   645  007FE4  69                 	db	105	;'i'
   646  007FE5  6E                 	db	110	;'n'
   647  007FE6  65                 	db	101	;'e'
   648  007FE7  27                 	db	39
   649  007FE8  2C                 	db	44
   650  007FE9  27                 	db	39
   651  007FEA  76                 	db	118	;'v'
   652  007FEB  61                 	db	97	;'a'
   653  007FEC  6C                 	db	108	;'l'
   654  007FED  75                 	db	117	;'u'
   655  007FEE  65                 	db	101	;'e'
   656  007FEF  27                 	db	39
   657  007FF0  3A                 	db	58	;':'
   658  007FF1  27                 	db	39
   659  007FF2  57                 	db	87	;'W'
   660  007FF3  65                 	db	101	;'e'
   661  007FF4  6C                 	db	108	;'l'
   662  007FF5  63                 	db	99	;'c'
   663  007FF6  6F                 	db	111	;'o'
   664  007FF7  6D                 	db	109	;'m'
   665  007FF8  65                 	db	101	;'e'
   666  007FF9  21                 	db	33
   667  007FFA  27                 	db	39
   668  007FFB  7D                 	db	125
   669  007FFC  0A                 	db	10
   670  007FFD  00                 	db	0
   671                           
   672                           ; #config settings
   673  007FFE  00                 	db	0	; dummy byte at the end
   674  0000                     
   675                           	psect	cinit
   676  001FB8                     __pcinit:
   677                           	opt stack 0
   678  001FB8                     start_initialization:
   679                           	opt stack 0
   680  001FB8                     __initialization:
   681                           	opt stack 0
   682                           
   683                           ; Initialize objects allocated to BANK0 (22 bytes)
   684                           ; load TBLPTR registers with __pidataBANK0
   685  001FB8  0E22               	movlw	low __pidataBANK0
   686  001FBA  6EF6               	movwf	tblptrl,c
   687  001FBC  0E24               	movlw	high __pidataBANK0
   688  001FBE  6EF7               	movwf	tblptrh,c
   689  001FC0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   690  001FC2  6EF8               	movwf	tblptru,c
   691  001FC4  EE00  F0D8         	lfsr	0,__pdataBANK0
   692  001FC8  EE10 F016          	lfsr	1,22
   693  001FCC                     copy_data0:
   694  001FCC  0009               	tblrd		*+
   695  001FCE  CFF5 FFEE          	movff	tablat,postinc0
   696  001FD2  50E5               	movf	postdec1,w,c
   697  001FD4  50E1               	movf	fsr1l,w,c
   698  001FD6  E1FA               	bnz	copy_data0
   699                           
   700                           ; Initialize objects allocated to COMRAM (10 bytes)
   701                           ; load TBLPTR registers with __pidataCOMRAM
   702  001FD8  0E44               	movlw	low __pidataCOMRAM
   703  001FDA  6EF6               	movwf	tblptrl,c
   704  001FDC  0E24               	movlw	high __pidataCOMRAM
   705  001FDE  6EF7               	movwf	tblptrh,c
   706  001FE0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   707  001FE2  6EF8               	movwf	tblptru,c
   708  001FE4  EE00  F03E         	lfsr	0,__pdataCOMRAM
   709  001FE8  EE10 F00A          	lfsr	1,10
   710  001FEC                     copy_data1:
   711  001FEC  0009               	tblrd		*+
   712  001FEE  CFF5 FFEE          	movff	tablat,postinc0
   713  001FF2  50E5               	movf	postdec1,w,c
   714  001FF4  50E1               	movf	fsr1l,w,c
   715  001FF6  E1FA               	bnz	copy_data1
   716                           
   717                           ; Clear objects allocated to BANK1 (36 bytes)
   718  001FF8  EE01  F000         	lfsr	0,__pbssBANK1
   719  001FFC  0E24               	movlw	36
   720  001FFE                     clear_0:
   721  001FFE  6AEE               	clrf	postinc0,c
   722  002000  06E8               	decf	wreg,f,c
   723  002002  E1FD               	bnz	clear_0
   724                           
   725                           ; Clear objects allocated to BANK0 (80 bytes)
   726  002004  EE00  F060         	lfsr	0,__pbssBANK0
   727  002008  0E50               	movlw	80
   728  00200A                     clear_1:
   729  00200A  6AEE               	clrf	postinc0,c
   730  00200C  06E8               	decf	wreg,f,c
   731  00200E  E1FD               	bnz	clear_1
   732                           
   733                           ; Clear objects allocated to COMRAM (6 bytes)
   734  002010  6A4D               	clrf	(__pbssCOMRAM+5)& (0+255),c
   735  002012  6A4C               	clrf	(__pbssCOMRAM+4)& (0+255),c
   736  002014  6A4B               	clrf	(__pbssCOMRAM+3)& (0+255),c
   737  002016  6A4A               	clrf	(__pbssCOMRAM+2)& (0+255),c
   738  002018  6A49               	clrf	(__pbssCOMRAM+1)& (0+255),c
   739  00201A  6A48               	clrf	__pbssCOMRAM& (0+255),c
   740  00201C                     end_of_initialization:
   741                           	opt stack 0
   742  00201C                     __end_of__initialization:
   743                           	opt stack 0
   744  00201C  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   745  00201E  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   746  002020  0E00               	movlw	low (__Lmediumconst shr (0+16))
   747  002022  6EF8               	movwf	tblptru,c
   748  002024  0100               	movlb	0
   749  002026  EF09  F000         	goto	_main	;jump to C main() function
   750                           tblptru	equ	0xFF8
   751                           tblptrh	equ	0xFF7
   752                           tblptrl	equ	0xFF6
   753                           tablat	equ	0xFF5
   754                           postinc0	equ	0xFEE
   755                           wreg	equ	0xFE8
   756                           postdec1	equ	0xFE5
   757                           fsr1l	equ	0xFE1
   758                           
   759                           	psect	bssCOMRAM
   760  000048                     __pbssCOMRAM:
   761                           	opt stack 0
   762  000048                     _intern:
   763                           	opt stack 0
   764  000048                     	ds	2
   765  00004A                     _best_err:
   766                           	opt stack 0
   767  00004A                     	ds	2
   768  00004C                     _i:
   769                           	opt stack 0
   770  00004C                     	ds	2
   771                           tblptru	equ	0xFF8
   772                           tblptrh	equ	0xFF7
   773                           tblptrl	equ	0xFF6
   774                           tablat	equ	0xFF5
   775                           postinc0	equ	0xFEE
   776                           wreg	equ	0xFE8
   777                           postdec1	equ	0xFE5
   778                           fsr1l	equ	0xFE1
   779                           
   780                           	psect	dataCOMRAM
   781  00003E                     __pdataCOMRAM:
   782                           	opt stack 0
   783  00003E                     _es:
   784                           	opt stack 0
   785  00003E                     	ds	4
   786  000042                     _ckp:
   787                           	opt stack 0
   788  000042                     	ds	3
   789  000045                     _kp:
   790                           	opt stack 0
   791  000045                     	ds	3
   792                           tblptru	equ	0xFF8
   793                           tblptrh	equ	0xFF7
   794                           tblptrl	equ	0xFF6
   795                           tablat	equ	0xFF5
   796                           postinc0	equ	0xFEE
   797                           wreg	equ	0xFE8
   798                           postdec1	equ	0xFE5
   799                           fsr1l	equ	0xFE1
   800                           
   801                           	psect	bssBANK0
   802  000060                     __pbssBANK0:
   803                           	opt stack 0
   804  000060                     _time:
   805                           	opt stack 0
   806  000060                     	ds	40
   807  000088                     _old_lp:
   808                           	opt stack 0
   809  000088                     	ds	2
   810  00008A                     _lp:
   811                           	opt stack 0
   812  00008A                     	ds	2
   813  00008C                     _mins:
   814                           	opt stack 0
   815  00008C                     	ds	18
   816  00009E                     _an:
   817                           	opt stack 0
   818  00009E                     	ds	18
   819                           tblptru	equ	0xFF8
   820                           tblptrh	equ	0xFF7
   821                           tblptrl	equ	0xFF6
   822                           tablat	equ	0xFF5
   823                           postinc0	equ	0xFEE
   824                           wreg	equ	0xFE8
   825                           postdec1	equ	0xFE5
   826                           fsr1l	equ	0xFE1
   827                           
   828                           	psect	dataBANK0
   829  0000D8                     __pdataBANK0:
   830                           	opt stack 0
   831  0000D8                     _ls:
   832                           	opt stack 0
   833  0000D8                     	ds	10
   834  0000E2                     _cs:
   835                           	opt stack 0
   836  0000E2                     	ds	4
   837  0000E6                     _ckd:
   838                           	opt stack 0
   839  0000E6                     	ds	3
   840  0000E9                     _kd:
   841                           	opt stack 0
   842  0000E9                     	ds	3
   843  0000EC                     _status:
   844                           	opt stack 0
   845  0000EC                     	ds	2
   846                           tblptru	equ	0xFF8
   847                           tblptrh	equ	0xFF7
   848                           tblptrl	equ	0xFF6
   849                           tablat	equ	0xFF5
   850                           postinc0	equ	0xFEE
   851                           wreg	equ	0xFE8
   852                           postdec1	equ	0xFE5
   853                           fsr1l	equ	0xFE1
   854                           
   855                           	psect	bssBANK1
   856  000100                     __pbssBANK1:
   857                           	opt stack 0
   858  000100                     _calval:
   859                           	opt stack 0
   860  000100                     	ds	18
   861  000112                     _maxs:
   862                           	opt stack 0
   863  000112                     	ds	18
   864                           tblptru	equ	0xFF8
   865                           tblptrh	equ	0xFF7
   866                           tblptrl	equ	0xFF6
   867                           tablat	equ	0xFF5
   868                           postinc0	equ	0xFEE
   869                           wreg	equ	0xFE8
   870                           postdec1	equ	0xFE5
   871                           fsr1l	equ	0xFE1
   872                           
   873                           	psect	cstackBANK1
   874  000124                     __pcstackBANK1:
   875                           	opt stack 0
   876  000124                     main@der:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x0
   880  000124                     	ds	2
   881  000126                     main@a:
   882                           	opt stack 0
   883                           
   884                           ; 2 bytes @ 0x2
   885  000126                     	ds	2
   886  000128                     main@b:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x4
   890  000128                     	ds	2
   891  00012A                     _main$2288:
   892                           	opt stack 0
   893                           
   894                           ; 2 bytes @ 0x6
   895  00012A                     	ds	2
   896  00012C                     main@fs:
   897                           	opt stack 0
   898                           
   899                           ; 2 bytes @ 0x8
   900  00012C                     	ds	2
   901  00012E                     main@faux:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0xA
   905  00012E                     	ds	2
   906  000130                     main@dif:
   907                           	opt stack 0
   908                           
   909                           ; 3 bytes @ 0xC
   910  000130                     	ds	3
   911  000133                     main@speed:
   912                           	opt stack 0
   913                           
   914                           ; 2 bytes @ 0xF
   915  000133                     	ds	2
   916  000135                     main@i_362:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x11
   920  000135                     	ds	2
   921  000137                     main@i:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0x13
   925  000137                     	ds	2
   926                           tblptru	equ	0xFF8
   927                           tblptrh	equ	0xFF7
   928                           tblptrl	equ	0xFF6
   929                           tablat	equ	0xFF5
   930                           postinc0	equ	0xFEE
   931                           wreg	equ	0xFE8
   932                           postdec1	equ	0xFE5
   933                           fsr1l	equ	0xFE1
   934                           
   935                           	psect	cstackBANK0
   936  0000B0                     __pcstackBANK0:
   937                           	opt stack 0
   938  0000B0                     ??_twiddle_update:
   939  0000B0                     ??___fttol:
   940  0000B0                     _line_cal$2289:
   941                           	opt stack 0
   942                           
   943                           ; 4 bytes @ 0x0
   944  0000B0                     	ds	3
   945  0000B3                     _twiddle_update$1718:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x3
   949  0000B3                     	ds	1
   950  0000B4                     line_cal@a:
   951                           	opt stack 0
   952                           
   953                           ; 4 bytes @ 0x4
   954  0000B4                     	ds	1
   955  0000B5                     ___fttol@sign1:
   956                           	opt stack 0
   957  0000B5                     _twiddle_update$1719:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x5
   961  0000B5                     	ds	1
   962  0000B6                     ___fttol@lval:
   963                           	opt stack 0
   964                           
   965                           ; 4 bytes @ 0x6
   966  0000B6                     	ds	2
   967  0000B8                     line_cal@b:
   968                           	opt stack 0
   969                           
   970                           ; 4 bytes @ 0x8
   971  0000B8                     	ds	2
   972  0000BA                     ___fttol@exp1:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0xA
   976  0000BA                     	ds	1
   977  0000BB                     ?___wmul:
   978                           	opt stack 0
   979  0000BB                     mspeed@a:
   980                           	opt stack 0
   981  0000BB                     ___wmul@multiplier:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0xB
   985  0000BB                     	ds	1
   986  0000BC                     line_cal@ok:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0xC
   990  0000BC                     	ds	1
   991  0000BD                     mspeed@b:
   992                           	opt stack 0
   993  0000BD                     ___wmul@multiplicand:
   994                           	opt stack 0
   995                           
   996                           ; 2 bytes @ 0xD
   997  0000BD                     	ds	1
   998  0000BE                     line_cal@value:
   999                           	opt stack 0
  1000                           
  1001                           ; 4 bytes @ 0xE
  1002  0000BE                     	ds	1
  1003  0000BF                     ?_printf:
  1004                           	opt stack 0
  1005  0000BF                     printf@f:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0xF
  1009  0000BF                     	ds	3
  1010  0000C2                     line_cal@aux:
  1011                           	opt stack 0
  1012                           
  1013                           ; 2 bytes @ 0x12
  1014  0000C2                     	ds	2
  1015  0000C4                     line_cal@i:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x14
  1019  0000C4                     	ds	2
  1020  0000C6                     line_cal@j:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0x16
  1024  0000C6                     	ds	1
  1025  0000C7                     ??_printf:
  1026                           
  1027                           ; 1 bytes @ 0x17
  1028  0000C7                     	ds	4
  1029  0000CB                     printf@ap:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x1B
  1033  0000CB                     	ds	2
  1034  0000CD                     printf@prec:
  1035                           	opt stack 0
  1036                           
  1037                           ; 1 bytes @ 0x1D
  1038  0000CD                     	ds	1
  1039  0000CE                     printf@val:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0x1E
  1043  0000CE                     	ds	2
  1044  0000D0                     printf@flag:
  1045                           	opt stack 0
  1046                           
  1047                           ; 1 bytes @ 0x20
  1048  0000D0                     	ds	1
  1049  0000D1                     printf@width:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0x21
  1053  0000D1                     	ds	2
  1054  0000D3                     printf@c:
  1055                           	opt stack 0
  1056                           
  1057                           ; 1 bytes @ 0x23
  1058  0000D3                     	ds	1
  1059  0000D4                     ??_main:
  1060                           
  1061                           ; 1 bytes @ 0x24
  1062  0000D4                     	ds	4
  1063                           tblptru	equ	0xFF8
  1064                           tblptrh	equ	0xFF7
  1065                           tblptrl	equ	0xFF6
  1066                           tablat	equ	0xFF5
  1067                           postinc0	equ	0xFEE
  1068                           wreg	equ	0xFE8
  1069                           postdec1	equ	0xFE5
  1070                           fsr1l	equ	0xFE1
  1071                           
  1072                           	psect	cstackCOMRAM
  1073  000001                     __pcstackCOMRAM:
  1074                           	opt stack 0
  1075  000001                     ??_enc:
  1076  000001                     
  1077                           ; 2 bytes @ 0x0
  1078  000001                     	ds	16
  1079  000011                     ??_read_cal:
  1080  000011                     ??_isdigit:
  1081  000011                     ?___awdiv:
  1082                           	opt stack 0
  1083  000011                     ?___lwdiv:
  1084                           	opt stack 0
  1085  000011                     ?___ftpack:
  1086                           	opt stack 0
  1087  000011                     ?___ftneg:
  1088                           	opt stack 0
  1089  000011                     ?___lmul:
  1090                           	opt stack 0
  1091  000011                     ?___almod:
  1092                           	opt stack 0
  1093  000011                     putch@data:
  1094                           	opt stack 0
  1095  000011                     init_cal@i:
  1096                           	opt stack 0
  1097  000011                     ___awdiv@dividend:
  1098                           	opt stack 0
  1099  000011                     ___lwdiv@dividend:
  1100                           	opt stack 0
  1101  000011                     ___ftpack@arg:
  1102                           	opt stack 0
  1103  000011                     ___ftge@ff1:
  1104                           	opt stack 0
  1105  000011                     ___ftneg@f1:
  1106                           	opt stack 0
  1107  000011                     ___lmul@multiplier:
  1108                           	opt stack 0
  1109  000011                     ___almod@dividend:
  1110                           	opt stack 0
  1111                           
  1112                           ; 4 bytes @ 0x10
  1113  000011                     	ds	1
  1114  000012                     _isdigit$1966:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x11
  1118  000012                     	ds	1
  1119  000013                     isdigit@c:
  1120                           	opt stack 0
  1121  000013                     ___awdiv@divisor:
  1122                           	opt stack 0
  1123  000013                     ___lwdiv@divisor:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0x12
  1127  000013                     	ds	1
  1128  000014                     ___ftpack@exp:
  1129                           	opt stack 0
  1130  000014                     ___ftge@ff2:
  1131                           	opt stack 0
  1132                           
  1133                           ; 3 bytes @ 0x13
  1134  000014                     	ds	1
  1135  000015                     ___awdiv@counter:
  1136                           	opt stack 0
  1137  000015                     ___ftpack@sign:
  1138                           	opt stack 0
  1139  000015                     ___lwdiv@counter:
  1140                           	opt stack 0
  1141  000015                     ___lmul@multiplicand:
  1142                           	opt stack 0
  1143  000015                     ___almod@divisor:
  1144                           	opt stack 0
  1145                           
  1146                           ; 4 bytes @ 0x14
  1147  000015                     	ds	1
  1148  000016                     ??___ftpack:
  1149  000016                     ___awdiv@sign:
  1150                           	opt stack 0
  1151  000016                     ___lwdiv@quotient:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x15
  1155  000016                     	ds	1
  1156  000017                     ??___ftge:
  1157  000017                     ___awdiv@quotient:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0x16
  1161  000017                     	ds	1
  1162  000018                     ?___lwmod:
  1163                           	opt stack 0
  1164  000018                     ___lwmod@dividend:
  1165                           	opt stack 0
  1166                           
  1167                           ; 2 bytes @ 0x17
  1168  000018                     	ds	1
  1169  000019                     ??_EnhancedRead:
  1170  000019                     ?___awtoft:
  1171                           	opt stack 0
  1172  000019                     ___almod@counter:
  1173                           	opt stack 0
  1174  000019                     MotorASpeed@S:
  1175                           	opt stack 0
  1176  000019                     MotorBSpeed@S:
  1177                           	opt stack 0
  1178  000019                     ___awtoft@c:
  1179                           	opt stack 0
  1180  000019                     ___lmul@product:
  1181                           	opt stack 0
  1182                           
  1183                           ; 4 bytes @ 0x18
  1184  000019                     	ds	1
  1185  00001A                     ___almod@sign:
  1186                           	opt stack 0
  1187  00001A                     EnhancedRead@aux:
  1188                           	opt stack 0
  1189  00001A                     _read_cal$530:
  1190                           	opt stack 0
  1191  00001A                     ___lwmod@divisor:
  1192                           	opt stack 0
  1193                           
  1194                           ; 2 bytes @ 0x19
  1195  00001A                     	ds	1
  1196  00001B                     ??_MotorASpeed:
  1197  00001B                     ??_MotorBSpeed:
  1198                           
  1199                           ; 1 bytes @ 0x1A
  1200  00001B                     	ds	1
  1201  00001C                     EnhancedRead@i:
  1202                           	opt stack 0
  1203  00001C                     ___awtoft@sign:
  1204                           	opt stack 0
  1205  00001C                     ___lwmod@counter:
  1206                           	opt stack 0
  1207  00001C                     _read_cal$532:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x1B
  1211  00001C                     	ds	1
  1212  00001D                     ?___ftmul:
  1213                           	opt stack 0
  1214  00001D                     ?___aldiv:
  1215                           	opt stack 0
  1216  00001D                     ___ftmul@f1:
  1217                           	opt stack 0
  1218  00001D                     ___aldiv@dividend:
  1219                           	opt stack 0
  1220                           
  1221                           ; 4 bytes @ 0x1C
  1222  00001D                     	ds	1
  1223  00001E                     _read_cal$534:
  1224                           	opt stack 0
  1225                           
  1226                           ; 2 bytes @ 0x1D
  1227  00001E                     	ds	2
  1228  000020                     _read_cal$536:
  1229                           	opt stack 0
  1230  000020                     ___ftmul@f2:
  1231                           	opt stack 0
  1232                           
  1233                           ; 3 bytes @ 0x1F
  1234  000020                     	ds	1
  1235  000021                     ___aldiv@divisor:
  1236                           	opt stack 0
  1237                           
  1238                           ; 4 bytes @ 0x20
  1239  000021                     	ds	1
  1240  000022                     read_cal@i:
  1241                           	opt stack 0
  1242                           
  1243                           ; 2 bytes @ 0x21
  1244  000022                     	ds	1
  1245  000023                     ??___ftmul:
  1246                           
  1247                           ; 1 bytes @ 0x22
  1248  000023                     	ds	2
  1249  000025                     ___aldiv@counter:
  1250                           	opt stack 0
  1251                           
  1252                           ; 1 bytes @ 0x24
  1253  000025                     	ds	1
  1254  000026                     ___aldiv@sign:
  1255                           	opt stack 0
  1256  000026                     ___ftmul@exp:
  1257                           	opt stack 0
  1258                           
  1259                           ; 1 bytes @ 0x25
  1260  000026                     	ds	1
  1261  000027                     ___ftmul@f3_as_product:
  1262                           	opt stack 0
  1263  000027                     ___aldiv@quotient:
  1264                           	opt stack 0
  1265                           
  1266                           ; 4 bytes @ 0x26
  1267  000027                     	ds	3
  1268  00002A                     ___ftmul@cntr:
  1269                           	opt stack 0
  1270                           
  1271                           ; 1 bytes @ 0x29
  1272  00002A                     	ds	1
  1273  00002B                     ??_line_cal:
  1274  00002B                     ___ftmul@sign:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0x2A
  1278  00002B                     	ds	1
  1279  00002C                     ?___ftadd:
  1280                           	opt stack 0
  1281  00002C                     ___ftadd@f1:
  1282                           	opt stack 0
  1283                           
  1284                           ; 3 bytes @ 0x2B
  1285  00002C                     	ds	3
  1286  00002F                     ___ftadd@f2:
  1287                           	opt stack 0
  1288                           
  1289                           ; 3 bytes @ 0x2E
  1290  00002F                     	ds	3
  1291  000032                     ??___ftadd:
  1292                           
  1293                           ; 1 bytes @ 0x31
  1294  000032                     	ds	3
  1295  000035                     ___ftadd@sign:
  1296                           	opt stack 0
  1297                           
  1298                           ; 1 bytes @ 0x34
  1299  000035                     	ds	1
  1300  000036                     ___ftadd@exp2:
  1301                           	opt stack 0
  1302                           
  1303                           ; 1 bytes @ 0x35
  1304  000036                     	ds	1
  1305  000037                     ___ftadd@exp1:
  1306                           	opt stack 0
  1307                           
  1308                           ; 1 bytes @ 0x36
  1309  000037                     	ds	1
  1310  000038                     ?___ftsub:
  1311                           	opt stack 0
  1312  000038                     ?___fttol:
  1313                           	opt stack 0
  1314  000038                     ___ftsub@f1:
  1315                           	opt stack 0
  1316  000038                     ___fttol@f1:
  1317                           	opt stack 0
  1318                           
  1319                           ; 3 bytes @ 0x37
  1320  000038                     	ds	3
  1321  00003B                     ___ftsub@f2:
  1322                           	opt stack 0
  1323                           
  1324                           ; 3 bytes @ 0x3A
  1325  00003B                     	ds	1
  1326  00003C                     ___wmul@product:
  1327                           	opt stack 0
  1328                           
  1329                           ; 2 bytes @ 0x3B
  1330  00003C                     	ds	2
  1331  00003E                     tblptru	equ	0xFF8
  1332                           tblptrh	equ	0xFF7
  1333                           tblptrl	equ	0xFF6
  1334                           tablat	equ	0xFF5
  1335                           postinc0	equ	0xFEE
  1336                           wreg	equ	0xFE8
  1337                           postdec1	equ	0xFE5
  1338                           fsr1l	equ	0xFE1
  1339                           
  1340                           ; 1 bytes @ 0x3D
  1341 ;;
  1342 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1343 ;;
  1344 ;; *************** function _main *****************
  1345 ;; Defined at:
  1346 ;;		line 24 in file "main.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;		None
  1349 ;; Auto vars:     Size  Location     Type
  1350 ;;  i               2   17[BANK1 ] int 
  1351 ;;  i               2   19[BANK1 ] int 
  1352 ;;  dif             3   12[BANK1 ] int 
  1353 ;;  speed           2   15[BANK1 ] int 
  1354 ;;  der             2    0[BANK1 ] int 
  1355 ;;  faux            2   10[BANK1 ] int 
  1356 ;;  fs              2    8[BANK1 ] int 
  1357 ;;  b               2    4[BANK1 ] int 
  1358 ;;  a               2    2[BANK1 ] int 
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  1    wreg      void 
  1361 ;; Registers used:
  1362 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1368 ;;      Params:         0       0       0       0       0       0       0       0       0
  1369 ;;      Locals:         0       0      21       0       0       0       0       0       0
  1370 ;;      Temps:          0       4       0       0       0       0       0       0       0
  1371 ;;      Totals:         0       4      21       0       0       0       0       0       0
  1372 ;;Total ram usage:       25 bytes
  1373 ;; Hardware stack levels required when called:    5
  1374 ;; This function calls:
  1375 ;;		_EnhancedRead
  1376 ;;		___almod
  1377 ;;		___awtoft
  1378 ;;		___ftadd
  1379 ;;		___ftge
  1380 ;;		___ftmul
  1381 ;;		___ftneg
  1382 ;;		___fttol
  1383 ;;		___wmul
  1384 ;;		_init_cal
  1385 ;;		_init_tms
  1386 ;;		_init_wixel
  1387 ;;		_line_cal
  1388 ;;		_mspeed
  1389 ;;		_printf
  1390 ;;		_read_cal
  1391 ;;		_setA
  1392 ;;		_setB
  1393 ;;		_setC
  1394 ;;		_setD
  1395 ;;		_twidde_start
  1396 ;;		_twiddle_update
  1397 ;; This function is called by:
  1398 ;;		Startup code after reset
  1399 ;; This function uses a non-reentrant model
  1400 ;;
  1401                           
  1402                           	psect	text0
  1403  000012                     __ptext0:
  1404                           	opt stack 0
  1405  000012                     _main:
  1406                           	opt stack 26
  1407                           
  1408                           ;main.c: 25: init_tms();
  1409                           
  1410                           ;incstack = 0
  1411  000012  ECD7  F010         	call	_init_tms	;wreg free
  1412                           
  1413                           ;main.c: 27: init_wixel();
  1414  000016  ECD1  F011         	call	_init_wixel	;wreg free
  1415                           
  1416                           ;main.c: 29: status = INIT;
  1417  00001A  0E00               	movlw	0
  1418  00001C  0100               	movlb	0	; () banked
  1419  00001E  6FED               	movwf	(_status+1)& (0+255),b
  1420  000020  0E01               	movlw	1
  1421  000022  6FEC               	movwf	_status& (0+255),b
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;main.c: 30: int fs = 0;
  1425  000024  0E00               	movlw	0
  1426  000026  0101               	movlb	1	; () banked
  1427  000028  6F2D               	movwf	(main@fs+1)& (0+255),b
  1428  00002A  0E00               	movlw	0
  1429  00002C  6F2C               	movwf	main@fs& (0+255),b
  1430                           
  1431                           ; BSR set to: 1
  1432                           ;main.c: 31: time[1] = 0;
  1433  00002E  0E00               	movlw	0
  1434  000030  0100               	movlb	0	; () banked
  1435  000032  6F64               	movwf	(_time+4)& (0+255),b
  1436  000034  0E00               	movlw	0
  1437  000036  6F65               	movwf	(_time+5)& (0+255),b
  1438  000038  0E00               	movlw	0
  1439  00003A  6F66               	movwf	(_time+6)& (0+255),b
  1440  00003C  0E00               	movlw	0
  1441  00003E  6F67               	movwf	(_time+7)& (0+255),b
  1442                           
  1443                           ; BSR set to: 0
  1444                           ;main.c: 32: mspeed(0,0);
  1445  000040  0E00               	movlw	0
  1446  000042  0100               	movlb	0	; () banked
  1447  000044  6FBC               	movwf	(mspeed@a+1)& (0+255),b
  1448  000046  0E00               	movlw	0
  1449  000048  6FBB               	movwf	mspeed@a& (0+255),b
  1450  00004A  0E00               	movlw	0
  1451  00004C  0100               	movlb	0	; () banked
  1452  00004E  6FBE               	movwf	(mspeed@b+1)& (0+255),b
  1453  000050  0E00               	movlw	0
  1454  000052  6FBD               	movwf	mspeed@b& (0+255),b
  1455  000054  EC04  F012         	call	_mspeed	;wreg free
  1456  000058  D08C               	goto	l4293
  1457  00005A                     l4253:
  1458                           
  1459                           ;main.c: 36: EnhancedRead();
  1460  00005A  EC4E  F010         	call	_EnhancedRead	;wreg free
  1461                           
  1462                           ;main.c: 38: switch (status){
  1463  00005E  EF68  F004         	goto	l4463
  1464  000062                     l4255:
  1465                           
  1466                           ;main.c: 40: mspeed(0,0);
  1467  000062  0E00               	movlw	0
  1468  000064  0100               	movlb	0	; () banked
  1469  000066  6FBC               	movwf	(mspeed@a+1)& (0+255),b
  1470  000068  0E00               	movlw	0
  1471  00006A  6FBB               	movwf	mspeed@a& (0+255),b
  1472  00006C  0E00               	movlw	0
  1473  00006E  0100               	movlb	0	; () banked
  1474  000070  6FBE               	movwf	(mspeed@b+1)& (0+255),b
  1475  000072  0E00               	movlw	0
  1476  000074  6FBD               	movwf	mspeed@b& (0+255),b
  1477  000076  EC04  F012         	call	_mspeed	;wreg free
  1478                           
  1479                           ;main.c: 41: if (PORTDbits.RD0 == 0){
  1480  00007A  B083               	btfsc	3971,0,c	;volatile
  1481  00007C  D007               	goto	l64
  1482                           
  1483                           ;main.c: 42: PORTBbits.RB4 = 1;
  1484  00007E  8881               	bsf	3969,4,c	;volatile
  1485                           
  1486                           ;main.c: 43: PORTDbits.RD2 = 1;
  1487  000080  8483               	bsf	3971,2,c	;volatile
  1488                           
  1489                           ;main.c: 44: a = 1000;
  1490  000082  0E03               	movlw	3
  1491  000084  0101               	movlb	1	; () banked
  1492  000086  6F27               	movwf	(main@a+1)& (0+255),b
  1493  000088  0EE8               	movlw	232
  1494  00008A  D006               	goto	L1
  1495  00008C                     l64:
  1496                           
  1497                           ;main.c: 46: PORTBbits.RB4 = 0;
  1498  00008C  9881               	bcf	3969,4,c	;volatile
  1499                           
  1500                           ;main.c: 47: PORTDbits.RD2 = 0;
  1501  00008E  9483               	bcf	3971,2,c	;volatile
  1502                           
  1503                           ;main.c: 48: a = 0;
  1504  000090  0E00               	movlw	0
  1505  000092  0101               	movlb	1	; () banked
  1506  000094  6F27               	movwf	(main@a+1)& (0+255),b
  1507  000096  0E00               	movlw	0
  1508  000098                     L1:
  1509  000098  6F26               	movwf	main@a& (0+255),b
  1510                           
  1511                           ; BSR set to: 1
  1512                           ;main.c: 49: }
  1513                           ;main.c: 50: if (PORTDbits.RD1 == 0){
  1514                           
  1515                           ; BSR set to: 1
  1516  00009A  B283               	btfsc	3971,1,c	;volatile
  1517  00009C  D008               	goto	l66
  1518                           
  1519                           ; BSR set to: 1
  1520                           ;main.c: 51: b = 1000;
  1521  00009E  0E03               	movlw	3
  1522  0000A0  0101               	movlb	1	; () banked
  1523  0000A2  6F29               	movwf	(main@b+1)& (0+255),b
  1524  0000A4  0EE8               	movlw	232
  1525  0000A6  6F28               	movwf	main@b& (0+255),b
  1526                           
  1527                           ; BSR set to: 1
  1528                           ;main.c: 52: PORTCbits.RC1 = 1;
  1529  0000A8  8282               	bsf	3970,1,c	;volatile
  1530                           
  1531                           ; BSR set to: 1
  1532                           ;main.c: 53: PORTAbits.RA4 = 1;
  1533  0000AA  8880               	bsf	3968,4,c	;volatile
  1534                           
  1535                           ;main.c: 54: }else{
  1536  0000AC  D007               	goto	l4275
  1537  0000AE                     l66:
  1538                           
  1539                           ; BSR set to: 1
  1540                           ;main.c: 55: PORTCbits.RC1 = 0;
  1541  0000AE  9282               	bcf	3970,1,c	;volatile
  1542                           
  1543                           ;main.c: 56: PORTAbits.RA4 = 0;
  1544  0000B0  9880               	bcf	3968,4,c	;volatile
  1545                           
  1546                           ; BSR set to: 1
  1547                           ;main.c: 57: b = 0;
  1548  0000B2  0E00               	movlw	0
  1549  0000B4  0101               	movlb	1	; () banked
  1550  0000B6  6F29               	movwf	(main@b+1)& (0+255),b
  1551  0000B8  0E00               	movlw	0
  1552  0000BA  6F28               	movwf	main@b& (0+255),b
  1553  0000BC                     l4275:
  1554                           
  1555                           ; BSR set to: 1
  1556                           ;main.c: 58: }
  1557                           ;main.c: 59: mspeed(a,b);
  1558  0000BC  C126  F0BB         	movff	main@a,mspeed@a
  1559  0000C0  C127  F0BC         	movff	main@a+1,mspeed@a+1
  1560  0000C4  C128  F0BD         	movff	main@b,mspeed@b
  1561  0000C8  C129  F0BE         	movff	main@b+1,mspeed@b+1
  1562  0000CC  EC04  F012         	call	_mspeed	;wreg free
  1563                           
  1564                           ;main.c: 61: if (time[0] > 200 && faux == 0){
  1565  0000D0  0100               	movlb	0	; () banked
  1566  0000D2  BF63               	btfsc	(_time+3)& (0+255),7,b
  1567  0000D4  D023               	goto	l4285
  1568  0000D6  0100               	movlb	0	; () banked
  1569  0000D8  5163               	movf	(_time+3)& (0+255),w,b
  1570  0000DA  0100               	movlb	0	; () banked
  1571  0000DC  1162               	iorwf	(_time+2)& (0+255),w,b
  1572  0000DE  0100               	movlb	0	; () banked
  1573  0000E0  1161               	iorwf	(_time+1)& (0+255),w,b
  1574  0000E2  E105               	bnz	u5230
  1575  0000E4  0EC9               	movlw	201
  1576  0000E6  0100               	movlb	0	; () banked
  1577  0000E8  5D60               	subwf	_time& (0+255),w,b
  1578  0000EA  A0D8               	btfss	status,0,c
  1579  0000EC  D017               	goto	l4285
  1580  0000EE                     u5230:
  1581                           
  1582                           ; BSR set to: 0
  1583  0000EE  0101               	movlb	1	; () banked
  1584  0000F0  512E               	movf	main@faux& (0+255),w,b
  1585  0000F2  0101               	movlb	1	; () banked
  1586  0000F4  112F               	iorwf	(main@faux+1)& (0+255),w,b
  1587  0000F6  A4D8               	btfss	status,2,c
  1588  0000F8  D011               	goto	l4285
  1589                           
  1590                           ; BSR set to: 1
  1591                           ;main.c: 62: printf("{'COM':'plot', 'name':'a','value':%i}\n",an[0]);
  1592  0000FA  0E69               	movlw	low STR_1
  1593  0000FC  0100               	movlb	0	; () banked
  1594  0000FE  6FBF               	movwf	printf@f& (0+255),b
  1595  000100  0E7F               	movlw	high STR_1
  1596  000102  0100               	movlb	0	; () banked
  1597  000104  6FC0               	movwf	(printf@f+1)& (0+255),b
  1598  000106  C09E  F0C1         	movff	_an,?_printf+2
  1599  00010A  C09F  F0C2         	movff	_an+1,?_printf+3
  1600  00010E  EC8E  F008         	call	_printf	;wreg free
  1601                           
  1602                           ;main.c: 63: faux = 1;
  1603  000112  0E00               	movlw	0
  1604  000114  0101               	movlb	1	; () banked
  1605  000116  6F2F               	movwf	(main@faux+1)& (0+255),b
  1606  000118  0E01               	movlw	1
  1607  00011A  6F2E               	movwf	main@faux& (0+255),b
  1608  00011C                     l4285:
  1609                           
  1610                           ;main.c: 64: }
  1611                           ;main.c: 65: if (faux == 1 && time[0] > 400){
  1612  00011C  0101               	movlb	1	; () banked
  1613  00011E  052E               	decf	main@faux& (0+255),w,b
  1614  000120  0101               	movlb	1	; () banked
  1615  000122  112F               	iorwf	(main@faux+1)& (0+255),w,b
  1616  000124  A4D8               	btfss	status,2,c
  1617  000126  D799               	goto	l4253
  1618                           
  1619                           ; BSR set to: 1
  1620  000128  0100               	movlb	0	; () banked
  1621  00012A  BF63               	btfsc	(_time+3)& (0+255),7,b
  1622  00012C  D796               	goto	l4253
  1623  00012E  0100               	movlb	0	; () banked
  1624  000130  5163               	movf	(_time+3)& (0+255),w,b
  1625  000132  0100               	movlb	0	; () banked
  1626  000134  1162               	iorwf	(_time+2)& (0+255),w,b
  1627  000136  E108               	bnz	u5260
  1628  000138  0E91               	movlw	145
  1629  00013A  0100               	movlb	0	; () banked
  1630  00013C  5D60               	subwf	_time& (0+255),w,b
  1631  00013E  0E01               	movlw	1
  1632  000140  0100               	movlb	0	; () banked
  1633  000142  5961               	subwfb	(_time+1)& (0+255),w,b
  1634  000144  A0D8               	btfss	status,0,c
  1635  000146  D789               	goto	l4253
  1636  000148                     u5260:
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;main.c: 66: printf("{'COM':'plot', 'name':'b','value':%i}\n",an[1]);
  1640  000148  0E90               	movlw	low STR_2
  1641  00014A  0100               	movlb	0	; () banked
  1642  00014C  6FBF               	movwf	printf@f& (0+255),b
  1643  00014E  0E7F               	movlw	high STR_2
  1644  000150  0100               	movlb	0	; () banked
  1645  000152  6FC0               	movwf	(printf@f+1)& (0+255),b
  1646  000154  C0A0  F0C1         	movff	_an+2,?_printf+2
  1647  000158  C0A1  F0C2         	movff	_an+3,?_printf+3
  1648  00015C  EC8E  F008         	call	_printf	;wreg free
  1649                           
  1650                           ;main.c: 67: time[0] = 0;
  1651  000160  0E00               	movlw	0
  1652  000162  0100               	movlb	0	; () banked
  1653  000164  6F60               	movwf	_time& (0+255),b
  1654  000166  0E00               	movlw	0
  1655  000168  6F61               	movwf	(_time+1)& (0+255),b
  1656  00016A  0E00               	movlw	0
  1657  00016C  6F62               	movwf	(_time+2)& (0+255),b
  1658  00016E  0E00               	movlw	0
  1659  000170  6F63               	movwf	(_time+3)& (0+255),b
  1660  000172                     l4293:
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;main.c: 68: faux = 0;
  1664  000172  0E00               	movlw	0
  1665  000174  0101               	movlb	1	; () banked
  1666  000176  6F2F               	movwf	(main@faux+1)& (0+255),b
  1667  000178  0E00               	movlw	0
  1668  00017A  6F2E               	movwf	main@faux& (0+255),b
  1669                           
  1670                           ; BSR set to: 1
  1671                           ;main.c: 69: }
  1672                           ;main.c: 71: break;
  1673  00017C  D76E               	goto	l4253
  1674  00017E                     l4295:
  1675                           
  1676                           ;main.c: 74: mspeed(0,0);
  1677  00017E  0E00               	movlw	0
  1678  000180  0100               	movlb	0	; () banked
  1679  000182  6FBC               	movwf	(mspeed@a+1)& (0+255),b
  1680  000184  0E00               	movlw	0
  1681  000186  6FBB               	movwf	mspeed@a& (0+255),b
  1682  000188  0E00               	movlw	0
  1683  00018A  0100               	movlb	0	; () banked
  1684  00018C  6FBE               	movwf	(mspeed@b+1)& (0+255),b
  1685  00018E  0E00               	movlw	0
  1686  000190  6FBD               	movwf	mspeed@b& (0+255),b
  1687  000192  EC04  F012         	call	_mspeed	;wreg free
  1688                           
  1689                           ;main.c: 75: if (fs == 0 && time[1] > 2000){
  1690  000196  0101               	movlb	1	; () banked
  1691  000198  512C               	movf	main@fs& (0+255),w,b
  1692  00019A  0101               	movlb	1	; () banked
  1693  00019C  112D               	iorwf	(main@fs+1)& (0+255),w,b
  1694  00019E  A4D8               	btfss	status,2,c
  1695  0001A0  D015               	goto	l4303
  1696                           
  1697                           ; BSR set to: 1
  1698  0001A2  0100               	movlb	0	; () banked
  1699  0001A4  BF67               	btfsc	(_time+7)& (0+255),7,b
  1700  0001A6  D012               	goto	l4303
  1701  0001A8  0100               	movlb	0	; () banked
  1702  0001AA  5167               	movf	(_time+7)& (0+255),w,b
  1703  0001AC  0100               	movlb	0	; () banked
  1704  0001AE  1166               	iorwf	(_time+6)& (0+255),w,b
  1705  0001B0  E108               	bnz	u5280
  1706  0001B2  0ED1               	movlw	209
  1707  0001B4  0100               	movlb	0	; () banked
  1708  0001B6  5D64               	subwf	(_time+4)& (0+255),w,b
  1709  0001B8  0E07               	movlw	7
  1710  0001BA  0100               	movlb	0	; () banked
  1711  0001BC  5965               	subwfb	(_time+5)& (0+255),w,b
  1712  0001BE  A0D8               	btfss	status,0,c
  1713  0001C0  D005               	goto	l4303
  1714  0001C2                     u5280:
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;main.c: 77: fs = 1;
  1718  0001C2  0E00               	movlw	0
  1719  0001C4  0101               	movlb	1	; () banked
  1720  0001C6  6F2D               	movwf	(main@fs+1)& (0+255),b
  1721  0001C8  0E01               	movlw	1
  1722  0001CA  6F2C               	movwf	main@fs& (0+255),b
  1723  0001CC                     l4303:
  1724                           
  1725                           ;main.c: 78: }
  1726                           ;main.c: 79: if (fs == 1 && time[1] > 4000){
  1727  0001CC  0101               	movlb	1	; () banked
  1728  0001CE  052C               	decf	main@fs& (0+255),w,b
  1729  0001D0  0101               	movlb	1	; () banked
  1730  0001D2  112D               	iorwf	(main@fs+1)& (0+255),w,b
  1731  0001D4  A4D8               	btfss	status,2,c
  1732  0001D6  D01D               	goto	l4311
  1733                           
  1734                           ; BSR set to: 1
  1735  0001D8  0100               	movlb	0	; () banked
  1736  0001DA  BF67               	btfsc	(_time+7)& (0+255),7,b
  1737  0001DC  D01A               	goto	l4311
  1738  0001DE  0100               	movlb	0	; () banked
  1739  0001E0  5167               	movf	(_time+7)& (0+255),w,b
  1740  0001E2  0100               	movlb	0	; () banked
  1741  0001E4  1166               	iorwf	(_time+6)& (0+255),w,b
  1742  0001E6  E108               	bnz	u5300
  1743  0001E8  0EA1               	movlw	161
  1744  0001EA  0100               	movlb	0	; () banked
  1745  0001EC  5D64               	subwf	(_time+4)& (0+255),w,b
  1746  0001EE  0E0F               	movlw	15
  1747  0001F0  0100               	movlb	0	; () banked
  1748  0001F2  5965               	subwfb	(_time+5)& (0+255),w,b
  1749  0001F4  A0D8               	btfss	status,0,c
  1750  0001F6  D00D               	goto	l4311
  1751  0001F8                     u5300:
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;main.c: 80: printf("{'COM':'line','value':'Welcome!'}\n");
  1755  0001F8  0EDB               	movlw	low STR_3
  1756  0001FA  0100               	movlb	0	; () banked
  1757  0001FC  6FBF               	movwf	printf@f& (0+255),b
  1758  0001FE  0E7F               	movlw	high STR_3
  1759  000200  0100               	movlb	0	; () banked
  1760  000202  6FC0               	movwf	(printf@f+1)& (0+255),b
  1761  000204  EC8E  F008         	call	_printf	;wreg free
  1762                           
  1763                           ;main.c: 81: fs = 2;
  1764  000208  0E00               	movlw	0
  1765  00020A  0101               	movlb	1	; () banked
  1766  00020C  6F2D               	movwf	(main@fs+1)& (0+255),b
  1767  00020E  0E02               	movlw	2
  1768  000210  6F2C               	movwf	main@fs& (0+255),b
  1769  000212                     l4311:
  1770                           
  1771                           ;main.c: 82: }
  1772                           ;main.c: 83: if (time[0] < 1000) setA();
  1773  000212  0100               	movlb	0	; () banked
  1774  000214  BF63               	btfsc	(_time+3)& (0+255),7,b
  1775  000216  D00C               	goto	l4313
  1776  000218  0100               	movlb	0	; () banked
  1777  00021A  5163               	movf	(_time+3)& (0+255),w,b
  1778  00021C  0100               	movlb	0	; () banked
  1779  00021E  1162               	iorwf	(_time+2)& (0+255),w,b
  1780  000220  E109               	bnz	l4315
  1781  000222  0EE8               	movlw	232
  1782  000224  0100               	movlb	0	; () banked
  1783  000226  5D60               	subwf	_time& (0+255),w,b
  1784  000228  0E03               	movlw	3
  1785  00022A  0100               	movlb	0	; () banked
  1786  00022C  5961               	subwfb	(_time+1)& (0+255),w,b
  1787  00022E  A0D8               	btfss	status,0,c
  1788  000230                     l4313:
  1789                           
  1790                           ; BSR set to: 0
  1791  000230  EC36  F012         	call	_setA	;wreg free
  1792  000234                     l4315:
  1793                           
  1794                           ;main.c: 84: if (time[0] > 1000 && time[0] < 2000) setB();
  1795  000234  0100               	movlb	0	; () banked
  1796  000236  BF63               	btfsc	(_time+3)& (0+255),7,b
  1797  000238  D01E               	goto	l4321
  1798  00023A  0100               	movlb	0	; () banked
  1799  00023C  5163               	movf	(_time+3)& (0+255),w,b
  1800  00023E  0100               	movlb	0	; () banked
  1801  000240  1162               	iorwf	(_time+2)& (0+255),w,b
  1802  000242  E108               	bnz	u5320
  1803  000244  0EE9               	movlw	233
  1804  000246  0100               	movlb	0	; () banked
  1805  000248  5D60               	subwf	_time& (0+255),w,b
  1806  00024A  0E03               	movlw	3
  1807  00024C  0100               	movlb	0	; () banked
  1808  00024E  5961               	subwfb	(_time+1)& (0+255),w,b
  1809  000250  A0D8               	btfss	status,0,c
  1810  000252  D011               	goto	l4321
  1811  000254                     u5320:
  1812                           
  1813                           ; BSR set to: 0
  1814  000254  0100               	movlb	0	; () banked
  1815  000256  BF63               	btfsc	(_time+3)& (0+255),7,b
  1816  000258  D00C               	goto	l4319
  1817  00025A  0100               	movlb	0	; () banked
  1818  00025C  5163               	movf	(_time+3)& (0+255),w,b
  1819  00025E  0100               	movlb	0	; () banked
  1820  000260  1162               	iorwf	(_time+2)& (0+255),w,b
  1821  000262  E109               	bnz	l4321
  1822  000264  0ED0               	movlw	208
  1823  000266  0100               	movlb	0	; () banked
  1824  000268  5D60               	subwf	_time& (0+255),w,b
  1825  00026A  0E07               	movlw	7
  1826  00026C  0100               	movlb	0	; () banked
  1827  00026E  5961               	subwfb	(_time+1)& (0+255),w,b
  1828  000270  A0D8               	btfss	status,0,c
  1829  000272                     l4319:
  1830                           
  1831                           ; BSR set to: 0
  1832  000272  EC31  F012         	call	_setB	;wreg free
  1833  000276                     l4321:
  1834                           
  1835                           ;main.c: 85: if (time[0] > 2000 && time[0] < 3000) setC();
  1836  000276  0100               	movlb	0	; () banked
  1837  000278  BF63               	btfsc	(_time+3)& (0+255),7,b
  1838  00027A  D01E               	goto	l4327
  1839  00027C  0100               	movlb	0	; () banked
  1840  00027E  5163               	movf	(_time+3)& (0+255),w,b
  1841  000280  0100               	movlb	0	; () banked
  1842  000282  1162               	iorwf	(_time+2)& (0+255),w,b
  1843  000284  E108               	bnz	u5340
  1844  000286  0ED1               	movlw	209
  1845  000288  0100               	movlb	0	; () banked
  1846  00028A  5D60               	subwf	_time& (0+255),w,b
  1847  00028C  0E07               	movlw	7
  1848  00028E  0100               	movlb	0	; () banked
  1849  000290  5961               	subwfb	(_time+1)& (0+255),w,b
  1850  000292  A0D8               	btfss	status,0,c
  1851  000294  D011               	goto	l4327
  1852  000296                     u5340:
  1853                           
  1854                           ; BSR set to: 0
  1855  000296  0100               	movlb	0	; () banked
  1856  000298  BF63               	btfsc	(_time+3)& (0+255),7,b
  1857  00029A  D00C               	goto	l4325
  1858  00029C  0100               	movlb	0	; () banked
  1859  00029E  5163               	movf	(_time+3)& (0+255),w,b
  1860  0002A0  0100               	movlb	0	; () banked
  1861  0002A2  1162               	iorwf	(_time+2)& (0+255),w,b
  1862  0002A4  E109               	bnz	l4327
  1863  0002A6  0EB8               	movlw	184
  1864  0002A8  0100               	movlb	0	; () banked
  1865  0002AA  5D60               	subwf	_time& (0+255),w,b
  1866  0002AC  0E0B               	movlw	11
  1867  0002AE  0100               	movlb	0	; () banked
  1868  0002B0  5961               	subwfb	(_time+1)& (0+255),w,b
  1869  0002B2  A0D8               	btfss	status,0,c
  1870  0002B4                     l4325:
  1871                           
  1872                           ; BSR set to: 0
  1873  0002B4  EC2C  F012         	call	_setC	;wreg free
  1874  0002B8                     l4327:
  1875                           
  1876                           ;main.c: 86: if (time[0] > 3000 && time[0] < 4000) setD();
  1877  0002B8  0100               	movlb	0	; () banked
  1878  0002BA  BF63               	btfsc	(_time+3)& (0+255),7,b
  1879  0002BC  D01E               	goto	l4333
  1880  0002BE  0100               	movlb	0	; () banked
  1881  0002C0  5163               	movf	(_time+3)& (0+255),w,b
  1882  0002C2  0100               	movlb	0	; () banked
  1883  0002C4  1162               	iorwf	(_time+2)& (0+255),w,b
  1884  0002C6  E108               	bnz	u5360
  1885  0002C8  0EB9               	movlw	185
  1886  0002CA  0100               	movlb	0	; () banked
  1887  0002CC  5D60               	subwf	_time& (0+255),w,b
  1888  0002CE  0E0B               	movlw	11
  1889  0002D0  0100               	movlb	0	; () banked
  1890  0002D2  5961               	subwfb	(_time+1)& (0+255),w,b
  1891  0002D4  A0D8               	btfss	status,0,c
  1892  0002D6  D011               	goto	l4333
  1893  0002D8                     u5360:
  1894                           
  1895                           ; BSR set to: 0
  1896  0002D8  0100               	movlb	0	; () banked
  1897  0002DA  BF63               	btfsc	(_time+3)& (0+255),7,b
  1898  0002DC  D00C               	goto	l4331
  1899  0002DE  0100               	movlb	0	; () banked
  1900  0002E0  5163               	movf	(_time+3)& (0+255),w,b
  1901  0002E2  0100               	movlb	0	; () banked
  1902  0002E4  1162               	iorwf	(_time+2)& (0+255),w,b
  1903  0002E6  E109               	bnz	l4333
  1904  0002E8  0EA0               	movlw	160
  1905  0002EA  0100               	movlb	0	; () banked
  1906  0002EC  5D60               	subwf	_time& (0+255),w,b
  1907  0002EE  0E0F               	movlw	15
  1908  0002F0  0100               	movlb	0	; () banked
  1909  0002F2  5961               	subwfb	(_time+1)& (0+255),w,b
  1910  0002F4  A0D8               	btfss	status,0,c
  1911  0002F6                     l4331:
  1912                           
  1913                           ; BSR set to: 0
  1914  0002F6  EC27  F012         	call	_setD	;wreg free
  1915  0002FA                     l4333:
  1916                           
  1917                           ;main.c: 87: if (time[0] > 4000) time[0] = 0;
  1918  0002FA  0100               	movlb	0	; () banked
  1919  0002FC  BF63               	btfsc	(_time+3)& (0+255),7,b
  1920  0002FE  D016               	goto	l4337
  1921  000300  0100               	movlb	0	; () banked
  1922  000302  5163               	movf	(_time+3)& (0+255),w,b
  1923  000304  0100               	movlb	0	; () banked
  1924  000306  1162               	iorwf	(_time+2)& (0+255),w,b
  1925  000308  E108               	bnz	u5380
  1926  00030A  0EA1               	movlw	161
  1927  00030C  0100               	movlb	0	; () banked
  1928  00030E  5D60               	subwf	_time& (0+255),w,b
  1929  000310  0E0F               	movlw	15
  1930  000312  0100               	movlb	0	; () banked
  1931  000314  5961               	subwfb	(_time+1)& (0+255),w,b
  1932  000316  A0D8               	btfss	status,0,c
  1933  000318  D009               	goto	l4337
  1934  00031A                     u5380:
  1935                           
  1936                           ; BSR set to: 0
  1937  00031A  0E00               	movlw	0
  1938  00031C  0100               	movlb	0	; () banked
  1939  00031E  6F60               	movwf	_time& (0+255),b
  1940  000320  0E00               	movlw	0
  1941  000322  6F61               	movwf	(_time+1)& (0+255),b
  1942  000324  0E00               	movlw	0
  1943  000326  6F62               	movwf	(_time+2)& (0+255),b
  1944  000328  0E00               	movlw	0
  1945  00032A  6F63               	movwf	(_time+3)& (0+255),b
  1946  00032C                     l4337:
  1947                           
  1948                           ; BSR set to: 0
  1949                           ;main.c: 89: if (PORTDbits.RD0 == 0){
  1950  00032C  B083               	btfsc	3971,0,c	;volatile
  1951  00032E  D695               	goto	l4253
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;main.c: 90: printf("{'COM':'line','value':'Calibration started'}\n");
  1955  000330  0E66               	movlw	low STR_4
  1956  000332  0100               	movlb	0	; () banked
  1957  000334  6FBF               	movwf	printf@f& (0+255),b
  1958  000336  0E7E               	movlw	high STR_4
  1959  000338  0100               	movlb	0	; () banked
  1960  00033A  6FC0               	movwf	(printf@f+1)& (0+255),b
  1961  00033C  EC8E  F008         	call	_printf	;wreg free
  1962                           
  1963                           ;main.c: 91: status = CAL;
  1964  000340  0E00               	movlw	0
  1965  000342  0100               	movlb	0	; () banked
  1966  000344  6FED               	movwf	(_status+1)& (0+255),b
  1967  000346  0E02               	movlw	2
  1968  000348  6FEC               	movwf	_status& (0+255),b
  1969                           
  1970                           ; BSR set to: 0
  1971                           ;main.c: 92: time[0] = 0;
  1972  00034A  0E00               	movlw	0
  1973  00034C  0100               	movlb	0	; () banked
  1974  00034E  6F60               	movwf	_time& (0+255),b
  1975  000350  0E00               	movlw	0
  1976  000352  6F61               	movwf	(_time+1)& (0+255),b
  1977  000354  0E00               	movlw	0
  1978  000356  6F62               	movwf	(_time+2)& (0+255),b
  1979  000358  0E00               	movlw	0
  1980  00035A  6F63               	movwf	(_time+3)& (0+255),b
  1981                           
  1982                           ; BSR set to: 0
  1983                           ;main.c: 93: init_cal();
  1984  00035C  EC15  F010         	call	_init_cal	;wreg free
  1985                           
  1986                           ;main.c: 94: }
  1987                           ;main.c: 95: break;
  1988  000360  D67C               	goto	l4253
  1989  000362                     l4347:
  1990                           
  1991                           ;main.c: 97: mspeed(0,0);
  1992  000362  0E00               	movlw	0
  1993  000364  0100               	movlb	0	; () banked
  1994  000366  6FBC               	movwf	(mspeed@a+1)& (0+255),b
  1995  000368  0E00               	movlw	0
  1996  00036A  6FBB               	movwf	mspeed@a& (0+255),b
  1997  00036C  0E00               	movlw	0
  1998  00036E  0100               	movlb	0	; () banked
  1999  000370  6FBE               	movwf	(mspeed@b+1)& (0+255),b
  2000  000372  0E00               	movlw	0
  2001  000374  6FBD               	movwf	mspeed@b& (0+255),b
  2002  000376  EC04  F012         	call	_mspeed	;wreg free
  2003                           
  2004                           ;main.c: 98: PORTBbits.RB4 = time[0] % 1000 > 500;
  2005  00037A  C060  F011         	movff	_time,___almod@dividend
  2006  00037E  C061  F012         	movff	_time+1,___almod@dividend+1
  2007  000382  C062  F013         	movff	_time+2,___almod@dividend+2
  2008  000386  C063  F014         	movff	_time+3,___almod@dividend+3
  2009  00038A  0EE8               	movlw	232
  2010  00038C  6E15               	movwf	___almod@divisor,c
  2011  00038E  0E03               	movlw	3
  2012  000390  6E16               	movwf	___almod@divisor+1,c
  2013  000392  0E00               	movlw	0
  2014  000394  6E17               	movwf	___almod@divisor+2,c
  2015  000396  0E00               	movlw	0
  2016  000398  6E18               	movwf	___almod@divisor+3,c
  2017  00039A  EC5E  F00E         	call	___almod	;wreg free
  2018  00039E  BE14               	btfsc	?___almod+3,7,c
  2019  0003A0  D00D               	goto	u5400
  2020  0003A2  5014               	movf	?___almod+3,w,c
  2021  0003A4  1013               	iorwf	?___almod+2,w,c
  2022  0003A6  E106               	bnz	u5401
  2023  0003A8  0EF5               	movlw	245
  2024  0003AA  5C11               	subwf	?___almod,w,c
  2025  0003AC  0E01               	movlw	1
  2026  0003AE  5812               	subwfb	?___almod+1,w,c
  2027  0003B0  A0D8               	btfss	status,0,c
  2028  0003B2  D004               	goto	u5400
  2029  0003B4                     u5401:
  2030  0003B4  0100               	movlb	0	; () banked
  2031  0003B6  6BD4               	clrf	??_main& (0+255),b
  2032  0003B8  2BD4               	incf	??_main& (0+255),f,b
  2033  0003BA  D002               	goto	u5418
  2034  0003BC                     u5400:
  2035  0003BC  0100               	movlb	0	; () banked
  2036  0003BE  6BD4               	clrf	??_main& (0+255),b
  2037  0003C0                     u5418:
  2038  0003C0  0100               	movlb	0	; () banked
  2039  0003C2  3BD4               	swapf	??_main& (0+255),f,b
  2040  0003C4  5081               	movf	3969,w,c	;volatile
  2041  0003C6  0100               	movlb	0	; () banked
  2042  0003C8  19D4               	xorwf	??_main& (0+255),w,b
  2043  0003CA  0BEF               	andlw	-17
  2044  0003CC  19D4               	xorwf	??_main& (0+255),w,b
  2045  0003CE  6E81               	movwf	3969,c	;volatile
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;main.c: 99: PORTCbits.RC1 = 0;
  2049  0003D0  9282               	bcf	3970,1,c	;volatile
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;main.c: 100: PORTDbits.RD2 = 0;
  2053  0003D2  9483               	bcf	3971,2,c	;volatile
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;main.c: 101: PORTAbits.RA4 = 0;
  2057  0003D4  9880               	bcf	3968,4,c	;volatile
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;main.c: 102: read_cal();
  2061  0003D6  EC86  F004         	call	_read_cal	;wreg free
  2062                           
  2063                           ;main.c: 104: if (PORTDbits.RD1 == 0){
  2064  0003DA  B283               	btfsc	3971,1,c	;volatile
  2065  0003DC  D63E               	goto	l4253
  2066                           
  2067                           ;main.c: 105: printf("{'COM':'line','value':'Calibration finished'}\n");
  2068  0003DE  0E37               	movlw	low STR_5
  2069  0003E0  0100               	movlb	0	; () banked
  2070  0003E2  6FBF               	movwf	printf@f& (0+255),b
  2071  0003E4  0E7E               	movlw	high STR_5
  2072  0003E6  0100               	movlb	0	; () banked
  2073  0003E8  6FC0               	movwf	(printf@f+1)& (0+255),b
  2074  0003EA  EC8E  F008         	call	_printf	;wreg free
  2075                           
  2076                           ;main.c: 106: printf("{'COM':'line','value':'Results :'}\n");
  2077  0003EE  0EB7               	movlw	low STR_6
  2078  0003F0  0100               	movlb	0	; () banked
  2079  0003F2  6FBF               	movwf	printf@f& (0+255),b
  2080  0003F4  0E7F               	movlw	high STR_6
  2081  0003F6  0100               	movlb	0	; () banked
  2082  0003F8  6FC0               	movwf	(printf@f+1)& (0+255),b
  2083  0003FA  EC8E  F008         	call	_printf	;wreg free
  2084                           
  2085                           ;main.c: 107: int i;
  2086                           ;main.c: 108: time[2] = 0;
  2087  0003FE  0E00               	movlw	0
  2088  000400  0100               	movlb	0	; () banked
  2089  000402  6F68               	movwf	(_time+8)& (0+255),b
  2090  000404  0E00               	movlw	0
  2091  000406  6F69               	movwf	(_time+9)& (0+255),b
  2092  000408  0E00               	movlw	0
  2093  00040A  6F6A               	movwf	(_time+10)& (0+255),b
  2094  00040C  0E00               	movlw	0
  2095  00040E  6F6B               	movwf	(_time+11)& (0+255),b
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;main.c: 109: for (i = 0;i < 5;i++){
  2099  000410  0E00               	movlw	0
  2100  000412  0101               	movlb	1	; () banked
  2101  000414  6F38               	movwf	(main@i+1)& (0+255),b
  2102  000416  0E00               	movlw	0
  2103  000418  6F37               	movwf	main@i& (0+255),b
  2104  00041A                     l4365:
  2105                           
  2106                           ; BSR set to: 1
  2107  00041A  0101               	movlb	1	; () banked
  2108  00041C  BF38               	btfsc	(main@i+1)& (0+255),7,b
  2109  00041E  D008               	goto	l4369
  2110  000420  0101               	movlb	1	; () banked
  2111  000422  5138               	movf	(main@i+1)& (0+255),w,b
  2112  000424  E16B               	bnz	l4379
  2113  000426  0E05               	movlw	5
  2114  000428  0101               	movlb	1	; () banked
  2115  00042A  5D37               	subwf	main@i& (0+255),w,b
  2116  00042C  B0D8               	btfsc	status,0,c
  2117  00042E  D066               	goto	l4379
  2118  000430                     l4369:
  2119                           
  2120                           ; BSR set to: 1
  2121                           ;main.c: 110: printf("{'COM':'line','value':'%d : [%04d,%04d]'}\n",i,mins[ls[i]],maxs[ls
      +                          [i]]);
  2122  000430  0EED               	movlw	low STR_7
  2123  000432  0100               	movlb	0	; () banked
  2124  000434  6FBF               	movwf	printf@f& (0+255),b
  2125  000436  0E7E               	movlw	high STR_7
  2126  000438  0100               	movlb	0	; () banked
  2127  00043A  6FC0               	movwf	(printf@f+1)& (0+255),b
  2128  00043C  C137  F0C1         	movff	main@i,?_printf+2
  2129  000440  C138  F0C2         	movff	main@i+1,?_printf+3
  2130  000444  90D8               	bcf	status,0,c
  2131  000446  0101               	movlb	1	; () banked
  2132  000448  3537               	rlcf	main@i& (0+255),w,b
  2133  00044A  6ED9               	movwf	fsr2l,c
  2134  00044C  0101               	movlb	1	; () banked
  2135  00044E  3538               	rlcf	(main@i+1)& (0+255),w,b
  2136  000450  6EDA               	movwf	fsr2h,c
  2137  000452  0ED8               	movlw	low _ls
  2138  000454  26D9               	addwf	fsr2l,f,c
  2139  000456  0E00               	movlw	high _ls
  2140  000458  22DA               	addwfc	fsr2h,f,c
  2141  00045A  CFDE F0D4          	movff	postinc2,??_main
  2142  00045E  CFDD F0D5          	movff	postdec2,??_main+1
  2143  000462  90D8               	bcf	status,0,c
  2144  000464  0100               	movlb	0	; () banked
  2145  000466  37D4               	rlcf	??_main& (0+255),f,b
  2146  000468  37D5               	rlcf	(??_main+1)& (0+255),f,b
  2147  00046A  0E8C               	movlw	low _mins
  2148  00046C  0100               	movlb	0	; () banked
  2149  00046E  25D4               	addwf	??_main& (0+255),w,b
  2150  000470  6ED9               	movwf	fsr2l,c
  2151  000472  0E00               	movlw	high _mins
  2152  000474  0100               	movlb	0	; () banked
  2153  000476  21D5               	addwfc	(??_main+1)& (0+255),w,b
  2154  000478  6EDA               	movwf	fsr2h,c
  2155  00047A  CFDE F0C3          	movff	postinc2,?_printf+4
  2156  00047E  CFDD F0C4          	movff	postdec2,?_printf+5
  2157  000482  90D8               	bcf	status,0,c
  2158  000484  0101               	movlb	1	; () banked
  2159  000486  3537               	rlcf	main@i& (0+255),w,b
  2160  000488  6ED9               	movwf	fsr2l,c
  2161  00048A  0101               	movlb	1	; () banked
  2162  00048C  3538               	rlcf	(main@i+1)& (0+255),w,b
  2163  00048E  6EDA               	movwf	fsr2h,c
  2164  000490  0ED8               	movlw	low _ls
  2165  000492  26D9               	addwf	fsr2l,f,c
  2166  000494  0E00               	movlw	high _ls
  2167  000496  22DA               	addwfc	fsr2h,f,c
  2168  000498  CFDE F0D6          	movff	postinc2,??_main+2
  2169  00049C  CFDD F0D7          	movff	postdec2,??_main+3
  2170  0004A0  90D8               	bcf	status,0,c
  2171  0004A2  0100               	movlb	0	; () banked
  2172  0004A4  37D6               	rlcf	(??_main+2)& (0+255),f,b
  2173  0004A6  37D7               	rlcf	(??_main+3)& (0+255),f,b
  2174  0004A8  0E12               	movlw	low _maxs
  2175  0004AA  0100               	movlb	0	; () banked
  2176  0004AC  25D6               	addwf	(??_main+2)& (0+255),w,b
  2177  0004AE  6ED9               	movwf	fsr2l,c
  2178  0004B0  0E01               	movlw	high _maxs
  2179  0004B2  0100               	movlb	0	; () banked
  2180  0004B4  21D7               	addwfc	(??_main+3)& (0+255),w,b
  2181  0004B6  6EDA               	movwf	fsr2h,c
  2182  0004B8  CFDE F0C5          	movff	postinc2,?_printf+6
  2183  0004BC  CFDD F0C6          	movff	postdec2,?_printf+7
  2184  0004C0  EC8E  F008         	call	_printf	;wreg free
  2185  0004C4                     l4371:
  2186  0004C4  0100               	movlb	0	; () banked
  2187  0004C6  BF6B               	btfsc	(_time+11)& (0+255),7,b
  2188  0004C8  D7FD               	goto	l4371
  2189  0004CA  0100               	movlb	0	; () banked
  2190  0004CC  516B               	movf	(_time+11)& (0+255),w,b
  2191  0004CE  0100               	movlb	0	; () banked
  2192  0004D0  116A               	iorwf	(_time+10)& (0+255),w,b
  2193  0004D2  0100               	movlb	0	; () banked
  2194  0004D4  1169               	iorwf	(_time+9)& (0+255),w,b
  2195  0004D6  E105               	bnz	l4373
  2196  0004D8  0E64               	movlw	100
  2197  0004DA  0100               	movlb	0	; () banked
  2198  0004DC  5D68               	subwf	(_time+8)& (0+255),w,b
  2199  0004DE  A0D8               	btfss	status,0,c
  2200  0004E0  D7F1               	goto	l4371
  2201  0004E2                     l4373:
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;main.c: 112: time[2] = 0;
  2205  0004E2  0E00               	movlw	0
  2206  0004E4  0100               	movlb	0	; () banked
  2207  0004E6  6F68               	movwf	(_time+8)& (0+255),b
  2208  0004E8  0E00               	movlw	0
  2209  0004EA  6F69               	movwf	(_time+9)& (0+255),b
  2210  0004EC  0E00               	movlw	0
  2211  0004EE  6F6A               	movwf	(_time+10)& (0+255),b
  2212  0004F0  0E00               	movlw	0
  2213  0004F2  6F6B               	movwf	(_time+11)& (0+255),b
  2214                           
  2215                           ; BSR set to: 0
  2216  0004F4  0101               	movlb	1	; () banked
  2217  0004F6  4B37               	infsnz	main@i& (0+255),f,b
  2218  0004F8  2B38               	incf	(main@i+1)& (0+255),f,b
  2219  0004FA  D78F               	goto	l4365
  2220  0004FC                     l4379:
  2221                           
  2222                           ; BSR set to: 1
  2223                           ;main.c: 113: }
  2224                           ;main.c: 114: status = READY;
  2225  0004FC  0E00               	movlw	0
  2226  0004FE  0100               	movlb	0	; () banked
  2227  000500  6FED               	movwf	(_status+1)& (0+255),b
  2228  000502  0E03               	movlw	3
  2229  000504  6FEC               	movwf	_status& (0+255),b
  2230                           
  2231                           ;main.c: 115: time[0] = 0;
  2232  000506  0E00               	movlw	0
  2233  000508  0100               	movlb	0	; () banked
  2234  00050A  6F60               	movwf	_time& (0+255),b
  2235  00050C  0E00               	movlw	0
  2236  00050E  6F61               	movwf	(_time+1)& (0+255),b
  2237  000510  0E00               	movlw	0
  2238  000512  6F62               	movwf	(_time+2)& (0+255),b
  2239  000514  0E00               	movlw	0
  2240  000516  6F63               	movwf	(_time+3)& (0+255),b
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;main.c: 116: }
  2244                           ;main.c: 117: break;
  2245  000518  D5A0               	goto	l4253
  2246  00051A                     l4381:
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;main.c: 119: mspeed(0,0);
  2250  00051A  0E00               	movlw	0
  2251  00051C  0100               	movlb	0	; () banked
  2252  00051E  6FBC               	movwf	(mspeed@a+1)& (0+255),b
  2253  000520  0E00               	movlw	0
  2254  000522  6FBB               	movwf	mspeed@a& (0+255),b
  2255  000524  0E00               	movlw	0
  2256  000526  0100               	movlb	0	; () banked
  2257  000528  6FBE               	movwf	(mspeed@b+1)& (0+255),b
  2258  00052A  0E00               	movlw	0
  2259  00052C  6FBD               	movwf	mspeed@b& (0+255),b
  2260  00052E  EC04  F012         	call	_mspeed	;wreg free
  2261                           
  2262                           ;main.c: 120: PORTBbits.RB4 = 0;
  2263  000532  9881               	bcf	3969,4,c	;volatile
  2264                           
  2265                           ;main.c: 121: PORTCbits.RC1 = 1;
  2266  000534  8282               	bsf	3970,1,c	;volatile
  2267                           
  2268                           ;main.c: 122: PORTDbits.RD2 = 0;
  2269  000536  9483               	bcf	3971,2,c	;volatile
  2270                           
  2271                           ;main.c: 123: PORTAbits.RA4 = 0;
  2272  000538  9880               	bcf	3968,4,c	;volatile
  2273                           
  2274                           ;main.c: 124: line_cal();
  2275  00053A  ECD7  F006         	call	_line_cal	;wreg free
  2276                           
  2277                           ;main.c: 125: if (time[0] > 1000){
  2278  00053E  0100               	movlb	0	; () banked
  2279  000540  BF63               	btfsc	(_time+3)& (0+255),7,b
  2280  000542  D061               	goto	l4411
  2281  000544  0100               	movlb	0	; () banked
  2282  000546  5163               	movf	(_time+3)& (0+255),w,b
  2283  000548  0100               	movlb	0	; () banked
  2284  00054A  1162               	iorwf	(_time+2)& (0+255),w,b
  2285  00054C  E108               	bnz	u5460
  2286  00054E  0EE9               	movlw	233
  2287  000550  0100               	movlb	0	; () banked
  2288  000552  5D60               	subwf	_time& (0+255),w,b
  2289  000554  0E03               	movlw	3
  2290  000556  0100               	movlb	0	; () banked
  2291  000558  5961               	subwfb	(_time+1)& (0+255),w,b
  2292  00055A  A0D8               	btfss	status,0,c
  2293  00055C  D054               	goto	l4411
  2294  00055E                     u5460:
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;main.c: 126: printf("{'COM':'plot', 'name':'Plot 1','value':%i}\n",lp);
  2298  00055E  0EC1               	movlw	low STR_8
  2299  000560  0100               	movlb	0	; () banked
  2300  000562  6FBF               	movwf	printf@f& (0+255),b
  2301  000564  0E7E               	movlw	high STR_8
  2302  000566  0100               	movlb	0	; () banked
  2303  000568  6FC0               	movwf	(printf@f+1)& (0+255),b
  2304  00056A  C08A  F0C1         	movff	_lp,?_printf+2
  2305  00056E  C08B  F0C2         	movff	_lp+1,?_printf+3
  2306  000572  EC8E  F008         	call	_printf	;wreg free
  2307                           
  2308                           ;main.c: 127: int i;
  2309                           ;main.c: 128: for (i = 0;i < 5;i++){
  2310  000576  0E00               	movlw	0
  2311  000578  0101               	movlb	1	; () banked
  2312  00057A  6F36               	movwf	(main@i_362+1)& (0+255),b
  2313  00057C  0E00               	movlw	0
  2314  00057E  6F35               	movwf	main@i_362& (0+255),b
  2315  000580                     l4399:
  2316                           
  2317                           ; BSR set to: 1
  2318  000580  0101               	movlb	1	; () banked
  2319  000582  BF36               	btfsc	(main@i_362+1)& (0+255),7,b
  2320  000584  D008               	goto	l4403
  2321  000586  0101               	movlb	1	; () banked
  2322  000588  5136               	movf	(main@i_362+1)& (0+255),w,b
  2323  00058A  E134               	bnz	l4409
  2324  00058C  0E05               	movlw	5
  2325  00058E  0101               	movlb	1	; () banked
  2326  000590  5D35               	subwf	main@i_362& (0+255),w,b
  2327  000592  B0D8               	btfsc	status,0,c
  2328  000594  D02F               	goto	l4409
  2329  000596                     l4403:
  2330                           
  2331                           ; BSR set to: 1
  2332                           ;main.c: 129: printf("{'COM':'plot', 'name':'line %i','value':%i}\n",i,calval[ls[i]]);
  2333  000596  0E94               	movlw	low STR_9
  2334  000598  0100               	movlb	0	; () banked
  2335  00059A  6FBF               	movwf	printf@f& (0+255),b
  2336  00059C  0E7E               	movlw	high STR_9
  2337  00059E  0100               	movlb	0	; () banked
  2338  0005A0  6FC0               	movwf	(printf@f+1)& (0+255),b
  2339  0005A2  C135  F0C1         	movff	main@i_362,?_printf+2
  2340  0005A6  C136  F0C2         	movff	main@i_362+1,?_printf+3
  2341  0005AA  90D8               	bcf	status,0,c
  2342  0005AC  0101               	movlb	1	; () banked
  2343  0005AE  3535               	rlcf	main@i_362& (0+255),w,b
  2344  0005B0  6ED9               	movwf	fsr2l,c
  2345  0005B2  0101               	movlb	1	; () banked
  2346  0005B4  3536               	rlcf	(main@i_362+1)& (0+255),w,b
  2347  0005B6  6EDA               	movwf	fsr2h,c
  2348  0005B8  0ED8               	movlw	low _ls
  2349  0005BA  26D9               	addwf	fsr2l,f,c
  2350  0005BC  0E00               	movlw	high _ls
  2351  0005BE  22DA               	addwfc	fsr2h,f,c
  2352  0005C0  CFDE F0D4          	movff	postinc2,??_main
  2353  0005C4  CFDD F0D5          	movff	postdec2,??_main+1
  2354  0005C8  90D8               	bcf	status,0,c
  2355  0005CA  0100               	movlb	0	; () banked
  2356  0005CC  37D4               	rlcf	??_main& (0+255),f,b
  2357  0005CE  37D5               	rlcf	(??_main+1)& (0+255),f,b
  2358  0005D0  0E00               	movlw	low _calval
  2359  0005D2  0100               	movlb	0	; () banked
  2360  0005D4  25D4               	addwf	??_main& (0+255),w,b
  2361  0005D6  6ED9               	movwf	fsr2l,c
  2362  0005D8  0E01               	movlw	high _calval
  2363  0005DA  0100               	movlb	0	; () banked
  2364  0005DC  21D5               	addwfc	(??_main+1)& (0+255),w,b
  2365  0005DE  6EDA               	movwf	fsr2h,c
  2366  0005E0  CFDE F0C3          	movff	postinc2,?_printf+4
  2367  0005E4  CFDD F0C4          	movff	postdec2,?_printf+5
  2368  0005E8  EC8E  F008         	call	_printf	;wreg free
  2369  0005EC  0101               	movlb	1	; () banked
  2370  0005EE  4B35               	infsnz	main@i_362& (0+255),f,b
  2371  0005F0  2B36               	incf	(main@i_362+1)& (0+255),f,b
  2372  0005F2  D7C6               	goto	l4399
  2373  0005F4                     l4409:
  2374                           
  2375                           ; BSR set to: 1
  2376                           ;main.c: 130: }
  2377                           ;main.c: 131: time[0] = 0;
  2378  0005F4  0E00               	movlw	0
  2379  0005F6  0100               	movlb	0	; () banked
  2380  0005F8  6F60               	movwf	_time& (0+255),b
  2381  0005FA  0E00               	movlw	0
  2382  0005FC  6F61               	movwf	(_time+1)& (0+255),b
  2383  0005FE  0E00               	movlw	0
  2384  000600  6F62               	movwf	(_time+2)& (0+255),b
  2385  000602  0E00               	movlw	0
  2386  000604  6F63               	movwf	(_time+3)& (0+255),b
  2387  000606                     l4411:
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;main.c: 132: }
  2391                           ;main.c: 133: if (PORTDbits.RD0 == 0){
  2392  000606  B083               	btfsc	3971,0,c	;volatile
  2393  000608  D528               	goto	l4253
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;main.c: 134: twidde_start();
  2397  00060A  ECBF  F011         	call	_twidde_start	;wreg free
  2398                           
  2399                           ;main.c: 135: status = BASIC_PID;
  2400  00060E  0E00               	movlw	0
  2401  000610  0100               	movlb	0	; () banked
  2402  000612  6FED               	movwf	(_status+1)& (0+255),b
  2403  000614  0E04               	movlw	4
  2404  000616  6FEC               	movwf	_status& (0+255),b
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;main.c: 136: time[3] = 0;
  2408  000618  0E00               	movlw	0
  2409  00061A  0100               	movlb	0	; () banked
  2410  00061C  6F6C               	movwf	(_time+12)& (0+255),b
  2411  00061E  0E00               	movlw	0
  2412  000620  6F6D               	movwf	(_time+13)& (0+255),b
  2413  000622  0E00               	movlw	0
  2414  000624  6F6E               	movwf	(_time+14)& (0+255),b
  2415  000626  0E00               	movlw	0
  2416  000628  6F6F               	movwf	(_time+15)& (0+255),b
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;main.c: 137: }
  2420                           ;main.c: 138: break;
  2421  00062A  D517               	goto	l4253
  2422  00062C                     l4419:
  2423                           
  2424                           ; BSR set to: 0
  2425                           ;main.c: 140: twiddle_update();
  2426  00062C  ECF4  F009         	call	_twiddle_update	;wreg free
  2427                           
  2428                           ;main.c: 142: line_cal();
  2429  000630  ECD7  F006         	call	_line_cal	;wreg free
  2430                           
  2431                           ;main.c: 143: int speed = 1000;
  2432  000634  0E03               	movlw	3
  2433  000636  0101               	movlb	1	; () banked
  2434  000638  6F34               	movwf	(main@speed+1)& (0+255),b
  2435  00063A  0EE8               	movlw	232
  2436  00063C  6F33               	movwf	main@speed& (0+255),b
  2437                           
  2438                           ; BSR set to: 1
  2439                           ;main.c: 145: int der = lp - old_lp;
  2440  00063E  C088  F0D4         	movff	_old_lp,??_main
  2441  000642  C089  F0D5         	movff	_old_lp+1,??_main+1
  2442  000646  0100               	movlb	0	; () banked
  2443  000648  1FD4               	comf	??_main& (0+255),f,b
  2444  00064A  1FD5               	comf	(??_main+1)& (0+255),f,b
  2445  00064C  4BD4               	infsnz	??_main& (0+255),f,b
  2446  00064E  2BD5               	incf	(??_main+1)& (0+255),f,b
  2447  000650  0100               	movlb	0	; () banked
  2448  000652  518A               	movf	_lp& (0+255),w,b
  2449  000654  0100               	movlb	0	; () banked
  2450  000656  25D4               	addwf	??_main& (0+255),w,b
  2451  000658  0101               	movlb	1	; () banked
  2452  00065A  6F24               	movwf	main@der& (0+255),b
  2453  00065C  0100               	movlb	0	; () banked
  2454  00065E  518B               	movf	(_lp+1)& (0+255),w,b
  2455  000660  0100               	movlb	0	; () banked
  2456  000662  21D5               	addwfc	(??_main+1)& (0+255),w,b
  2457  000664  0101               	movlb	1	; () banked
  2458  000666  6F25               	movwf	(main@der+1)& (0+255),b
  2459                           
  2460                           ; BSR set to: 1
  2461                           ;main.c: 146: double dif = (double)lp * 4 + (double)der * 100;
  2462  000668  0E00               	movlw	0
  2463  00066A  6E20               	movwf	___ftmul@f2,c
  2464  00066C  0E80               	movlw	128
  2465  00066E  6E21               	movwf	___ftmul@f2+1,c
  2466  000670  0E40               	movlw	64
  2467  000672  6E22               	movwf	___ftmul@f2+2,c
  2468  000674  C08A  F019         	movff	_lp,___awtoft@c
  2469  000678  C08B  F01A         	movff	_lp+1,___awtoft@c+1
  2470  00067C  EC5E  F011         	call	___awtoft	;wreg free
  2471  000680  C019  F01D         	movff	?___awtoft,___ftmul@f1
  2472  000684  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  2473  000688  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  2474  00068C  ECC1  F00C         	call	___ftmul	;wreg free
  2475  000690  C01D  F02C         	movff	?___ftmul,___ftadd@f1
  2476  000694  C01E  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  2477  000698  C01F  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  2478  00069C  0E00               	movlw	0
  2479  00069E  6E20               	movwf	___ftmul@f2,c
  2480  0006A0  0EC8               	movlw	200
  2481  0006A2  6E21               	movwf	___ftmul@f2+1,c
  2482  0006A4  0E42               	movlw	66
  2483  0006A6  6E22               	movwf	___ftmul@f2+2,c
  2484  0006A8  C124  F019         	movff	main@der,___awtoft@c
  2485  0006AC  C125  F01A         	movff	main@der+1,___awtoft@c+1
  2486  0006B0  EC5E  F011         	call	___awtoft	;wreg free
  2487  0006B4  C019  F01D         	movff	?___awtoft,___ftmul@f1
  2488  0006B8  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  2489  0006BC  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  2490  0006C0  ECC1  F00C         	call	___ftmul	;wreg free
  2491  0006C4  C01D  F02F         	movff	?___ftmul,___ftadd@f2
  2492  0006C8  C01E  F030         	movff	?___ftmul+1,___ftadd@f2+1
  2493  0006CC  C01F  F031         	movff	?___ftmul+2,___ftadd@f2+2
  2494  0006D0  EC54  F00B         	call	___ftadd	;wreg free
  2495  0006D4  C02C  F130         	movff	?___ftadd,main@dif
  2496  0006D8  C02D  F131         	movff	?___ftadd+1,main@dif+1
  2497  0006DC  C02E  F132         	movff	?___ftadd+2,main@dif+2
  2498                           
  2499                           ;main.c: 147: if (lp > -60 && lp < 60){
  2500  0006E0  0100               	movlb	0	; () banked
  2501  0006E2  AF8B               	btfss	(_lp+1)& (0+255),7,b
  2502  0006E4  D008               	goto	l4431
  2503  0006E6  0EC5               	movlw	197
  2504  0006E8  0100               	movlb	0	; () banked
  2505  0006EA  5D8A               	subwf	_lp& (0+255),w,b
  2506  0006EC  0EFF               	movlw	255
  2507  0006EE  0100               	movlb	0	; () banked
  2508  0006F0  598B               	subwfb	(_lp+1)& (0+255),w,b
  2509  0006F2  A0D8               	btfss	status,0,c
  2510  0006F4  D010               	goto	l93
  2511  0006F6                     l4431:
  2512                           
  2513                           ; BSR set to: 0
  2514  0006F6  0100               	movlb	0	; () banked
  2515  0006F8  BF8B               	btfsc	(_lp+1)& (0+255),7,b
  2516  0006FA  D008               	goto	l4433
  2517  0006FC  0100               	movlb	0	; () banked
  2518  0006FE  518B               	movf	(_lp+1)& (0+255),w,b
  2519  000700  E10A               	bnz	l93
  2520  000702  0E3C               	movlw	60
  2521  000704  0100               	movlb	0	; () banked
  2522  000706  5D8A               	subwf	_lp& (0+255),w,b
  2523  000708  B0D8               	btfsc	status,0,c
  2524  00070A  D005               	goto	l93
  2525  00070C                     l4433:
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;main.c: 148: PORTBbits.RB4 = 0;
  2529  00070C  9881               	bcf	3969,4,c	;volatile
  2530                           
  2531                           ;main.c: 149: PORTCbits.RC1 = 0;
  2532  00070E  9282               	bcf	3970,1,c	;volatile
  2533                           
  2534                           ;main.c: 150: PORTDbits.RD2 = 1;
  2535  000710  8483               	bsf	3971,2,c	;volatile
  2536                           
  2537                           ;main.c: 151: PORTAbits.RA4 = 1;
  2538  000712  8880               	bsf	3968,4,c	;volatile
  2539                           
  2540                           ;main.c: 152: }else{
  2541  000714  D011               	goto	l4439
  2542  000716                     l93:
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;main.c: 153: PORTDbits.RD2 = 0;
  2546  000716  9483               	bcf	3971,2,c	;volatile
  2547                           
  2548                           ;main.c: 154: PORTAbits.RA4 = 0;
  2549  000718  9880               	bcf	3968,4,c	;volatile
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;main.c: 155: if (lp > 0){
  2553  00071A  0100               	movlb	0	; () banked
  2554  00071C  BF8B               	btfsc	(_lp+1)& (0+255),7,b
  2555  00071E  D00A               	goto	l95
  2556  000720  0100               	movlb	0	; () banked
  2557  000722  518B               	movf	(_lp+1)& (0+255),w,b
  2558  000724  E104               	bnz	u5520
  2559  000726  0100               	movlb	0	; () banked
  2560  000728  058A               	decf	_lp& (0+255),w,b
  2561  00072A  A0D8               	btfss	status,0,c
  2562  00072C  D003               	goto	l95
  2563  00072E                     u5520:
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;main.c: 156: PORTBbits.RB4 = 1;
  2567  00072E  8881               	bsf	3969,4,c	;volatile
  2568                           
  2569                           ;main.c: 157: PORTCbits.RC1 = 0;
  2570  000730  9282               	bcf	3970,1,c	;volatile
  2571                           
  2572                           ;main.c: 158: }else{
  2573  000732  D002               	goto	l4439
  2574  000734                     l95:
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;main.c: 159: PORTBbits.RB4 = 0;
  2578  000734  9881               	bcf	3969,4,c	;volatile
  2579                           
  2580                           ;main.c: 160: PORTCbits.RC1 = 1;
  2581  000736  8282               	bsf	3970,1,c	;volatile
  2582  000738                     l4439:
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;main.c: 161: }
  2586                           ;main.c: 162: }
  2587                           ;main.c: 163: if (dif > 0) mspeed(speed - dif, speed );
  2588  000738  0E00               	movlw	0
  2589  00073A  6E11               	movwf	___ftge@ff1,c
  2590  00073C  0E00               	movlw	0
  2591  00073E  6E12               	movwf	___ftge@ff1+1,c
  2592  000740  0E00               	movlw	0
  2593  000742  6E13               	movwf	___ftge@ff1+2,c
  2594  000744  C130  F014         	movff	main@dif,___ftge@ff2
  2595  000748  C131  F015         	movff	main@dif+1,___ftge@ff2+1
  2596  00074C  C132  F016         	movff	main@dif+2,___ftge@ff2+2
  2597  000750  EC52  F00F         	call	___ftge	;wreg free
  2598  000754  B0D8               	btfsc	status,0,c
  2599  000756  D02E               	goto	l4443
  2600  000758  C130  F011         	movff	main@dif,___ftneg@f1
  2601  00075C  C131  F012         	movff	main@dif+1,___ftneg@f1+1
  2602  000760  C132  F013         	movff	main@dif+2,___ftneg@f1+2
  2603  000764  ECE3  F011         	call	___ftneg	;wreg free
  2604  000768  C011  F02F         	movff	?___ftneg,___ftadd@f2
  2605  00076C  C012  F030         	movff	?___ftneg+1,___ftadd@f2+1
  2606  000770  C013  F031         	movff	?___ftneg+2,___ftadd@f2+2
  2607  000774  C133  F019         	movff	main@speed,___awtoft@c
  2608  000778  C134  F01A         	movff	main@speed+1,___awtoft@c+1
  2609  00077C  EC5E  F011         	call	___awtoft	;wreg free
  2610  000780  C019  F02C         	movff	?___awtoft,___ftadd@f1
  2611  000784  C01A  F02D         	movff	?___awtoft+1,___ftadd@f1+1
  2612  000788  C01B  F02E         	movff	?___awtoft+2,___ftadd@f1+2
  2613  00078C  EC54  F00B         	call	___ftadd	;wreg free
  2614  000790  C02C  F038         	movff	?___ftadd,___fttol@f1
  2615  000794  C02D  F039         	movff	?___ftadd+1,___fttol@f1+1
  2616  000798  C02E  F03A         	movff	?___ftadd+2,___fttol@f1+2
  2617  00079C  EC2A  F00C         	call	___fttol	;wreg free
  2618  0007A0  C038  F0BB         	movff	?___fttol,mspeed@a
  2619  0007A4  C039  F0BC         	movff	?___fttol+1,mspeed@a+1
  2620  0007A8  C133  F0BD         	movff	main@speed,mspeed@b
  2621  0007AC  C134  F0BE         	movff	main@speed+1,mspeed@b+1
  2622  0007B0  EC04  F012         	call	_mspeed	;wreg free
  2623  0007B4                     l4443:
  2624                           
  2625                           ;main.c: 164: if (dif < 0) mspeed(speed , speed + dif);
  2626  0007B4  0101               	movlb	1	; () banked
  2627  0007B6  AF32               	btfss	(main@dif+2)& (0+255),7,b
  2628  0007B8  D026               	goto	l4447
  2629                           
  2630                           ; BSR set to: 1
  2631  0007BA  C133  F0BB         	movff	main@speed,mspeed@a
  2632  0007BE  C134  F0BC         	movff	main@speed+1,mspeed@a+1
  2633  0007C2  C130  F02F         	movff	main@dif,___ftadd@f2
  2634  0007C6  C131  F030         	movff	main@dif+1,___ftadd@f2+1
  2635  0007CA  C132  F031         	movff	main@dif+2,___ftadd@f2+2
  2636  0007CE  C133  F019         	movff	main@speed,___awtoft@c
  2637  0007D2  C134  F01A         	movff	main@speed+1,___awtoft@c+1
  2638  0007D6  EC5E  F011         	call	___awtoft	;wreg free
  2639  0007DA  C019  F02C         	movff	?___awtoft,___ftadd@f1
  2640  0007DE  C01A  F02D         	movff	?___awtoft+1,___ftadd@f1+1
  2641  0007E2  C01B  F02E         	movff	?___awtoft+2,___ftadd@f1+2
  2642  0007E6  EC54  F00B         	call	___ftadd	;wreg free
  2643  0007EA  C02C  F038         	movff	?___ftadd,___fttol@f1
  2644  0007EE  C02D  F039         	movff	?___ftadd+1,___fttol@f1+1
  2645  0007F2  C02E  F03A         	movff	?___ftadd+2,___fttol@f1+2
  2646  0007F6  EC2A  F00C         	call	___fttol	;wreg free
  2647  0007FA  C038  F0BD         	movff	?___fttol,mspeed@b
  2648  0007FE  C039  F0BE         	movff	?___fttol+1,mspeed@b+1
  2649  000802  EC04  F012         	call	_mspeed	;wreg free
  2650  000806                     l4447:
  2651                           
  2652                           ;main.c: 166: old_lp = lp;
  2653  000806  C08A  F088         	movff	_lp,_old_lp
  2654  00080A  C08B  F089         	movff	_lp+1,_old_lp+1
  2655                           
  2656                           ;main.c: 168: if (time[3] > 1000){
  2657  00080E  0100               	movlb	0	; () banked
  2658  000810  BF6F               	btfsc	(_time+15)& (0+255),7,b
  2659  000812  D423               	goto	l4253
  2660  000814  0100               	movlb	0	; () banked
  2661  000816  516F               	movf	(_time+15)& (0+255),w,b
  2662  000818  0100               	movlb	0	; () banked
  2663  00081A  116E               	iorwf	(_time+14)& (0+255),w,b
  2664  00081C  E108               	bnz	u5550
  2665  00081E  0EE9               	movlw	233
  2666  000820  0100               	movlb	0	; () banked
  2667  000822  5D6C               	subwf	(_time+12)& (0+255),w,b
  2668  000824  0E03               	movlw	3
  2669  000826  0100               	movlb	0	; () banked
  2670  000828  596D               	subwfb	(_time+13)& (0+255),w,b
  2671  00082A  A0D8               	btfss	status,0,c
  2672  00082C  D416               	goto	l4253
  2673  00082E                     u5550:
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;main.c: 169: time[3] = 0;
  2677  00082E  0E00               	movlw	0
  2678  000830  0100               	movlb	0	; () banked
  2679  000832  6F6C               	movwf	(_time+12)& (0+255),b
  2680  000834  0E00               	movlw	0
  2681  000836  6F6D               	movwf	(_time+13)& (0+255),b
  2682  000838  0E00               	movlw	0
  2683  00083A  6F6E               	movwf	(_time+14)& (0+255),b
  2684  00083C  0E00               	movlw	0
  2685  00083E  6F6F               	movwf	(_time+15)& (0+255),b
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;main.c: 170: printf("{'COM':'plot', 'name':'kd','value':%i}\n",(int)kd*1000);
  2689  000840  C0E9  F038         	movff	_kd,___fttol@f1
  2690  000844  C0EA  F039         	movff	_kd+1,___fttol@f1+1
  2691  000848  C0EB  F03A         	movff	_kd+2,___fttol@f1+2
  2692  00084C  EC2A  F00C         	call	___fttol	;wreg free
  2693  000850  C038  F0BB         	movff	?___fttol,___wmul@multiplier
  2694  000854  C039  F0BC         	movff	?___fttol+1,___wmul@multiplier+1
  2695  000858  0E03               	movlw	3
  2696  00085A  0100               	movlb	0	; () banked
  2697  00085C  6FBE               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2698  00085E  0EE8               	movlw	232
  2699  000860  6FBD               	movwf	___wmul@multiplicand& (0+255),b
  2700  000862  EC7A  F011         	call	___wmul	;wreg free
  2701  000866  C0BB  F12A         	movff	?___wmul,_main$2288
  2702  00086A  C0BC  F12B         	movff	?___wmul+1,_main$2288+1
  2703                           
  2704                           ;main.c: 170: printf("{'COM':'plot', 'name':'kd','value':%i}\n",(int)kd*1000);
  2705  00086E  0E41               	movlw	low STR_10
  2706  000870  0100               	movlb	0	; () banked
  2707  000872  6FBF               	movwf	printf@f& (0+255),b
  2708  000874  0E7F               	movlw	high STR_10
  2709  000876  0100               	movlb	0	; () banked
  2710  000878  6FC0               	movwf	(printf@f+1)& (0+255),b
  2711  00087A  C12A  F0C1         	movff	_main$2288,?_printf+2
  2712  00087E  C12B  F0C2         	movff	_main$2288+1,?_printf+3
  2713  000882  EC8E  F008         	call	_printf	;wreg free
  2714                           
  2715                           ;main.c: 171: printf("{'COM':'plot', 'name':'ckd','value':%i}\n",(int)ckd*1000);
  2716  000886  C0E6  F038         	movff	_ckd,___fttol@f1
  2717  00088A  C0E7  F039         	movff	_ckd+1,___fttol@f1+1
  2718  00088E  C0E8  F03A         	movff	_ckd+2,___fttol@f1+2
  2719  000892  EC2A  F00C         	call	___fttol	;wreg free
  2720  000896  C038  F0BB         	movff	?___fttol,___wmul@multiplier
  2721  00089A  C039  F0BC         	movff	?___fttol+1,___wmul@multiplier+1
  2722  00089E  0E03               	movlw	3
  2723  0008A0  0100               	movlb	0	; () banked
  2724  0008A2  6FBE               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2725  0008A4  0EE8               	movlw	232
  2726  0008A6  6FBD               	movwf	___wmul@multiplicand& (0+255),b
  2727  0008A8  EC7A  F011         	call	___wmul	;wreg free
  2728  0008AC  C0BB  F12A         	movff	?___wmul,_main$2288
  2729  0008B0  C0BC  F12B         	movff	?___wmul+1,_main$2288+1
  2730                           
  2731                           ;main.c: 171: printf("{'COM':'plot', 'name':'ckd','value':%i}\n",(int)ckd*1000);
  2732  0008B4  0E18               	movlw	low STR_11
  2733  0008B6  0100               	movlb	0	; () banked
  2734  0008B8  6FBF               	movwf	printf@f& (0+255),b
  2735  0008BA  0E7F               	movlw	high STR_11
  2736  0008BC  0100               	movlb	0	; () banked
  2737  0008BE  6FC0               	movwf	(printf@f+1)& (0+255),b
  2738  0008C0  C12A  F0C1         	movff	_main$2288,?_printf+2
  2739  0008C4  C12B  F0C2         	movff	_main$2288+1,?_printf+3
  2740  0008C8  EC8E  F008         	call	_printf	;wreg free
  2741                           
  2742                           ;main.c: 174: }
  2743                           
  2744                           ;main.c: 172: }
  2745                           ;main.c: 173: break;
  2746  0008CC  EF2D  F000         	goto	l4253
  2747  0008D0                     l4463:
  2748  0008D0  C0EC  F0D4         	movff	_status,??_main
  2749  0008D4  C0ED  F0D5         	movff	_status+1,??_main+1
  2750                           
  2751                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2752                           ; Switch size 1, requested type "space"
  2753                           ; Number of cases is 1, Range of values is 0 to 0
  2754                           ; switch strategies available:
  2755                           ; Name         Instructions Cycles
  2756                           ; simple_byte            4     3 (average)
  2757                           ;	Chosen strategy is simple_byte
  2758  0008D8  0100               	movlb	0	; () banked
  2759  0008DA  51D5               	movf	(??_main+1)& (0+255),w,b
  2760  0008DC  0A00               	xorlw	0	; case 0
  2761  0008DE  A4D8               	btfss	status,2,c
  2762  0008E0  EF2D  F000         	goto	l4253
  2763                           
  2764                           ; BSR set to: 0
  2765                           ; Switch size 1, requested type "space"
  2766                           ; Number of cases is 5, Range of values is 0 to 4
  2767                           ; switch strategies available:
  2768                           ; Name         Instructions Cycles
  2769                           ; simple_byte           16     9 (average)
  2770                           ;	Chosen strategy is simple_byte
  2771  0008E4  0100               	movlb	0	; () banked
  2772  0008E6  51D4               	movf	??_main& (0+255),w,b
  2773  0008E8  0A00               	xorlw	0	; case 0
  2774  0008EA  B4D8               	btfsc	status,2,c
  2775  0008EC  EF31  F000         	goto	l4255
  2776  0008F0  0A01               	xorlw	1	; case 1
  2777  0008F2  B4D8               	btfsc	status,2,c
  2778  0008F4  D444               	goto	l4295
  2779  0008F6  0A03               	xorlw	3	; case 2
  2780  0008F8  B4D8               	btfsc	status,2,c
  2781  0008FA  D533               	goto	l4347
  2782  0008FC  0A01               	xorlw	1	; case 3
  2783  0008FE  B4D8               	btfsc	status,2,c
  2784  000900  D60C               	goto	l4381
  2785  000902  0A07               	xorlw	7	; case 4
  2786  000904  B4D8               	btfsc	status,2,c
  2787  000906  D692               	goto	l4419
  2788                           
  2789                           ; BSR set to: 0
  2790                           
  2791                           ; BSR set to: 0
  2792  000908  EF2D  F000         	goto	l4253
  2793  00090C                     __end_of_main:
  2794                           	opt stack 0
  2795                           tblptru	equ	0xFF8
  2796                           tblptrh	equ	0xFF7
  2797                           tblptrl	equ	0xFF6
  2798                           tablat	equ	0xFF5
  2799                           postinc0	equ	0xFEE
  2800                           wreg	equ	0xFE8
  2801                           postdec1	equ	0xFE5
  2802                           fsr1l	equ	0xFE1
  2803                           postinc2	equ	0xFDE
  2804                           postdec2	equ	0xFDD
  2805                           fsr2h	equ	0xFDA
  2806                           fsr2l	equ	0xFD9
  2807                           status	equ	0xFD8
  2808                           
  2809 ;; *************** function _twiddle_update *****************
  2810 ;; Defined at:
  2811 ;;		line 24 in file "twiddle.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;		None
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;		None
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  1    wreg      void 
  2818 ;; Registers used:
  2819 ;;		wreg, status,2, status,0, cstack
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2825 ;;      Params:         0       0       0       0       0       0       0       0       0
  2826 ;;      Locals:         0       4       0       0       0       0       0       0       0
  2827 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2828 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2829 ;;Total ram usage:        7 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    4
  2832 ;; This function calls:
  2833 ;;		___ftadd
  2834 ;;		___ftmul
  2835 ;;		___ftsub
  2836 ;; This function is called by:
  2837 ;;		_main
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           	psect	text1
  2842  0013E8                     __ptext1:
  2843                           	opt stack 0
  2844  0013E8                     _twiddle_update:
  2845                           	opt stack 26
  2846                           
  2847                           ;twiddle.c: 25: if (intern == 0){
  2848                           
  2849                           ; BSR set to: 0
  2850                           ;incstack = 0
  2851  0013E8  5048               	movf	_intern,w,c
  2852  0013EA  1049               	iorwf	_intern+1,w,c
  2853  0013EC  A4D8               	btfss	status,2,c
  2854  0013EE  D019               	goto	l4085
  2855                           
  2856                           ;twiddle.c: 26: intern = 1;
  2857  0013F0  0E00               	movlw	0
  2858  0013F2  6E49               	movwf	_intern+1,c
  2859  0013F4  0E01               	movlw	1
  2860  0013F6  6E48               	movwf	_intern,c
  2861                           
  2862                           ;twiddle.c: 27: kd += ckd;
  2863  0013F8  C0E9  F02C         	movff	_kd,___ftadd@f1
  2864  0013FC  C0EA  F02D         	movff	_kd+1,___ftadd@f1+1
  2865  001400  C0EB  F02E         	movff	_kd+2,___ftadd@f1+2
  2866  001404  C0E6  F02F         	movff	_ckd,___ftadd@f2
  2867  001408  C0E7  F030         	movff	_ckd+1,___ftadd@f2+1
  2868  00140C  C0E8  F031         	movff	_ckd+2,___ftadd@f2+2
  2869  001410  EC54  F00B         	call	___ftadd	;wreg free
  2870  001414  C02C  F0E9         	movff	?___ftadd,_kd
  2871  001418  C02D  F0EA         	movff	?___ftadd+1,_kd+1
  2872  00141C  C02E  F0EB         	movff	?___ftadd+2,_kd+2
  2873                           
  2874                           ;twiddle.c: 28: }else if(intern == 1){
  2875  001420  0012               	return	
  2876  001422                     l4085:
  2877  001422  0448               	decf	_intern,w,c
  2878  001424  1049               	iorwf	_intern+1,w,c
  2879  001426  A4D8               	btfss	status,2,c
  2880  001428  D09E               	goto	l4107
  2881                           
  2882                           ;twiddle.c: 29: if (time[2] > 500){
  2883  00142A  0100               	movlb	0	; () banked
  2884  00142C  BF6B               	btfsc	(_time+11)& (0+255),7,b
  2885  00142E  0012               	return	
  2886  001430  0100               	movlb	0	; () banked
  2887  001432  516B               	movf	(_time+11)& (0+255),w,b
  2888  001434  0100               	movlb	0	; () banked
  2889  001436  116A               	iorwf	(_time+10)& (0+255),w,b
  2890  001438  E108               	bnz	u4890
  2891  00143A  0EF5               	movlw	245
  2892  00143C  0100               	movlb	0	; () banked
  2893  00143E  5D68               	subwf	(_time+8)& (0+255),w,b
  2894  001440  0E01               	movlw	1
  2895  001442  0100               	movlb	0	; () banked
  2896  001444  5969               	subwfb	(_time+9)& (0+255),w,b
  2897  001446  A0D8               	btfss	status,0,c
  2898  001448  0012               	return	
  2899  00144A                     u4890:
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;twiddle.c: 30: if (lp > 0 ? (lp) : (-lp) > best_err){
  2903  00144A  0100               	movlb	0	; () banked
  2904  00144C  BF8B               	btfsc	(_lp+1)& (0+255),7,b
  2905  00144E  D007               	goto	l4091
  2906  001450  0100               	movlb	0	; () banked
  2907  001452  518B               	movf	(_lp+1)& (0+255),w,b
  2908  001454  E122               	bnz	l396
  2909  001456  0100               	movlb	0	; () banked
  2910  001458  058A               	decf	_lp& (0+255),w,b
  2911  00145A  B0D8               	btfsc	status,0,c
  2912  00145C  D01E               	goto	l396
  2913  00145E                     l4091:
  2914                           
  2915                           ; BSR set to: 0
  2916  00145E  C08A  F0B0         	movff	_lp,??_twiddle_update
  2917  001462  C08B  F0B1         	movff	_lp+1,??_twiddle_update+1
  2918  001466  0100               	movlb	0	; () banked
  2919  001468  1FB0               	comf	??_twiddle_update& (0+255),f,b
  2920  00146A  1FB1               	comf	(??_twiddle_update+1)& (0+255),f,b
  2921  00146C  4BB0               	infsnz	??_twiddle_update& (0+255),f,b
  2922  00146E  2BB1               	incf	(??_twiddle_update+1)& (0+255),f,b
  2923  001470  0100               	movlb	0	; () banked
  2924  001472  51B0               	movf	??_twiddle_update& (0+255),w,b
  2925  001474  5C4A               	subwf	_best_err,w,c
  2926  001476  504B               	movf	_best_err+1,w,c
  2927  001478  0A80               	xorlw	128
  2928  00147A  0100               	movlb	0	; () banked
  2929  00147C  6FB2               	movwf	(??_twiddle_update+2)& (0+255),b
  2930  00147E  0100               	movlb	0	; () banked
  2931  001480  51B1               	movf	(??_twiddle_update+1)& (0+255),w,b
  2932  001482  0A80               	xorlw	128
  2933  001484  0100               	movlb	0	; () banked
  2934  001486  59B2               	subwfb	(??_twiddle_update+2)& (0+255),w,b
  2935  001488  B0D8               	btfsc	status,0,c
  2936  00148A  D002               	goto	u4910
  2937  00148C  0E01               	movlw	1
  2938  00148E  D001               	goto	u4920
  2939  001490                     u4910:
  2940  001490  0E00               	movlw	0
  2941  001492                     u4920:
  2942  001492  0100               	movlb	0	; () banked
  2943  001494  6FB3               	movwf	_twiddle_update$1718& (0+255),b
  2944  001496  6BB4               	clrf	(_twiddle_update$1718+1)& (0+255),b
  2945  001498  D004               	goto	l4093
  2946  00149A                     l396:
  2947                           
  2948                           ; BSR set to: 0
  2949  00149A  C08A  F0B3         	movff	_lp,_twiddle_update$1718
  2950  00149E  C08B  F0B4         	movff	_lp+1,_twiddle_update$1718+1
  2951  0014A2                     l4093:
  2952                           
  2953                           ; BSR set to: 0
  2954  0014A2  0100               	movlb	0	; () banked
  2955  0014A4  51B3               	movf	_twiddle_update$1718& (0+255),w,b
  2956  0014A6  0100               	movlb	0	; () banked
  2957  0014A8  11B4               	iorwf	(_twiddle_update$1718+1)& (0+255),w,b
  2958  0014AA  B4D8               	btfsc	status,2,c
  2959  0014AC  D035               	goto	l4103
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;twiddle.c: 31: best_err = lp > 0 ? (lp) : (-lp);
  2963  0014AE  0100               	movlb	0	; () banked
  2964  0014B0  BF8B               	btfsc	(_lp+1)& (0+255),7,b
  2965  0014B2  D007               	goto	l4097
  2966  0014B4  0100               	movlb	0	; () banked
  2967  0014B6  518B               	movf	(_lp+1)& (0+255),w,b
  2968  0014B8  E112               	bnz	l400
  2969  0014BA  0100               	movlb	0	; () banked
  2970  0014BC  058A               	decf	_lp& (0+255),w,b
  2971  0014BE  B0D8               	btfsc	status,0,c
  2972  0014C0  D00E               	goto	l400
  2973  0014C2                     l4097:
  2974                           
  2975                           ; BSR set to: 0
  2976  0014C2  C08A  F0B0         	movff	_lp,??_twiddle_update
  2977  0014C6  C08B  F0B1         	movff	_lp+1,??_twiddle_update+1
  2978  0014CA  0100               	movlb	0	; () banked
  2979  0014CC  1FB0               	comf	??_twiddle_update& (0+255),f,b
  2980  0014CE  1FB1               	comf	(??_twiddle_update+1)& (0+255),f,b
  2981  0014D0  4BB0               	infsnz	??_twiddle_update& (0+255),f,b
  2982  0014D2  2BB1               	incf	(??_twiddle_update+1)& (0+255),f,b
  2983  0014D4  C0B0  F04A         	movff	??_twiddle_update,_best_err
  2984  0014D8  C0B1  F04B         	movff	??_twiddle_update+1,_best_err+1
  2985  0014DC  D004               	goto	l4099
  2986  0014DE                     l400:
  2987                           
  2988                           ; BSR set to: 0
  2989  0014DE  C08A  F04A         	movff	_lp,_best_err
  2990  0014E2  C08B  F04B         	movff	_lp+1,_best_err+1
  2991  0014E6                     l4099:
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;twiddle.c: 32: ckd *= 1.1;
  2995  0014E6  C0E6  F01D         	movff	_ckd,___ftmul@f1
  2996  0014EA  C0E7  F01E         	movff	_ckd+1,___ftmul@f1+1
  2997  0014EE  C0E8  F01F         	movff	_ckd+2,___ftmul@f1+2
  2998  0014F2  0ECD               	movlw	205
  2999  0014F4  6E20               	movwf	___ftmul@f2,c
  3000  0014F6  0E8C               	movlw	140
  3001  0014F8  6E21               	movwf	___ftmul@f2+1,c
  3002  0014FA  0E3F               	movlw	63
  3003  0014FC  6E22               	movwf	___ftmul@f2+2,c
  3004  0014FE  ECC1  F00C         	call	___ftmul	;wreg free
  3005  001502  C01D  F0E6         	movff	?___ftmul,_ckd
  3006  001506  C01E  F0E7         	movff	?___ftmul+1,_ckd+1
  3007  00150A  C01F  F0E8         	movff	?___ftmul+2,_ckd+2
  3008                           
  3009                           ;twiddle.c: 33: intern = 0;
  3010  00150E  0E00               	movlw	0
  3011  001510  6E49               	movwf	_intern+1,c
  3012  001512  0E00               	movlw	0
  3013  001514  6E48               	movwf	_intern,c
  3014                           
  3015                           ;twiddle.c: 34: }else{
  3016  001516  0012               	return	
  3017  001518                     l4103:
  3018                           
  3019                           ;twiddle.c: 35: kd -= 2 * ckd;
  3020  001518  C0E9  F038         	movff	_kd,___ftsub@f1
  3021  00151C  C0EA  F039         	movff	_kd+1,___ftsub@f1+1
  3022  001520  C0EB  F03A         	movff	_kd+2,___ftsub@f1+2
  3023  001524  0E00               	movlw	0
  3024  001526  6E20               	movwf	___ftmul@f2,c
  3025  001528  0E00               	movlw	0
  3026  00152A  6E21               	movwf	___ftmul@f2+1,c
  3027  00152C  0E40               	movlw	64
  3028  00152E  6E22               	movwf	___ftmul@f2+2,c
  3029  001530  C0E6  F01D         	movff	_ckd,___ftmul@f1
  3030  001534  C0E7  F01E         	movff	_ckd+1,___ftmul@f1+1
  3031  001538  C0E8  F01F         	movff	_ckd+2,___ftmul@f1+2
  3032  00153C  ECC1  F00C         	call	___ftmul	;wreg free
  3033  001540  C01D  F03B         	movff	?___ftmul,___ftsub@f2
  3034  001544  C01E  F03C         	movff	?___ftmul+1,___ftsub@f2+1
  3035  001548  C01F  F03D         	movff	?___ftmul+2,___ftsub@f2+2
  3036  00154C  EC1F  F011         	call	___ftsub	;wreg free
  3037  001550  C038  F0E9         	movff	?___ftsub,_kd
  3038  001554  C039  F0EA         	movff	?___ftsub+1,_kd+1
  3039  001558  C03A  F0EB         	movff	?___ftsub+2,_kd+2
  3040                           
  3041                           ;twiddle.c: 36: intern = 2;
  3042  00155C  0E00               	movlw	0
  3043  00155E  6E49               	movwf	_intern+1,c
  3044  001560  0E02               	movlw	2
  3045  001562  6E48               	movwf	_intern,c
  3046                           
  3047                           ;twiddle.c: 37: }
  3048                           ;twiddle.c: 38: }
  3049                           ;twiddle.c: 39: }else if(intern == 2){
  3050  001564  0012               	return	
  3051  001566                     l4107:
  3052  001566  0E02               	movlw	2
  3053  001568  1848               	xorwf	_intern,w,c
  3054  00156A  1049               	iorwf	_intern+1,w,c
  3055  00156C  A4D8               	btfss	status,2,c
  3056  00156E  0012               	return	
  3057                           
  3058                           ;twiddle.c: 40: if (time[2] > 1000){
  3059  001570  0100               	movlb	0	; () banked
  3060  001572  BF6B               	btfsc	(_time+11)& (0+255),7,b
  3061  001574  0012               	return	
  3062  001576  0100               	movlb	0	; () banked
  3063  001578  516B               	movf	(_time+11)& (0+255),w,b
  3064  00157A  0100               	movlb	0	; () banked
  3065  00157C  116A               	iorwf	(_time+10)& (0+255),w,b
  3066  00157E  E108               	bnz	u4960
  3067  001580  0EE9               	movlw	233
  3068  001582  0100               	movlb	0	; () banked
  3069  001584  5D68               	subwf	(_time+8)& (0+255),w,b
  3070  001586  0E03               	movlw	3
  3071  001588  0100               	movlb	0	; () banked
  3072  00158A  5969               	subwfb	(_time+9)& (0+255),w,b
  3073  00158C  A0D8               	btfss	status,0,c
  3074  00158E  0012               	return	
  3075  001590                     u4960:
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;twiddle.c: 41: if (lp > 0 ? (lp) : (-lp) > best_err){
  3079  001590  0100               	movlb	0	; () banked
  3080  001592  BF8B               	btfsc	(_lp+1)& (0+255),7,b
  3081  001594  D007               	goto	l4113
  3082  001596  0100               	movlb	0	; () banked
  3083  001598  518B               	movf	(_lp+1)& (0+255),w,b
  3084  00159A  E122               	bnz	l409
  3085  00159C  0100               	movlb	0	; () banked
  3086  00159E  058A               	decf	_lp& (0+255),w,b
  3087  0015A0  B0D8               	btfsc	status,0,c
  3088  0015A2  D01E               	goto	l409
  3089  0015A4                     l4113:
  3090                           
  3091                           ; BSR set to: 0
  3092  0015A4  C08A  F0B0         	movff	_lp,??_twiddle_update
  3093  0015A8  C08B  F0B1         	movff	_lp+1,??_twiddle_update+1
  3094  0015AC  0100               	movlb	0	; () banked
  3095  0015AE  1FB0               	comf	??_twiddle_update& (0+255),f,b
  3096  0015B0  1FB1               	comf	(??_twiddle_update+1)& (0+255),f,b
  3097  0015B2  4BB0               	infsnz	??_twiddle_update& (0+255),f,b
  3098  0015B4  2BB1               	incf	(??_twiddle_update+1)& (0+255),f,b
  3099  0015B6  0100               	movlb	0	; () banked
  3100  0015B8  51B0               	movf	??_twiddle_update& (0+255),w,b
  3101  0015BA  5C4A               	subwf	_best_err,w,c
  3102  0015BC  504B               	movf	_best_err+1,w,c
  3103  0015BE  0A80               	xorlw	128
  3104  0015C0  0100               	movlb	0	; () banked
  3105  0015C2  6FB2               	movwf	(??_twiddle_update+2)& (0+255),b
  3106  0015C4  0100               	movlb	0	; () banked
  3107  0015C6  51B1               	movf	(??_twiddle_update+1)& (0+255),w,b
  3108  0015C8  0A80               	xorlw	128
  3109  0015CA  0100               	movlb	0	; () banked
  3110  0015CC  59B2               	subwfb	(??_twiddle_update+2)& (0+255),w,b
  3111  0015CE  B0D8               	btfsc	status,0,c
  3112  0015D0  D002               	goto	u4980
  3113  0015D2  0E01               	movlw	1
  3114  0015D4  D001               	goto	u4990
  3115  0015D6                     u4980:
  3116  0015D6  0E00               	movlw	0
  3117  0015D8                     u4990:
  3118  0015D8  0100               	movlb	0	; () banked
  3119  0015DA  6FB5               	movwf	_twiddle_update$1719& (0+255),b
  3120  0015DC  6BB6               	clrf	(_twiddle_update$1719+1)& (0+255),b
  3121  0015DE  D004               	goto	l4115
  3122  0015E0                     l409:
  3123                           
  3124                           ; BSR set to: 0
  3125  0015E0  C08A  F0B5         	movff	_lp,_twiddle_update$1719
  3126  0015E4  C08B  F0B6         	movff	_lp+1,_twiddle_update$1719+1
  3127  0015E8                     l4115:
  3128                           
  3129                           ; BSR set to: 0
  3130  0015E8  0100               	movlb	0	; () banked
  3131  0015EA  51B5               	movf	_twiddle_update$1719& (0+255),w,b
  3132  0015EC  0100               	movlb	0	; () banked
  3133  0015EE  11B6               	iorwf	(_twiddle_update$1719+1)& (0+255),w,b
  3134  0015F0  B4D8               	btfsc	status,2,c
  3135  0015F2  D031               	goto	l4123
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;twiddle.c: 42: best_err = lp > 0 ? (lp) : (-lp);
  3139  0015F4  0100               	movlb	0	; () banked
  3140  0015F6  BF8B               	btfsc	(_lp+1)& (0+255),7,b
  3141  0015F8  D007               	goto	l4119
  3142  0015FA  0100               	movlb	0	; () banked
  3143  0015FC  518B               	movf	(_lp+1)& (0+255),w,b
  3144  0015FE  E112               	bnz	l413
  3145  001600  0100               	movlb	0	; () banked
  3146  001602  058A               	decf	_lp& (0+255),w,b
  3147  001604  B0D8               	btfsc	status,0,c
  3148  001606  D00E               	goto	l413
  3149  001608                     l4119:
  3150                           
  3151                           ; BSR set to: 0
  3152  001608  C08A  F0B0         	movff	_lp,??_twiddle_update
  3153  00160C  C08B  F0B1         	movff	_lp+1,??_twiddle_update+1
  3154  001610  0100               	movlb	0	; () banked
  3155  001612  1FB0               	comf	??_twiddle_update& (0+255),f,b
  3156  001614  1FB1               	comf	(??_twiddle_update+1)& (0+255),f,b
  3157  001616  4BB0               	infsnz	??_twiddle_update& (0+255),f,b
  3158  001618  2BB1               	incf	(??_twiddle_update+1)& (0+255),f,b
  3159  00161A  C0B0  F04A         	movff	??_twiddle_update,_best_err
  3160  00161E  C0B1  F04B         	movff	??_twiddle_update+1,_best_err+1
  3161  001622  D004               	goto	l4121
  3162  001624                     l413:
  3163                           
  3164                           ; BSR set to: 0
  3165  001624  C08A  F04A         	movff	_lp,_best_err
  3166  001628  C08B  F04B         	movff	_lp+1,_best_err+1
  3167  00162C                     l4121:
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;twiddle.c: 43: ckd *= 1.05;
  3171  00162C  C0E6  F01D         	movff	_ckd,___ftmul@f1
  3172  001630  C0E7  F01E         	movff	_ckd+1,___ftmul@f1+1
  3173  001634  C0E8  F01F         	movff	_ckd+2,___ftmul@f1+2
  3174  001638  0E66               	movlw	102
  3175  00163A  6E20               	movwf	___ftmul@f2,c
  3176  00163C  0E86               	movlw	134
  3177  00163E  6E21               	movwf	___ftmul@f2+1,c
  3178  001640  0E3F               	movlw	63
  3179  001642  6E22               	movwf	___ftmul@f2+2,c
  3180  001644  ECC1  F00C         	call	___ftmul	;wreg free
  3181  001648  C01D  F0E6         	movff	?___ftmul,_ckd
  3182  00164C  C01E  F0E7         	movff	?___ftmul+1,_ckd+1
  3183  001650  C01F  F0E8         	movff	?___ftmul+2,_ckd+2
  3184                           
  3185                           ;twiddle.c: 44: }else{
  3186  001654  0012               	return	
  3187  001656                     l4123:
  3188                           
  3189                           ;twiddle.c: 45: kd += ckd;
  3190  001656  C0E9  F02C         	movff	_kd,___ftadd@f1
  3191  00165A  C0EA  F02D         	movff	_kd+1,___ftadd@f1+1
  3192  00165E  C0EB  F02E         	movff	_kd+2,___ftadd@f1+2
  3193  001662  C0E6  F02F         	movff	_ckd,___ftadd@f2
  3194  001666  C0E7  F030         	movff	_ckd+1,___ftadd@f2+1
  3195  00166A  C0E8  F031         	movff	_ckd+2,___ftadd@f2+2
  3196  00166E  EC54  F00B         	call	___ftadd	;wreg free
  3197  001672  C02C  F0E9         	movff	?___ftadd,_kd
  3198  001676  C02D  F0EA         	movff	?___ftadd+1,_kd+1
  3199  00167A  C02E  F0EB         	movff	?___ftadd+2,_kd+2
  3200                           
  3201                           ;twiddle.c: 46: ckd *= 0.95;
  3202  00167E  C0E6  F01D         	movff	_ckd,___ftmul@f1
  3203  001682  C0E7  F01E         	movff	_ckd+1,___ftmul@f1+1
  3204  001686  C0E8  F01F         	movff	_ckd+2,___ftmul@f1+2
  3205  00168A  0E33               	movlw	51
  3206  00168C  6E20               	movwf	___ftmul@f2,c
  3207  00168E  0E73               	movlw	115
  3208  001690  6E21               	movwf	___ftmul@f2+1,c
  3209  001692  0E3F               	movlw	63
  3210  001694  6E22               	movwf	___ftmul@f2+2,c
  3211  001696  ECC1  F00C         	call	___ftmul	;wreg free
  3212  00169A  C01D  F0E6         	movff	?___ftmul,_ckd
  3213  00169E  C01E  F0E7         	movff	?___ftmul+1,_ckd+1
  3214  0016A2  C01F  F0E8         	movff	?___ftmul+2,_ckd+2
  3215  0016A6  0012               	return	
  3216  0016A8                     __end_of_twiddle_update:
  3217                           	opt stack 0
  3218                           tblptru	equ	0xFF8
  3219                           tblptrh	equ	0xFF7
  3220                           tblptrl	equ	0xFF6
  3221                           tablat	equ	0xFF5
  3222                           postinc0	equ	0xFEE
  3223                           wreg	equ	0xFE8
  3224                           postdec1	equ	0xFE5
  3225                           fsr1l	equ	0xFE1
  3226                           postinc2	equ	0xFDE
  3227                           postdec2	equ	0xFDD
  3228                           fsr2h	equ	0xFDA
  3229                           fsr2l	equ	0xFD9
  3230                           status	equ	0xFD8
  3231                           
  3232 ;; *************** function ___ftsub *****************
  3233 ;; Defined at:
  3234 ;;		line 20 in file "/opt/microchip/xc8/v1.41/sources/common/ftsub.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;  f1              3   55[COMRAM] float 
  3237 ;;  f2              3   58[COMRAM] float 
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;		None
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  3   55[COMRAM] float 
  3242 ;; Registers used:
  3243 ;;		wreg, status,2, status,0, cstack
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3249 ;;      Params:         6       0       0       0       0       0       0       0       0
  3250 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3251 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3252 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3253 ;;Total ram usage:        6 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; Hardware stack levels required when called:    3
  3256 ;; This function calls:
  3257 ;;		___ftadd
  3258 ;; This function is called by:
  3259 ;;		_twiddle_update
  3260 ;; This function uses a non-reentrant model
  3261 ;;
  3262                           
  3263                           	psect	text2
  3264  00223E                     __ptext2:
  3265                           	opt stack 0
  3266  00223E                     ___ftsub:
  3267                           	opt stack 26
  3268                           
  3269                           ;incstack = 0
  3270  00223E  503B               	movf	___ftsub@f2,w,c
  3271  002240  103C               	iorwf	___ftsub@f2+1,w,c
  3272  002242  103D               	iorwf	___ftsub@f2+2,w,c
  3273  002244  B4D8               	btfsc	status,2,c
  3274  002246  D006               	goto	l3703
  3275  002248  0E00               	movlw	0
  3276  00224A  1A3B               	xorwf	___ftsub@f2,f,c
  3277  00224C  0E00               	movlw	0
  3278  00224E  1A3C               	xorwf	___ftsub@f2+1,f,c
  3279  002250  0E80               	movlw	128
  3280  002252  1A3D               	xorwf	___ftsub@f2+2,f,c
  3281  002254                     l3703:
  3282  002254  C038  F02C         	movff	___ftsub@f1,___ftadd@f1
  3283  002258  C039  F02D         	movff	___ftsub@f1+1,___ftadd@f1+1
  3284  00225C  C03A  F02E         	movff	___ftsub@f1+2,___ftadd@f1+2
  3285  002260  C03B  F02F         	movff	___ftsub@f2,___ftadd@f2
  3286  002264  C03C  F030         	movff	___ftsub@f2+1,___ftadd@f2+1
  3287  002268  C03D  F031         	movff	___ftsub@f2+2,___ftadd@f2+2
  3288  00226C  EC54  F00B         	call	___ftadd	;wreg free
  3289  002270  C02C  F038         	movff	?___ftadd,?___ftsub
  3290  002274  C02D  F039         	movff	?___ftadd+1,?___ftsub+1
  3291  002278  C02E  F03A         	movff	?___ftadd+2,?___ftsub+2
  3292  00227C  0012               	return	
  3293  00227E                     __end_of___ftsub:
  3294                           	opt stack 0
  3295                           tblptru	equ	0xFF8
  3296                           tblptrh	equ	0xFF7
  3297                           tblptrl	equ	0xFF6
  3298                           tablat	equ	0xFF5
  3299                           postinc0	equ	0xFEE
  3300                           wreg	equ	0xFE8
  3301                           postdec1	equ	0xFE5
  3302                           fsr1l	equ	0xFE1
  3303                           postinc2	equ	0xFDE
  3304                           postdec2	equ	0xFDD
  3305                           fsr2h	equ	0xFDA
  3306                           fsr2l	equ	0xFD9
  3307                           status	equ	0xFD8
  3308                           
  3309 ;; *************** function ___ftadd *****************
  3310 ;; Defined at:
  3311 ;;		line 86 in file "/opt/microchip/xc8/v1.41/sources/common/ftadd.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;  f1              3   43[COMRAM] float 
  3314 ;;  f2              3   46[COMRAM] float 
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;  exp1            1   54[COMRAM] unsigned char 
  3317 ;;  exp2            1   53[COMRAM] unsigned char 
  3318 ;;  sign            1   52[COMRAM] unsigned char 
  3319 ;; Return value:  Size  Location     Type
  3320 ;;                  3   43[COMRAM] float 
  3321 ;; Registers used:
  3322 ;;		wreg, status,2, status,0, cstack
  3323 ;; Tracked objects:
  3324 ;;		On entry : 0/0
  3325 ;;		On exit  : 0/0
  3326 ;;		Unchanged: 0/0
  3327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3328 ;;      Params:         6       0       0       0       0       0       0       0       0
  3329 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3330 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3331 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3332 ;;Total ram usage:       12 bytes
  3333 ;; Hardware stack levels used:    1
  3334 ;; Hardware stack levels required when called:    2
  3335 ;; This function calls:
  3336 ;;		___ftpack
  3337 ;; This function is called by:
  3338 ;;		_main
  3339 ;;		_twiddle_update
  3340 ;;		___ftsub
  3341 ;; This function uses a non-reentrant model
  3342 ;;
  3343                           
  3344                           	psect	text3
  3345  0016A8                     __ptext3:
  3346                           	opt stack 0
  3347  0016A8                     ___ftadd:
  3348                           	opt stack 26
  3349                           
  3350                           ;incstack = 0
  3351  0016A8  C02E  F032         	movff	___ftadd@f1+2,??___ftadd
  3352  0016AC  6A33               	clrf	(??___ftadd+1)& (0+255),c
  3353  0016AE  6A34               	clrf	(??___ftadd+2)& (0+255),c
  3354  0016B0  342D               	rlcf	___ftadd@f1+1,w,c
  3355  0016B2  3632               	rlcf	??___ftadd& (0+255),f,c
  3356  0016B4  E301               	bnc	u3811
  3357  0016B6  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  3358  0016B8                     u3811:
  3359  0016B8  5032               	movf	??___ftadd,w,c
  3360  0016BA  6E37               	movwf	___ftadd@exp1,c
  3361  0016BC  C031  F032         	movff	___ftadd@f2+2,??___ftadd
  3362  0016C0  6A33               	clrf	(??___ftadd+1)& (0+255),c
  3363  0016C2  6A34               	clrf	(??___ftadd+2)& (0+255),c
  3364  0016C4  3430               	rlcf	___ftadd@f2+1,w,c
  3365  0016C6  3632               	rlcf	??___ftadd& (0+255),f,c
  3366  0016C8  E301               	bnc	u3821
  3367  0016CA  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  3368  0016CC                     u3821:
  3369  0016CC  5032               	movf	??___ftadd,w,c
  3370  0016CE  6E36               	movwf	___ftadd@exp2,c
  3371  0016D0  5037               	movf	___ftadd@exp1,w,c
  3372  0016D2  B4D8               	btfsc	status,2,c
  3373  0016D4  D00B               	goto	l718
  3374  0016D6  5036               	movf	___ftadd@exp2,w,c
  3375  0016D8  5C37               	subwf	___ftadd@exp1,w,c
  3376  0016DA  B0D8               	btfsc	status,0,c
  3377  0016DC  D00E               	goto	l3413
  3378  0016DE  5037               	movf	___ftadd@exp1,w,c
  3379  0016E0  0800               	sublw	0
  3380  0016E2  2436               	addwf	___ftadd@exp2,w,c
  3381  0016E4  6E32               	movwf	??___ftadd& (0+255),c
  3382  0016E6  0E18               	movlw	24
  3383  0016E8  6432               	cpfsgt	??___ftadd,c
  3384  0016EA  D007               	goto	l3413
  3385  0016EC                     l718:
  3386  0016EC  C02F  F02C         	movff	___ftadd@f2,?___ftadd
  3387  0016F0  C030  F02D         	movff	___ftadd@f2+1,?___ftadd+1
  3388  0016F4  C031  F02E         	movff	___ftadd@f2+2,?___ftadd+2
  3389  0016F8  0012               	return	
  3390  0016FA                     l3413:
  3391  0016FA  5036               	movf	___ftadd@exp2,w,c
  3392  0016FC  B4D8               	btfsc	status,2,c
  3393  0016FE  D00B               	goto	l722
  3394  001700  5037               	movf	___ftadd@exp1,w,c
  3395  001702  5C36               	subwf	___ftadd@exp2,w,c
  3396  001704  B0D8               	btfsc	status,0,c
  3397  001706  D00E               	goto	l3419
  3398  001708  5036               	movf	___ftadd@exp2,w,c
  3399  00170A  0800               	sublw	0
  3400  00170C  2437               	addwf	___ftadd@exp1,w,c
  3401  00170E  6E32               	movwf	??___ftadd& (0+255),c
  3402  001710  0E18               	movlw	24
  3403  001712  6432               	cpfsgt	??___ftadd,c
  3404  001714  D007               	goto	l3419
  3405  001716                     l722:
  3406  001716  C02C  F02C         	movff	___ftadd@f1,?___ftadd
  3407  00171A  C02D  F02D         	movff	___ftadd@f1+1,?___ftadd+1
  3408  00171E  C02E  F02E         	movff	___ftadd@f1+2,?___ftadd+2
  3409  001722  0012               	return	
  3410  001724                     l3419:
  3411  001724  0E06               	movlw	6
  3412  001726  6E35               	movwf	___ftadd@sign,c
  3413  001728  BE2E               	btfsc	___ftadd@f1+2,7,c
  3414  00172A  8E35               	bsf	___ftadd@sign,7,c
  3415  00172C  BE31               	btfsc	___ftadd@f2+2,7,c
  3416  00172E  8C35               	bsf	___ftadd@sign,6,c
  3417  001730  8E2D               	bsf	___ftadd@f1+1,7,c
  3418  001732  0EFF               	movlw	255
  3419  001734  162C               	andwf	___ftadd@f1,f,c
  3420  001736  0EFF               	movlw	255
  3421  001738  162D               	andwf	___ftadd@f1+1,f,c
  3422  00173A  0E00               	movlw	0
  3423  00173C  162E               	andwf	___ftadd@f1+2,f,c
  3424  00173E  8E30               	bsf	___ftadd@f2+1,7,c
  3425  001740  0EFF               	movlw	255
  3426  001742  162F               	andwf	___ftadd@f2,f,c
  3427  001744  0EFF               	movlw	255
  3428  001746  1630               	andwf	___ftadd@f2+1,f,c
  3429  001748  0E00               	movlw	0
  3430  00174A  1631               	andwf	___ftadd@f2+2,f,c
  3431  00174C  5036               	movf	___ftadd@exp2,w,c
  3432  00174E  5C37               	subwf	___ftadd@exp1,w,c
  3433  001750  B0D8               	btfsc	status,0,c
  3434  001752  D01B               	goto	l3445
  3435  001754                     l3435:
  3436  001754  90D8               	bcf	status,0,c
  3437  001756  362F               	rlcf	___ftadd@f2,f,c
  3438  001758  3630               	rlcf	___ftadd@f2+1,f,c
  3439  00175A  3631               	rlcf	___ftadd@f2+2,f,c
  3440  00175C  0636               	decf	___ftadd@exp2,f,c
  3441  00175E  5037               	movf	___ftadd@exp1,w,c
  3442  001760  1836               	xorwf	___ftadd@exp2,w,c
  3443  001762  B4D8               	btfsc	status,2,c
  3444  001764  D00D               	goto	l3443
  3445  001766  0635               	decf	___ftadd@sign,f,c
  3446  001768  C035  F032         	movff	___ftadd@sign,??___ftadd
  3447  00176C  0E07               	movlw	7
  3448  00176E  1632               	andwf	??___ftadd,f,c
  3449  001770  B4D8               	btfsc	status,2,c
  3450  001772  D006               	goto	l3443
  3451  001774  D7EF               	goto	l3435
  3452  001776                     l3441:
  3453  001776  90D8               	bcf	status,0,c
  3454  001778  322E               	rrcf	___ftadd@f1+2,f,c
  3455  00177A  322D               	rrcf	___ftadd@f1+1,f,c
  3456  00177C  322C               	rrcf	___ftadd@f1,f,c
  3457  00177E  2A37               	incf	___ftadd@exp1,f,c
  3458  001780                     l3443:
  3459  001780  5036               	movf	___ftadd@exp2,w,c
  3460  001782  1837               	xorwf	___ftadd@exp1,w,c
  3461  001784  B4D8               	btfsc	status,2,c
  3462  001786  D01F               	goto	l733
  3463  001788  D7F6               	goto	l3441
  3464  00178A                     l3445:
  3465  00178A  5037               	movf	___ftadd@exp1,w,c
  3466  00178C  5C36               	subwf	___ftadd@exp2,w,c
  3467  00178E  B0D8               	btfsc	status,0,c
  3468  001790  D01A               	goto	l733
  3469  001792                     l3447:
  3470  001792  90D8               	bcf	status,0,c
  3471  001794  362C               	rlcf	___ftadd@f1,f,c
  3472  001796  362D               	rlcf	___ftadd@f1+1,f,c
  3473  001798  362E               	rlcf	___ftadd@f1+2,f,c
  3474  00179A  0637               	decf	___ftadd@exp1,f,c
  3475  00179C  5037               	movf	___ftadd@exp1,w,c
  3476  00179E  1836               	xorwf	___ftadd@exp2,w,c
  3477  0017A0  B4D8               	btfsc	status,2,c
  3478  0017A2  D00D               	goto	l3455
  3479  0017A4  0635               	decf	___ftadd@sign,f,c
  3480  0017A6  C035  F032         	movff	___ftadd@sign,??___ftadd
  3481  0017AA  0E07               	movlw	7
  3482  0017AC  1632               	andwf	??___ftadd,f,c
  3483  0017AE  B4D8               	btfsc	status,2,c
  3484  0017B0  D006               	goto	l3455
  3485  0017B2  D7EF               	goto	l3447
  3486  0017B4                     l3453:
  3487  0017B4  90D8               	bcf	status,0,c
  3488  0017B6  3231               	rrcf	___ftadd@f2+2,f,c
  3489  0017B8  3230               	rrcf	___ftadd@f2+1,f,c
  3490  0017BA  322F               	rrcf	___ftadd@f2,f,c
  3491  0017BC  2A36               	incf	___ftadd@exp2,f,c
  3492  0017BE                     l3455:
  3493  0017BE  5036               	movf	___ftadd@exp2,w,c
  3494  0017C0  1837               	xorwf	___ftadd@exp1,w,c
  3495  0017C2  A4D8               	btfss	status,2,c
  3496  0017C4  D7F7               	goto	l3453
  3497  0017C6                     l733:
  3498  0017C6  AE35               	btfss	___ftadd@sign,7,c
  3499  0017C8  D00C               	goto	l742
  3500  0017CA  0EFF               	movlw	255
  3501  0017CC  1A2C               	xorwf	___ftadd@f1,f,c
  3502  0017CE  0EFF               	movlw	255
  3503  0017D0  1A2D               	xorwf	___ftadd@f1+1,f,c
  3504  0017D2  0EFF               	movlw	255
  3505  0017D4  1A2E               	xorwf	___ftadd@f1+2,f,c
  3506  0017D6  0E01               	movlw	1
  3507  0017D8  262C               	addwf	___ftadd@f1,f,c
  3508  0017DA  0E00               	movlw	0
  3509  0017DC  222D               	addwfc	___ftadd@f1+1,f,c
  3510  0017DE  0E00               	movlw	0
  3511  0017E0  222E               	addwfc	___ftadd@f1+2,f,c
  3512  0017E2                     l742:
  3513  0017E2  AC35               	btfss	___ftadd@sign,6,c
  3514  0017E4  D00C               	goto	l3461
  3515  0017E6  0EFF               	movlw	255
  3516  0017E8  1A2F               	xorwf	___ftadd@f2,f,c
  3517  0017EA  0EFF               	movlw	255
  3518  0017EC  1A30               	xorwf	___ftadd@f2+1,f,c
  3519  0017EE  0EFF               	movlw	255
  3520  0017F0  1A31               	xorwf	___ftadd@f2+2,f,c
  3521  0017F2  0E01               	movlw	1
  3522  0017F4  262F               	addwf	___ftadd@f2,f,c
  3523  0017F6  0E00               	movlw	0
  3524  0017F8  2230               	addwfc	___ftadd@f2+1,f,c
  3525  0017FA  0E00               	movlw	0
  3526  0017FC  2231               	addwfc	___ftadd@f2+2,f,c
  3527  0017FE                     l3461:
  3528  0017FE  0E00               	movlw	0
  3529  001800  6E35               	movwf	___ftadd@sign,c
  3530  001802  502C               	movf	___ftadd@f1,w,c
  3531  001804  262F               	addwf	___ftadd@f2,f,c
  3532  001806  502D               	movf	___ftadd@f1+1,w,c
  3533  001808  2230               	addwfc	___ftadd@f2+1,f,c
  3534  00180A  502E               	movf	___ftadd@f1+2,w,c
  3535  00180C  2231               	addwfc	___ftadd@f2+2,f,c
  3536  00180E  AE31               	btfss	___ftadd@f2+2,7,c
  3537  001810  D00E               	goto	l3471
  3538  001812  0EFF               	movlw	255
  3539  001814  1A2F               	xorwf	___ftadd@f2,f,c
  3540  001816  0EFF               	movlw	255
  3541  001818  1A30               	xorwf	___ftadd@f2+1,f,c
  3542  00181A  0EFF               	movlw	255
  3543  00181C  1A31               	xorwf	___ftadd@f2+2,f,c
  3544  00181E  0E01               	movlw	1
  3545  001820  262F               	addwf	___ftadd@f2,f,c
  3546  001822  0E00               	movlw	0
  3547  001824  2230               	addwfc	___ftadd@f2+1,f,c
  3548  001826  0E00               	movlw	0
  3549  001828  2231               	addwfc	___ftadd@f2+2,f,c
  3550  00182A  0E01               	movlw	1
  3551  00182C  6E35               	movwf	___ftadd@sign,c
  3552  00182E                     l3471:
  3553  00182E  C02F  F011         	movff	___ftadd@f2,___ftpack@arg
  3554  001832  C030  F012         	movff	___ftadd@f2+1,___ftpack@arg+1
  3555  001836  C031  F013         	movff	___ftadd@f2+2,___ftpack@arg+2
  3556  00183A  C037  F014         	movff	___ftadd@exp1,___ftpack@exp
  3557  00183E  C035  F015         	movff	___ftadd@sign,___ftpack@sign
  3558  001842  EC07  F00E         	call	___ftpack	;wreg free
  3559  001846  C011  F02C         	movff	?___ftpack,?___ftadd
  3560  00184A  C012  F02D         	movff	?___ftpack+1,?___ftadd+1
  3561  00184E  C013  F02E         	movff	?___ftpack+2,?___ftadd+2
  3562  001852  0012               	return	
  3563  001854                     __end_of___ftadd:
  3564                           	opt stack 0
  3565                           tblptru	equ	0xFF8
  3566                           tblptrh	equ	0xFF7
  3567                           tblptrl	equ	0xFF6
  3568                           tablat	equ	0xFF5
  3569                           postinc0	equ	0xFEE
  3570                           wreg	equ	0xFE8
  3571                           postdec1	equ	0xFE5
  3572                           fsr1l	equ	0xFE1
  3573                           postinc2	equ	0xFDE
  3574                           postdec2	equ	0xFDD
  3575                           fsr2h	equ	0xFDA
  3576                           fsr2l	equ	0xFD9
  3577                           status	equ	0xFD8
  3578                           
  3579 ;; *************** function ___ftmul *****************
  3580 ;; Defined at:
  3581 ;;		line 62 in file "/opt/microchip/xc8/v1.41/sources/common/ftmul.c"
  3582 ;; Parameters:    Size  Location     Type
  3583 ;;  f1              3   28[COMRAM] float 
  3584 ;;  f2              3   31[COMRAM] float 
  3585 ;; Auto vars:     Size  Location     Type
  3586 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  3587 ;;  sign            1   42[COMRAM] unsigned char 
  3588 ;;  cntr            1   41[COMRAM] unsigned char 
  3589 ;;  exp             1   37[COMRAM] unsigned char 
  3590 ;; Return value:  Size  Location     Type
  3591 ;;                  3   28[COMRAM] float 
  3592 ;; Registers used:
  3593 ;;		wreg, status,2, status,0, cstack
  3594 ;; Tracked objects:
  3595 ;;		On entry : 0/0
  3596 ;;		On exit  : 0/0
  3597 ;;		Unchanged: 0/0
  3598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3599 ;;      Params:         6       0       0       0       0       0       0       0       0
  3600 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3601 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3602 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3603 ;;Total ram usage:       15 bytes
  3604 ;; Hardware stack levels used:    1
  3605 ;; Hardware stack levels required when called:    2
  3606 ;; This function calls:
  3607 ;;		___ftpack
  3608 ;; This function is called by:
  3609 ;;		_main
  3610 ;;		_twiddle_update
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           	psect	text4
  3615  001982                     __ptext4:
  3616                           	opt stack 0
  3617  001982                     ___ftmul:
  3618                           	opt stack 27
  3619                           
  3620                           ;incstack = 0
  3621  001982  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  3622  001986  6A24               	clrf	(??___ftmul+1)& (0+255),c
  3623  001988  6A25               	clrf	(??___ftmul+2)& (0+255),c
  3624  00198A  341E               	rlcf	___ftmul@f1+1,w,c
  3625  00198C  3623               	rlcf	??___ftmul& (0+255),f,c
  3626  00198E  E301               	bnc	u4291
  3627  001990  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  3628  001992                     u4291:
  3629  001992  5023               	movf	??___ftmul,w,c
  3630  001994  6E26               	movwf	___ftmul@exp,c
  3631  001996  5026               	movf	___ftmul@exp,w,c
  3632  001998  A4D8               	btfss	status,2,c
  3633  00199A  D007               	goto	l3657
  3634  00199C  0E00               	movlw	0
  3635  00199E  6E1D               	movwf	?___ftmul,c
  3636  0019A0  0E00               	movlw	0
  3637  0019A2  6E1E               	movwf	?___ftmul+1,c
  3638  0019A4  0E00               	movlw	0
  3639  0019A6  6E1F               	movwf	?___ftmul+2,c
  3640  0019A8  0012               	return	
  3641  0019AA                     l3657:
  3642  0019AA  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  3643  0019AE  6A24               	clrf	(??___ftmul+1)& (0+255),c
  3644  0019B0  6A25               	clrf	(??___ftmul+2)& (0+255),c
  3645  0019B2  3421               	rlcf	___ftmul@f2+1,w,c
  3646  0019B4  3623               	rlcf	??___ftmul& (0+255),f,c
  3647  0019B6  E301               	bnc	u4311
  3648  0019B8  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  3649  0019BA                     u4311:
  3650  0019BA  5023               	movf	??___ftmul,w,c
  3651  0019BC  6E2B               	movwf	___ftmul@sign,c
  3652  0019BE  502B               	movf	___ftmul@sign,w,c
  3653  0019C0  A4D8               	btfss	status,2,c
  3654  0019C2  D007               	goto	l3663
  3655  0019C4  0E00               	movlw	0
  3656  0019C6  6E1D               	movwf	?___ftmul,c
  3657  0019C8  0E00               	movlw	0
  3658  0019CA  6E1E               	movwf	?___ftmul+1,c
  3659  0019CC  0E00               	movlw	0
  3660  0019CE  6E1F               	movwf	?___ftmul+2,c
  3661  0019D0  0012               	return	
  3662  0019D2                     l3663:
  3663  0019D2  502B               	movf	___ftmul@sign,w,c
  3664  0019D4  0F7B               	addlw	123
  3665  0019D6  2626               	addwf	___ftmul@exp,f,c
  3666  0019D8  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  3667  0019DC  5022               	movf	___ftmul@f2+2,w,c
  3668  0019DE  1A2B               	xorwf	___ftmul@sign,f,c
  3669  0019E0  0E80               	movlw	128
  3670  0019E2  162B               	andwf	___ftmul@sign,f,c
  3671  0019E4  8E1E               	bsf	___ftmul@f1+1,7,c
  3672  0019E6  8E21               	bsf	___ftmul@f2+1,7,c
  3673  0019E8  0EFF               	movlw	255
  3674  0019EA  1620               	andwf	___ftmul@f2,f,c
  3675  0019EC  0EFF               	movlw	255
  3676  0019EE  1621               	andwf	___ftmul@f2+1,f,c
  3677  0019F0  0E00               	movlw	0
  3678  0019F2  1622               	andwf	___ftmul@f2+2,f,c
  3679  0019F4  0E00               	movlw	0
  3680  0019F6  6E27               	movwf	___ftmul@f3_as_product,c
  3681  0019F8  0E00               	movlw	0
  3682  0019FA  6E28               	movwf	___ftmul@f3_as_product+1,c
  3683  0019FC  0E00               	movlw	0
  3684  0019FE  6E29               	movwf	___ftmul@f3_as_product+2,c
  3685  001A00  0E07               	movlw	7
  3686  001A02  6E2A               	movwf	___ftmul@cntr,c
  3687  001A04                     l3677:
  3688  001A04  A01D               	btfss	___ftmul@f1,0,c
  3689  001A06  D006               	goto	l3681
  3690  001A08  5020               	movf	___ftmul@f2,w,c
  3691  001A0A  2627               	addwf	___ftmul@f3_as_product,f,c
  3692  001A0C  5021               	movf	___ftmul@f2+1,w,c
  3693  001A0E  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  3694  001A10  5022               	movf	___ftmul@f2+2,w,c
  3695  001A12  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  3696  001A14                     l3681:
  3697  001A14  90D8               	bcf	status,0,c
  3698  001A16  321F               	rrcf	___ftmul@f1+2,f,c
  3699  001A18  321E               	rrcf	___ftmul@f1+1,f,c
  3700  001A1A  321D               	rrcf	___ftmul@f1,f,c
  3701  001A1C  90D8               	bcf	status,0,c
  3702  001A1E  3620               	rlcf	___ftmul@f2,f,c
  3703  001A20  3621               	rlcf	___ftmul@f2+1,f,c
  3704  001A22  3622               	rlcf	___ftmul@f2+2,f,c
  3705  001A24  2E2A               	decfsz	___ftmul@cntr,f,c
  3706  001A26  D7EE               	goto	l3677
  3707  001A28  0E09               	movlw	9
  3708  001A2A  6E2A               	movwf	___ftmul@cntr,c
  3709  001A2C                     l3687:
  3710  001A2C  A01D               	btfss	___ftmul@f1,0,c
  3711  001A2E  D006               	goto	l3691
  3712  001A30  5020               	movf	___ftmul@f2,w,c
  3713  001A32  2627               	addwf	___ftmul@f3_as_product,f,c
  3714  001A34  5021               	movf	___ftmul@f2+1,w,c
  3715  001A36  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  3716  001A38  5022               	movf	___ftmul@f2+2,w,c
  3717  001A3A  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  3718  001A3C                     l3691:
  3719  001A3C  90D8               	bcf	status,0,c
  3720  001A3E  321F               	rrcf	___ftmul@f1+2,f,c
  3721  001A40  321E               	rrcf	___ftmul@f1+1,f,c
  3722  001A42  321D               	rrcf	___ftmul@f1,f,c
  3723  001A44  90D8               	bcf	status,0,c
  3724  001A46  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  3725  001A48  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  3726  001A4A  3227               	rrcf	___ftmul@f3_as_product,f,c
  3727  001A4C  2E2A               	decfsz	___ftmul@cntr,f,c
  3728  001A4E  D7EE               	goto	l3687
  3729  001A50  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  3730  001A54  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3731  001A58  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3732  001A5C  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  3733  001A60  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  3734  001A64  EC07  F00E         	call	___ftpack	;wreg free
  3735  001A68  C011  F01D         	movff	?___ftpack,?___ftmul
  3736  001A6C  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  3737  001A70  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  3738  001A74  0012               	return	
  3739  001A76                     __end_of___ftmul:
  3740                           	opt stack 0
  3741                           tblptru	equ	0xFF8
  3742                           tblptrh	equ	0xFF7
  3743                           tblptrl	equ	0xFF6
  3744                           tablat	equ	0xFF5
  3745                           postinc0	equ	0xFEE
  3746                           wreg	equ	0xFE8
  3747                           postdec1	equ	0xFE5
  3748                           fsr1l	equ	0xFE1
  3749                           postinc2	equ	0xFDE
  3750                           postdec2	equ	0xFDD
  3751                           fsr2h	equ	0xFDA
  3752                           fsr2l	equ	0xFD9
  3753                           status	equ	0xFD8
  3754                           
  3755 ;; *************** function _twidde_start *****************
  3756 ;; Defined at:
  3757 ;;		line 18 in file "twiddle.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;		None
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;		None
  3762 ;; Return value:  Size  Location     Type
  3763 ;;                  1    wreg      void 
  3764 ;; Registers used:
  3765 ;;		wreg, status,2
  3766 ;; Tracked objects:
  3767 ;;		On entry : 0/0
  3768 ;;		On exit  : 0/0
  3769 ;;		Unchanged: 0/0
  3770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3771 ;;      Params:         0       0       0       0       0       0       0       0       0
  3772 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3773 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3774 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3775 ;;Total ram usage:        0 bytes
  3776 ;; Hardware stack levels used:    1
  3777 ;; Hardware stack levels required when called:    1
  3778 ;; This function calls:
  3779 ;;		Nothing
  3780 ;; This function is called by:
  3781 ;;		_main
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           	psect	text5
  3786  00237E                     __ptext5:
  3787                           	opt stack 0
  3788  00237E                     _twidde_start:
  3789                           	opt stack 29
  3790                           
  3791                           ;twiddle.c: 19: time[2] = 0;
  3792                           
  3793                           ;incstack = 0
  3794  00237E  0E00               	movlw	0
  3795  002380  0100               	movlb	0	; () banked
  3796  002382  6F68               	movwf	(_time+8)& (0+255),b
  3797  002384  0E00               	movlw	0
  3798  002386  6F69               	movwf	(_time+9)& (0+255),b
  3799  002388  0E00               	movlw	0
  3800  00238A  6F6A               	movwf	(_time+10)& (0+255),b
  3801  00238C  0E00               	movlw	0
  3802  00238E  6F6B               	movwf	(_time+11)& (0+255),b
  3803                           
  3804                           ;twiddle.c: 20: intern = 0;
  3805  002390  0E00               	movlw	0
  3806  002392  6E49               	movwf	_intern+1,c
  3807  002394  0E00               	movlw	0
  3808  002396  6E48               	movwf	_intern,c
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;twiddle.c: 21: best_err = lp;
  3812  002398  C08A  F04A         	movff	_lp,_best_err
  3813  00239C  C08B  F04B         	movff	_lp+1,_best_err+1
  3814                           
  3815                           ; BSR set to: 0
  3816  0023A0  0012               	return		;funcret
  3817  0023A2                     __end_of_twidde_start:
  3818                           	opt stack 0
  3819                           tblptru	equ	0xFF8
  3820                           tblptrh	equ	0xFF7
  3821                           tblptrl	equ	0xFF6
  3822                           tablat	equ	0xFF5
  3823                           postinc0	equ	0xFEE
  3824                           wreg	equ	0xFE8
  3825                           postdec1	equ	0xFE5
  3826                           fsr1l	equ	0xFE1
  3827                           postinc2	equ	0xFDE
  3828                           postdec2	equ	0xFDD
  3829                           fsr2h	equ	0xFDA
  3830                           fsr2l	equ	0xFD9
  3831                           status	equ	0xFD8
  3832                           
  3833 ;; *************** function _setD *****************
  3834 ;; Defined at:
  3835 ;;		line 24 in file "utils.c"
  3836 ;; Parameters:    Size  Location     Type
  3837 ;;		None
  3838 ;; Auto vars:     Size  Location     Type
  3839 ;;		None
  3840 ;; Return value:  Size  Location     Type
  3841 ;;                  1    wreg      void 
  3842 ;; Registers used:
  3843 ;;		None
  3844 ;; Tracked objects:
  3845 ;;		On entry : 0/0
  3846 ;;		On exit  : 0/0
  3847 ;;		Unchanged: 0/0
  3848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3849 ;;      Params:         0       0       0       0       0       0       0       0       0
  3850 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3851 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3852 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3853 ;;Total ram usage:        0 bytes
  3854 ;; Hardware stack levels used:    1
  3855 ;; Hardware stack levels required when called:    1
  3856 ;; This function calls:
  3857 ;;		Nothing
  3858 ;; This function is called by:
  3859 ;;		_main
  3860 ;; This function uses a non-reentrant model
  3861 ;;
  3862                           
  3863                           	psect	text6
  3864  00244E                     __ptext6:
  3865                           	opt stack 0
  3866  00244E                     _setD:
  3867                           	opt stack 29
  3868                           
  3869                           ;utils.c: 25: PORTBbits.RB4 = 0;
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;incstack = 0
  3873  00244E  9881               	bcf	3969,4,c	;volatile
  3874                           
  3875                           ;utils.c: 26: PORTCbits.RC1 = 0;
  3876  002450  9282               	bcf	3970,1,c	;volatile
  3877                           
  3878                           ;utils.c: 27: PORTDbits.RD2 = 0;
  3879  002452  9483               	bcf	3971,2,c	;volatile
  3880                           
  3881                           ;utils.c: 28: PORTAbits.RA4 = 1;
  3882  002454  8880               	bsf	3968,4,c	;volatile
  3883  002456  0012               	return		;funcret
  3884  002458                     __end_of_setD:
  3885                           	opt stack 0
  3886                           tblptru	equ	0xFF8
  3887                           tblptrh	equ	0xFF7
  3888                           tblptrl	equ	0xFF6
  3889                           tablat	equ	0xFF5
  3890                           postinc0	equ	0xFEE
  3891                           wreg	equ	0xFE8
  3892                           postdec1	equ	0xFE5
  3893                           fsr1l	equ	0xFE1
  3894                           postinc2	equ	0xFDE
  3895                           postdec2	equ	0xFDD
  3896                           fsr2h	equ	0xFDA
  3897                           fsr2l	equ	0xFD9
  3898                           status	equ	0xFD8
  3899                           
  3900 ;; *************** function _setC *****************
  3901 ;; Defined at:
  3902 ;;		line 18 in file "utils.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;		None
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;		None
  3907 ;; Return value:  Size  Location     Type
  3908 ;;                  1    wreg      void 
  3909 ;; Registers used:
  3910 ;;		None
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3916 ;;      Params:         0       0       0       0       0       0       0       0       0
  3917 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3918 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3919 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3920 ;;Total ram usage:        0 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; Hardware stack levels required when called:    1
  3923 ;; This function calls:
  3924 ;;		Nothing
  3925 ;; This function is called by:
  3926 ;;		_main
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           	psect	text7
  3931  002458                     __ptext7:
  3932                           	opt stack 0
  3933  002458                     _setC:
  3934                           	opt stack 29
  3935                           
  3936                           ;utils.c: 19: PORTBbits.RB4 = 0;
  3937                           
  3938                           ;incstack = 0
  3939  002458  9881               	bcf	3969,4,c	;volatile
  3940                           
  3941                           ;utils.c: 20: PORTCbits.RC1 = 0;
  3942  00245A  9282               	bcf	3970,1,c	;volatile
  3943                           
  3944                           ;utils.c: 21: PORTDbits.RD2 = 1;
  3945  00245C  8483               	bsf	3971,2,c	;volatile
  3946                           
  3947                           ;utils.c: 22: PORTAbits.RA4 = 0;
  3948  00245E  9880               	bcf	3968,4,c	;volatile
  3949  002460  0012               	return		;funcret
  3950  002462                     __end_of_setC:
  3951                           	opt stack 0
  3952                           tblptru	equ	0xFF8
  3953                           tblptrh	equ	0xFF7
  3954                           tblptrl	equ	0xFF6
  3955                           tablat	equ	0xFF5
  3956                           postinc0	equ	0xFEE
  3957                           wreg	equ	0xFE8
  3958                           postdec1	equ	0xFE5
  3959                           fsr1l	equ	0xFE1
  3960                           postinc2	equ	0xFDE
  3961                           postdec2	equ	0xFDD
  3962                           fsr2h	equ	0xFDA
  3963                           fsr2l	equ	0xFD9
  3964                           status	equ	0xFD8
  3965                           
  3966 ;; *************** function _setB *****************
  3967 ;; Defined at:
  3968 ;;		line 12 in file "utils.c"
  3969 ;; Parameters:    Size  Location     Type
  3970 ;;		None
  3971 ;; Auto vars:     Size  Location     Type
  3972 ;;		None
  3973 ;; Return value:  Size  Location     Type
  3974 ;;                  1    wreg      void 
  3975 ;; Registers used:
  3976 ;;		None
  3977 ;; Tracked objects:
  3978 ;;		On entry : 0/0
  3979 ;;		On exit  : 0/0
  3980 ;;		Unchanged: 0/0
  3981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3982 ;;      Params:         0       0       0       0       0       0       0       0       0
  3983 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3984 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3985 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3986 ;;Total ram usage:        0 bytes
  3987 ;; Hardware stack levels used:    1
  3988 ;; Hardware stack levels required when called:    1
  3989 ;; This function calls:
  3990 ;;		Nothing
  3991 ;; This function is called by:
  3992 ;;		_main
  3993 ;; This function uses a non-reentrant model
  3994 ;;
  3995                           
  3996                           	psect	text8
  3997  002462                     __ptext8:
  3998                           	opt stack 0
  3999  002462                     _setB:
  4000                           	opt stack 29
  4001                           
  4002                           ;utils.c: 13: PORTBbits.RB4 = 0;
  4003                           
  4004                           ;incstack = 0
  4005  002462  9881               	bcf	3969,4,c	;volatile
  4006                           
  4007                           ;utils.c: 14: PORTCbits.RC1 = 1;
  4008  002464  8282               	bsf	3970,1,c	;volatile
  4009                           
  4010                           ;utils.c: 15: PORTDbits.RD2 = 0;
  4011  002466  9483               	bcf	3971,2,c	;volatile
  4012                           
  4013                           ;utils.c: 16: PORTAbits.RA4 = 0;
  4014  002468  9880               	bcf	3968,4,c	;volatile
  4015  00246A  0012               	return		;funcret
  4016  00246C                     __end_of_setB:
  4017                           	opt stack 0
  4018                           tblptru	equ	0xFF8
  4019                           tblptrh	equ	0xFF7
  4020                           tblptrl	equ	0xFF6
  4021                           tablat	equ	0xFF5
  4022                           postinc0	equ	0xFEE
  4023                           wreg	equ	0xFE8
  4024                           postdec1	equ	0xFE5
  4025                           fsr1l	equ	0xFE1
  4026                           postinc2	equ	0xFDE
  4027                           postdec2	equ	0xFDD
  4028                           fsr2h	equ	0xFDA
  4029                           fsr2l	equ	0xFD9
  4030                           status	equ	0xFD8
  4031                           
  4032 ;; *************** function _setA *****************
  4033 ;; Defined at:
  4034 ;;		line 5 in file "utils.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;		None
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;		None
  4039 ;; Return value:  Size  Location     Type
  4040 ;;                  1    wreg      void 
  4041 ;; Registers used:
  4042 ;;		None
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4048 ;;      Params:         0       0       0       0       0       0       0       0       0
  4049 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4050 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4051 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4052 ;;Total ram usage:        0 bytes
  4053 ;; Hardware stack levels used:    1
  4054 ;; Hardware stack levels required when called:    1
  4055 ;; This function calls:
  4056 ;;		Nothing
  4057 ;; This function is called by:
  4058 ;;		_main
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           	psect	text9
  4063  00246C                     __ptext9:
  4064                           	opt stack 0
  4065  00246C                     _setA:
  4066                           	opt stack 29
  4067                           
  4068                           ;utils.c: 6: PORTBbits.RB4 = 1;
  4069                           
  4070                           ;incstack = 0
  4071  00246C  8881               	bsf	3969,4,c	;volatile
  4072                           
  4073                           ;utils.c: 7: PORTCbits.RC1 = 0;
  4074  00246E  9282               	bcf	3970,1,c	;volatile
  4075                           
  4076                           ;utils.c: 8: PORTDbits.RD2 = 0;
  4077  002470  9483               	bcf	3971,2,c	;volatile
  4078                           
  4079                           ;utils.c: 9: PORTAbits.RA4 = 0;
  4080  002472  9880               	bcf	3968,4,c	;volatile
  4081  002474  0012               	return		;funcret
  4082  002476                     __end_of_setA:
  4083                           	opt stack 0
  4084                           tblptru	equ	0xFF8
  4085                           tblptrh	equ	0xFF7
  4086                           tblptrl	equ	0xFF6
  4087                           tablat	equ	0xFF5
  4088                           postinc0	equ	0xFEE
  4089                           wreg	equ	0xFE8
  4090                           postdec1	equ	0xFE5
  4091                           fsr1l	equ	0xFE1
  4092                           postinc2	equ	0xFDE
  4093                           postdec2	equ	0xFDD
  4094                           fsr2h	equ	0xFDA
  4095                           fsr2l	equ	0xFD9
  4096                           status	equ	0xFD8
  4097                           
  4098 ;; *************** function _read_cal *****************
  4099 ;; Defined at:
  4100 ;;		line 47 in file "analog.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;		None
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;  i               2   33[COMRAM] int 
  4105 ;; Return value:  Size  Location     Type
  4106 ;;                  2   34[None  ] int 
  4107 ;; Registers used:
  4108 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4114 ;;      Params:         0       0       0       0       0       0       0       0       0
  4115 ;;      Locals:        10       0       0       0       0       0       0       0       0
  4116 ;;      Temps:          9       0       0       0       0       0       0       0       0
  4117 ;;      Totals:        19       0       0       0       0       0       0       0       0
  4118 ;;Total ram usage:       19 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    1
  4121 ;; This function calls:
  4122 ;;		Nothing
  4123 ;; This function is called by:
  4124 ;;		_main
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           	psect	text10
  4129  00090C                     __ptext10:
  4130                           	opt stack 0
  4131  00090C                     _read_cal:
  4132                           	opt stack 29
  4133                           
  4134                           ;analog.c: 48: int i;
  4135                           ;analog.c: 50: for (i = 0;i < 5;i++) maxs[ls[i]] = maxs[ls[i]]>an[ls[i]]?maxs[ls[i]]:an[
      +                          ls[i]];
  4136                           
  4137                           ;incstack = 0
  4138  00090C  0E00               	movlw	0
  4139  00090E  6E23               	movwf	read_cal@i+1,c
  4140  000910  0E00               	movlw	0
  4141  000912  6E22               	movwf	read_cal@i,c
  4142  000914  BE23               	btfsc	read_cal@i+1,7,c
  4143  000916  D008               	goto	l3963
  4144  000918  5023               	movf	read_cal@i+1,w,c
  4145  00091A  E105               	bnz	u4680
  4146  00091C  0E05               	movlw	5
  4147  00091E  5C22               	subwf	read_cal@i,w,c
  4148  000920  B0D8               	btfsc	status,0,c
  4149  000922  D088               	goto	l3975
  4150  000924  D001               	goto	l3963
  4151  000926                     u4680:
  4152  000926  D086               	goto	l3975
  4153  000928                     l3963:
  4154  000928  90D8               	bcf	status,0,c
  4155  00092A  3422               	rlcf	read_cal@i,w,c
  4156  00092C  6ED9               	movwf	fsr2l,c
  4157  00092E  3423               	rlcf	read_cal@i+1,w,c
  4158  000930  6EDA               	movwf	fsr2h,c
  4159  000932  0ED8               	movlw	low _ls
  4160  000934  26D9               	addwf	fsr2l,f,c
  4161  000936  0E00               	movlw	high _ls
  4162  000938  22DA               	addwfc	fsr2h,f,c
  4163  00093A  CFDE F011          	movff	postinc2,??_read_cal
  4164  00093E  CFDD F012          	movff	postdec2,??_read_cal+1
  4165  000942  90D8               	bcf	status,0,c
  4166  000944  3611               	rlcf	??_read_cal,f,c
  4167  000946  3612               	rlcf	??_read_cal+1,f,c
  4168  000948  0E12               	movlw	low _maxs
  4169  00094A  2411               	addwf	??_read_cal,w,c
  4170  00094C  6ED9               	movwf	fsr2l,c
  4171  00094E  0E01               	movlw	high _maxs
  4172  000950  2012               	addwfc	??_read_cal+1,w,c
  4173  000952  6EDA               	movwf	fsr2h,c
  4174  000954  90D8               	bcf	status,0,c
  4175  000956  3422               	rlcf	read_cal@i,w,c
  4176  000958  6EE1               	movwf	fsr1l,c
  4177  00095A  3423               	rlcf	read_cal@i+1,w,c
  4178  00095C  6EE2               	movwf	fsr1h,c
  4179  00095E  0ED8               	movlw	low _ls
  4180  000960  26E1               	addwf	fsr1l,f,c
  4181  000962  0E00               	movlw	high _ls
  4182  000964  22E2               	addwfc	fsr1h,f,c
  4183  000966  CFE6 F015          	movff	postinc1,??_read_cal+4
  4184  00096A  CFE5 F016          	movff	postdec1,??_read_cal+5
  4185  00096E  90D8               	bcf	status,0,c
  4186  000970  3615               	rlcf	??_read_cal+4,f,c
  4187  000972  3616               	rlcf	??_read_cal+5,f,c
  4188  000974  0E9E               	movlw	low _an
  4189  000976  2415               	addwf	??_read_cal+4,w,c
  4190  000978  6EE1               	movwf	fsr1l,c
  4191  00097A  0E00               	movlw	high _an
  4192  00097C  2016               	addwfc	??_read_cal+5,w,c
  4193  00097E  6EE2               	movwf	fsr1h,c
  4194  000980  50DE               	movf	postinc2,w,c
  4195  000982  5CE6               	subwf	postinc1,w,c
  4196  000984  50E6               	movf	postinc1,w,c
  4197  000986  0A80               	xorlw	128
  4198  000988  6E19               	movwf	(??_read_cal+8)& (0+255),c
  4199  00098A  50DE               	movf	postinc2,w,c
  4200  00098C  0A80               	xorlw	128
  4201  00098E  5819               	subwfb	(??_read_cal+8)& (0+255),w,c
  4202  000990  A0D8               	btfss	status,0,c
  4203  000992  D015               	goto	l3967
  4204  000994  90D8               	bcf	status,0,c
  4205  000996  3422               	rlcf	read_cal@i,w,c
  4206  000998  6ED9               	movwf	fsr2l,c
  4207  00099A  3423               	rlcf	read_cal@i+1,w,c
  4208  00099C  6EDA               	movwf	fsr2h,c
  4209  00099E  0ED8               	movlw	low _ls
  4210  0009A0  26D9               	addwf	fsr2l,f,c
  4211  0009A2  0E00               	movlw	high _ls
  4212  0009A4  22DA               	addwfc	fsr2h,f,c
  4213  0009A6  CFDE F011          	movff	postinc2,??_read_cal
  4214  0009AA  CFDD F012          	movff	postdec2,??_read_cal+1
  4215  0009AE  90D8               	bcf	status,0,c
  4216  0009B0  3611               	rlcf	??_read_cal,f,c
  4217  0009B2  3612               	rlcf	??_read_cal+1,f,c
  4218  0009B4  0E9E               	movlw	low _an
  4219  0009B6  2411               	addwf	??_read_cal,w,c
  4220  0009B8  6E1A               	movwf	_read_cal$530,c
  4221  0009BA  0E00               	movlw	high _an
  4222  0009BC  D014               	goto	L3
  4223  0009BE                     l3967:
  4224  0009BE  90D8               	bcf	status,0,c
  4225  0009C0  3422               	rlcf	read_cal@i,w,c
  4226  0009C2  6ED9               	movwf	fsr2l,c
  4227  0009C4  3423               	rlcf	read_cal@i+1,w,c
  4228  0009C6  6EDA               	movwf	fsr2h,c
  4229  0009C8  0ED8               	movlw	low _ls
  4230  0009CA  26D9               	addwf	fsr2l,f,c
  4231  0009CC  0E00               	movlw	high _ls
  4232  0009CE  22DA               	addwfc	fsr2h,f,c
  4233  0009D0  CFDE F011          	movff	postinc2,??_read_cal
  4234  0009D4  CFDD F012          	movff	postdec2,??_read_cal+1
  4235  0009D8  90D8               	bcf	status,0,c
  4236  0009DA  3611               	rlcf	??_read_cal,f,c
  4237  0009DC  3612               	rlcf	??_read_cal+1,f,c
  4238  0009DE  0E12               	movlw	low _maxs
  4239  0009E0  2411               	addwf	??_read_cal,w,c
  4240  0009E2  6E1A               	movwf	_read_cal$530,c
  4241  0009E4  0E01               	movlw	high _maxs
  4242  0009E6                     L3:
  4243  0009E6  2012               	addwfc	??_read_cal+1,w,c
  4244  0009E8  6E1B               	movwf	_read_cal$530+1,c
  4245  0009EA  C01A  FFD9         	movff	_read_cal$530,fsr2l
  4246  0009EE  C01B  FFDA         	movff	_read_cal$530+1,fsr2h
  4247  0009F2  90D8               	bcf	status,0,c
  4248  0009F4  3422               	rlcf	read_cal@i,w,c
  4249  0009F6  6EE1               	movwf	fsr1l,c
  4250  0009F8  3423               	rlcf	read_cal@i+1,w,c
  4251  0009FA  6EE2               	movwf	fsr1h,c
  4252  0009FC  0ED8               	movlw	low _ls
  4253  0009FE  26E1               	addwf	fsr1l,f,c
  4254  000A00  0E00               	movlw	high _ls
  4255  000A02  22E2               	addwfc	fsr1h,f,c
  4256  000A04  CFE6 F011          	movff	postinc1,??_read_cal
  4257  000A08  CFE5 F012          	movff	postdec1,??_read_cal+1
  4258  000A0C  90D8               	bcf	status,0,c
  4259  000A0E  3611               	rlcf	??_read_cal,f,c
  4260  000A10  3612               	rlcf	??_read_cal+1,f,c
  4261  000A12  0E12               	movlw	low _maxs
  4262  000A14  2411               	addwf	??_read_cal,w,c
  4263  000A16  6EE1               	movwf	fsr1l,c
  4264  000A18  0E01               	movlw	high _maxs
  4265  000A1A  2012               	addwfc	??_read_cal+1,w,c
  4266  000A1C  6EE2               	movwf	fsr1h,c
  4267  000A1E  CFDE FFE6          	movff	postinc2,postinc1
  4268  000A22  CFDD FFE5          	movff	postdec2,postdec1
  4269  000A26  4A22               	infsnz	read_cal@i,f,c
  4270  000A28  2A23               	incf	read_cal@i+1,f,c
  4271  000A2A  BE23               	btfsc	read_cal@i+1,7,c
  4272  000A2C  D77D               	goto	l3963
  4273  000A2E  5023               	movf	read_cal@i+1,w,c
  4274  000A30  E101               	bnz	l3975
  4275  000A32  D774               	goto	L4
  4276  000A34                     l3975:
  4277                           
  4278                           ;analog.c: 51: for (i = 0;i < 5;i++) mins[ls[i]] = mins[ls[i]]<an[ls[i]]?mins[ls[i]]:an[
      +                          ls[i]];
  4279  000A34  0E00               	movlw	0
  4280  000A36  6E23               	movwf	read_cal@i+1,c
  4281  000A38  0E00               	movlw	0
  4282  000A3A  6E22               	movwf	read_cal@i,c
  4283  000A3C  BE23               	btfsc	read_cal@i+1,7,c
  4284  000A3E  D008               	goto	l3981
  4285  000A40  5023               	movf	read_cal@i+1,w,c
  4286  000A42  E105               	bnz	u4710
  4287  000A44  0E05               	movlw	5
  4288  000A46  5C22               	subwf	read_cal@i,w,c
  4289  000A48  B0D8               	btfsc	status,0,c
  4290  000A4A  D088               	goto	l3993
  4291  000A4C  D001               	goto	l3981
  4292  000A4E                     u4710:
  4293  000A4E  D086               	goto	l3993
  4294  000A50                     l3981:
  4295  000A50  90D8               	bcf	status,0,c
  4296  000A52  3422               	rlcf	read_cal@i,w,c
  4297  000A54  6ED9               	movwf	fsr2l,c
  4298  000A56  3423               	rlcf	read_cal@i+1,w,c
  4299  000A58  6EDA               	movwf	fsr2h,c
  4300  000A5A  0ED8               	movlw	low _ls
  4301  000A5C  26D9               	addwf	fsr2l,f,c
  4302  000A5E  0E00               	movlw	high _ls
  4303  000A60  22DA               	addwfc	fsr2h,f,c
  4304  000A62  CFDE F011          	movff	postinc2,??_read_cal
  4305  000A66  CFDD F012          	movff	postdec2,??_read_cal+1
  4306  000A6A  90D8               	bcf	status,0,c
  4307  000A6C  3611               	rlcf	??_read_cal,f,c
  4308  000A6E  3612               	rlcf	??_read_cal+1,f,c
  4309  000A70  0E9E               	movlw	low _an
  4310  000A72  2411               	addwf	??_read_cal,w,c
  4311  000A74  6ED9               	movwf	fsr2l,c
  4312  000A76  0E00               	movlw	high _an
  4313  000A78  2012               	addwfc	??_read_cal+1,w,c
  4314  000A7A  6EDA               	movwf	fsr2h,c
  4315  000A7C  90D8               	bcf	status,0,c
  4316  000A7E  3422               	rlcf	read_cal@i,w,c
  4317  000A80  6EE1               	movwf	fsr1l,c
  4318  000A82  3423               	rlcf	read_cal@i+1,w,c
  4319  000A84  6EE2               	movwf	fsr1h,c
  4320  000A86  0ED8               	movlw	low _ls
  4321  000A88  26E1               	addwf	fsr1l,f,c
  4322  000A8A  0E00               	movlw	high _ls
  4323  000A8C  22E2               	addwfc	fsr1h,f,c
  4324  000A8E  CFE6 F015          	movff	postinc1,??_read_cal+4
  4325  000A92  CFE5 F016          	movff	postdec1,??_read_cal+5
  4326  000A96  90D8               	bcf	status,0,c
  4327  000A98  3615               	rlcf	??_read_cal+4,f,c
  4328  000A9A  3616               	rlcf	??_read_cal+5,f,c
  4329  000A9C  0E8C               	movlw	low _mins
  4330  000A9E  2415               	addwf	??_read_cal+4,w,c
  4331  000AA0  6EE1               	movwf	fsr1l,c
  4332  000AA2  0E00               	movlw	high _mins
  4333  000AA4  2016               	addwfc	??_read_cal+5,w,c
  4334  000AA6  6EE2               	movwf	fsr1h,c
  4335  000AA8  50DE               	movf	postinc2,w,c
  4336  000AAA  5CE6               	subwf	postinc1,w,c
  4337  000AAC  50E6               	movf	postinc1,w,c
  4338  000AAE  0A80               	xorlw	128
  4339  000AB0  6E19               	movwf	(??_read_cal+8)& (0+255),c
  4340  000AB2  50DE               	movf	postinc2,w,c
  4341  000AB4  0A80               	xorlw	128
  4342  000AB6  5819               	subwfb	(??_read_cal+8)& (0+255),w,c
  4343  000AB8  A0D8               	btfss	status,0,c
  4344  000ABA  D015               	goto	l3985
  4345  000ABC  90D8               	bcf	status,0,c
  4346  000ABE  3422               	rlcf	read_cal@i,w,c
  4347  000AC0  6ED9               	movwf	fsr2l,c
  4348  000AC2  3423               	rlcf	read_cal@i+1,w,c
  4349  000AC4  6EDA               	movwf	fsr2h,c
  4350  000AC6  0ED8               	movlw	low _ls
  4351  000AC8  26D9               	addwf	fsr2l,f,c
  4352  000ACA  0E00               	movlw	high _ls
  4353  000ACC  22DA               	addwfc	fsr2h,f,c
  4354  000ACE  CFDE F011          	movff	postinc2,??_read_cal
  4355  000AD2  CFDD F012          	movff	postdec2,??_read_cal+1
  4356  000AD6  90D8               	bcf	status,0,c
  4357  000AD8  3611               	rlcf	??_read_cal,f,c
  4358  000ADA  3612               	rlcf	??_read_cal+1,f,c
  4359  000ADC  0E9E               	movlw	low _an
  4360  000ADE  2411               	addwf	??_read_cal,w,c
  4361  000AE0  6E1C               	movwf	_read_cal$532,c
  4362  000AE2  0E00               	movlw	high _an
  4363  000AE4  D014               	goto	L5
  4364  000AE6                     l3985:
  4365  000AE6  90D8               	bcf	status,0,c
  4366  000AE8  3422               	rlcf	read_cal@i,w,c
  4367  000AEA  6ED9               	movwf	fsr2l,c
  4368  000AEC  3423               	rlcf	read_cal@i+1,w,c
  4369  000AEE  6EDA               	movwf	fsr2h,c
  4370  000AF0  0ED8               	movlw	low _ls
  4371  000AF2  26D9               	addwf	fsr2l,f,c
  4372  000AF4  0E00               	movlw	high _ls
  4373  000AF6  22DA               	addwfc	fsr2h,f,c
  4374  000AF8  CFDE F011          	movff	postinc2,??_read_cal
  4375  000AFC  CFDD F012          	movff	postdec2,??_read_cal+1
  4376  000B00  90D8               	bcf	status,0,c
  4377  000B02  3611               	rlcf	??_read_cal,f,c
  4378  000B04  3612               	rlcf	??_read_cal+1,f,c
  4379  000B06  0E8C               	movlw	low _mins
  4380  000B08  2411               	addwf	??_read_cal,w,c
  4381  000B0A  6E1C               	movwf	_read_cal$532,c
  4382  000B0C  0E00               	movlw	high _mins
  4383  000B0E                     L5:
  4384  000B0E  2012               	addwfc	??_read_cal+1,w,c
  4385  000B10  6E1D               	movwf	_read_cal$532+1,c
  4386  000B12  C01C  FFD9         	movff	_read_cal$532,fsr2l
  4387  000B16  C01D  FFDA         	movff	_read_cal$532+1,fsr2h
  4388  000B1A  90D8               	bcf	status,0,c
  4389  000B1C  3422               	rlcf	read_cal@i,w,c
  4390  000B1E  6EE1               	movwf	fsr1l,c
  4391  000B20  3423               	rlcf	read_cal@i+1,w,c
  4392  000B22  6EE2               	movwf	fsr1h,c
  4393  000B24  0ED8               	movlw	low _ls
  4394  000B26  26E1               	addwf	fsr1l,f,c
  4395  000B28  0E00               	movlw	high _ls
  4396  000B2A  22E2               	addwfc	fsr1h,f,c
  4397  000B2C  CFE6 F011          	movff	postinc1,??_read_cal
  4398  000B30  CFE5 F012          	movff	postdec1,??_read_cal+1
  4399  000B34  90D8               	bcf	status,0,c
  4400  000B36  3611               	rlcf	??_read_cal,f,c
  4401  000B38  3612               	rlcf	??_read_cal+1,f,c
  4402  000B3A  0E8C               	movlw	low _mins
  4403  000B3C  2411               	addwf	??_read_cal,w,c
  4404  000B3E  6EE1               	movwf	fsr1l,c
  4405  000B40  0E00               	movlw	high _mins
  4406  000B42  2012               	addwfc	??_read_cal+1,w,c
  4407  000B44  6EE2               	movwf	fsr1h,c
  4408  000B46  CFDE FFE6          	movff	postinc2,postinc1
  4409  000B4A  CFDD FFE5          	movff	postdec2,postdec1
  4410  000B4E  4A22               	infsnz	read_cal@i,f,c
  4411  000B50  2A23               	incf	read_cal@i+1,f,c
  4412  000B52  BE23               	btfsc	read_cal@i+1,7,c
  4413  000B54  D77D               	goto	l3981
  4414  000B56  5023               	movf	read_cal@i+1,w,c
  4415  000B58  E101               	bnz	l3993
  4416  000B5A  D774               	goto	L6
  4417  000B5C                     l3993:
  4418                           
  4419                           ;analog.c: 53: for (i = 0;i < 2;i++) maxs[es[i]] = maxs[es[i]]>an[es[i]]?maxs[es[i]]:an[
      +                          es[i]];
  4420  000B5C  0E00               	movlw	0
  4421  000B5E  6E23               	movwf	read_cal@i+1,c
  4422  000B60  0E00               	movlw	0
  4423  000B62  6E22               	movwf	read_cal@i,c
  4424  000B64  BE23               	btfsc	read_cal@i+1,7,c
  4425  000B66  D008               	goto	l3999
  4426  000B68  5023               	movf	read_cal@i+1,w,c
  4427  000B6A  E105               	bnz	u4740
  4428  000B6C  0E02               	movlw	2
  4429  000B6E  5C22               	subwf	read_cal@i,w,c
  4430  000B70  B0D8               	btfsc	status,0,c
  4431  000B72  D088               	goto	l4011
  4432  000B74  D001               	goto	l3999
  4433  000B76                     u4740:
  4434  000B76  D086               	goto	l4011
  4435  000B78                     l3999:
  4436  000B78  90D8               	bcf	status,0,c
  4437  000B7A  3422               	rlcf	read_cal@i,w,c
  4438  000B7C  6ED9               	movwf	fsr2l,c
  4439  000B7E  3423               	rlcf	read_cal@i+1,w,c
  4440  000B80  6EDA               	movwf	fsr2h,c
  4441  000B82  0E3E               	movlw	low _es
  4442  000B84  26D9               	addwf	fsr2l,f,c
  4443  000B86  0E00               	movlw	high _es
  4444  000B88  22DA               	addwfc	fsr2h,f,c
  4445  000B8A  CFDE F011          	movff	postinc2,??_read_cal
  4446  000B8E  CFDD F012          	movff	postdec2,??_read_cal+1
  4447  000B92  90D8               	bcf	status,0,c
  4448  000B94  3611               	rlcf	??_read_cal,f,c
  4449  000B96  3612               	rlcf	??_read_cal+1,f,c
  4450  000B98  0E12               	movlw	low _maxs
  4451  000B9A  2411               	addwf	??_read_cal,w,c
  4452  000B9C  6ED9               	movwf	fsr2l,c
  4453  000B9E  0E01               	movlw	high _maxs
  4454  000BA0  2012               	addwfc	??_read_cal+1,w,c
  4455  000BA2  6EDA               	movwf	fsr2h,c
  4456  000BA4  90D8               	bcf	status,0,c
  4457  000BA6  3422               	rlcf	read_cal@i,w,c
  4458  000BA8  6EE1               	movwf	fsr1l,c
  4459  000BAA  3423               	rlcf	read_cal@i+1,w,c
  4460  000BAC  6EE2               	movwf	fsr1h,c
  4461  000BAE  0E3E               	movlw	low _es
  4462  000BB0  26E1               	addwf	fsr1l,f,c
  4463  000BB2  0E00               	movlw	high _es
  4464  000BB4  22E2               	addwfc	fsr1h,f,c
  4465  000BB6  CFE6 F015          	movff	postinc1,??_read_cal+4
  4466  000BBA  CFE5 F016          	movff	postdec1,??_read_cal+5
  4467  000BBE  90D8               	bcf	status,0,c
  4468  000BC0  3615               	rlcf	??_read_cal+4,f,c
  4469  000BC2  3616               	rlcf	??_read_cal+5,f,c
  4470  000BC4  0E9E               	movlw	low _an
  4471  000BC6  2415               	addwf	??_read_cal+4,w,c
  4472  000BC8  6EE1               	movwf	fsr1l,c
  4473  000BCA  0E00               	movlw	high _an
  4474  000BCC  2016               	addwfc	??_read_cal+5,w,c
  4475  000BCE  6EE2               	movwf	fsr1h,c
  4476  000BD0  50DE               	movf	postinc2,w,c
  4477  000BD2  5CE6               	subwf	postinc1,w,c
  4478  000BD4  50E6               	movf	postinc1,w,c
  4479  000BD6  0A80               	xorlw	128
  4480  000BD8  6E19               	movwf	(??_read_cal+8)& (0+255),c
  4481  000BDA  50DE               	movf	postinc2,w,c
  4482  000BDC  0A80               	xorlw	128
  4483  000BDE  5819               	subwfb	(??_read_cal+8)& (0+255),w,c
  4484  000BE0  A0D8               	btfss	status,0,c
  4485  000BE2  D015               	goto	l4003
  4486  000BE4  90D8               	bcf	status,0,c
  4487  000BE6  3422               	rlcf	read_cal@i,w,c
  4488  000BE8  6ED9               	movwf	fsr2l,c
  4489  000BEA  3423               	rlcf	read_cal@i+1,w,c
  4490  000BEC  6EDA               	movwf	fsr2h,c
  4491  000BEE  0E3E               	movlw	low _es
  4492  000BF0  26D9               	addwf	fsr2l,f,c
  4493  000BF2  0E00               	movlw	high _es
  4494  000BF4  22DA               	addwfc	fsr2h,f,c
  4495  000BF6  CFDE F011          	movff	postinc2,??_read_cal
  4496  000BFA  CFDD F012          	movff	postdec2,??_read_cal+1
  4497  000BFE  90D8               	bcf	status,0,c
  4498  000C00  3611               	rlcf	??_read_cal,f,c
  4499  000C02  3612               	rlcf	??_read_cal+1,f,c
  4500  000C04  0E9E               	movlw	low _an
  4501  000C06  2411               	addwf	??_read_cal,w,c
  4502  000C08  6E1E               	movwf	_read_cal$534,c
  4503  000C0A  0E00               	movlw	high _an
  4504  000C0C  D014               	goto	L7
  4505  000C0E                     l4003:
  4506  000C0E  90D8               	bcf	status,0,c
  4507  000C10  3422               	rlcf	read_cal@i,w,c
  4508  000C12  6ED9               	movwf	fsr2l,c
  4509  000C14  3423               	rlcf	read_cal@i+1,w,c
  4510  000C16  6EDA               	movwf	fsr2h,c
  4511  000C18  0E3E               	movlw	low _es
  4512  000C1A  26D9               	addwf	fsr2l,f,c
  4513  000C1C  0E00               	movlw	high _es
  4514  000C1E  22DA               	addwfc	fsr2h,f,c
  4515  000C20  CFDE F011          	movff	postinc2,??_read_cal
  4516  000C24  CFDD F012          	movff	postdec2,??_read_cal+1
  4517  000C28  90D8               	bcf	status,0,c
  4518  000C2A  3611               	rlcf	??_read_cal,f,c
  4519  000C2C  3612               	rlcf	??_read_cal+1,f,c
  4520  000C2E  0E12               	movlw	low _maxs
  4521  000C30  2411               	addwf	??_read_cal,w,c
  4522  000C32  6E1E               	movwf	_read_cal$534,c
  4523  000C34  0E01               	movlw	high _maxs
  4524  000C36                     L7:
  4525  000C36  2012               	addwfc	??_read_cal+1,w,c
  4526  000C38  6E1F               	movwf	_read_cal$534+1,c
  4527  000C3A  C01E  FFD9         	movff	_read_cal$534,fsr2l
  4528  000C3E  C01F  FFDA         	movff	_read_cal$534+1,fsr2h
  4529  000C42  90D8               	bcf	status,0,c
  4530  000C44  3422               	rlcf	read_cal@i,w,c
  4531  000C46  6EE1               	movwf	fsr1l,c
  4532  000C48  3423               	rlcf	read_cal@i+1,w,c
  4533  000C4A  6EE2               	movwf	fsr1h,c
  4534  000C4C  0E3E               	movlw	low _es
  4535  000C4E  26E1               	addwf	fsr1l,f,c
  4536  000C50  0E00               	movlw	high _es
  4537  000C52  22E2               	addwfc	fsr1h,f,c
  4538  000C54  CFE6 F011          	movff	postinc1,??_read_cal
  4539  000C58  CFE5 F012          	movff	postdec1,??_read_cal+1
  4540  000C5C  90D8               	bcf	status,0,c
  4541  000C5E  3611               	rlcf	??_read_cal,f,c
  4542  000C60  3612               	rlcf	??_read_cal+1,f,c
  4543  000C62  0E12               	movlw	low _maxs
  4544  000C64  2411               	addwf	??_read_cal,w,c
  4545  000C66  6EE1               	movwf	fsr1l,c
  4546  000C68  0E01               	movlw	high _maxs
  4547  000C6A  2012               	addwfc	??_read_cal+1,w,c
  4548  000C6C  6EE2               	movwf	fsr1h,c
  4549  000C6E  CFDE FFE6          	movff	postinc2,postinc1
  4550  000C72  CFDD FFE5          	movff	postdec2,postdec1
  4551  000C76  4A22               	infsnz	read_cal@i,f,c
  4552  000C78  2A23               	incf	read_cal@i+1,f,c
  4553  000C7A  BE23               	btfsc	read_cal@i+1,7,c
  4554  000C7C  D77D               	goto	l3999
  4555  000C7E  5023               	movf	read_cal@i+1,w,c
  4556  000C80  E101               	bnz	l4011
  4557  000C82  D774               	goto	L8
  4558  000C84                     l4011:
  4559                           
  4560                           ;analog.c: 54: for (i = 0;i < 2;i++) mins[es[i]] = mins[es[i]]<an[es[i]]?mins[es[i]]:an[
      +                          es[i]];
  4561  000C84  0E00               	movlw	0
  4562  000C86  6E23               	movwf	read_cal@i+1,c
  4563  000C88  0E00               	movlw	0
  4564  000C8A  6E22               	movwf	read_cal@i,c
  4565  000C8C  BE23               	btfsc	read_cal@i+1,7,c
  4566  000C8E  D008               	goto	l4017
  4567  000C90  5023               	movf	read_cal@i+1,w,c
  4568  000C92  E105               	bnz	u4770
  4569  000C94  0E02               	movlw	2
  4570  000C96  5C22               	subwf	read_cal@i,w,c
  4571  000C98  B0D8               	btfsc	status,0,c
  4572  000C9A  0012               	return	
  4573  000C9C  D001               	goto	l4017
  4574  000C9E                     u4770:
  4575  000C9E  0012               	return	
  4576  000CA0                     l4017:
  4577  000CA0  90D8               	bcf	status,0,c
  4578  000CA2  3422               	rlcf	read_cal@i,w,c
  4579  000CA4  6ED9               	movwf	fsr2l,c
  4580  000CA6  3423               	rlcf	read_cal@i+1,w,c
  4581  000CA8  6EDA               	movwf	fsr2h,c
  4582  000CAA  0E3E               	movlw	low _es
  4583  000CAC  26D9               	addwf	fsr2l,f,c
  4584  000CAE  0E00               	movlw	high _es
  4585  000CB0  22DA               	addwfc	fsr2h,f,c
  4586  000CB2  CFDE F011          	movff	postinc2,??_read_cal
  4587  000CB6  CFDD F012          	movff	postdec2,??_read_cal+1
  4588  000CBA  90D8               	bcf	status,0,c
  4589  000CBC  3611               	rlcf	??_read_cal,f,c
  4590  000CBE  3612               	rlcf	??_read_cal+1,f,c
  4591  000CC0  0E9E               	movlw	low _an
  4592  000CC2  2411               	addwf	??_read_cal,w,c
  4593  000CC4  6ED9               	movwf	fsr2l,c
  4594  000CC6  0E00               	movlw	high _an
  4595  000CC8  2012               	addwfc	??_read_cal+1,w,c
  4596  000CCA  6EDA               	movwf	fsr2h,c
  4597  000CCC  90D8               	bcf	status,0,c
  4598  000CCE  3422               	rlcf	read_cal@i,w,c
  4599  000CD0  6EE1               	movwf	fsr1l,c
  4600  000CD2  3423               	rlcf	read_cal@i+1,w,c
  4601  000CD4  6EE2               	movwf	fsr1h,c
  4602  000CD6  0E3E               	movlw	low _es
  4603  000CD8  26E1               	addwf	fsr1l,f,c
  4604  000CDA  0E00               	movlw	high _es
  4605  000CDC  22E2               	addwfc	fsr1h,f,c
  4606  000CDE  CFE6 F015          	movff	postinc1,??_read_cal+4
  4607  000CE2  CFE5 F016          	movff	postdec1,??_read_cal+5
  4608  000CE6  90D8               	bcf	status,0,c
  4609  000CE8  3615               	rlcf	??_read_cal+4,f,c
  4610  000CEA  3616               	rlcf	??_read_cal+5,f,c
  4611  000CEC  0E8C               	movlw	low _mins
  4612  000CEE  2415               	addwf	??_read_cal+4,w,c
  4613  000CF0  6EE1               	movwf	fsr1l,c
  4614  000CF2  0E00               	movlw	high _mins
  4615  000CF4  2016               	addwfc	??_read_cal+5,w,c
  4616  000CF6  6EE2               	movwf	fsr1h,c
  4617  000CF8  50DE               	movf	postinc2,w,c
  4618  000CFA  5CE6               	subwf	postinc1,w,c
  4619  000CFC  50E6               	movf	postinc1,w,c
  4620  000CFE  0A80               	xorlw	128
  4621  000D00  6E19               	movwf	(??_read_cal+8)& (0+255),c
  4622  000D02  50DE               	movf	postinc2,w,c
  4623  000D04  0A80               	xorlw	128
  4624  000D06  5819               	subwfb	(??_read_cal+8)& (0+255),w,c
  4625  000D08  A0D8               	btfss	status,0,c
  4626  000D0A  D015               	goto	l4021
  4627  000D0C  90D8               	bcf	status,0,c
  4628  000D0E  3422               	rlcf	read_cal@i,w,c
  4629  000D10  6ED9               	movwf	fsr2l,c
  4630  000D12  3423               	rlcf	read_cal@i+1,w,c
  4631  000D14  6EDA               	movwf	fsr2h,c
  4632  000D16  0E3E               	movlw	low _es
  4633  000D18  26D9               	addwf	fsr2l,f,c
  4634  000D1A  0E00               	movlw	high _es
  4635  000D1C  22DA               	addwfc	fsr2h,f,c
  4636  000D1E  CFDE F011          	movff	postinc2,??_read_cal
  4637  000D22  CFDD F012          	movff	postdec2,??_read_cal+1
  4638  000D26  90D8               	bcf	status,0,c
  4639  000D28  3611               	rlcf	??_read_cal,f,c
  4640  000D2A  3612               	rlcf	??_read_cal+1,f,c
  4641  000D2C  0E9E               	movlw	low _an
  4642  000D2E  2411               	addwf	??_read_cal,w,c
  4643  000D30  6E20               	movwf	_read_cal$536,c
  4644  000D32  0E00               	movlw	high _an
  4645  000D34  D014               	goto	L9
  4646  000D36                     l4021:
  4647  000D36  90D8               	bcf	status,0,c
  4648  000D38  3422               	rlcf	read_cal@i,w,c
  4649  000D3A  6ED9               	movwf	fsr2l,c
  4650  000D3C  3423               	rlcf	read_cal@i+1,w,c
  4651  000D3E  6EDA               	movwf	fsr2h,c
  4652  000D40  0E3E               	movlw	low _es
  4653  000D42  26D9               	addwf	fsr2l,f,c
  4654  000D44  0E00               	movlw	high _es
  4655  000D46  22DA               	addwfc	fsr2h,f,c
  4656  000D48  CFDE F011          	movff	postinc2,??_read_cal
  4657  000D4C  CFDD F012          	movff	postdec2,??_read_cal+1
  4658  000D50  90D8               	bcf	status,0,c
  4659  000D52  3611               	rlcf	??_read_cal,f,c
  4660  000D54  3612               	rlcf	??_read_cal+1,f,c
  4661  000D56  0E8C               	movlw	low _mins
  4662  000D58  2411               	addwf	??_read_cal,w,c
  4663  000D5A  6E20               	movwf	_read_cal$536,c
  4664  000D5C  0E00               	movlw	high _mins
  4665  000D5E                     L9:
  4666  000D5E  2012               	addwfc	??_read_cal+1,w,c
  4667  000D60  6E21               	movwf	_read_cal$536+1,c
  4668  000D62  C020  FFD9         	movff	_read_cal$536,fsr2l
  4669  000D66  C021  FFDA         	movff	_read_cal$536+1,fsr2h
  4670  000D6A  90D8               	bcf	status,0,c
  4671  000D6C  3422               	rlcf	read_cal@i,w,c
  4672  000D6E  6EE1               	movwf	fsr1l,c
  4673  000D70  3423               	rlcf	read_cal@i+1,w,c
  4674  000D72  6EE2               	movwf	fsr1h,c
  4675  000D74  0E3E               	movlw	low _es
  4676  000D76  26E1               	addwf	fsr1l,f,c
  4677  000D78  0E00               	movlw	high _es
  4678  000D7A  22E2               	addwfc	fsr1h,f,c
  4679  000D7C  CFE6 F011          	movff	postinc1,??_read_cal
  4680  000D80  CFE5 F012          	movff	postdec1,??_read_cal+1
  4681  000D84  90D8               	bcf	status,0,c
  4682  000D86  3611               	rlcf	??_read_cal,f,c
  4683  000D88  3612               	rlcf	??_read_cal+1,f,c
  4684  000D8A  0E8C               	movlw	low _mins
  4685  000D8C  2411               	addwf	??_read_cal,w,c
  4686  000D8E  6EE1               	movwf	fsr1l,c
  4687  000D90  0E00               	movlw	high _mins
  4688  000D92  2012               	addwfc	??_read_cal+1,w,c
  4689  000D94  6EE2               	movwf	fsr1h,c
  4690  000D96  CFDE FFE6          	movff	postinc2,postinc1
  4691  000D9A  CFDD FFE5          	movff	postdec2,postdec1
  4692  000D9E  4A22               	infsnz	read_cal@i,f,c
  4693  000DA0  2A23               	incf	read_cal@i+1,f,c
  4694  000DA2  BE23               	btfsc	read_cal@i+1,7,c
  4695  000DA4  D77D               	goto	l4017
  4696  000DA6  5023               	movf	read_cal@i+1,w,c
  4697  000DA8  E101               	bnz	l173
  4698  000DAA  D774               	goto	L10
  4699  000DAC                     l173:
  4700  000DAC  0012               	return		;funcret
  4701  000DAE                     __end_of_read_cal:
  4702                           	opt stack 0
  4703                           tblptru	equ	0xFF8
  4704                           tblptrh	equ	0xFF7
  4705                           tblptrl	equ	0xFF6
  4706                           tablat	equ	0xFF5
  4707                           postinc0	equ	0xFEE
  4708                           wreg	equ	0xFE8
  4709                           postinc1	equ	0xFE6
  4710                           postdec1	equ	0xFE5
  4711                           fsr1h	equ	0xFE2
  4712                           fsr1l	equ	0xFE1
  4713                           postinc2	equ	0xFDE
  4714                           postdec2	equ	0xFDD
  4715                           fsr2h	equ	0xFDA
  4716                           fsr2l	equ	0xFD9
  4717                           status	equ	0xFD8
  4718                           
  4719 ;; *************** function _printf *****************
  4720 ;; Defined at:
  4721 ;;		line 464 in file "/opt/microchip/xc8/v1.41/sources/common/doprnt.c"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;  f               2   15[BANK0 ] PTR const unsigned char 
  4724 ;;		 -> STR_11(41), STR_10(40), STR_9(45), STR_8(44), 
  4725 ;;		 -> STR_7(43), STR_6(36), STR_5(47), STR_4(46), 
  4726 ;;		 -> STR_3(35), STR_2(39), STR_1(39), 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;  tmpval          4    0        struct .
  4729 ;;  cp              3    0        PTR const unsigned char 
  4730 ;;  width           2   33[BANK0 ] int 
  4731 ;;  val             2   30[BANK0 ] unsigned int 
  4732 ;;  ap              2   27[BANK0 ] PTR void [1]
  4733 ;;		 -> ?_printf(2), 
  4734 ;;  len             2    0        unsigned int 
  4735 ;;  c               1   35[BANK0 ] char 
  4736 ;;  flag            1   32[BANK0 ] unsigned char 
  4737 ;;  prec            1   29[BANK0 ] char 
  4738 ;; Return value:  Size  Location     Type
  4739 ;;                  2   15[BANK0 ] int 
  4740 ;; Registers used:
  4741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4742 ;; Tracked objects:
  4743 ;;		On entry : 0/0
  4744 ;;		On exit  : 0/0
  4745 ;;		Unchanged: 0/0
  4746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4747 ;;      Params:         0       8       0       0       0       0       0       0       0
  4748 ;;      Locals:         0       9       0       0       0       0       0       0       0
  4749 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4750 ;;      Totals:         0      21       0       0       0       0       0       0       0
  4751 ;;Total ram usage:       21 bytes
  4752 ;; Hardware stack levels used:    1
  4753 ;; Hardware stack levels required when called:    2
  4754 ;; This function calls:
  4755 ;;		___lwdiv
  4756 ;;		___lwmod
  4757 ;;		___wmul
  4758 ;;		_isdigit
  4759 ;;		_putch
  4760 ;; This function is called by:
  4761 ;;		_main
  4762 ;; This function uses a non-reentrant model
  4763 ;;
  4764                           
  4765                           	psect	text11
  4766  00111C                     __ptext11:
  4767                           	opt stack 0
  4768  00111C                     _printf:
  4769                           	opt stack 28
  4770                           
  4771                           ;doprnt.c: 466: va_list ap;
  4772                           ;doprnt.c: 499: signed char c;
  4773                           ;doprnt.c: 501: int width;
  4774                           ;doprnt.c: 506: signed char prec;
  4775                           ;doprnt.c: 508: unsigned char flag;
  4776                           ;doprnt.c: 523: union {
  4777                           ;doprnt.c: 524: unsigned long vd;
  4778                           ;doprnt.c: 525: double integ;
  4779                           ;doprnt.c: 526: } tmpval;
  4780                           ;doprnt.c: 528: unsigned int val;
  4781                           ;doprnt.c: 529: unsigned len;
  4782                           ;doprnt.c: 530: const char * cp;
  4783                           ;doprnt.c: 533: *ap = __va_start();
  4784                           
  4785                           ;incstack = 0
  4786  00111C  0EC1               	movlw	low (?_printf+2)
  4787  00111E  0100               	movlb	0	; () banked
  4788  001120  6FCB               	movwf	printf@ap& (0+255),b
  4789  001122  0E00               	movlw	high (?_printf+2)
  4790  001124  0100               	movlb	0	; () banked
  4791  001126  6FCC               	movwf	(printf@ap+1)& (0+255),b
  4792                           
  4793                           ;doprnt.c: 536: while(c = *f++) {
  4794  001128  D150               	goto	l3923
  4795  00112A                     l3829:
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;doprnt.c: 538: if(c != '%')
  4799  00112A  0E25               	movlw	37
  4800  00112C  0100               	movlb	0	; () banked
  4801  00112E  19D3               	xorwf	printf@c& (0+255),w,b
  4802  001130  B4D8               	btfsc	status,2,c
  4803  001132  D005               	goto	l3833
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;doprnt.c: 540: {
  4807                           ;doprnt.c: 541: (putch(c) );
  4808  001134  0100               	movlb	0	; () banked
  4809  001136  51D3               	movf	printf@c& (0+255),w,b
  4810  001138  EC1C  F012         	call	_putch
  4811                           
  4812                           ;doprnt.c: 542: continue;
  4813  00113C  D146               	goto	l3923
  4814  00113E                     l3833:
  4815                           
  4816                           ;doprnt.c: 543: }
  4817                           ;doprnt.c: 546: width = 0;
  4818  00113E  0E00               	movlw	0
  4819  001140  0100               	movlb	0	; () banked
  4820  001142  6FD2               	movwf	(printf@width+1)& (0+255),b
  4821  001144  0E00               	movlw	0
  4822  001146  6FD1               	movwf	printf@width& (0+255),b
  4823                           
  4824                           ;doprnt.c: 548: flag = 0;
  4825  001148  0E00               	movlw	0
  4826  00114A  0100               	movlb	0	; () banked
  4827  00114C  6FD0               	movwf	printf@flag& (0+255),b
  4828                           
  4829                           ; BSR set to: 0
  4830                           ;doprnt.c: 551: switch(*f) {
  4831                           
  4832                           ;doprnt.c: 550: for(;;) {
  4833  00114E  D005               	goto	l3839
  4834  001150                     l3835:
  4835                           
  4836                           ;doprnt.c: 580: flag |= 0x04;
  4837  001150  0100               	movlb	0	; () banked
  4838  001152  85D0               	bsf	printf@flag& (0+255),2,b
  4839                           
  4840                           ;doprnt.c: 581: f++;
  4841  001154  0100               	movlb	0	; () banked
  4842  001156  4BBF               	infsnz	printf@f& (0+255),f,b
  4843  001158  2BC0               	incf	(printf@f+1)& (0+255),f,b
  4844  00115A                     l3839:
  4845  00115A  C0BF  FFF6         	movff	printf@f,tblptrl
  4846  00115E  C0C0  FFF7         	movff	printf@f+1,tblptrh
  4847  001162                     	if	0	;tblptru may be non-zero
  4848  001162                     	endif
  4849  001162                     	if	0	;tblptru may be non-zero
  4850  001162                     	endif
  4851  001162  0008               	tblrd		*
  4852  001164  50F5               	movf	tablat,w,c
  4853                           
  4854                           ; Switch size 1, requested type "space"
  4855                           ; Number of cases is 1, Range of values is 48 to 48
  4856                           ; switch strategies available:
  4857                           ; Name         Instructions Cycles
  4858                           ; simple_byte            4     3 (average)
  4859                           ;	Chosen strategy is simple_byte
  4860  001166  0A30               	xorlw	48	; case 48
  4861  001168  B4D8               	btfsc	status,2,c
  4862  00116A  D7F2               	goto	l3835
  4863                           
  4864                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4865                           
  4866                           ;doprnt.c: 586: }
  4867                           
  4868                           ;doprnt.c: 585: break;
  4869  00116C  C0BF  FFF6         	movff	printf@f,tblptrl
  4870  001170  C0C0  FFF7         	movff	printf@f+1,tblptrh
  4871  001174                     	if	0	;tblptru may be non-zero
  4872  001174                     	endif
  4873  001174                     	if	0	;tblptru may be non-zero
  4874  001174                     	endif
  4875  001174  0008               	tblrd		*
  4876  001176  50F5               	movf	tablat,w,c
  4877  001178  ECF5  F011         	call	_isdigit
  4878  00117C  A0D8               	btfss	status,0,c
  4879  00117E  D040               	goto	l3855
  4880                           
  4881                           ;doprnt.c: 598: width = 0;
  4882  001180  0E00               	movlw	0
  4883  001182  0100               	movlb	0	; () banked
  4884  001184  6FD2               	movwf	(printf@width+1)& (0+255),b
  4885  001186  0E00               	movlw	0
  4886  001188  6FD1               	movwf	printf@width& (0+255),b
  4887  00118A                     l3845:
  4888                           
  4889                           ;doprnt.c: 600: width *= 10;
  4890  00118A  C0D1  F0BB         	movff	printf@width,___wmul@multiplier
  4891  00118E  C0D2  F0BC         	movff	printf@width+1,___wmul@multiplier+1
  4892  001192  0E00               	movlw	0
  4893  001194  0100               	movlb	0	; () banked
  4894  001196  6FBE               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4895  001198  0E0A               	movlw	10
  4896  00119A  6FBD               	movwf	___wmul@multiplicand& (0+255),b
  4897  00119C  EC7A  F011         	call	___wmul	;wreg free
  4898  0011A0  C0BB  F0D1         	movff	?___wmul,printf@width
  4899  0011A4  C0BC  F0D2         	movff	?___wmul+1,printf@width+1
  4900                           
  4901                           ;doprnt.c: 601: width += *f++ - '0';
  4902  0011A8  0ED0               	movlw	208
  4903  0011AA  0100               	movlb	0	; () banked
  4904  0011AC  6FC7               	movwf	??_printf& (0+255),b
  4905  0011AE  0EFF               	movlw	255
  4906  0011B0  0100               	movlb	0	; () banked
  4907  0011B2  6FC8               	movwf	(??_printf+1)& (0+255),b
  4908  0011B4  C0BF  FFF6         	movff	printf@f,tblptrl
  4909  0011B8  C0C0  FFF7         	movff	printf@f+1,tblptrh
  4910  0011BC                     	if	0	;tblptru may be non-zero
  4911  0011BC                     	endif
  4912  0011BC                     	if	0	;tblptru may be non-zero
  4913  0011BC                     	endif
  4914  0011BC  0008               	tblrd		*
  4915  0011BE  50F5               	movf	tablat,w,c
  4916  0011C0  0100               	movlb	0	; () banked
  4917  0011C2  6FC9               	movwf	(??_printf+2)& (0+255),b
  4918  0011C4  6BCA               	clrf	(??_printf+3)& (0+255),b
  4919  0011C6  0100               	movlb	0	; () banked
  4920  0011C8  51C7               	movf	??_printf& (0+255),w,b
  4921  0011CA  0100               	movlb	0	; () banked
  4922  0011CC  27C9               	addwf	(??_printf+2)& (0+255),f,b
  4923  0011CE  0100               	movlb	0	; () banked
  4924  0011D0  51C8               	movf	(??_printf+1)& (0+255),w,b
  4925  0011D2  0100               	movlb	0	; () banked
  4926  0011D4  23CA               	addwfc	(??_printf+3)& (0+255),f,b
  4927  0011D6  0100               	movlb	0	; () banked
  4928  0011D8  51C9               	movf	(??_printf+2)& (0+255),w,b
  4929  0011DA  0100               	movlb	0	; () banked
  4930  0011DC  27D1               	addwf	printf@width& (0+255),f,b
  4931  0011DE  0100               	movlb	0	; () banked
  4932  0011E0  51CA               	movf	(??_printf+3)& (0+255),w,b
  4933  0011E2  0100               	movlb	0	; () banked
  4934  0011E4  23D2               	addwfc	(printf@width+1)& (0+255),f,b
  4935                           
  4936                           ; BSR set to: 0
  4937  0011E6  0100               	movlb	0	; () banked
  4938  0011E8  4BBF               	infsnz	printf@f& (0+255),f,b
  4939  0011EA  2BC0               	incf	(printf@f+1)& (0+255),f,b
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4943  0011EC  C0BF  FFF6         	movff	printf@f,tblptrl
  4944  0011F0  C0C0  FFF7         	movff	printf@f+1,tblptrh
  4945  0011F4                     	if	0	;tblptru may be non-zero
  4946  0011F4                     	endif
  4947  0011F4                     	if	0	;tblptru may be non-zero
  4948  0011F4                     	endif
  4949  0011F4  0008               	tblrd		*
  4950  0011F6  50F5               	movf	tablat,w,c
  4951  0011F8  ECF5  F011         	call	_isdigit
  4952  0011FC  B0D8               	btfsc	status,0,c
  4953  0011FE  D7C5               	goto	l3845
  4954  001200                     l3855:
  4955  001200  C0BF  FFF6         	movff	printf@f,tblptrl
  4956  001204  C0C0  FFF7         	movff	printf@f+1,tblptrh
  4957  001208  0100               	movlb	0	; () banked
  4958  00120A  4BBF               	infsnz	printf@f& (0+255),f,b
  4959  00120C  2BC0               	incf	(printf@f+1)& (0+255),f,b
  4960  00120E                     	if	0	;tblptru may be non-zero
  4961  00120E                     	endif
  4962  00120E                     	if	0	;tblptru may be non-zero
  4963  00120E                     	endif
  4964  00120E  0008               	tblrd		*
  4965  001210  CFF5 F0D3          	movff	tablat,printf@c
  4966  001214  0100               	movlb	0	; () banked
  4967  001216  51D3               	movf	printf@c& (0+255),w,b
  4968                           
  4969                           ; Switch size 1, requested type "space"
  4970                           ; Number of cases is 3, Range of values is 0 to 105
  4971                           ; switch strategies available:
  4972                           ; Name         Instructions Cycles
  4973                           ; simple_byte           10     6 (average)
  4974                           ;	Chosen strategy is simple_byte
  4975  001218  0A00               	xorlw	0	; case 0
  4976  00121A  B4D8               	btfsc	status,2,c
  4977  00121C  0012               	return	
  4978  00121E  0A64               	xorlw	100	; case 100
  4979  001220  B4D8               	btfsc	status,2,c
  4980  001222  D003               	goto	l3857
  4981  001224  0A0D               	xorlw	13	; case 105
  4982  001226  A4D8               	btfss	status,2,c
  4983  001228  D0D0               	goto	l3923
  4984  00122A                     l3857:
  4985                           
  4986                           ;doprnt.c: 1253: {
  4987                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4988  00122A  C0CB  FFD9         	movff	printf@ap,fsr2l
  4989  00122E  C0CC  FFDA         	movff	printf@ap+1,fsr2h
  4990  001232  CFDE F0CE          	movff	postinc2,printf@val
  4991  001236  CFDD F0CF          	movff	postdec2,printf@val+1
  4992  00123A  0E02               	movlw	2
  4993  00123C  0100               	movlb	0	; () banked
  4994  00123E  27CB               	addwf	printf@ap& (0+255),f,b
  4995  001240  0E00               	movlw	0
  4996  001242  23CC               	addwfc	(printf@ap+1)& (0+255),f,b
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;doprnt.c: 1261: if((int)val < 0) {
  5000  001244  0100               	movlb	0	; () banked
  5001  001246  AFCF               	btfss	(printf@val+1)& (0+255),7,b
  5002  001248  D008               	goto	l3867
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;doprnt.c: 1262: flag |= 0x03;
  5006  00124A  0E03               	movlw	3
  5007  00124C  0100               	movlb	0	; () banked
  5008  00124E  13D0               	iorwf	printf@flag& (0+255),f,b
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;doprnt.c: 1263: val = -val;
  5012  001250  0100               	movlb	0	; () banked
  5013  001252  6DCE               	negf	printf@val& (0+255),b
  5014  001254  1FCF               	comf	(printf@val+1)& (0+255),f,b
  5015  001256  B0D8               	btfsc	status,0,c
  5016  001258  2BCF               	incf	(printf@val+1)& (0+255),f,b
  5017  00125A                     l3867:
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;doprnt.c: 1264: }
  5021                           ;doprnt.c: 1266: }
  5022                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5023  00125A  0E01               	movlw	1
  5024  00125C  0100               	movlb	0	; () banked
  5025  00125E  6FD3               	movwf	printf@c& (0+255),b
  5026  001260                     l3869:
  5027                           
  5028                           ; BSR set to: 0
  5029  001260  0E05               	movlw	5
  5030  001262  0100               	movlb	0	; () banked
  5031  001264  19D3               	xorwf	printf@c& (0+255),w,b
  5032  001266  B4D8               	btfsc	status,2,c
  5033  001268  D016               	goto	l3881
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;doprnt.c: 1306: if(val < dpowers[c])
  5037                           
  5038                           ; BSR set to: 0
  5039                           
  5040                           ; BSR set to: 0
  5041  00126A  0100               	movlb	0	; () banked
  5042  00126C  51D3               	movf	printf@c& (0+255),w,b
  5043  00126E  0D02               	mullw	2
  5044  001270  0E2D               	movlw	low _dpowers
  5045  001272  24F3               	addwf	prodl,w,c
  5046  001274  6EF6               	movwf	tblptrl,c
  5047  001276  0E7E               	movlw	high _dpowers
  5048  001278  20F4               	addwfc	prodh,w,c
  5049  00127A  6EF7               	movwf	tblptrh,c
  5050  00127C                     	if	0	;There are less than 3 active tblptr bytes
  5051  00127C                     	endif
  5052  00127C  0009               	tblrd		*+
  5053  00127E  50F5               	movf	tablat,w,c
  5054  001280  0100               	movlb	0	; () banked
  5055  001282  5DCE               	subwf	printf@val& (0+255),w,b
  5056  001284  0009               	tblrd		*+
  5057  001286  50F5               	movf	tablat,w,c
  5058  001288  0100               	movlb	0	; () banked
  5059  00128A  59CF               	subwfb	(printf@val+1)& (0+255),w,b
  5060  00128C  A0D8               	btfss	status,0,c
  5061  00128E  D003               	goto	l3881
  5062                           
  5063                           ; BSR set to: 0
  5064                           
  5065                           ; BSR set to: 0
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;doprnt.c: 1307: break;
  5069  001290  0100               	movlb	0	; () banked
  5070  001292  2BD3               	incf	printf@c& (0+255),f,b
  5071  001294  D7E5               	goto	l3869
  5072  001296                     l3881:
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5076  001296  0100               	movlb	0	; () banked
  5077  001298  51D1               	movf	printf@width& (0+255),w,b
  5078  00129A  0100               	movlb	0	; () banked
  5079  00129C  11D2               	iorwf	(printf@width+1)& (0+255),w,b
  5080  00129E  B4D8               	btfsc	status,2,c
  5081  0012A0  D00B               	goto	l3887
  5082                           
  5083                           ; BSR set to: 0
  5084  0012A2  C0D0  F0C7         	movff	printf@flag,??_printf
  5085  0012A6  0E03               	movlw	3
  5086  0012A8  0100               	movlb	0	; () banked
  5087  0012AA  17C7               	andwf	??_printf& (0+255),f,b
  5088  0012AC  B4D8               	btfsc	status,2,c
  5089  0012AE  D004               	goto	l3887
  5090                           
  5091                           ; BSR set to: 0
  5092                           ;doprnt.c: 1346: width--;
  5093  0012B0  0100               	movlb	0	; () banked
  5094  0012B2  07D1               	decf	printf@width& (0+255),f,b
  5095  0012B4  A0D8               	btfss	status,0,c
  5096  0012B6  07D2               	decf	(printf@width+1)& (0+255),f,b
  5097  0012B8                     l3887:
  5098                           
  5099                           ; BSR set to: 0
  5100                           ;doprnt.c: 1381: if(width > c)
  5101  0012B8  0E80               	movlw	128
  5102  0012BA  0100               	movlb	0	; () banked
  5103  0012BC  BFD3               	btfsc	printf@c& (0+255),7,b
  5104  0012BE  0E7F               	movlw	127
  5105  0012C0  0100               	movlb	0	; () banked
  5106  0012C2  6FC7               	movwf	??_printf& (0+255),b
  5107  0012C4  0100               	movlb	0	; () banked
  5108  0012C6  51D1               	movf	printf@width& (0+255),w,b
  5109  0012C8  0100               	movlb	0	; () banked
  5110  0012CA  5DD3               	subwf	printf@c& (0+255),w,b
  5111  0012CC  0100               	movlb	0	; () banked
  5112  0012CE  51D2               	movf	(printf@width+1)& (0+255),w,b
  5113  0012D0  0A80               	xorlw	128
  5114  0012D2  0100               	movlb	0	; () banked
  5115  0012D4  59C7               	subwfb	??_printf& (0+255),w,b
  5116  0012D6  B0D8               	btfsc	status,0,c
  5117  0012D8  D00B               	goto	l3891
  5118                           
  5119                           ; BSR set to: 0
  5120                           ;doprnt.c: 1382: width -= c;
  5121  0012DA  0100               	movlb	0	; () banked
  5122  0012DC  51D3               	movf	printf@c& (0+255),w,b
  5123  0012DE  0100               	movlb	0	; () banked
  5124  0012E0  5FD1               	subwf	printf@width& (0+255),f,b
  5125  0012E2  0E00               	movlw	0
  5126  0012E4  0100               	movlb	0	; () banked
  5127  0012E6  BFD3               	btfsc	printf@c& (0+255),7,b
  5128  0012E8  0EFF               	movlw	255
  5129  0012EA  0100               	movlb	0	; () banked
  5130  0012EC  5BD2               	subwfb	(printf@width+1)& (0+255),f,b
  5131  0012EE  D005               	goto	l3893
  5132  0012F0                     l3891:
  5133                           
  5134                           ; BSR set to: 0
  5135                           ;doprnt.c: 1383: else
  5136                           ;doprnt.c: 1384: width = 0;
  5137  0012F0  0E00               	movlw	0
  5138  0012F2  0100               	movlb	0	; () banked
  5139  0012F4  6FD2               	movwf	(printf@width+1)& (0+255),b
  5140  0012F6  0E00               	movlw	0
  5141  0012F8  6FD1               	movwf	printf@width& (0+255),b
  5142  0012FA                     l3893:
  5143                           
  5144                           ; BSR set to: 0
  5145                           ;doprnt.c: 1387: if(flag & 0x04) {
  5146  0012FA  0100               	movlb	0	; () banked
  5147  0012FC  A5D0               	btfss	printf@flag& (0+255),2,b
  5148  0012FE  D018               	goto	l3905
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;doprnt.c: 1392: if(flag & 0x03)
  5152  001300  C0D0  F0C7         	movff	printf@flag,??_printf
  5153  001304  0E03               	movlw	3
  5154  001306  0100               	movlb	0	; () banked
  5155  001308  17C7               	andwf	??_printf& (0+255),f,b
  5156  00130A  B4D8               	btfsc	status,2,c
  5157  00130C  D003               	goto	l3899
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;doprnt.c: 1393: (putch('-') );
  5161  00130E  0E2D               	movlw	45
  5162  001310  EC1C  F012         	call	_putch
  5163  001314                     l3899:
  5164                           
  5165                           ;doprnt.c: 1415: if(width)
  5166  001314  0100               	movlb	0	; () banked
  5167  001316  51D1               	movf	printf@width& (0+255),w,b
  5168  001318  0100               	movlb	0	; () banked
  5169  00131A  11D2               	iorwf	(printf@width+1)& (0+255),w,b
  5170  00131C  B4D8               	btfsc	status,2,c
  5171  00131E  D025               	goto	l3915
  5172                           
  5173                           ; BSR set to: 0
  5174                           ;doprnt.c: 1417: (putch('0') );
  5175                           
  5176                           ; BSR set to: 0
  5177                           
  5178                           ;doprnt.c: 1416: do
  5179  001320  0E30               	movlw	48
  5180  001322  EC1C  F012         	call	_putch
  5181                           
  5182                           ;doprnt.c: 1418: while(--width);
  5183  001326  0100               	movlb	0	; () banked
  5184  001328  07D1               	decf	printf@width& (0+255),f,b
  5185  00132A  A0D8               	btfss	status,0,c
  5186  00132C  07D2               	decf	(printf@width+1)& (0+255),f,b
  5187  00132E  D7F2               	goto	l3899
  5188  001330                     l3905:
  5189                           
  5190                           ; BSR set to: 0
  5191                           ;doprnt.c: 1422: {
  5192                           ;doprnt.c: 1424: if(width
  5193                           ;doprnt.c: 1428: )
  5194  001330  0100               	movlb	0	; () banked
  5195  001332  51D1               	movf	printf@width& (0+255),w,b
  5196  001334  0100               	movlb	0	; () banked
  5197  001336  11D2               	iorwf	(printf@width+1)& (0+255),w,b
  5198  001338  B4D8               	btfsc	status,2,c
  5199  00133A  D00D               	goto	l3911
  5200  00133C                     l3907:
  5201                           
  5202                           ; BSR set to: 0
  5203                           ;doprnt.c: 1430: (putch(' ') );
  5204  00133C  0E20               	movlw	32
  5205  00133E  EC1C  F012         	call	_putch
  5206                           
  5207                           ;doprnt.c: 1431: while(--width);
  5208  001342  0100               	movlb	0	; () banked
  5209  001344  07D1               	decf	printf@width& (0+255),f,b
  5210  001346  A0D8               	btfss	status,0,c
  5211  001348  07D2               	decf	(printf@width+1)& (0+255),f,b
  5212  00134A  0100               	movlb	0	; () banked
  5213  00134C  51D1               	movf	printf@width& (0+255),w,b
  5214  00134E  0100               	movlb	0	; () banked
  5215  001350  11D2               	iorwf	(printf@width+1)& (0+255),w,b
  5216  001352  A4D8               	btfss	status,2,c
  5217  001354  D7F3               	goto	l3907
  5218  001356                     l3911:
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;doprnt.c: 1438: if(flag & 0x03)
  5222  001356  C0D0  F0C7         	movff	printf@flag,??_printf
  5223  00135A  0E03               	movlw	3
  5224  00135C  0100               	movlb	0	; () banked
  5225  00135E  17C7               	andwf	??_printf& (0+255),f,b
  5226  001360  B4D8               	btfsc	status,2,c
  5227  001362  D003               	goto	l3915
  5228                           
  5229                           ; BSR set to: 0
  5230                           ;doprnt.c: 1439: (putch('-') );
  5231  001364  0E2D               	movlw	45
  5232  001366  EC1C  F012         	call	_putch
  5233  00136A                     l3915:
  5234                           
  5235                           ;doprnt.c: 1469: }
  5236                           ;doprnt.c: 1472: prec = c;
  5237  00136A  C0D3  F0CD         	movff	printf@c,printf@prec
  5238                           
  5239                           ;doprnt.c: 1474: while(prec--) {
  5240  00136E  D027               	goto	l3921
  5241  001370                     l3917:
  5242                           
  5243                           ;doprnt.c: 1478: {
  5244                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5245  001370  0100               	movlb	0	; () banked
  5246  001372  51CD               	movf	printf@prec& (0+255),w,b
  5247  001374  0D02               	mullw	2
  5248  001376  0E2D               	movlw	low _dpowers
  5249  001378  24F3               	addwf	prodl,w,c
  5250  00137A  6EF6               	movwf	tblptrl,c
  5251  00137C  0E7E               	movlw	high _dpowers
  5252  00137E  20F4               	addwfc	prodh,w,c
  5253  001380  6EF7               	movwf	tblptrh,c
  5254  001382                     	if	0	;There are less than 3 active tblptr bytes
  5255  001382                     	endif
  5256  001382  0009               	tblrd		*+
  5257  001384  CFF5 F013          	movff	tablat,___lwdiv@divisor
  5258  001388  000A               	tblrd		*-
  5259  00138A  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  5260  00138E  C0CE  F011         	movff	printf@val,___lwdiv@dividend
  5261  001392  C0CF  F012         	movff	printf@val+1,___lwdiv@dividend+1
  5262  001396  ECAE  F010         	call	___lwdiv	;wreg free
  5263  00139A  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  5264  00139E  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  5265  0013A2  0E00               	movlw	0
  5266  0013A4  6E1B               	movwf	___lwmod@divisor+1,c
  5267  0013A6  0E0A               	movlw	10
  5268  0013A8  6E1A               	movwf	___lwmod@divisor,c
  5269  0013AA  ECFE  F010         	call	___lwmod	;wreg free
  5270  0013AE  5018               	movf	?___lwmod,w,c
  5271  0013B0  0F30               	addlw	48
  5272  0013B2  0100               	movlb	0	; () banked
  5273  0013B4  6FD3               	movwf	printf@c& (0+255),b
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;doprnt.c: 1523: }
  5277                           ;doprnt.c: 1524: (putch(c) );
  5278  0013B6  0100               	movlb	0	; () banked
  5279  0013B8  51D3               	movf	printf@c& (0+255),w,b
  5280  0013BA  EC1C  F012         	call	_putch
  5281  0013BE                     l3921:
  5282  0013BE  0100               	movlb	0	; () banked
  5283  0013C0  07CD               	decf	printf@prec& (0+255),f,b
  5284  0013C2  0100               	movlb	0	; () banked
  5285  0013C4  29CD               	incf	printf@prec& (0+255),w,b
  5286  0013C6  A4D8               	btfss	status,2,c
  5287  0013C8  D7D3               	goto	l3917
  5288  0013CA                     l3923:
  5289  0013CA  C0BF  FFF6         	movff	printf@f,tblptrl
  5290  0013CE  C0C0  FFF7         	movff	printf@f+1,tblptrh
  5291  0013D2  0100               	movlb	0	; () banked
  5292  0013D4  4BBF               	infsnz	printf@f& (0+255),f,b
  5293  0013D6  2BC0               	incf	(printf@f+1)& (0+255),f,b
  5294  0013D8                     	if	0	;tblptru may be non-zero
  5295  0013D8                     	endif
  5296  0013D8                     	if	0	;tblptru may be non-zero
  5297  0013D8                     	endif
  5298  0013D8  0008               	tblrd		*
  5299  0013DA  CFF5 F0D3          	movff	tablat,printf@c
  5300  0013DE  0100               	movlb	0	; () banked
  5301  0013E0  51D3               	movf	printf@c& (0+255),w,b
  5302  0013E2  B4D8               	btfsc	status,2,c
  5303  0013E4  0012               	return	
  5304  0013E6  D6A1               	goto	l3829
  5305  0013E8                     __end_of_printf:
  5306                           	opt stack 0
  5307                           tblptru	equ	0xFF8
  5308                           tblptrh	equ	0xFF7
  5309                           tblptrl	equ	0xFF6
  5310                           tablat	equ	0xFF5
  5311                           prodh	equ	0xFF4
  5312                           prodl	equ	0xFF3
  5313                           postinc0	equ	0xFEE
  5314                           wreg	equ	0xFE8
  5315                           postinc1	equ	0xFE6
  5316                           postdec1	equ	0xFE5
  5317                           fsr1h	equ	0xFE2
  5318                           fsr1l	equ	0xFE1
  5319                           postinc2	equ	0xFDE
  5320                           postdec2	equ	0xFDD
  5321                           fsr2h	equ	0xFDA
  5322                           fsr2l	equ	0xFD9
  5323                           status	equ	0xFD8
  5324                           
  5325 ;; *************** function _putch *****************
  5326 ;; Defined at:
  5327 ;;		line 24 in file "wixel.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;  data            1    wreg     unsigned char 
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;  data            1   16[COMRAM] unsigned char 
  5332 ;; Return value:  Size  Location     Type
  5333 ;;                  1    wreg      void 
  5334 ;; Registers used:
  5335 ;;		wreg
  5336 ;; Tracked objects:
  5337 ;;		On entry : 0/0
  5338 ;;		On exit  : 0/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5341 ;;      Params:         0       0       0       0       0       0       0       0       0
  5342 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5343 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5344 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5345 ;;Total ram usage:        1 bytes
  5346 ;; Hardware stack levels used:    1
  5347 ;; Hardware stack levels required when called:    1
  5348 ;; This function calls:
  5349 ;;		Nothing
  5350 ;; This function is called by:
  5351 ;;		_printf
  5352 ;; This function uses a non-reentrant model
  5353 ;;
  5354                           
  5355                           	psect	text12
  5356  002438                     __ptext12:
  5357                           	opt stack 0
  5358  002438                     _putch:
  5359                           	opt stack 28
  5360                           
  5361                           ;incstack = 0
  5362                           ;putch@data stored from wreg
  5363  002438  6E11               	movwf	putch@data,c
  5364  00243A                     l363:
  5365  00243A  A89E               	btfss	3998,4,c	;volatile
  5366  00243C  D7FE               	goto	l363
  5367                           
  5368                           ;wixel.c: 27: TXREG = data;
  5369  00243E  C011  FFAD         	movff	putch@data,4013	;volatile
  5370  002442  0012               	return		;funcret
  5371  002444                     __end_of_putch:
  5372                           	opt stack 0
  5373                           tblptru	equ	0xFF8
  5374                           tblptrh	equ	0xFF7
  5375                           tblptrl	equ	0xFF6
  5376                           tablat	equ	0xFF5
  5377                           prodh	equ	0xFF4
  5378                           prodl	equ	0xFF3
  5379                           postinc0	equ	0xFEE
  5380                           wreg	equ	0xFE8
  5381                           postinc1	equ	0xFE6
  5382                           postdec1	equ	0xFE5
  5383                           fsr1h	equ	0xFE2
  5384                           fsr1l	equ	0xFE1
  5385                           postinc2	equ	0xFDE
  5386                           postdec2	equ	0xFDD
  5387                           fsr2h	equ	0xFDA
  5388                           fsr2l	equ	0xFD9
  5389                           status	equ	0xFD8
  5390                           
  5391 ;; *************** function _isdigit *****************
  5392 ;; Defined at:
  5393 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/isdigit.c"
  5394 ;; Parameters:    Size  Location     Type
  5395 ;;  c               1    wreg     unsigned char 
  5396 ;; Auto vars:     Size  Location     Type
  5397 ;;  c               1   18[COMRAM] unsigned char 
  5398 ;; Return value:  Size  Location     Type
  5399 ;;		None               void
  5400 ;; Registers used:
  5401 ;;		wreg, status,2, status,0
  5402 ;; Tracked objects:
  5403 ;;		On entry : 0/0
  5404 ;;		On exit  : 0/0
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5407 ;;      Params:         0       0       0       0       0       0       0       0       0
  5408 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5409 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5410 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5411 ;;Total ram usage:        3 bytes
  5412 ;; Hardware stack levels used:    1
  5413 ;; Hardware stack levels required when called:    1
  5414 ;; This function calls:
  5415 ;;		Nothing
  5416 ;; This function is called by:
  5417 ;;		_printf
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           	psect	text13
  5422  0023EA                     __ptext13:
  5423                           	opt stack 0
  5424  0023EA                     _isdigit:
  5425                           	opt stack 28
  5426                           
  5427                           ;incstack = 0
  5428                           ;isdigit@c stored from wreg
  5429  0023EA  6E13               	movwf	isdigit@c,c
  5430  0023EC  0E00               	movlw	0
  5431  0023EE  6E12               	movwf	_isdigit$1966,c
  5432  0023F0  0E3A               	movlw	58
  5433  0023F2  6013               	cpfslt	isdigit@c,c
  5434  0023F4  D005               	goto	l3587
  5435  0023F6  0E2F               	movlw	47
  5436  0023F8  6413               	cpfsgt	isdigit@c,c
  5437  0023FA  D002               	goto	l3587
  5438  0023FC  0E01               	movlw	1
  5439  0023FE  6E12               	movwf	_isdigit$1966,c
  5440  002400                     l3587:
  5441  002400  C012  F011         	movff	_isdigit$1966,??_isdigit
  5442  002404  3011               	rrcf	??_isdigit,w,c
  5443  002406  0012               	return	
  5444  002408                     __end_of_isdigit:
  5445                           	opt stack 0
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           prodh	equ	0xFF4
  5451                           prodl	equ	0xFF3
  5452                           postinc0	equ	0xFEE
  5453                           wreg	equ	0xFE8
  5454                           postinc1	equ	0xFE6
  5455                           postdec1	equ	0xFE5
  5456                           fsr1h	equ	0xFE2
  5457                           fsr1l	equ	0xFE1
  5458                           postinc2	equ	0xFDE
  5459                           postdec2	equ	0xFDD
  5460                           fsr2h	equ	0xFDA
  5461                           fsr2l	equ	0xFD9
  5462                           status	equ	0xFD8
  5463                           
  5464 ;; *************** function ___wmul *****************
  5465 ;; Defined at:
  5466 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul16.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;  multiplier      2   11[BANK0 ] unsigned int 
  5469 ;;  multiplicand    2   13[BANK0 ] unsigned int 
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;  product         2   59[COMRAM] unsigned int 
  5472 ;; Return value:  Size  Location     Type
  5473 ;;                  2   11[BANK0 ] unsigned int 
  5474 ;; Registers used:
  5475 ;;		wreg, status,2, status,0, prodl, prodh
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5481 ;;      Params:         0       4       0       0       0       0       0       0       0
  5482 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5483 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5484 ;;      Totals:         2       4       0       0       0       0       0       0       0
  5485 ;;Total ram usage:        6 bytes
  5486 ;; Hardware stack levels used:    1
  5487 ;; Hardware stack levels required when called:    1
  5488 ;; This function calls:
  5489 ;;		Nothing
  5490 ;; This function is called by:
  5491 ;;		_main
  5492 ;;		_printf
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           	psect	text14
  5497  0022F4                     __ptext14:
  5498                           	opt stack 0
  5499  0022F4                     ___wmul:
  5500                           	opt stack 28
  5501                           
  5502                           ;incstack = 0
  5503  0022F4  0100               	movlb	0	; () banked
  5504  0022F6  51BB               	movf	___wmul@multiplier& (0+255),w,b
  5505  0022F8  0100               	movlb	0	; () banked
  5506  0022FA  03BD               	mulwf	___wmul@multiplicand& (0+255),b
  5507  0022FC  CFF3 F03C          	movff	prodl,___wmul@product
  5508  002300  CFF4 F03D          	movff	prodh,___wmul@product+1
  5509  002304  0100               	movlb	0	; () banked
  5510  002306  51BB               	movf	___wmul@multiplier& (0+255),w,b
  5511  002308  0100               	movlb	0	; () banked
  5512  00230A  03BE               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5513  00230C  50F3               	movf	prodl,w,c
  5514  00230E  263D               	addwf	___wmul@product+1,f,c
  5515  002310  0100               	movlb	0	; () banked
  5516  002312  51BC               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5517  002314  0100               	movlb	0	; () banked
  5518  002316  03BD               	mulwf	___wmul@multiplicand& (0+255),b
  5519  002318  50F3               	movf	prodl,w,c
  5520  00231A  263D               	addwf	___wmul@product+1,f,c
  5521                           
  5522                           ; BSR set to: 0
  5523  00231C  C03C  F0BB         	movff	___wmul@product,?___wmul
  5524  002320  C03D  F0BC         	movff	___wmul@product+1,?___wmul+1
  5525  002324  0012               	return	
  5526  002326                     __end_of___wmul:
  5527                           	opt stack 0
  5528                           tblptru	equ	0xFF8
  5529                           tblptrh	equ	0xFF7
  5530                           tblptrl	equ	0xFF6
  5531                           tablat	equ	0xFF5
  5532                           prodh	equ	0xFF4
  5533                           prodl	equ	0xFF3
  5534                           postinc0	equ	0xFEE
  5535                           wreg	equ	0xFE8
  5536                           postinc1	equ	0xFE6
  5537                           postdec1	equ	0xFE5
  5538                           fsr1h	equ	0xFE2
  5539                           fsr1l	equ	0xFE1
  5540                           postinc2	equ	0xFDE
  5541                           postdec2	equ	0xFDD
  5542                           fsr2h	equ	0xFDA
  5543                           fsr2l	equ	0xFD9
  5544                           status	equ	0xFD8
  5545                           
  5546 ;; *************** function ___lwmod *****************
  5547 ;; Defined at:
  5548 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/lwmod.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;  dividend        2   23[COMRAM] unsigned int 
  5551 ;;  divisor         2   25[COMRAM] unsigned int 
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;  counter         1   27[COMRAM] unsigned char 
  5554 ;; Return value:  Size  Location     Type
  5555 ;;                  2   23[COMRAM] unsigned int 
  5556 ;; Registers used:
  5557 ;;		wreg, status,2, status,0
  5558 ;; Tracked objects:
  5559 ;;		On entry : 0/0
  5560 ;;		On exit  : 0/0
  5561 ;;		Unchanged: 0/0
  5562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5563 ;;      Params:         4       0       0       0       0       0       0       0       0
  5564 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5565 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5566 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5567 ;;Total ram usage:        5 bytes
  5568 ;; Hardware stack levels used:    1
  5569 ;; Hardware stack levels required when called:    1
  5570 ;; This function calls:
  5571 ;;		Nothing
  5572 ;; This function is called by:
  5573 ;;		_printf
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           	psect	text15
  5578  0021FC                     __ptext15:
  5579                           	opt stack 0
  5580  0021FC                     ___lwmod:
  5581                           	opt stack 28
  5582                           
  5583                           ; BSR set to: 0
  5584                           ;incstack = 0
  5585  0021FC  501A               	movf	___lwmod@divisor,w,c
  5586  0021FE  101B               	iorwf	___lwmod@divisor+1,w,c
  5587  002200  B4D8               	btfsc	status,2,c
  5588  002202  D018               	goto	l888
  5589  002204  0E01               	movlw	1
  5590  002206  6E1C               	movwf	___lwmod@counter,c
  5591  002208  D004               	goto	l3735
  5592  00220A                     l3733:
  5593  00220A  90D8               	bcf	status,0,c
  5594  00220C  361A               	rlcf	___lwmod@divisor,f,c
  5595  00220E  361B               	rlcf	___lwmod@divisor+1,f,c
  5596  002210  2A1C               	incf	___lwmod@counter,f,c
  5597  002212                     l3735:
  5598  002212  AE1B               	btfss	___lwmod@divisor+1,7,c
  5599  002214  D7FA               	goto	l3733
  5600  002216                     l3737:
  5601  002216  501A               	movf	___lwmod@divisor,w,c
  5602  002218  5C18               	subwf	___lwmod@dividend,w,c
  5603  00221A  501B               	movf	___lwmod@divisor+1,w,c
  5604  00221C  5819               	subwfb	___lwmod@dividend+1,w,c
  5605  00221E  A0D8               	btfss	status,0,c
  5606  002220  D004               	goto	l3741
  5607  002222  501A               	movf	___lwmod@divisor,w,c
  5608  002224  5E18               	subwf	___lwmod@dividend,f,c
  5609  002226  501B               	movf	___lwmod@divisor+1,w,c
  5610  002228  5A19               	subwfb	___lwmod@dividend+1,f,c
  5611  00222A                     l3741:
  5612  00222A  90D8               	bcf	status,0,c
  5613  00222C  321B               	rrcf	___lwmod@divisor+1,f,c
  5614  00222E  321A               	rrcf	___lwmod@divisor,f,c
  5615  002230  2E1C               	decfsz	___lwmod@counter,f,c
  5616  002232  D7F1               	goto	l3737
  5617  002234                     l888:
  5618  002234  C018  F018         	movff	___lwmod@dividend,?___lwmod
  5619  002238  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  5620  00223C  0012               	return		;funcret
  5621  00223E                     __end_of___lwmod:
  5622                           	opt stack 0
  5623                           tblptru	equ	0xFF8
  5624                           tblptrh	equ	0xFF7
  5625                           tblptrl	equ	0xFF6
  5626                           tablat	equ	0xFF5
  5627                           prodh	equ	0xFF4
  5628                           prodl	equ	0xFF3
  5629                           postinc0	equ	0xFEE
  5630                           wreg	equ	0xFE8
  5631                           postinc1	equ	0xFE6
  5632                           postdec1	equ	0xFE5
  5633                           fsr1h	equ	0xFE2
  5634                           fsr1l	equ	0xFE1
  5635                           postinc2	equ	0xFDE
  5636                           postdec2	equ	0xFDD
  5637                           fsr2h	equ	0xFDA
  5638                           fsr2l	equ	0xFD9
  5639                           status	equ	0xFD8
  5640                           
  5641 ;; *************** function ___lwdiv *****************
  5642 ;; Defined at:
  5643 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/lwdiv.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;  dividend        2   16[COMRAM] unsigned int 
  5646 ;;  divisor         2   18[COMRAM] unsigned int 
  5647 ;; Auto vars:     Size  Location     Type
  5648 ;;  quotient        2   21[COMRAM] unsigned int 
  5649 ;;  counter         1   20[COMRAM] unsigned char 
  5650 ;; Return value:  Size  Location     Type
  5651 ;;                  2   16[COMRAM] unsigned int 
  5652 ;; Registers used:
  5653 ;;		wreg, status,2, status,0
  5654 ;; Tracked objects:
  5655 ;;		On entry : 0/0
  5656 ;;		On exit  : 0/0
  5657 ;;		Unchanged: 0/0
  5658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5659 ;;      Params:         4       0       0       0       0       0       0       0       0
  5660 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5661 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5662 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5663 ;;Total ram usage:        7 bytes
  5664 ;; Hardware stack levels used:    1
  5665 ;; Hardware stack levels required when called:    1
  5666 ;; This function calls:
  5667 ;;		Nothing
  5668 ;; This function is called by:
  5669 ;;		_printf
  5670 ;; This function uses a non-reentrant model
  5671 ;;
  5672                           
  5673                           	psect	text16
  5674  00215C                     __ptext16:
  5675                           	opt stack 0
  5676  00215C                     ___lwdiv:
  5677                           	opt stack 28
  5678                           
  5679                           ;incstack = 0
  5680  00215C  0E00               	movlw	0
  5681  00215E  6E17               	movwf	___lwdiv@quotient+1,c
  5682  002160  0E00               	movlw	0
  5683  002162  6E16               	movwf	___lwdiv@quotient,c
  5684  002164  5013               	movf	___lwdiv@divisor,w,c
  5685  002166  1014               	iorwf	___lwdiv@divisor+1,w,c
  5686  002168  B4D8               	btfsc	status,2,c
  5687  00216A  D01C               	goto	l878
  5688  00216C  0E01               	movlw	1
  5689  00216E  6E15               	movwf	___lwdiv@counter,c
  5690  002170  D004               	goto	l3715
  5691  002172                     l3713:
  5692  002172  90D8               	bcf	status,0,c
  5693  002174  3613               	rlcf	___lwdiv@divisor,f,c
  5694  002176  3614               	rlcf	___lwdiv@divisor+1,f,c
  5695  002178  2A15               	incf	___lwdiv@counter,f,c
  5696  00217A                     l3715:
  5697  00217A  AE14               	btfss	___lwdiv@divisor+1,7,c
  5698  00217C  D7FA               	goto	l3713
  5699  00217E                     l3717:
  5700  00217E  90D8               	bcf	status,0,c
  5701  002180  3616               	rlcf	___lwdiv@quotient,f,c
  5702  002182  3617               	rlcf	___lwdiv@quotient+1,f,c
  5703  002184  5013               	movf	___lwdiv@divisor,w,c
  5704  002186  5C11               	subwf	___lwdiv@dividend,w,c
  5705  002188  5014               	movf	___lwdiv@divisor+1,w,c
  5706  00218A  5812               	subwfb	___lwdiv@dividend+1,w,c
  5707  00218C  A0D8               	btfss	status,0,c
  5708  00218E  D005               	goto	l3725
  5709  002190  5013               	movf	___lwdiv@divisor,w,c
  5710  002192  5E11               	subwf	___lwdiv@dividend,f,c
  5711  002194  5014               	movf	___lwdiv@divisor+1,w,c
  5712  002196  5A12               	subwfb	___lwdiv@dividend+1,f,c
  5713  002198  8016               	bsf	___lwdiv@quotient,0,c
  5714  00219A                     l3725:
  5715  00219A  90D8               	bcf	status,0,c
  5716  00219C  3214               	rrcf	___lwdiv@divisor+1,f,c
  5717  00219E  3213               	rrcf	___lwdiv@divisor,f,c
  5718  0021A0  2E15               	decfsz	___lwdiv@counter,f,c
  5719  0021A2  D7ED               	goto	l3717
  5720  0021A4                     l878:
  5721  0021A4  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  5722  0021A8  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5723  0021AC  0012               	return		;funcret
  5724  0021AE                     __end_of___lwdiv:
  5725                           	opt stack 0
  5726                           tblptru	equ	0xFF8
  5727                           tblptrh	equ	0xFF7
  5728                           tblptrl	equ	0xFF6
  5729                           tablat	equ	0xFF5
  5730                           prodh	equ	0xFF4
  5731                           prodl	equ	0xFF3
  5732                           postinc0	equ	0xFEE
  5733                           wreg	equ	0xFE8
  5734                           postinc1	equ	0xFE6
  5735                           postdec1	equ	0xFE5
  5736                           fsr1h	equ	0xFE2
  5737                           fsr1l	equ	0xFE1
  5738                           postinc2	equ	0xFDE
  5739                           postdec2	equ	0xFDD
  5740                           fsr2h	equ	0xFDA
  5741                           fsr2l	equ	0xFD9
  5742                           status	equ	0xFD8
  5743                           
  5744 ;; *************** function _mspeed *****************
  5745 ;; Defined at:
  5746 ;;		line 107 in file "config.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;  a               2   11[BANK0 ] int 
  5749 ;;  b               2   13[BANK0 ] int 
  5750 ;; Auto vars:     Size  Location     Type
  5751 ;;		None
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  1    wreg      void 
  5754 ;; Registers used:
  5755 ;;		wreg, status,2, status,0, cstack
  5756 ;; Tracked objects:
  5757 ;;		On entry : 0/0
  5758 ;;		On exit  : 0/0
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5761 ;;      Params:         0       4       0       0       0       0       0       0       0
  5762 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5763 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5764 ;;      Totals:         0       4       0       0       0       0       0       0       0
  5765 ;;Total ram usage:        4 bytes
  5766 ;; Hardware stack levels used:    1
  5767 ;; Hardware stack levels required when called:    3
  5768 ;; This function calls:
  5769 ;;		_MotorASpeed
  5770 ;;		_MotorBSpeed
  5771 ;; This function is called by:
  5772 ;;		_main
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776                           	psect	text17
  5777  002408                     __ptext17:
  5778                           	opt stack 0
  5779  002408                     _mspeed:
  5780                           	opt stack 27
  5781                           
  5782                           ;config.c: 108: MotorASpeed(a);
  5783                           
  5784                           ;incstack = 0
  5785  002408  C0BB  F019         	movff	mspeed@a,MotorASpeed@S
  5786  00240C  C0BC  F01A         	movff	mspeed@a+1,MotorASpeed@S+1
  5787  002410  ECB4  F00E         	call	_MotorASpeed	;wreg free
  5788                           
  5789                           ;config.c: 109: MotorBSpeed(b);
  5790  002414  C0BD  F019         	movff	mspeed@b,MotorBSpeed@S
  5791  002418  C0BE  F01A         	movff	mspeed@b+1,MotorBSpeed@S+1
  5792  00241C  EC05  F00F         	call	_MotorBSpeed	;wreg free
  5793  002420  0012               	return		;funcret
  5794  002422                     __end_of_mspeed:
  5795                           	opt stack 0
  5796                           tblptru	equ	0xFF8
  5797                           tblptrh	equ	0xFF7
  5798                           tblptrl	equ	0xFF6
  5799                           tablat	equ	0xFF5
  5800                           prodh	equ	0xFF4
  5801                           prodl	equ	0xFF3
  5802                           postinc0	equ	0xFEE
  5803                           wreg	equ	0xFE8
  5804                           postinc1	equ	0xFE6
  5805                           postdec1	equ	0xFE5
  5806                           fsr1h	equ	0xFE2
  5807                           fsr1l	equ	0xFE1
  5808                           postinc2	equ	0xFDE
  5809                           postdec2	equ	0xFDD
  5810                           fsr2h	equ	0xFDA
  5811                           fsr2l	equ	0xFD9
  5812                           status	equ	0xFD8
  5813                           
  5814 ;; *************** function _MotorBSpeed *****************
  5815 ;; Defined at:
  5816 ;;		line 95 in file "config.c"
  5817 ;; Parameters:    Size  Location     Type
  5818 ;;  S               2   24[COMRAM] int 
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;		None
  5821 ;; Return value:  Size  Location     Type
  5822 ;;                  1    wreg      void 
  5823 ;; Registers used:
  5824 ;;		wreg, status,2, status,0, cstack
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5830 ;;      Params:         2       0       0       0       0       0       0       0       0
  5831 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5832 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5833 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5834 ;;Total ram usage:        3 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    2
  5837 ;; This function calls:
  5838 ;;		___awdiv
  5839 ;; This function is called by:
  5840 ;;		_mspeed
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           	psect	text18
  5845  001E0A                     __ptext18:
  5846                           	opt stack 0
  5847  001E0A                     _MotorBSpeed:
  5848                           	opt stack 27
  5849                           
  5850                           ;config.c: 97: S = S<1000?S:1000;
  5851                           
  5852                           ;incstack = 0
  5853  001E0A  BE1A               	btfsc	MotorBSpeed@S+1,7,c
  5854  001E0C  D00A               	goto	l3563
  5855  001E0E  0EE8               	movlw	232
  5856  001E10  5C19               	subwf	MotorBSpeed@S,w,c
  5857  001E12  0E03               	movlw	3
  5858  001E14  581A               	subwfb	MotorBSpeed@S+1,w,c
  5859  001E16  A0D8               	btfss	status,0,c
  5860  001E18  D004               	goto	l3563
  5861  001E1A  0E03               	movlw	3
  5862  001E1C  6E1A               	movwf	MotorBSpeed@S+1,c
  5863  001E1E  0EE8               	movlw	232
  5864  001E20  6E19               	movwf	MotorBSpeed@S,c
  5865  001E22                     l3563:
  5866                           
  5867                           ;config.c: 98: S = S>-1000?S:-1000;
  5868  001E22  AE1A               	btfss	MotorBSpeed@S+1,7,c
  5869  001E24  D00A               	goto	l3567
  5870  001E26  0E19               	movlw	25
  5871  001E28  5C19               	subwf	MotorBSpeed@S,w,c
  5872  001E2A  0EFC               	movlw	252
  5873  001E2C  581A               	subwfb	MotorBSpeed@S+1,w,c
  5874  001E2E  B0D8               	btfsc	status,0,c
  5875  001E30  D004               	goto	l3567
  5876  001E32  0EFC               	movlw	252
  5877  001E34  6E1A               	movwf	MotorBSpeed@S+1,c
  5878  001E36  0E18               	movlw	24
  5879  001E38  6E19               	movwf	MotorBSpeed@S,c
  5880  001E3A                     l3567:
  5881                           
  5882                           ;config.c: 100: PORTBbits.RB1 = S > 0 ? 0 : 1;
  5883  001E3A  BE1A               	btfsc	MotorBSpeed@S+1,7,c
  5884  001E3C  D005               	goto	u4151
  5885  001E3E  501A               	movf	MotorBSpeed@S+1,w,c
  5886  001E40  E106               	bnz	u4150
  5887  001E42  0419               	decf	MotorBSpeed@S,w,c
  5888  001E44  B0D8               	btfsc	status,0,c
  5889  001E46  D003               	goto	u4150
  5890  001E48                     u4151:
  5891  001E48  6A1B               	clrf	??_MotorBSpeed& (0+255),c
  5892  001E4A  2A1B               	incf	??_MotorBSpeed& (0+255),f,c
  5893  001E4C  D001               	goto	u4168
  5894  001E4E                     u4150:
  5895  001E4E  6A1B               	clrf	??_MotorBSpeed& (0+255),c
  5896  001E50                     u4168:
  5897  001E50  461B               	rlncf	??_MotorBSpeed,f,c
  5898  001E52  5081               	movf	3969,w,c	;volatile
  5899  001E54  181B               	xorwf	??_MotorBSpeed,w,c
  5900  001E56  0BFD               	andlw	-3
  5901  001E58  181B               	xorwf	??_MotorBSpeed,w,c
  5902  001E5A  6E81               	movwf	3969,c	;volatile
  5903                           
  5904                           ;config.c: 101: S = S > 0 ? S : 1000 + S;
  5905  001E5C  BE1A               	btfsc	MotorBSpeed@S+1,7,c
  5906  001E5E  D005               	goto	l3569
  5907  001E60  501A               	movf	MotorBSpeed@S+1,w,c
  5908  001E62  E109               	bnz	l3571
  5909  001E64  0419               	decf	MotorBSpeed@S,w,c
  5910  001E66  B0D8               	btfsc	status,0,c
  5911  001E68  D006               	goto	l3571
  5912  001E6A                     l3569:
  5913  001E6A  0EE8               	movlw	232
  5914  001E6C  2419               	addwf	MotorBSpeed@S,w,c
  5915  001E6E  6E19               	movwf	MotorBSpeed@S,c
  5916  001E70  0E03               	movlw	3
  5917  001E72  201A               	addwfc	MotorBSpeed@S+1,w,c
  5918  001E74  6E1A               	movwf	MotorBSpeed@S+1,c
  5919  001E76                     l3571:
  5920                           
  5921                           ;config.c: 103: CCP2CONbits.DC2B = S % 4;
  5922  001E76  C019  F01B         	movff	MotorBSpeed@S,??_MotorBSpeed
  5923  001E7A  0E03               	movlw	3
  5924  001E7C  161B               	andwf	??_MotorBSpeed,f,c
  5925  001E7E  3A1B               	swapf	??_MotorBSpeed,f,c
  5926  001E80  50BA               	movf	4026,w,c	;volatile
  5927  001E82  181B               	xorwf	??_MotorBSpeed,w,c
  5928  001E84  0BCF               	andlw	-49
  5929  001E86  181B               	xorwf	??_MotorBSpeed,w,c
  5930  001E88  6EBA               	movwf	4026,c	;volatile
  5931                           
  5932                           ;config.c: 104: CCPR2L = S / 4;
  5933  001E8A  C019  F011         	movff	MotorBSpeed@S,___awdiv@dividend
  5934  001E8E  C01A  F012         	movff	MotorBSpeed@S+1,___awdiv@dividend+1
  5935  001E92  0E00               	movlw	0
  5936  001E94  6E14               	movwf	___awdiv@divisor+1,c
  5937  001E96  0E04               	movlw	4
  5938  001E98  6E13               	movwf	___awdiv@divisor,c
  5939  001E9A  EC9A  F00F         	call	___awdiv	;wreg free
  5940  001E9E  5011               	movf	?___awdiv,w,c
  5941  001EA0  6EBB               	movwf	4027,c	;volatile
  5942  001EA2  0012               	return		;funcret
  5943  001EA4                     __end_of_MotorBSpeed:
  5944                           	opt stack 0
  5945                           tblptru	equ	0xFF8
  5946                           tblptrh	equ	0xFF7
  5947                           tblptrl	equ	0xFF6
  5948                           tablat	equ	0xFF5
  5949                           prodh	equ	0xFF4
  5950                           prodl	equ	0xFF3
  5951                           postinc0	equ	0xFEE
  5952                           wreg	equ	0xFE8
  5953                           postinc1	equ	0xFE6
  5954                           postdec1	equ	0xFE5
  5955                           fsr1h	equ	0xFE2
  5956                           fsr1l	equ	0xFE1
  5957                           postinc2	equ	0xFDE
  5958                           postdec2	equ	0xFDD
  5959                           fsr2h	equ	0xFDA
  5960                           fsr2l	equ	0xFD9
  5961                           status	equ	0xFD8
  5962                           
  5963 ;; *************** function _MotorASpeed *****************
  5964 ;; Defined at:
  5965 ;;		line 84 in file "config.c"
  5966 ;; Parameters:    Size  Location     Type
  5967 ;;  S               2   24[COMRAM] int 
  5968 ;; Auto vars:     Size  Location     Type
  5969 ;;		None
  5970 ;; Return value:  Size  Location     Type
  5971 ;;                  1    wreg      void 
  5972 ;; Registers used:
  5973 ;;		wreg, status,2, status,0, cstack
  5974 ;; Tracked objects:
  5975 ;;		On entry : 0/0
  5976 ;;		On exit  : 0/0
  5977 ;;		Unchanged: 0/0
  5978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5979 ;;      Params:         2       0       0       0       0       0       0       0       0
  5980 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5981 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5982 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5983 ;;Total ram usage:        3 bytes
  5984 ;; Hardware stack levels used:    1
  5985 ;; Hardware stack levels required when called:    2
  5986 ;; This function calls:
  5987 ;;		___awdiv
  5988 ;; This function is called by:
  5989 ;;		_mspeed
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           	psect	text19
  5994  001D68                     __ptext19:
  5995                           	opt stack 0
  5996  001D68                     _MotorASpeed:
  5997                           	opt stack 27
  5998                           
  5999                           ;config.c: 85: S = -S;
  6000                           
  6001                           ;incstack = 0
  6002  001D68  6C19               	negf	MotorASpeed@S,c
  6003  001D6A  1E1A               	comf	MotorASpeed@S+1,f,c
  6004  001D6C  B0D8               	btfsc	status,0,c
  6005  001D6E  2A1A               	incf	MotorASpeed@S+1,f,c
  6006                           
  6007                           ;config.c: 86: S = S<1000?S:1000;
  6008  001D70  BE1A               	btfsc	MotorASpeed@S+1,7,c
  6009  001D72  D00A               	goto	l3547
  6010  001D74  0EE8               	movlw	232
  6011  001D76  5C19               	subwf	MotorASpeed@S,w,c
  6012  001D78  0E03               	movlw	3
  6013  001D7A  581A               	subwfb	MotorASpeed@S+1,w,c
  6014  001D7C  A0D8               	btfss	status,0,c
  6015  001D7E  D004               	goto	l3547
  6016  001D80  0E03               	movlw	3
  6017  001D82  6E1A               	movwf	MotorASpeed@S+1,c
  6018  001D84  0EE8               	movlw	232
  6019  001D86  6E19               	movwf	MotorASpeed@S,c
  6020  001D88                     l3547:
  6021                           
  6022                           ;config.c: 87: S = S>-1000?S:-1000;
  6023  001D88  AE1A               	btfss	MotorASpeed@S+1,7,c
  6024  001D8A  D00A               	goto	l3551
  6025  001D8C  0E19               	movlw	25
  6026  001D8E  5C19               	subwf	MotorASpeed@S,w,c
  6027  001D90  0EFC               	movlw	252
  6028  001D92  581A               	subwfb	MotorASpeed@S+1,w,c
  6029  001D94  B0D8               	btfsc	status,0,c
  6030  001D96  D004               	goto	l3551
  6031  001D98  0EFC               	movlw	252
  6032  001D9A  6E1A               	movwf	MotorASpeed@S+1,c
  6033  001D9C  0E18               	movlw	24
  6034  001D9E  6E19               	movwf	MotorASpeed@S,c
  6035  001DA0                     l3551:
  6036                           
  6037                           ;config.c: 89: PORTBbits.RB0 = S > 0 ? 0 : 1;
  6038  001DA0  BE1A               	btfsc	MotorASpeed@S+1,7,c
  6039  001DA2  D005               	goto	u4101
  6040  001DA4  501A               	movf	MotorASpeed@S+1,w,c
  6041  001DA6  E106               	bnz	u4100
  6042  001DA8  0419               	decf	MotorASpeed@S,w,c
  6043  001DAA  B0D8               	btfsc	status,0,c
  6044  001DAC  D003               	goto	u4100
  6045  001DAE                     u4101:
  6046  001DAE  6A1B               	clrf	??_MotorASpeed& (0+255),c
  6047  001DB0  2A1B               	incf	??_MotorASpeed& (0+255),f,c
  6048  001DB2  D001               	goto	u4118
  6049  001DB4                     u4100:
  6050  001DB4  6A1B               	clrf	??_MotorASpeed& (0+255),c
  6051  001DB6                     u4118:
  6052  001DB6  5081               	movf	3969,w,c	;volatile
  6053  001DB8  181B               	xorwf	??_MotorASpeed,w,c
  6054  001DBA  0BFE               	andlw	-2
  6055  001DBC  181B               	xorwf	??_MotorASpeed,w,c
  6056  001DBE  6E81               	movwf	3969,c	;volatile
  6057                           
  6058                           ;config.c: 90: S = S > 0 ? S : 1000 + S;
  6059  001DC0  BE1A               	btfsc	MotorASpeed@S+1,7,c
  6060  001DC2  D005               	goto	l3553
  6061  001DC4  501A               	movf	MotorASpeed@S+1,w,c
  6062  001DC6  E109               	bnz	l3555
  6063  001DC8  0419               	decf	MotorASpeed@S,w,c
  6064  001DCA  B0D8               	btfsc	status,0,c
  6065  001DCC  D006               	goto	l3555
  6066  001DCE                     l3553:
  6067  001DCE  0EE8               	movlw	232
  6068  001DD0  2419               	addwf	MotorASpeed@S,w,c
  6069  001DD2  6E19               	movwf	MotorASpeed@S,c
  6070  001DD4  0E03               	movlw	3
  6071  001DD6  201A               	addwfc	MotorASpeed@S+1,w,c
  6072  001DD8  6E1A               	movwf	MotorASpeed@S+1,c
  6073  001DDA                     l3555:
  6074                           
  6075                           ;config.c: 92: CCP1CONbits.DC1B1 = S % 4;
  6076  001DDA  C019  F01B         	movff	MotorASpeed@S,??_MotorASpeed
  6077  001DDE  0E03               	movlw	3
  6078  001DE0  161B               	andwf	??_MotorASpeed,f,c
  6079  001DE2  3A1B               	swapf	??_MotorASpeed,f,c
  6080  001DE4  461B               	rlncf	??_MotorASpeed,f,c
  6081  001DE6  50BD               	movf	4029,w,c	;volatile
  6082  001DE8  181B               	xorwf	??_MotorASpeed,w,c
  6083  001DEA  0BDF               	andlw	-33
  6084  001DEC  181B               	xorwf	??_MotorASpeed,w,c
  6085  001DEE  6EBD               	movwf	4029,c	;volatile
  6086                           
  6087                           ;config.c: 93: CCPR1L = S / 4;
  6088  001DF0  C019  F011         	movff	MotorASpeed@S,___awdiv@dividend
  6089  001DF4  C01A  F012         	movff	MotorASpeed@S+1,___awdiv@dividend+1
  6090  001DF8  0E00               	movlw	0
  6091  001DFA  6E14               	movwf	___awdiv@divisor+1,c
  6092  001DFC  0E04               	movlw	4
  6093  001DFE  6E13               	movwf	___awdiv@divisor,c
  6094  001E00  EC9A  F00F         	call	___awdiv	;wreg free
  6095  001E04  5011               	movf	?___awdiv,w,c
  6096  001E06  6EBE               	movwf	4030,c	;volatile
  6097  001E08  0012               	return		;funcret
  6098  001E0A                     __end_of_MotorASpeed:
  6099                           	opt stack 0
  6100                           tblptru	equ	0xFF8
  6101                           tblptrh	equ	0xFF7
  6102                           tblptrl	equ	0xFF6
  6103                           tablat	equ	0xFF5
  6104                           prodh	equ	0xFF4
  6105                           prodl	equ	0xFF3
  6106                           postinc0	equ	0xFEE
  6107                           wreg	equ	0xFE8
  6108                           postinc1	equ	0xFE6
  6109                           postdec1	equ	0xFE5
  6110                           fsr1h	equ	0xFE2
  6111                           fsr1l	equ	0xFE1
  6112                           postinc2	equ	0xFDE
  6113                           postdec2	equ	0xFDD
  6114                           fsr2h	equ	0xFDA
  6115                           fsr2l	equ	0xFD9
  6116                           status	equ	0xFD8
  6117                           
  6118 ;; *************** function _line_cal *****************
  6119 ;; Defined at:
  6120 ;;		line 57 in file "analog.c"
  6121 ;; Parameters:    Size  Location     Type
  6122 ;;		None
  6123 ;; Auto vars:     Size  Location     Type
  6124 ;;  value           4   14[BANK0 ] long 
  6125 ;;  b               4    8[BANK0 ] long 
  6126 ;;  a               4    4[BANK0 ] long 
  6127 ;;  j               2   22[BANK0 ] int 
  6128 ;;  i               2   20[BANK0 ] int 
  6129 ;;  aux             2   18[BANK0 ] int 
  6130 ;;  ok              2   12[BANK0 ] int 
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  2   42[None  ] int 
  6133 ;; Registers used:
  6134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6140 ;;      Params:         0       0       0       0       0       0       0       0       0
  6141 ;;      Locals:         0      24       0       0       0       0       0       0       0
  6142 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6143 ;;      Totals:         4      24       0       0       0       0       0       0       0
  6144 ;;Total ram usage:       28 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; Hardware stack levels required when called:    2
  6147 ;; This function calls:
  6148 ;;		___aldiv
  6149 ;;		___lmul
  6150 ;; This function is called by:
  6151 ;;		_main
  6152 ;; This function uses a non-reentrant model
  6153 ;;
  6154                           
  6155                           	psect	text20
  6156  000DAE                     __ptext20:
  6157                           	opt stack 0
  6158  000DAE                     _line_cal:
  6159                           	opt stack 28
  6160                           
  6161                           ;analog.c: 58: ll a = 0;
  6162                           
  6163                           ;incstack = 0
  6164  000DAE  0E00               	movlw	0
  6165  000DB0  0100               	movlb	0	; () banked
  6166  000DB2  6FB4               	movwf	line_cal@a& (0+255),b
  6167  000DB4  0E00               	movlw	0
  6168  000DB6  6FB5               	movwf	(line_cal@a+1)& (0+255),b
  6169  000DB8  0E00               	movlw	0
  6170  000DBA  6FB6               	movwf	(line_cal@a+2)& (0+255),b
  6171  000DBC  0E00               	movlw	0
  6172  000DBE  6FB7               	movwf	(line_cal@a+3)& (0+255),b
  6173                           
  6174                           ;analog.c: 59: ll b = 0;
  6175  000DC0  0E00               	movlw	0
  6176  000DC2  0100               	movlb	0	; () banked
  6177  000DC4  6FB8               	movwf	line_cal@b& (0+255),b
  6178  000DC6  0E00               	movlw	0
  6179  000DC8  6FB9               	movwf	(line_cal@b+1)& (0+255),b
  6180  000DCA  0E00               	movlw	0
  6181  000DCC  6FBA               	movwf	(line_cal@b+2)& (0+255),b
  6182  000DCE  0E00               	movlw	0
  6183  000DD0  6FBB               	movwf	(line_cal@b+3)& (0+255),b
  6184                           
  6185                           ;analog.c: 61: int i , j , aux;
  6186                           ;analog.c: 62: ll value;
  6187                           ;analog.c: 63: int ok = 0;
  6188  000DD2  0E00               	movlw	0
  6189  000DD4  0100               	movlb	0	; () banked
  6190  000DD6  6FBD               	movwf	(line_cal@ok+1)& (0+255),b
  6191  000DD8  0E00               	movlw	0
  6192  000DDA  6FBC               	movwf	line_cal@ok& (0+255),b
  6193                           
  6194                           ;analog.c: 65: for (i = 0;i < 5;i++){
  6195  000DDC  0E00               	movlw	0
  6196  000DDE  0100               	movlb	0	; () banked
  6197  000DE0  6FC5               	movwf	(line_cal@i+1)& (0+255),b
  6198  000DE2  0E00               	movlw	0
  6199  000DE4  6FC4               	movwf	line_cal@i& (0+255),b
  6200                           
  6201                           ; BSR set to: 0
  6202  000DE6  0100               	movlb	0	; () banked
  6203  000DE8  BFC5               	btfsc	(line_cal@i+1)& (0+255),7,b
  6204  000DEA  D00A               	goto	l4035
  6205  000DEC  0100               	movlb	0	; () banked
  6206  000DEE  51C5               	movf	(line_cal@i+1)& (0+255),w,b
  6207  000DF0  E106               	bnz	u4800
  6208  000DF2  0E05               	movlw	5
  6209  000DF4  0100               	movlb	0	; () banked
  6210  000DF6  5DC4               	subwf	line_cal@i& (0+255),w,b
  6211  000DF8  B0D8               	btfsc	status,0,c
  6212  000DFA  D159               	goto	l4065
  6213  000DFC  D001               	goto	l4035
  6214  000DFE                     u4800:
  6215                           
  6216                           ; BSR set to: 0
  6217  000DFE  D157               	goto	l4065
  6218  000E00                     l4035:
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;analog.c: 67: j = ls[i];
  6222  000E00  90D8               	bcf	status,0,c
  6223  000E02  0100               	movlb	0	; () banked
  6224  000E04  35C4               	rlcf	line_cal@i& (0+255),w,b
  6225  000E06  6ED9               	movwf	fsr2l,c
  6226  000E08  0100               	movlb	0	; () banked
  6227  000E0A  35C5               	rlcf	(line_cal@i+1)& (0+255),w,b
  6228  000E0C  6EDA               	movwf	fsr2h,c
  6229  000E0E  0ED8               	movlw	low _ls
  6230  000E10  26D9               	addwf	fsr2l,f,c
  6231  000E12  0E00               	movlw	high _ls
  6232  000E14  22DA               	addwfc	fsr2h,f,c
  6233  000E16  CFDE F0C6          	movff	postinc2,line_cal@j
  6234  000E1A  CFDD F0C7          	movff	postdec2,line_cal@j+1
  6235                           
  6236                           ;analog.c: 68: aux = an[j];
  6237  000E1E  90D8               	bcf	status,0,c
  6238  000E20  0100               	movlb	0	; () banked
  6239  000E22  35C6               	rlcf	line_cal@j& (0+255),w,b
  6240  000E24  6ED9               	movwf	fsr2l,c
  6241  000E26  0100               	movlb	0	; () banked
  6242  000E28  35C7               	rlcf	(line_cal@j+1)& (0+255),w,b
  6243  000E2A  6EDA               	movwf	fsr2h,c
  6244  000E2C  0E9E               	movlw	low _an
  6245  000E2E  26D9               	addwf	fsr2l,f,c
  6246  000E30  0E00               	movlw	high _an
  6247  000E32  22DA               	addwfc	fsr2h,f,c
  6248  000E34  CFDE F0C2          	movff	postinc2,line_cal@aux
  6249  000E38  CFDD F0C3          	movff	postdec2,line_cal@aux+1
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;analog.c: 69: aux = aux>mins[j]?aux:mins[j];
  6253  000E3C  90D8               	bcf	status,0,c
  6254  000E3E  0100               	movlb	0	; () banked
  6255  000E40  35C6               	rlcf	line_cal@j& (0+255),w,b
  6256  000E42  6ED9               	movwf	fsr2l,c
  6257  000E44  0100               	movlb	0	; () banked
  6258  000E46  35C7               	rlcf	(line_cal@j+1)& (0+255),w,b
  6259  000E48  6EDA               	movwf	fsr2h,c
  6260  000E4A  0E8C               	movlw	low _mins
  6261  000E4C  26D9               	addwf	fsr2l,f,c
  6262  000E4E  0E00               	movlw	high _mins
  6263  000E50  22DA               	addwfc	fsr2h,f,c
  6264  000E52  0100               	movlb	0	; () banked
  6265  000E54  51C2               	movf	line_cal@aux& (0+255),w,b
  6266  000E56  5CDE               	subwf	postinc2,w,c
  6267  000E58  50DE               	movf	postinc2,w,c
  6268  000E5A  0A80               	xorlw	128
  6269  000E5C  6E2D               	movwf	(??_line_cal+2)& (0+255),c
  6270  000E5E  0100               	movlb	0	; () banked
  6271  000E60  51C3               	movf	(line_cal@aux+1)& (0+255),w,b
  6272  000E62  0A80               	xorlw	128
  6273  000E64  582D               	subwfb	(??_line_cal+2)& (0+255),w,c
  6274  000E66  A0D8               	btfss	status,0,c
  6275  000E68  D00F               	goto	l4041
  6276                           
  6277                           ; BSR set to: 0
  6278  000E6A  90D8               	bcf	status,0,c
  6279  000E6C  0100               	movlb	0	; () banked
  6280  000E6E  35C6               	rlcf	line_cal@j& (0+255),w,b
  6281  000E70  6ED9               	movwf	fsr2l,c
  6282  000E72  0100               	movlb	0	; () banked
  6283  000E74  35C7               	rlcf	(line_cal@j+1)& (0+255),w,b
  6284  000E76  6EDA               	movwf	fsr2h,c
  6285  000E78  0E8C               	movlw	low _mins
  6286  000E7A  26D9               	addwf	fsr2l,f,c
  6287  000E7C  0E00               	movlw	high _mins
  6288  000E7E  22DA               	addwfc	fsr2h,f,c
  6289  000E80  CFDE F0C2          	movff	postinc2,line_cal@aux
  6290  000E84  CFDD F0C3          	movff	postdec2,line_cal@aux+1
  6291  000E88                     l4041:
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;analog.c: 70: aux = aux<maxs[j]?aux:maxs[j];
  6295  000E88  90D8               	bcf	status,0,c
  6296  000E8A  0100               	movlb	0	; () banked
  6297  000E8C  35C6               	rlcf	line_cal@j& (0+255),w,b
  6298  000E8E  6ED9               	movwf	fsr2l,c
  6299  000E90  0100               	movlb	0	; () banked
  6300  000E92  35C7               	rlcf	(line_cal@j+1)& (0+255),w,b
  6301  000E94  6EDA               	movwf	fsr2h,c
  6302  000E96  0E12               	movlw	low _maxs
  6303  000E98  26D9               	addwf	fsr2l,f,c
  6304  000E9A  0E01               	movlw	high _maxs
  6305  000E9C  22DA               	addwfc	fsr2h,f,c
  6306  000E9E  50DE               	movf	postinc2,w,c
  6307  000EA0  0100               	movlb	0	; () banked
  6308  000EA2  5DC2               	subwf	line_cal@aux& (0+255),w,b
  6309  000EA4  0100               	movlb	0	; () banked
  6310  000EA6  51C3               	movf	(line_cal@aux+1)& (0+255),w,b
  6311  000EA8  0A80               	xorlw	128
  6312  000EAA  6E2D               	movwf	(??_line_cal+2)& (0+255),c
  6313  000EAC  50DE               	movf	postinc2,w,c
  6314  000EAE  0A80               	xorlw	128
  6315  000EB0  582D               	subwfb	(??_line_cal+2)& (0+255),w,c
  6316  000EB2  A0D8               	btfss	status,0,c
  6317  000EB4  D00F               	goto	l4045
  6318                           
  6319                           ; BSR set to: 0
  6320  000EB6  90D8               	bcf	status,0,c
  6321  000EB8  0100               	movlb	0	; () banked
  6322  000EBA  35C6               	rlcf	line_cal@j& (0+255),w,b
  6323  000EBC  6ED9               	movwf	fsr2l,c
  6324  000EBE  0100               	movlb	0	; () banked
  6325  000EC0  35C7               	rlcf	(line_cal@j+1)& (0+255),w,b
  6326  000EC2  6EDA               	movwf	fsr2h,c
  6327  000EC4  0E12               	movlw	low _maxs
  6328  000EC6  26D9               	addwf	fsr2l,f,c
  6329  000EC8  0E01               	movlw	high _maxs
  6330  000ECA  22DA               	addwfc	fsr2h,f,c
  6331  000ECC  CFDE F0C2          	movff	postinc2,line_cal@aux
  6332  000ED0  CFDD F0C3          	movff	postdec2,line_cal@aux+1
  6333  000ED4                     l4045:
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;analog.c: 72: aux -= mins[j];
  6337  000ED4  90D8               	bcf	status,0,c
  6338  000ED6  0100               	movlb	0	; () banked
  6339  000ED8  35C6               	rlcf	line_cal@j& (0+255),w,b
  6340  000EDA  6ED9               	movwf	fsr2l,c
  6341  000EDC  0100               	movlb	0	; () banked
  6342  000EDE  35C7               	rlcf	(line_cal@j+1)& (0+255),w,b
  6343  000EE0  6EDA               	movwf	fsr2h,c
  6344  000EE2  0E8C               	movlw	low _mins
  6345  000EE4  26D9               	addwf	fsr2l,f,c
  6346  000EE6  0E00               	movlw	high _mins
  6347  000EE8  22DA               	addwfc	fsr2h,f,c
  6348  000EEA  50DE               	movf	postinc2,w,c
  6349  000EEC  0100               	movlb	0	; () banked
  6350  000EEE  5FC2               	subwf	line_cal@aux& (0+255),f,b
  6351  000EF0  50DD               	movf	postdec2,w,c
  6352  000EF2  0100               	movlb	0	; () banked
  6353  000EF4  5BC3               	subwfb	(line_cal@aux+1)& (0+255),f,b
  6354                           
  6355                           ; BSR set to: 0
  6356                           ;analog.c: 74: value = 1000 - (ll)(aux) * (ll)1000 / (ll)(maxs[j] - mins[j]);
  6357  000EF6  C0C2  F011         	movff	line_cal@aux,___lmul@multiplier
  6358  000EFA  C0C3  F012         	movff	line_cal@aux+1,___lmul@multiplier+1
  6359  000EFE  0E00               	movlw	0
  6360  000F00  BE12               	btfsc	___lmul@multiplier+1,7,c
  6361  000F02  0EFF               	movlw	-1
  6362  000F04  6E13               	movwf	___lmul@multiplier+2,c
  6363  000F06  6E14               	movwf	___lmul@multiplier+3,c
  6364  000F08  0EE8               	movlw	232
  6365  000F0A  6E15               	movwf	___lmul@multiplicand,c
  6366  000F0C  0E03               	movlw	3
  6367  000F0E  6E16               	movwf	___lmul@multiplicand+1,c
  6368  000F10  0E00               	movlw	0
  6369  000F12  6E17               	movwf	___lmul@multiplicand+2,c
  6370  000F14  0E00               	movlw	0
  6371  000F16  6E18               	movwf	___lmul@multiplicand+3,c
  6372  000F18  EC83  F010         	call	___lmul	;wreg free
  6373  000F1C  C011  F01D         	movff	?___lmul,___aldiv@dividend
  6374  000F20  C012  F01E         	movff	?___lmul+1,___aldiv@dividend+1
  6375  000F24  C013  F01F         	movff	?___lmul+2,___aldiv@dividend+2
  6376  000F28  C014  F020         	movff	?___lmul+3,___aldiv@dividend+3
  6377  000F2C  90D8               	bcf	status,0,c
  6378  000F2E  0100               	movlb	0	; () banked
  6379  000F30  35C6               	rlcf	line_cal@j& (0+255),w,b
  6380  000F32  6ED9               	movwf	fsr2l,c
  6381  000F34  0100               	movlb	0	; () banked
  6382  000F36  35C7               	rlcf	(line_cal@j+1)& (0+255),w,b
  6383  000F38  6EDA               	movwf	fsr2h,c
  6384  000F3A  0E12               	movlw	low _maxs
  6385  000F3C  26D9               	addwf	fsr2l,f,c
  6386  000F3E  0E01               	movlw	high _maxs
  6387  000F40  22DA               	addwfc	fsr2h,f,c
  6388  000F42  CFDE F02B          	movff	postinc2,??_line_cal
  6389  000F46  CFDD F02C          	movff	postdec2,??_line_cal+1
  6390  000F4A  90D8               	bcf	status,0,c
  6391  000F4C  0100               	movlb	0	; () banked
  6392  000F4E  35C6               	rlcf	line_cal@j& (0+255),w,b
  6393  000F50  6ED9               	movwf	fsr2l,c
  6394  000F52  0100               	movlb	0	; () banked
  6395  000F54  35C7               	rlcf	(line_cal@j+1)& (0+255),w,b
  6396  000F56  6EDA               	movwf	fsr2h,c
  6397  000F58  0E8C               	movlw	low _mins
  6398  000F5A  26D9               	addwf	fsr2l,f,c
  6399  000F5C  0E00               	movlw	high _mins
  6400  000F5E  22DA               	addwfc	fsr2h,f,c
  6401  000F60  CFDE F02D          	movff	postinc2,??_line_cal+2
  6402  000F64  CFDD F02E          	movff	postdec2,??_line_cal+3
  6403  000F68  1E2D               	comf	??_line_cal+2,f,c
  6404  000F6A  1E2E               	comf	??_line_cal+3,f,c
  6405  000F6C  4A2D               	infsnz	??_line_cal+2,f,c
  6406  000F6E  2A2E               	incf	??_line_cal+3,f,c
  6407  000F70  502B               	movf	??_line_cal,w,c
  6408  000F72  262D               	addwf	??_line_cal+2,f,c
  6409  000F74  502C               	movf	??_line_cal+1,w,c
  6410  000F76  222E               	addwfc	??_line_cal+3,f,c
  6411  000F78  C02D  F021         	movff	??_line_cal+2,___aldiv@divisor
  6412  000F7C  C02E  F022         	movff	??_line_cal+3,___aldiv@divisor+1
  6413  000F80  0E00               	movlw	0
  6414  000F82  BE22               	btfsc	___aldiv@divisor+1,7,c
  6415  000F84  0EFF               	movlw	-1
  6416  000F86  6E23               	movwf	___aldiv@divisor+2,c
  6417  000F88  6E24               	movwf	___aldiv@divisor+3,c
  6418  000F8A  EC3B  F00D         	call	___aldiv	;wreg free
  6419  000F8E  1E1D               	comf	?___aldiv,f,c
  6420  000F90  1E1E               	comf	?___aldiv+1,f,c
  6421  000F92  1E1F               	comf	?___aldiv+2,f,c
  6422  000F94  1E20               	comf	?___aldiv+3,f,c
  6423  000F96  2A1D               	incf	?___aldiv,f,c
  6424  000F98  0E00               	movlw	0
  6425  000F9A  221E               	addwfc	?___aldiv+1,f,c
  6426  000F9C  221F               	addwfc	?___aldiv+2,f,c
  6427  000F9E  2220               	addwfc	?___aldiv+3,f,c
  6428  000FA0  0EE8               	movlw	232
  6429  000FA2  241D               	addwf	?___aldiv,w,c
  6430  000FA4  0100               	movlb	0	; () banked
  6431  000FA6  6FBE               	movwf	line_cal@value& (0+255),b
  6432  000FA8  0E03               	movlw	3
  6433  000FAA  201E               	addwfc	?___aldiv+1,w,c
  6434  000FAC  0100               	movlb	0	; () banked
  6435  000FAE  6FBF               	movwf	(line_cal@value+1)& (0+255),b
  6436  000FB0  0E00               	movlw	0
  6437  000FB2  201F               	addwfc	?___aldiv+2,w,c
  6438  000FB4  0100               	movlb	0	; () banked
  6439  000FB6  6FC0               	movwf	(line_cal@value+2)& (0+255),b
  6440  000FB8  0E00               	movlw	0
  6441  000FBA  2020               	addwfc	?___aldiv+3,w,c
  6442  000FBC  0100               	movlb	0	; () banked
  6443  000FBE  6FC1               	movwf	(line_cal@value+3)& (0+255),b
  6444                           
  6445                           ; BSR set to: 0
  6446                           ;analog.c: 76: calval[j] = value;
  6447  000FC0  90D8               	bcf	status,0,c
  6448  000FC2  0100               	movlb	0	; () banked
  6449  000FC4  35C6               	rlcf	line_cal@j& (0+255),w,b
  6450  000FC6  6ED9               	movwf	fsr2l,c
  6451  000FC8  0100               	movlb	0	; () banked
  6452  000FCA  35C7               	rlcf	(line_cal@j+1)& (0+255),w,b
  6453  000FCC  6EDA               	movwf	fsr2h,c
  6454  000FCE  0E00               	movlw	low _calval
  6455  000FD0  26D9               	addwf	fsr2l,f,c
  6456  000FD2  0E01               	movlw	high _calval
  6457  000FD4  22DA               	addwfc	fsr2h,f,c
  6458  000FD6  C0BE  FFDE         	movff	line_cal@value,postinc2
  6459  000FDA  C0BF  FFDD         	movff	line_cal@value+1,postdec2
  6460                           
  6461                           ; BSR set to: 0
  6462                           ;analog.c: 78: if (value >= 300) ok = 1;
  6463  000FDE  0100               	movlb	0	; () banked
  6464  000FE0  BFC1               	btfsc	(line_cal@value+3)& (0+255),7,b
  6465  000FE2  D012               	goto	l4055
  6466  000FE4  0100               	movlb	0	; () banked
  6467  000FE6  51C1               	movf	(line_cal@value+3)& (0+255),w,b
  6468  000FE8  0100               	movlb	0	; () banked
  6469  000FEA  11C0               	iorwf	(line_cal@value+2)& (0+255),w,b
  6470  000FEC  E108               	bnz	u4830
  6471  000FEE  0E2C               	movlw	44
  6472  000FF0  0100               	movlb	0	; () banked
  6473  000FF2  5DBE               	subwf	line_cal@value& (0+255),w,b
  6474  000FF4  0E01               	movlw	1
  6475  000FF6  0100               	movlb	0	; () banked
  6476  000FF8  59BF               	subwfb	(line_cal@value+1)& (0+255),w,b
  6477  000FFA  A0D8               	btfss	status,0,c
  6478  000FFC  D005               	goto	l4055
  6479  000FFE                     u4830:
  6480                           
  6481                           ; BSR set to: 0
  6482  000FFE  0E00               	movlw	0
  6483  001000  0100               	movlb	0	; () banked
  6484  001002  6FBD               	movwf	(line_cal@ok+1)& (0+255),b
  6485  001004  0E01               	movlw	1
  6486  001006  6FBC               	movwf	line_cal@ok& (0+255),b
  6487  001008                     l4055:
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;analog.c: 80: a += value * (ll)i * 100;
  6491  001008  C0C4  F011         	movff	line_cal@i,___lmul@multiplier
  6492  00100C  C0C5  F012         	movff	line_cal@i+1,___lmul@multiplier+1
  6493  001010  0E00               	movlw	0
  6494  001012  BE12               	btfsc	___lmul@multiplier+1,7,c
  6495  001014  0EFF               	movlw	-1
  6496  001016  6E13               	movwf	___lmul@multiplier+2,c
  6497  001018  6E14               	movwf	___lmul@multiplier+3,c
  6498  00101A  C0BE  F015         	movff	line_cal@value,___lmul@multiplicand
  6499  00101E  C0BF  F016         	movff	line_cal@value+1,___lmul@multiplicand+1
  6500  001022  C0C0  F017         	movff	line_cal@value+2,___lmul@multiplicand+2
  6501  001026  C0C1  F018         	movff	line_cal@value+3,___lmul@multiplicand+3
  6502  00102A  EC83  F010         	call	___lmul	;wreg free
  6503  00102E  C011  F0B0         	movff	?___lmul,_line_cal$2289
  6504  001032  C012  F0B1         	movff	?___lmul+1,_line_cal$2289+1
  6505  001036  C013  F0B2         	movff	?___lmul+2,_line_cal$2289+2
  6506  00103A  C014  F0B3         	movff	?___lmul+3,_line_cal$2289+3
  6507                           
  6508                           ;analog.c: 80: a += value * (ll)i * 100;
  6509  00103E  C0B0  F011         	movff	_line_cal$2289,___lmul@multiplier
  6510  001042  C0B1  F012         	movff	_line_cal$2289+1,___lmul@multiplier+1
  6511  001046  C0B2  F013         	movff	_line_cal$2289+2,___lmul@multiplier+2
  6512  00104A  C0B3  F014         	movff	_line_cal$2289+3,___lmul@multiplier+3
  6513  00104E  0E64               	movlw	100
  6514  001050  6E15               	movwf	___lmul@multiplicand,c
  6515  001052  0E00               	movlw	0
  6516  001054  6E16               	movwf	___lmul@multiplicand+1,c
  6517  001056  0E00               	movlw	0
  6518  001058  6E17               	movwf	___lmul@multiplicand+2,c
  6519  00105A  0E00               	movlw	0
  6520  00105C  6E18               	movwf	___lmul@multiplicand+3,c
  6521  00105E  EC83  F010         	call	___lmul	;wreg free
  6522  001062  5011               	movf	?___lmul,w,c
  6523  001064  0100               	movlb	0	; () banked
  6524  001066  27B4               	addwf	line_cal@a& (0+255),f,b
  6525  001068  5012               	movf	?___lmul+1,w,c
  6526  00106A  0100               	movlb	0	; () banked
  6527  00106C  23B5               	addwfc	(line_cal@a+1)& (0+255),f,b
  6528  00106E  5013               	movf	?___lmul+2,w,c
  6529  001070  0100               	movlb	0	; () banked
  6530  001072  23B6               	addwfc	(line_cal@a+2)& (0+255),f,b
  6531  001074  5014               	movf	?___lmul+3,w,c
  6532  001076  0100               	movlb	0	; () banked
  6533  001078  23B7               	addwfc	(line_cal@a+3)& (0+255),f,b
  6534                           
  6535                           ; BSR set to: 0
  6536                           ;analog.c: 81: b += value;
  6537  00107A  0100               	movlb	0	; () banked
  6538  00107C  51BE               	movf	line_cal@value& (0+255),w,b
  6539  00107E  0100               	movlb	0	; () banked
  6540  001080  27B8               	addwf	line_cal@b& (0+255),f,b
  6541  001082  0100               	movlb	0	; () banked
  6542  001084  51BF               	movf	(line_cal@value+1)& (0+255),w,b
  6543  001086  0100               	movlb	0	; () banked
  6544  001088  23B9               	addwfc	(line_cal@b+1)& (0+255),f,b
  6545  00108A  0100               	movlb	0	; () banked
  6546  00108C  51C0               	movf	(line_cal@value+2)& (0+255),w,b
  6547  00108E  0100               	movlb	0	; () banked
  6548  001090  23BA               	addwfc	(line_cal@b+2)& (0+255),f,b
  6549  001092  0100               	movlb	0	; () banked
  6550  001094  51C1               	movf	(line_cal@value+3)& (0+255),w,b
  6551  001096  0100               	movlb	0	; () banked
  6552  001098  23BB               	addwfc	(line_cal@b+3)& (0+255),f,b
  6553                           
  6554                           ; BSR set to: 0
  6555  00109A  0100               	movlb	0	; () banked
  6556  00109C  4BC4               	infsnz	line_cal@i& (0+255),f,b
  6557  00109E  2BC5               	incf	(line_cal@i+1)& (0+255),f,b
  6558                           
  6559                           ; BSR set to: 0
  6560  0010A0  0100               	movlb	0	; () banked
  6561  0010A2  BFC5               	btfsc	(line_cal@i+1)& (0+255),7,b
  6562  0010A4  D6AD               	goto	l4035
  6563  0010A6  0100               	movlb	0	; () banked
  6564  0010A8  51C5               	movf	(line_cal@i+1)& (0+255),w,b
  6565  0010AA  E101               	bnz	l4065
  6566  0010AC  D6A2               	goto	L11
  6567  0010AE                     l4065:
  6568                           
  6569                           ; BSR set to: 0
  6570                           ;analog.c: 83: }
  6571                           ;analog.c: 84: if (ok == 1){
  6572  0010AE  0100               	movlb	0	; () banked
  6573  0010B0  05BC               	decf	line_cal@ok& (0+255),w,b
  6574  0010B2  0100               	movlb	0	; () banked
  6575  0010B4  11BD               	iorwf	(line_cal@ok+1)& (0+255),w,b
  6576  0010B6  A4D8               	btfss	status,2,c
  6577  0010B8  D01B               	goto	l4069
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;analog.c: 85: lp = a / b - 200;
  6581  0010BA  C0B4  F01D         	movff	line_cal@a,___aldiv@dividend
  6582  0010BE  C0B5  F01E         	movff	line_cal@a+1,___aldiv@dividend+1
  6583  0010C2  C0B6  F01F         	movff	line_cal@a+2,___aldiv@dividend+2
  6584  0010C6  C0B7  F020         	movff	line_cal@a+3,___aldiv@dividend+3
  6585  0010CA  C0B8  F021         	movff	line_cal@b,___aldiv@divisor
  6586  0010CE  C0B9  F022         	movff	line_cal@b+1,___aldiv@divisor+1
  6587  0010D2  C0BA  F023         	movff	line_cal@b+2,___aldiv@divisor+2
  6588  0010D6  C0BB  F024         	movff	line_cal@b+3,___aldiv@divisor+3
  6589  0010DA  EC3B  F00D         	call	___aldiv	;wreg free
  6590  0010DE  0E38               	movlw	56
  6591  0010E0  241D               	addwf	?___aldiv,w,c
  6592  0010E2  0100               	movlb	0	; () banked
  6593  0010E4  6F8A               	movwf	_lp& (0+255),b
  6594  0010E6  0EFF               	movlw	255
  6595  0010E8  201E               	addwfc	?___aldiv+1,w,c
  6596  0010EA  0100               	movlb	0	; () banked
  6597  0010EC  6F8B               	movwf	(_lp+1)& (0+255),b
  6598                           
  6599                           ;analog.c: 86: }else{
  6600  0010EE  0012               	return	
  6601  0010F0                     l4069:
  6602                           
  6603                           ; BSR set to: 0
  6604                           ;analog.c: 87: lp = lp > 0 ? 190 : -190;
  6605  0010F0  0100               	movlb	0	; () banked
  6606  0010F2  BF8B               	btfsc	(_lp+1)& (0+255),7,b
  6607  0010F4  D007               	goto	l4071
  6608  0010F6  0100               	movlb	0	; () banked
  6609  0010F8  518B               	movf	(_lp+1)& (0+255),w,b
  6610  0010FA  E10A               	bnz	l4073
  6611  0010FC  0100               	movlb	0	; () banked
  6612  0010FE  058A               	decf	_lp& (0+255),w,b
  6613  001100  B0D8               	btfsc	status,0,c
  6614  001102  D006               	goto	l4073
  6615  001104                     l4071:
  6616                           
  6617                           ; BSR set to: 0
  6618  001104  0EFF               	movlw	255
  6619  001106  0100               	movlb	0	; () banked
  6620  001108  6F8B               	movwf	(_lp+1)& (0+255),b
  6621  00110A  0E42               	movlw	66
  6622  00110C  6F8A               	movwf	_lp& (0+255),b
  6623  00110E  0012               	return	
  6624  001110                     l4073:
  6625                           
  6626                           ; BSR set to: 0
  6627  001110  0E00               	movlw	0
  6628  001112  0100               	movlb	0	; () banked
  6629  001114  6F8B               	movwf	(_lp+1)& (0+255),b
  6630  001116  0EBE               	movlw	190
  6631  001118  6F8A               	movwf	_lp& (0+255),b
  6632                           
  6633                           ; BSR set to: 0
  6634  00111A  0012               	return	
  6635  00111C                     __end_of_line_cal:
  6636                           	opt stack 0
  6637                           tblptru	equ	0xFF8
  6638                           tblptrh	equ	0xFF7
  6639                           tblptrl	equ	0xFF6
  6640                           tablat	equ	0xFF5
  6641                           prodh	equ	0xFF4
  6642                           prodl	equ	0xFF3
  6643                           postinc0	equ	0xFEE
  6644                           wreg	equ	0xFE8
  6645                           postinc1	equ	0xFE6
  6646                           postdec1	equ	0xFE5
  6647                           fsr1h	equ	0xFE2
  6648                           fsr1l	equ	0xFE1
  6649                           postinc2	equ	0xFDE
  6650                           postdec2	equ	0xFDD
  6651                           fsr2h	equ	0xFDA
  6652                           fsr2l	equ	0xFD9
  6653                           status	equ	0xFD8
  6654                           
  6655 ;; *************** function ___lmul *****************
  6656 ;; Defined at:
  6657 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul32.c"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;  multiplier      4   16[COMRAM] unsigned long 
  6660 ;;  multiplicand    4   20[COMRAM] unsigned long 
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;  product         4   24[COMRAM] unsigned long 
  6663 ;; Return value:  Size  Location     Type
  6664 ;;                  4   16[COMRAM] unsigned long 
  6665 ;; Registers used:
  6666 ;;		wreg, status,2, status,0
  6667 ;; Tracked objects:
  6668 ;;		On entry : 0/0
  6669 ;;		On exit  : 0/0
  6670 ;;		Unchanged: 0/0
  6671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6672 ;;      Params:         8       0       0       0       0       0       0       0       0
  6673 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6674 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6675 ;;      Totals:        12       0       0       0       0       0       0       0       0
  6676 ;;Total ram usage:       12 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:    1
  6679 ;; This function calls:
  6680 ;;		Nothing
  6681 ;; This function is called by:
  6682 ;;		_line_cal
  6683 ;; This function uses a non-reentrant model
  6684 ;;
  6685                           
  6686                           	psect	text21
  6687  002106                     __ptext21:
  6688                           	opt stack 0
  6689  002106                     ___lmul:
  6690                           	opt stack 28
  6691                           
  6692                           ; BSR set to: 0
  6693                           ;incstack = 0
  6694  002106  0E00               	movlw	0
  6695  002108  6E19               	movwf	___lmul@product,c
  6696  00210A  0E00               	movlw	0
  6697  00210C  6E1A               	movwf	___lmul@product+1,c
  6698  00210E  0E00               	movlw	0
  6699  002110  6E1B               	movwf	___lmul@product+2,c
  6700  002112  0E00               	movlw	0
  6701  002114  6E1C               	movwf	___lmul@product+3,c
  6702  002116                     l3599:
  6703  002116  A011               	btfss	___lmul@multiplier,0,c
  6704  002118  D008               	goto	l3603
  6705  00211A  5015               	movf	___lmul@multiplicand,w,c
  6706  00211C  2619               	addwf	___lmul@product,f,c
  6707  00211E  5016               	movf	___lmul@multiplicand+1,w,c
  6708  002120  221A               	addwfc	___lmul@product+1,f,c
  6709  002122  5017               	movf	___lmul@multiplicand+2,w,c
  6710  002124  221B               	addwfc	___lmul@product+2,f,c
  6711  002126  5018               	movf	___lmul@multiplicand+3,w,c
  6712  002128  221C               	addwfc	___lmul@product+3,f,c
  6713  00212A                     l3603:
  6714  00212A  90D8               	bcf	status,0,c
  6715  00212C  3615               	rlcf	___lmul@multiplicand,f,c
  6716  00212E  3616               	rlcf	___lmul@multiplicand+1,f,c
  6717  002130  3617               	rlcf	___lmul@multiplicand+2,f,c
  6718  002132  3618               	rlcf	___lmul@multiplicand+3,f,c
  6719  002134  90D8               	bcf	status,0,c
  6720  002136  3214               	rrcf	___lmul@multiplier+3,f,c
  6721  002138  3213               	rrcf	___lmul@multiplier+2,f,c
  6722  00213A  3212               	rrcf	___lmul@multiplier+1,f,c
  6723  00213C  3211               	rrcf	___lmul@multiplier,f,c
  6724  00213E  5011               	movf	___lmul@multiplier,w,c
  6725  002140  1012               	iorwf	___lmul@multiplier+1,w,c
  6726  002142  1013               	iorwf	___lmul@multiplier+2,w,c
  6727  002144  1014               	iorwf	___lmul@multiplier+3,w,c
  6728  002146  A4D8               	btfss	status,2,c
  6729  002148  D7E6               	goto	l3599
  6730  00214A  C019  F011         	movff	___lmul@product,?___lmul
  6731  00214E  C01A  F012         	movff	___lmul@product+1,?___lmul+1
  6732  002152  C01B  F013         	movff	___lmul@product+2,?___lmul+2
  6733  002156  C01C  F014         	movff	___lmul@product+3,?___lmul+3
  6734  00215A  0012               	return		;funcret
  6735  00215C                     __end_of___lmul:
  6736                           	opt stack 0
  6737                           tblptru	equ	0xFF8
  6738                           tblptrh	equ	0xFF7
  6739                           tblptrl	equ	0xFF6
  6740                           tablat	equ	0xFF5
  6741                           prodh	equ	0xFF4
  6742                           prodl	equ	0xFF3
  6743                           postinc0	equ	0xFEE
  6744                           wreg	equ	0xFE8
  6745                           postinc1	equ	0xFE6
  6746                           postdec1	equ	0xFE5
  6747                           fsr1h	equ	0xFE2
  6748                           fsr1l	equ	0xFE1
  6749                           postinc2	equ	0xFDE
  6750                           postdec2	equ	0xFDD
  6751                           fsr2h	equ	0xFDA
  6752                           fsr2l	equ	0xFD9
  6753                           status	equ	0xFD8
  6754                           
  6755 ;; *************** function ___aldiv *****************
  6756 ;; Defined at:
  6757 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/aldiv.c"
  6758 ;; Parameters:    Size  Location     Type
  6759 ;;  dividend        4   28[COMRAM] long 
  6760 ;;  divisor         4   32[COMRAM] long 
  6761 ;; Auto vars:     Size  Location     Type
  6762 ;;  quotient        4   38[COMRAM] long 
  6763 ;;  sign            1   37[COMRAM] unsigned char 
  6764 ;;  counter         1   36[COMRAM] unsigned char 
  6765 ;; Return value:  Size  Location     Type
  6766 ;;                  4   28[COMRAM] long 
  6767 ;; Registers used:
  6768 ;;		wreg, status,2, status,0
  6769 ;; Tracked objects:
  6770 ;;		On entry : 0/0
  6771 ;;		On exit  : 0/0
  6772 ;;		Unchanged: 0/0
  6773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6774 ;;      Params:         8       0       0       0       0       0       0       0       0
  6775 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6776 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6777 ;;      Totals:        14       0       0       0       0       0       0       0       0
  6778 ;;Total ram usage:       14 bytes
  6779 ;; Hardware stack levels used:    1
  6780 ;; Hardware stack levels required when called:    1
  6781 ;; This function calls:
  6782 ;;		Nothing
  6783 ;; This function is called by:
  6784 ;;		_line_cal
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788                           	psect	text22
  6789  001A76                     __ptext22:
  6790                           	opt stack 0
  6791  001A76                     ___aldiv:
  6792                           	opt stack 28
  6793                           
  6794                           ;incstack = 0
  6795  001A76  0E00               	movlw	0
  6796  001A78  6E26               	movwf	___aldiv@sign,c
  6797  001A7A  AE24               	btfss	___aldiv@divisor+3,7,c
  6798  001A7C  D00A               	goto	l3615
  6799  001A7E  1E24               	comf	___aldiv@divisor+3,f,c
  6800  001A80  1E23               	comf	___aldiv@divisor+2,f,c
  6801  001A82  1E22               	comf	___aldiv@divisor+1,f,c
  6802  001A84  6C21               	negf	___aldiv@divisor,c
  6803  001A86  0E00               	movlw	0
  6804  001A88  2222               	addwfc	___aldiv@divisor+1,f,c
  6805  001A8A  2223               	addwfc	___aldiv@divisor+2,f,c
  6806  001A8C  2224               	addwfc	___aldiv@divisor+3,f,c
  6807  001A8E  0E01               	movlw	1
  6808  001A90  6E26               	movwf	___aldiv@sign,c
  6809  001A92                     l3615:
  6810  001A92  AE20               	btfss	___aldiv@dividend+3,7,c
  6811  001A94  D00A               	goto	l3621
  6812  001A96  1E20               	comf	___aldiv@dividend+3,f,c
  6813  001A98  1E1F               	comf	___aldiv@dividend+2,f,c
  6814  001A9A  1E1E               	comf	___aldiv@dividend+1,f,c
  6815  001A9C  6C1D               	negf	___aldiv@dividend,c
  6816  001A9E  0E00               	movlw	0
  6817  001AA0  221E               	addwfc	___aldiv@dividend+1,f,c
  6818  001AA2  221F               	addwfc	___aldiv@dividend+2,f,c
  6819  001AA4  2220               	addwfc	___aldiv@dividend+3,f,c
  6820  001AA6  0E01               	movlw	1
  6821  001AA8  1A26               	xorwf	___aldiv@sign,f,c
  6822  001AAA                     l3621:
  6823  001AAA  0E00               	movlw	0
  6824  001AAC  6E27               	movwf	___aldiv@quotient,c
  6825  001AAE  0E00               	movlw	0
  6826  001AB0  6E28               	movwf	___aldiv@quotient+1,c
  6827  001AB2  0E00               	movlw	0
  6828  001AB4  6E29               	movwf	___aldiv@quotient+2,c
  6829  001AB6  0E00               	movlw	0
  6830  001AB8  6E2A               	movwf	___aldiv@quotient+3,c
  6831  001ABA  5021               	movf	___aldiv@divisor,w,c
  6832  001ABC  1022               	iorwf	___aldiv@divisor+1,w,c
  6833  001ABE  1023               	iorwf	___aldiv@divisor+2,w,c
  6834  001AC0  1024               	iorwf	___aldiv@divisor+3,w,c
  6835  001AC2  B4D8               	btfsc	status,2,c
  6836  001AC4  D02A               	goto	l3643
  6837  001AC6  0E01               	movlw	1
  6838  001AC8  6E25               	movwf	___aldiv@counter,c
  6839  001ACA  D006               	goto	l3629
  6840  001ACC                     l3627:
  6841  001ACC  90D8               	bcf	status,0,c
  6842  001ACE  3621               	rlcf	___aldiv@divisor,f,c
  6843  001AD0  3622               	rlcf	___aldiv@divisor+1,f,c
  6844  001AD2  3623               	rlcf	___aldiv@divisor+2,f,c
  6845  001AD4  3624               	rlcf	___aldiv@divisor+3,f,c
  6846  001AD6  2A25               	incf	___aldiv@counter,f,c
  6847  001AD8                     l3629:
  6848  001AD8  AE24               	btfss	___aldiv@divisor+3,7,c
  6849  001ADA  D7F8               	goto	l3627
  6850  001ADC                     l3631:
  6851  001ADC  90D8               	bcf	status,0,c
  6852  001ADE  3627               	rlcf	___aldiv@quotient,f,c
  6853  001AE0  3628               	rlcf	___aldiv@quotient+1,f,c
  6854  001AE2  3629               	rlcf	___aldiv@quotient+2,f,c
  6855  001AE4  362A               	rlcf	___aldiv@quotient+3,f,c
  6856  001AE6  5021               	movf	___aldiv@divisor,w,c
  6857  001AE8  5C1D               	subwf	___aldiv@dividend,w,c
  6858  001AEA  5022               	movf	___aldiv@divisor+1,w,c
  6859  001AEC  581E               	subwfb	___aldiv@dividend+1,w,c
  6860  001AEE  5023               	movf	___aldiv@divisor+2,w,c
  6861  001AF0  581F               	subwfb	___aldiv@dividend+2,w,c
  6862  001AF2  5024               	movf	___aldiv@divisor+3,w,c
  6863  001AF4  5820               	subwfb	___aldiv@dividend+3,w,c
  6864  001AF6  A0D8               	btfss	status,0,c
  6865  001AF8  D009               	goto	l3639
  6866  001AFA  5021               	movf	___aldiv@divisor,w,c
  6867  001AFC  5E1D               	subwf	___aldiv@dividend,f,c
  6868  001AFE  5022               	movf	___aldiv@divisor+1,w,c
  6869  001B00  5A1E               	subwfb	___aldiv@dividend+1,f,c
  6870  001B02  5023               	movf	___aldiv@divisor+2,w,c
  6871  001B04  5A1F               	subwfb	___aldiv@dividend+2,f,c
  6872  001B06  5024               	movf	___aldiv@divisor+3,w,c
  6873  001B08  5A20               	subwfb	___aldiv@dividend+3,f,c
  6874  001B0A  8027               	bsf	___aldiv@quotient,0,c
  6875  001B0C                     l3639:
  6876  001B0C  90D8               	bcf	status,0,c
  6877  001B0E  3224               	rrcf	___aldiv@divisor+3,f,c
  6878  001B10  3223               	rrcf	___aldiv@divisor+2,f,c
  6879  001B12  3222               	rrcf	___aldiv@divisor+1,f,c
  6880  001B14  3221               	rrcf	___aldiv@divisor,f,c
  6881  001B16  2E25               	decfsz	___aldiv@counter,f,c
  6882  001B18  D7E1               	goto	l3631
  6883  001B1A                     l3643:
  6884  001B1A  5026               	movf	___aldiv@sign,w,c
  6885  001B1C  B4D8               	btfsc	status,2,c
  6886  001B1E  D008               	goto	l3647
  6887  001B20  1E2A               	comf	___aldiv@quotient+3,f,c
  6888  001B22  1E29               	comf	___aldiv@quotient+2,f,c
  6889  001B24  1E28               	comf	___aldiv@quotient+1,f,c
  6890  001B26  6C27               	negf	___aldiv@quotient,c
  6891  001B28  0E00               	movlw	0
  6892  001B2A  2228               	addwfc	___aldiv@quotient+1,f,c
  6893  001B2C  2229               	addwfc	___aldiv@quotient+2,f,c
  6894  001B2E  222A               	addwfc	___aldiv@quotient+3,f,c
  6895  001B30                     l3647:
  6896  001B30  C027  F01D         	movff	___aldiv@quotient,?___aldiv
  6897  001B34  C028  F01E         	movff	___aldiv@quotient+1,?___aldiv+1
  6898  001B38  C029  F01F         	movff	___aldiv@quotient+2,?___aldiv+2
  6899  001B3C  C02A  F020         	movff	___aldiv@quotient+3,?___aldiv+3
  6900  001B40  0012               	return	
  6901  001B42                     __end_of___aldiv:
  6902                           	opt stack 0
  6903                           tblptru	equ	0xFF8
  6904                           tblptrh	equ	0xFF7
  6905                           tblptrl	equ	0xFF6
  6906                           tablat	equ	0xFF5
  6907                           prodh	equ	0xFF4
  6908                           prodl	equ	0xFF3
  6909                           postinc0	equ	0xFEE
  6910                           wreg	equ	0xFE8
  6911                           postinc1	equ	0xFE6
  6912                           postdec1	equ	0xFE5
  6913                           fsr1h	equ	0xFE2
  6914                           fsr1l	equ	0xFE1
  6915                           postinc2	equ	0xFDE
  6916                           postdec2	equ	0xFDD
  6917                           fsr2h	equ	0xFDA
  6918                           fsr2l	equ	0xFD9
  6919                           status	equ	0xFD8
  6920                           
  6921 ;; *************** function _init_wixel *****************
  6922 ;; Defined at:
  6923 ;;		line 4 in file "wixel.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;		None
  6926 ;; Auto vars:     Size  Location     Type
  6927 ;;		None
  6928 ;; Return value:  Size  Location     Type
  6929 ;;                  2    4[None  ] int 
  6930 ;; Registers used:
  6931 ;;		wreg, status,2
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6937 ;;      Params:         0       0       0       0       0       0       0       0       0
  6938 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6939 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6940 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6941 ;;Total ram usage:        0 bytes
  6942 ;; Hardware stack levels used:    1
  6943 ;; Hardware stack levels required when called:    1
  6944 ;; This function calls:
  6945 ;;		Nothing
  6946 ;; This function is called by:
  6947 ;;		_main
  6948 ;; This function uses a non-reentrant model
  6949 ;;
  6950                           
  6951                           	psect	text23
  6952  0023A2                     __ptext23:
  6953                           	opt stack 0
  6954  0023A2                     _init_wixel:
  6955                           	opt stack 29
  6956                           
  6957                           ;wixel.c: 5: BAUDCONbits.RXDTP=0;
  6958                           
  6959                           ;incstack = 0
  6960  0023A2  9AB8               	bcf	4024,5,c	;volatile
  6961                           
  6962                           ;wixel.c: 6: BAUDCONbits.TXCKP=0;
  6963  0023A4  98B8               	bcf	4024,4,c	;volatile
  6964                           
  6965                           ;wixel.c: 7: BAUDCONbits.BRG16=1;
  6966  0023A6  86B8               	bsf	4024,3,c	;volatile
  6967                           
  6968                           ;wixel.c: 9: BAUDCONbits.WUE=0;
  6969  0023A8  92B8               	bcf	4024,1,c	;volatile
  6970                           
  6971                           ;wixel.c: 10: BAUDCONbits.ABDEN=0;
  6972  0023AA  90B8               	bcf	4024,0,c	;volatile
  6973                           
  6974                           ;wixel.c: 11: SPBRG=51;
  6975  0023AC  0E33               	movlw	51
  6976  0023AE  6EAF               	movwf	4015,c	;volatile
  6977                           
  6978                           ;wixel.c: 12: SPBRGH=0;
  6979  0023B0  0E00               	movlw	0
  6980  0023B2  6EB0               	movwf	4016,c	;volatile
  6981                           
  6982                           ;wixel.c: 13: TXSTAbits.CSRC=0;
  6983  0023B4  9EAC               	bcf	4012,7,c	;volatile
  6984                           
  6985                           ;wixel.c: 14: TXSTAbits.TX9=0;
  6986  0023B6  9CAC               	bcf	4012,6,c	;volatile
  6987                           
  6988                           ;wixel.c: 15: TXSTAbits.TXEN=1;
  6989  0023B8  8AAC               	bsf	4012,5,c	;volatile
  6990                           
  6991                           ;wixel.c: 16: TXSTAbits.SYNC=0;
  6992  0023BA  98AC               	bcf	4012,4,c	;volatile
  6993                           
  6994                           ;wixel.c: 18: TXSTAbits.BRGH=0;
  6995  0023BC  94AC               	bcf	4012,2,c	;volatile
  6996                           
  6997                           ;wixel.c: 19: RCSTAbits.RX9=0;
  6998  0023BE  9CAB               	bcf	4011,6,c	;volatile
  6999                           
  7000                           ;wixel.c: 20: RCSTAbits.CREN=1;
  7001  0023C0  88AB               	bsf	4011,4,c	;volatile
  7002                           
  7003                           ;wixel.c: 21: RCSTAbits.SPEN=1;
  7004  0023C2  8EAB               	bsf	4011,7,c	;volatile
  7005  0023C4  0012               	return		;funcret
  7006  0023C6                     __end_of_init_wixel:
  7007                           	opt stack 0
  7008                           tblptru	equ	0xFF8
  7009                           tblptrh	equ	0xFF7
  7010                           tblptrl	equ	0xFF6
  7011                           tablat	equ	0xFF5
  7012                           prodh	equ	0xFF4
  7013                           prodl	equ	0xFF3
  7014                           postinc0	equ	0xFEE
  7015                           wreg	equ	0xFE8
  7016                           postinc1	equ	0xFE6
  7017                           postdec1	equ	0xFE5
  7018                           fsr1h	equ	0xFE2
  7019                           fsr1l	equ	0xFE1
  7020                           postinc2	equ	0xFDE
  7021                           postdec2	equ	0xFDD
  7022                           fsr2h	equ	0xFDA
  7023                           fsr2l	equ	0xFD9
  7024                           status	equ	0xFD8
  7025                           
  7026 ;; *************** function _init_tms *****************
  7027 ;; Defined at:
  7028 ;;		line 7 in file "config.c"
  7029 ;; Parameters:    Size  Location     Type
  7030 ;;		None
  7031 ;; Auto vars:     Size  Location     Type
  7032 ;;		None
  7033 ;; Return value:  Size  Location     Type
  7034 ;;                  1    wreg      void 
  7035 ;; Registers used:
  7036 ;;		wreg, status,2, cstack
  7037 ;; Tracked objects:
  7038 ;;		On entry : 0/0
  7039 ;;		On exit  : 0/0
  7040 ;;		Unchanged: 0/0
  7041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7042 ;;      Params:         0       0       0       0       0       0       0       0       0
  7043 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7044 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7045 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7046 ;;Total ram usage:        0 bytes
  7047 ;; Hardware stack levels used:    1
  7048 ;; Hardware stack levels required when called:    2
  7049 ;; This function calls:
  7050 ;;		_MotorsPWM
  7051 ;;		_an_init
  7052 ;;		_init_io
  7053 ;; This function is called by:
  7054 ;;		_main
  7055 ;; This function uses a non-reentrant model
  7056 ;;
  7057                           
  7058                           	psect	text24
  7059  0021AE                     __ptext24:
  7060                           	opt stack 0
  7061  0021AE                     _init_tms:
  7062                           	opt stack 28
  7063                           
  7064                           ;config.c: 8: OSCCONbits.IRCF = 7;
  7065                           
  7066                           ;incstack = 0
  7067  0021AE  88D3               	bsf	4051,4,c	;volatile
  7068  0021B0  8AD3               	bsf	4051,5,c	;volatile
  7069  0021B2  8CD3               	bsf	4051,6,c	;volatile
  7070                           
  7071                           ;config.c: 11: CMCON=0x07;
  7072  0021B4  0E07               	movlw	7
  7073  0021B6  6EB4               	movwf	4020,c	;volatile
  7074                           
  7075                           ;config.c: 14: UCONbits.USBEN = 0;
  7076  0021B8  966D               	bcf	3949,3,c	;volatile
  7077                           
  7078                           ;config.c: 15: UCFGbits.UTRDIS = 1;
  7079  0021BA  866F               	bsf	3951,3,c	;volatile
  7080                           
  7081                           ;config.c: 18: T0CONbits.TMR0ON = 0;
  7082  0021BC  9ED5               	bcf	4053,7,c	;volatile
  7083                           
  7084                           ;config.c: 19: T0CONbits.T08BIT = 0;
  7085  0021BE  9CD5               	bcf	4053,6,c	;volatile
  7086                           
  7087                           ;config.c: 20: T0CONbits.T0CS = 0;
  7088  0021C0  9AD5               	bcf	4053,5,c	;volatile
  7089                           
  7090                           ;config.c: 22: T0CONbits.PSA = 1;
  7091  0021C2  86D5               	bsf	4053,3,c	;volatile
  7092                           
  7093                           ;config.c: 23: TMR0H = 0xF8;
  7094  0021C4  0EF8               	movlw	248
  7095  0021C6  6ED7               	movwf	4055,c	;volatile
  7096                           
  7097                           ;config.c: 24: TMR0L = 0x2F;
  7098  0021C8  0E2F               	movlw	47
  7099  0021CA  6ED6               	movwf	4054,c	;volatile
  7100                           
  7101                           ;config.c: 27: INTCON2bits.TMR0IP = 1;
  7102  0021CC  84F1               	bsf	intcon2,2,c	;volatile
  7103                           
  7104                           ;config.c: 28: RCONbits.IPEN = 0;
  7105  0021CE  9ED0               	bcf	4048,7,c	;volatile
  7106                           
  7107                           ;config.c: 29: INTCONbits.TMR0IE = 1;
  7108  0021D0  8AF2               	bsf	intcon,5,c	;volatile
  7109                           
  7110                           ;config.c: 33: INTCONbits.GIE = 1;
  7111  0021D2  8EF2               	bsf	intcon,7,c	;volatile
  7112                           
  7113                           ;config.c: 35: T0CONbits.TMR0ON = 1;
  7114  0021D4  8ED5               	bsf	4053,7,c	;volatile
  7115                           
  7116                           ;config.c: 37: T1CONbits.TMR1ON = 0;
  7117  0021D6  90CD               	bcf	4045,0,c	;volatile
  7118                           
  7119                           ;config.c: 38: T1CONbits.T1RD16 = 0;
  7120  0021D8  9ECD               	bcf	4045,7,c	;volatile
  7121                           
  7122                           ;config.c: 39: T1CONbits.T1RUN = 0;
  7123  0021DA  9CCD               	bcf	4045,6,c	;volatile
  7124                           
  7125                           ;config.c: 40: T1CONbits.T1CKPS = 0;
  7126  0021DC  0ECF               	movlw	-49
  7127  0021DE  16CD               	andwf	4045,f,c	;volatile
  7128                           
  7129                           ;config.c: 41: T1CONbits.T1OSCEN = 0;
  7130  0021E0  96CD               	bcf	4045,3,c	;volatile
  7131                           
  7132                           ;config.c: 42: T1CONbits.TMR1CS = 0;
  7133  0021E2  92CD               	bcf	4045,1,c	;volatile
  7134                           
  7135                           ;config.c: 43: T1CONbits.TMR1ON = 1;
  7136  0021E4  80CD               	bsf	4045,0,c	;volatile
  7137                           
  7138                           ;config.c: 45: TMR1H = 0xF8;
  7139  0021E6  0EF8               	movlw	248
  7140  0021E8  6ECF               	movwf	4047,c	;volatile
  7141                           
  7142                           ;config.c: 46: TMR1L = 0x2F;
  7143  0021EA  0E2F               	movlw	47
  7144  0021EC  6ECE               	movwf	4046,c	;volatile
  7145                           
  7146                           ;config.c: 48: init_io();
  7147  0021EE  EC93  F011         	call	_init_io	;wreg free
  7148                           
  7149                           ;config.c: 49: an_init();
  7150  0021F2  ECAA  F011         	call	_an_init	;wreg free
  7151                           
  7152                           ;config.c: 50: MotorsPWM();
  7153  0021F6  EC3F  F011         	call	_MotorsPWM	;wreg free
  7154  0021FA  0012               	return		;funcret
  7155  0021FC                     __end_of_init_tms:
  7156                           	opt stack 0
  7157                           tblptru	equ	0xFF8
  7158                           tblptrh	equ	0xFF7
  7159                           tblptrl	equ	0xFF6
  7160                           tablat	equ	0xFF5
  7161                           prodh	equ	0xFF4
  7162                           prodl	equ	0xFF3
  7163                           intcon	equ	0xFF2
  7164                           intcon2	equ	0xFF1
  7165                           postinc0	equ	0xFEE
  7166                           wreg	equ	0xFE8
  7167                           postinc1	equ	0xFE6
  7168                           postdec1	equ	0xFE5
  7169                           fsr1h	equ	0xFE2
  7170                           fsr1l	equ	0xFE1
  7171                           postinc2	equ	0xFDE
  7172                           postdec2	equ	0xFDD
  7173                           fsr2h	equ	0xFDA
  7174                           fsr2l	equ	0xFD9
  7175                           status	equ	0xFD8
  7176                           
  7177 ;; *************** function _init_io *****************
  7178 ;; Defined at:
  7179 ;;		line 6 in file "io.c"
  7180 ;; Parameters:    Size  Location     Type
  7181 ;;		None
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;		None
  7184 ;; Return value:  Size  Location     Type
  7185 ;;                  1    wreg      void 
  7186 ;; Registers used:
  7187 ;;		None
  7188 ;; Tracked objects:
  7189 ;;		On entry : 0/0
  7190 ;;		On exit  : 0/0
  7191 ;;		Unchanged: 0/0
  7192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7193 ;;      Params:         0       0       0       0       0       0       0       0       0
  7194 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7195 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7196 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7197 ;;Total ram usage:        0 bytes
  7198 ;; Hardware stack levels used:    1
  7199 ;; Hardware stack levels required when called:    1
  7200 ;; This function calls:
  7201 ;;		Nothing
  7202 ;; This function is called by:
  7203 ;;		_init_tms
  7204 ;; This function uses a non-reentrant model
  7205 ;;
  7206                           
  7207                           	psect	text25
  7208  002326                     __ptext25:
  7209                           	opt stack 0
  7210  002326                     _init_io:
  7211                           	opt stack 28
  7212                           
  7213                           ;io.c: 8: TRISBbits.RB4 = OUTPUT;
  7214                           
  7215                           ;incstack = 0
  7216  002326  9893               	bcf	3987,4,c	;volatile
  7217                           
  7218                           ;io.c: 9: TRISCbits.RC1 = OUTPUT;
  7219  002328  9294               	bcf	3988,1,c	;volatile
  7220                           
  7221                           ;io.c: 10: TRISDbits.RD2 = OUTPUT;
  7222  00232A  9495               	bcf	3989,2,c	;volatile
  7223                           
  7224                           ;io.c: 11: TRISAbits.RA4 = OUTPUT;
  7225  00232C  9892               	bcf	3986,4,c	;volatile
  7226                           
  7227                           ;io.c: 14: TRISBbits.RB0 = OUTPUT;
  7228  00232E  9093               	bcf	3987,0,c	;volatile
  7229                           
  7230                           ;io.c: 15: TRISBbits.RB1 = OUTPUT;
  7231  002330  9293               	bcf	3987,1,c	;volatile
  7232                           
  7233                           ;io.c: 18: TRISDbits.RD0 = INPUT;
  7234  002332  8095               	bsf	3989,0,c	;volatile
  7235                           
  7236                           ;io.c: 19: TRISDbits.RD1 = INPUT;
  7237  002334  8295               	bsf	3989,1,c	;volatile
  7238                           
  7239                           ;io.c: 22: TRISAbits.RA0 = INPUT;
  7240  002336  8092               	bsf	3986,0,c	;volatile
  7241                           
  7242                           ;io.c: 23: TRISAbits.RA1 = INPUT;
  7243  002338  8292               	bsf	3986,1,c	;volatile
  7244                           
  7245                           ;io.c: 26: TRISAbits.RA2 = INPUT;
  7246  00233A  8492               	bsf	3986,2,c	;volatile
  7247                           
  7248                           ;io.c: 27: TRISAbits.RA3 = INPUT;
  7249  00233C  8692               	bsf	3986,3,c	;volatile
  7250                           
  7251                           ;io.c: 28: TRISAbits.RA5 = INPUT;
  7252  00233E  8A92               	bsf	3986,5,c	;volatile
  7253                           
  7254                           ;io.c: 29: TRISEbits.RE0 = INPUT;
  7255  002340  8096               	bsf	3990,0,c	;volatile
  7256                           
  7257                           ;io.c: 30: TRISEbits.RE1 = INPUT;
  7258  002342  8296               	bsf	3990,1,c	;volatile
  7259                           
  7260                           ;io.c: 31: TRISEbits.RE2 = INPUT;
  7261  002344  8496               	bsf	3990,2,c	;volatile
  7262                           
  7263                           ;io.c: 32: TRISBbits.RB2 = INPUT;
  7264  002346  8493               	bsf	3987,2,c	;volatile
  7265                           
  7266                           ;io.c: 35: TRISCbits.RC2 = OUTPUT;
  7267  002348  9494               	bcf	3988,2,c	;volatile
  7268                           
  7269                           ;io.c: 36: TRISBbits.RB3 = OUTPUT;
  7270  00234A  9693               	bcf	3987,3,c	;volatile
  7271                           
  7272                           ;io.c: 39: PORTEbits.RDPU = 1;
  7273  00234C  8E84               	bsf	3972,7,c	;volatile
  7274                           
  7275                           ;io.c: 42: TRISCbits.RC6 = OUTPUT;
  7276  00234E  9C94               	bcf	3988,6,c	;volatile
  7277                           
  7278                           ;io.c: 43: TRISCbits.RC7 = OUTPUT;
  7279  002350  9E94               	bcf	3988,7,c	;volatile
  7280  002352  0012               	return		;funcret
  7281  002354                     __end_of_init_io:
  7282                           	opt stack 0
  7283                           tblptru	equ	0xFF8
  7284                           tblptrh	equ	0xFF7
  7285                           tblptrl	equ	0xFF6
  7286                           tablat	equ	0xFF5
  7287                           prodh	equ	0xFF4
  7288                           prodl	equ	0xFF3
  7289                           intcon	equ	0xFF2
  7290                           intcon2	equ	0xFF1
  7291                           postinc0	equ	0xFEE
  7292                           wreg	equ	0xFE8
  7293                           postinc1	equ	0xFE6
  7294                           postdec1	equ	0xFE5
  7295                           fsr1h	equ	0xFE2
  7296                           fsr1l	equ	0xFE1
  7297                           postinc2	equ	0xFDE
  7298                           postdec2	equ	0xFDD
  7299                           fsr2h	equ	0xFDA
  7300                           fsr2l	equ	0xFD9
  7301                           status	equ	0xFD8
  7302                           
  7303 ;; *************** function _an_init *****************
  7304 ;; Defined at:
  7305 ;;		line 16 in file "analog.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;		None
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;		None
  7310 ;; Return value:  Size  Location     Type
  7311 ;;                  1    wreg      void 
  7312 ;; Registers used:
  7313 ;;		wreg, status,2
  7314 ;; Tracked objects:
  7315 ;;		On entry : 0/0
  7316 ;;		On exit  : 0/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7319 ;;      Params:         0       0       0       0       0       0       0       0       0
  7320 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7321 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7322 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7323 ;;Total ram usage:        0 bytes
  7324 ;; Hardware stack levels used:    1
  7325 ;; Hardware stack levels required when called:    1
  7326 ;; This function calls:
  7327 ;;		Nothing
  7328 ;; This function is called by:
  7329 ;;		_init_tms
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           	psect	text26
  7334  002354                     __ptext26:
  7335                           	opt stack 0
  7336  002354                     _an_init:
  7337                           	opt stack 28
  7338                           
  7339                           ;analog.c: 17: ADCON1bits.VCFG = 0;
  7340                           
  7341                           ;incstack = 0
  7342  002354  0ECF               	movlw	-49
  7343  002356  16C1               	andwf	4033,f,c	;volatile
  7344                           
  7345                           ;analog.c: 18: ADCON1bits.PCFG = 0x06;
  7346  002358  50C1               	movf	4033,w,c	;volatile
  7347  00235A  0BF0               	andlw	-16
  7348  00235C  0906               	iorlw	6
  7349  00235E  6EC1               	movwf	4033,c	;volatile
  7350                           
  7351                           ;analog.c: 20: ADCON2bits.ADFM=0;
  7352  002360  9EC0               	bcf	4032,7,c	;volatile
  7353                           
  7354                           ;analog.c: 21: ADCON2bits.ACQT=7;
  7355  002362  86C0               	bsf	4032,3,c	;volatile
  7356  002364  88C0               	bsf	4032,4,c	;volatile
  7357  002366  8AC0               	bsf	4032,5,c	;volatile
  7358                           
  7359                           ;analog.c: 22: ADCON2bits.ADCS=6;
  7360  002368  50C0               	movf	4032,w,c	;volatile
  7361  00236A  0BF8               	andlw	-8
  7362  00236C  0906               	iorlw	6
  7363  00236E  6EC0               	movwf	4032,c	;volatile
  7364                           
  7365                           ;analog.c: 23: ADCON0bits.CHS=0;
  7366  002370  94C2               	bcf	4034,2,c	;volatile
  7367  002372  96C2               	bcf	4034,3,c	;volatile
  7368  002374  98C2               	bcf	4034,4,c	;volatile
  7369  002376  9AC2               	bcf	4034,5,c	;volatile
  7370                           
  7371                           ;analog.c: 24: ADCON0bits.GODONE=0;
  7372  002378  92C2               	bcf	4034,1,c	;volatile
  7373                           
  7374                           ;analog.c: 25: ADCON0bits.ADON=1;
  7375  00237A  80C2               	bsf	4034,0,c	;volatile
  7376  00237C  0012               	return		;funcret
  7377  00237E                     __end_of_an_init:
  7378                           	opt stack 0
  7379                           tblptru	equ	0xFF8
  7380                           tblptrh	equ	0xFF7
  7381                           tblptrl	equ	0xFF6
  7382                           tablat	equ	0xFF5
  7383                           prodh	equ	0xFF4
  7384                           prodl	equ	0xFF3
  7385                           intcon	equ	0xFF2
  7386                           intcon2	equ	0xFF1
  7387                           postinc0	equ	0xFEE
  7388                           wreg	equ	0xFE8
  7389                           postinc1	equ	0xFE6
  7390                           postdec1	equ	0xFE5
  7391                           fsr1h	equ	0xFE2
  7392                           fsr1l	equ	0xFE1
  7393                           postinc2	equ	0xFDE
  7394                           postdec2	equ	0xFDD
  7395                           fsr2h	equ	0xFDA
  7396                           fsr2l	equ	0xFD9
  7397                           status	equ	0xFD8
  7398                           
  7399 ;; *************** function _MotorsPWM *****************
  7400 ;; Defined at:
  7401 ;;		line 55 in file "config.c"
  7402 ;; Parameters:    Size  Location     Type
  7403 ;;		None
  7404 ;; Auto vars:     Size  Location     Type
  7405 ;;		None
  7406 ;; Return value:  Size  Location     Type
  7407 ;;                  1    wreg      void 
  7408 ;; Registers used:
  7409 ;;		wreg, status,2
  7410 ;; Tracked objects:
  7411 ;;		On entry : 0/0
  7412 ;;		On exit  : 0/0
  7413 ;;		Unchanged: 0/0
  7414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7415 ;;      Params:         0       0       0       0       0       0       0       0       0
  7416 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7417 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7418 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7419 ;;Total ram usage:        0 bytes
  7420 ;; Hardware stack levels used:    1
  7421 ;; Hardware stack levels required when called:    1
  7422 ;; This function calls:
  7423 ;;		Nothing
  7424 ;; This function is called by:
  7425 ;;		_init_tms
  7426 ;; This function uses a non-reentrant model
  7427 ;;
  7428                           
  7429                           	psect	text27
  7430  00227E                     __ptext27:
  7431                           	opt stack 0
  7432  00227E                     _MotorsPWM:
  7433                           	opt stack 28
  7434                           
  7435                           ;config.c: 57: T2OUTPS0 = 0;
  7436                           
  7437                           ;incstack = 0
  7438  00227E  96CA               	bcf	4042,3,c	;volatile
  7439                           
  7440                           ;config.c: 58: T2OUTPS1 = 0;
  7441  002280  98CA               	bcf	4042,4,c	;volatile
  7442                           
  7443                           ;config.c: 59: T2OUTPS2 = 0;
  7444  002282  9ACA               	bcf	4042,5,c	;volatile
  7445                           
  7446                           ;config.c: 60: T2OUTPS3 = 0;
  7447  002284  9CCA               	bcf	4042,6,c	;volatile
  7448                           
  7449                           ;config.c: 62: TMR2ON = 1;
  7450  002286  84CA               	bsf	4042,2,c	;volatile
  7451                           
  7452                           ;config.c: 63: T2CKPS0 = 0;
  7453  002288  90CA               	bcf	4042,0,c	;volatile
  7454                           
  7455                           ;config.c: 64: T2CKPS1 = 0;
  7456  00228A  92CA               	bcf	4042,1,c	;volatile
  7457                           
  7458                           ;config.c: 66: TMR2ON = 1;
  7459  00228C  84CA               	bsf	4042,2,c	;volatile
  7460                           
  7461                           ;config.c: 69: T2CONbits.TOUTPS=11;
  7462  00228E  50CA               	movf	4042,w,c	;volatile
  7463  002290  0B87               	andlw	-121
  7464  002292  0958               	iorlw	88
  7465  002294  6ECA               	movwf	4042,c	;volatile
  7466                           
  7467                           ;config.c: 70: T2CONbits.T2CKPS=1;
  7468  002296  50CA               	movf	4042,w,c	;volatile
  7469  002298  0BFC               	andlw	-4
  7470  00229A  0901               	iorlw	1
  7471  00229C  6ECA               	movwf	4042,c	;volatile
  7472                           
  7473                           ;config.c: 71: T2CONbits.TMR2ON=0;
  7474  00229E  94CA               	bcf	4042,2,c	;volatile
  7475                           
  7476                           ;config.c: 72: PR2=249;
  7477  0022A0  0EF9               	movlw	249
  7478  0022A2  6ECB               	movwf	4043,c	;volatile
  7479                           
  7480                           ;config.c: 73: T2CONbits.TMR2ON=1;
  7481  0022A4  84CA               	bsf	4042,2,c	;volatile
  7482                           
  7483                           ;config.c: 76: CCP1CONbits.CCP1M = 1100;
  7484  0022A6  50BD               	movf	4029,w,c	;volatile
  7485  0022A8  0BF0               	andlw	-16
  7486  0022AA  090C               	iorlw	12
  7487  0022AC  6EBD               	movwf	4029,c	;volatile
  7488                           
  7489                           ;config.c: 77: CCP2CONbits.CCP2M = 1100;
  7490  0022AE  50BA               	movf	4026,w,c	;volatile
  7491  0022B0  0BF0               	andlw	-16
  7492  0022B2  090C               	iorlw	12
  7493  0022B4  6EBA               	movwf	4026,c	;volatile
  7494                           
  7495                           ;config.c: 80: PR2 = 249;
  7496  0022B6  0EF9               	movlw	249
  7497  0022B8  6ECB               	movwf	4043,c	;volatile
  7498  0022BA  0012               	return		;funcret
  7499  0022BC                     __end_of_MotorsPWM:
  7500                           	opt stack 0
  7501                           tblptru	equ	0xFF8
  7502                           tblptrh	equ	0xFF7
  7503                           tblptrl	equ	0xFF6
  7504                           tablat	equ	0xFF5
  7505                           prodh	equ	0xFF4
  7506                           prodl	equ	0xFF3
  7507                           intcon	equ	0xFF2
  7508                           intcon2	equ	0xFF1
  7509                           postinc0	equ	0xFEE
  7510                           wreg	equ	0xFE8
  7511                           postinc1	equ	0xFE6
  7512                           postdec1	equ	0xFE5
  7513                           fsr1h	equ	0xFE2
  7514                           fsr1l	equ	0xFE1
  7515                           postinc2	equ	0xFDE
  7516                           postdec2	equ	0xFDD
  7517                           fsr2h	equ	0xFDA
  7518                           fsr2l	equ	0xFD9
  7519                           status	equ	0xFD8
  7520                           
  7521 ;; *************** function _init_cal *****************
  7522 ;; Defined at:
  7523 ;;		line 41 in file "analog.c"
  7524 ;; Parameters:    Size  Location     Type
  7525 ;;		None
  7526 ;; Auto vars:     Size  Location     Type
  7527 ;;  i               2   16[COMRAM] int 
  7528 ;; Return value:  Size  Location     Type
  7529 ;;                  2   32[None  ] int 
  7530 ;; Registers used:
  7531 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7532 ;; Tracked objects:
  7533 ;;		On entry : 0/0
  7534 ;;		On exit  : 0/0
  7535 ;;		Unchanged: 0/0
  7536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7537 ;;      Params:         0       0       0       0       0       0       0       0       0
  7538 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7539 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7540 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7541 ;;Total ram usage:        2 bytes
  7542 ;; Hardware stack levels used:    1
  7543 ;; Hardware stack levels required when called:    1
  7544 ;; This function calls:
  7545 ;;		Nothing
  7546 ;; This function is called by:
  7547 ;;		_main
  7548 ;; This function uses a non-reentrant model
  7549 ;;
  7550                           
  7551                           	psect	text28
  7552  00202A                     __ptext28:
  7553                           	opt stack 0
  7554  00202A                     _init_cal:
  7555                           	opt stack 29
  7556                           
  7557                           ;analog.c: 42: int i;
  7558                           ;analog.c: 44: for (i = 0;i < 9;i++) maxs[i] = 0;
  7559                           
  7560                           ;incstack = 0
  7561  00202A  0E00               	movlw	0
  7562  00202C  6E12               	movwf	init_cal@i+1,c
  7563  00202E  0E00               	movlw	0
  7564  002030  6E11               	movwf	init_cal@i,c
  7565  002032                     l3935:
  7566  002032  BE12               	btfsc	init_cal@i+1,7,c
  7567  002034  D006               	goto	l3939
  7568  002036  5012               	movf	init_cal@i+1,w,c
  7569  002038  E114               	bnz	l3945
  7570  00203A  0E09               	movlw	9
  7571  00203C  5C11               	subwf	init_cal@i,w,c
  7572  00203E  B0D8               	btfsc	status,0,c
  7573  002040  D010               	goto	l3945
  7574  002042                     l3939:
  7575  002042  90D8               	bcf	status,0,c
  7576  002044  3411               	rlcf	init_cal@i,w,c
  7577  002046  6ED9               	movwf	fsr2l,c
  7578  002048  3412               	rlcf	init_cal@i+1,w,c
  7579  00204A  6EDA               	movwf	fsr2h,c
  7580  00204C  0E12               	movlw	low _maxs
  7581  00204E  26D9               	addwf	fsr2l,f,c
  7582  002050  0E01               	movlw	high _maxs
  7583  002052  22DA               	addwfc	fsr2h,f,c
  7584  002054  0E00               	movlw	0
  7585  002056  6EDE               	movwf	postinc2,c
  7586  002058  0E00               	movlw	0
  7587  00205A  6EDD               	movwf	postdec2,c
  7588  00205C  4A11               	infsnz	init_cal@i,f,c
  7589  00205E  2A12               	incf	init_cal@i+1,f,c
  7590  002060  D7E8               	goto	l3935
  7591  002062                     l3945:
  7592                           
  7593                           ;analog.c: 45: for (i = 0;i < 9;i++) mins[i] = 1024;
  7594  002062  0E00               	movlw	0
  7595  002064  6E12               	movwf	init_cal@i+1,c
  7596  002066  0E00               	movlw	0
  7597  002068  6E11               	movwf	init_cal@i,c
  7598  00206A                     l3947:
  7599  00206A  BE12               	btfsc	init_cal@i+1,7,c
  7600  00206C  D006               	goto	l3951
  7601  00206E  5012               	movf	init_cal@i+1,w,c
  7602  002070  E114               	bnz	l146
  7603  002072  0E09               	movlw	9
  7604  002074  5C11               	subwf	init_cal@i,w,c
  7605  002076  B0D8               	btfsc	status,0,c
  7606  002078  0012               	return	
  7607  00207A                     l3951:
  7608  00207A  90D8               	bcf	status,0,c
  7609  00207C  3411               	rlcf	init_cal@i,w,c
  7610  00207E  6ED9               	movwf	fsr2l,c
  7611  002080  3412               	rlcf	init_cal@i+1,w,c
  7612  002082  6EDA               	movwf	fsr2h,c
  7613  002084  0E8C               	movlw	low _mins
  7614  002086  26D9               	addwf	fsr2l,f,c
  7615  002088  0E00               	movlw	high _mins
  7616  00208A  22DA               	addwfc	fsr2h,f,c
  7617  00208C  0E00               	movlw	0
  7618  00208E  6EDE               	movwf	postinc2,c
  7619  002090  0E04               	movlw	4
  7620  002092  6EDD               	movwf	postdec2,c
  7621  002094  4A11               	infsnz	init_cal@i,f,c
  7622  002096  2A12               	incf	init_cal@i+1,f,c
  7623  002098  D7E8               	goto	l3947
  7624  00209A                     l146:
  7625  00209A  0012               	return		;funcret
  7626  00209C                     __end_of_init_cal:
  7627                           	opt stack 0
  7628                           tblptru	equ	0xFF8
  7629                           tblptrh	equ	0xFF7
  7630                           tblptrl	equ	0xFF6
  7631                           tablat	equ	0xFF5
  7632                           prodh	equ	0xFF4
  7633                           prodl	equ	0xFF3
  7634                           intcon	equ	0xFF2
  7635                           intcon2	equ	0xFF1
  7636                           postinc0	equ	0xFEE
  7637                           wreg	equ	0xFE8
  7638                           postinc1	equ	0xFE6
  7639                           postdec1	equ	0xFE5
  7640                           fsr1h	equ	0xFE2
  7641                           fsr1l	equ	0xFE1
  7642                           postinc2	equ	0xFDE
  7643                           postdec2	equ	0xFDD
  7644                           fsr2h	equ	0xFDA
  7645                           fsr2l	equ	0xFD9
  7646                           status	equ	0xFD8
  7647                           
  7648 ;; *************** function ___fttol *****************
  7649 ;; Defined at:
  7650 ;;		line 44 in file "/opt/microchip/xc8/v1.41/sources/common/fttol.c"
  7651 ;; Parameters:    Size  Location     Type
  7652 ;;  f1              3   55[COMRAM] float 
  7653 ;; Auto vars:     Size  Location     Type
  7654 ;;  lval            4    6[BANK0 ] unsigned long 
  7655 ;;  exp1            1   10[BANK0 ] unsigned char 
  7656 ;;  sign1           1    5[BANK0 ] unsigned char 
  7657 ;; Return value:  Size  Location     Type
  7658 ;;                  4   55[COMRAM] long 
  7659 ;; Registers used:
  7660 ;;		wreg, status,2, status,0
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/0
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7666 ;;      Params:         4       0       0       0       0       0       0       0       0
  7667 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7668 ;;      Temps:          0       5       0       0       0       0       0       0       0
  7669 ;;      Totals:         4      11       0       0       0       0       0       0       0
  7670 ;;Total ram usage:       15 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; Hardware stack levels required when called:    1
  7673 ;; This function calls:
  7674 ;;		Nothing
  7675 ;; This function is called by:
  7676 ;;		_main
  7677 ;; This function uses a non-reentrant model
  7678 ;;
  7679                           
  7680                           	psect	text29
  7681  001854                     __ptext29:
  7682                           	opt stack 0
  7683  001854                     ___fttol:
  7684                           	opt stack 29
  7685                           
  7686                           ;incstack = 0
  7687  001854  C03A  F0B0         	movff	___fttol@f1+2,??___fttol
  7688  001858  0100               	movlb	0	; () banked
  7689  00185A  6BB1               	clrf	(??___fttol+1)& (0+255),b
  7690  00185C  6BB2               	clrf	(??___fttol+2)& (0+255),b
  7691  00185E  3439               	rlcf	___fttol@f1+1,w,c
  7692  001860  0100               	movlb	0	; () banked
  7693  001862  37B0               	rlcf	??___fttol& (0+255),f,b
  7694  001864  E301               	bnc	u5131
  7695  001866  81B1               	bsf	(??___fttol+1)& (0+255),0,b
  7696  001868                     u5131:
  7697  001868  0100               	movlb	0	; () banked
  7698  00186A  51B0               	movf	??___fttol& (0+255),w,b
  7699  00186C  0100               	movlb	0	; () banked
  7700  00186E  6FBA               	movwf	___fttol@exp1& (0+255),b
  7701  001870  0100               	movlb	0	; () banked
  7702  001872  51BA               	movf	___fttol@exp1& (0+255),w,b
  7703  001874  A4D8               	btfss	status,2,c
  7704  001876  D009               	goto	l4201
  7705                           
  7706                           ; BSR set to: 0
  7707  001878  0E00               	movlw	0
  7708  00187A  6E38               	movwf	?___fttol,c
  7709  00187C  0E00               	movlw	0
  7710  00187E  6E39               	movwf	?___fttol+1,c
  7711  001880  0E00               	movlw	0
  7712  001882  6E3A               	movwf	?___fttol+2,c
  7713  001884  0E00               	movlw	0
  7714  001886  6E3B               	movwf	?___fttol+3,c
  7715                           
  7716                           ; BSR set to: 0
  7717  001888  0012               	return	
  7718  00188A                     l4201:
  7719                           
  7720                           ; BSR set to: 0
  7721  00188A  0E17               	movlw	23
  7722  00188C  0100               	movlb	0	; () banked
  7723  00188E  6FB0               	movwf	??___fttol& (0+255),b
  7724  001890  C038  F0B1         	movff	___fttol@f1,??___fttol+1
  7725  001894  C039  F0B2         	movff	___fttol@f1+1,??___fttol+2
  7726  001898  C03A  F0B3         	movff	___fttol@f1+2,??___fttol+3
  7727  00189C  0100               	movlb	0	; () banked
  7728  00189E  29B0               	incf	??___fttol& (0+255),w,b
  7729  0018A0  0100               	movlb	0	; () banked
  7730  0018A2  6FB4               	movwf	(??___fttol+4)& (0+255),b
  7731  0018A4  D005               	goto	u5150
  7732  0018A6                     u5155:
  7733  0018A6  0100               	movlb	0	; () banked
  7734  0018A8  90D8               	bcf	status,0,c
  7735  0018AA  33B3               	rrcf	(??___fttol+3)& (0+255),f,b
  7736  0018AC  33B2               	rrcf	(??___fttol+2)& (0+255),f,b
  7737  0018AE  33B1               	rrcf	(??___fttol+1)& (0+255),f,b
  7738  0018B0                     u5150:
  7739  0018B0  0100               	movlb	0	; () banked
  7740  0018B2  2FB4               	decfsz	(??___fttol+4)& (0+255),f,b
  7741  0018B4  D7F8               	goto	u5155
  7742  0018B6  0100               	movlb	0	; () banked
  7743  0018B8  51B1               	movf	(??___fttol+1)& (0+255),w,b
  7744  0018BA  0100               	movlb	0	; () banked
  7745  0018BC  6FB5               	movwf	___fttol@sign1& (0+255),b
  7746                           
  7747                           ; BSR set to: 0
  7748  0018BE  8E39               	bsf	___fttol@f1+1,7,c
  7749                           
  7750                           ; BSR set to: 0
  7751  0018C0  0EFF               	movlw	255
  7752  0018C2  1638               	andwf	___fttol@f1,f,c
  7753  0018C4  0EFF               	movlw	255
  7754  0018C6  1639               	andwf	___fttol@f1+1,f,c
  7755  0018C8  0E00               	movlw	0
  7756  0018CA  163A               	andwf	___fttol@f1+2,f,c
  7757                           
  7758                           ; BSR set to: 0
  7759  0018CC  5038               	movf	___fttol@f1,w,c
  7760  0018CE  0100               	movlb	0	; () banked
  7761  0018D0  6FB6               	movwf	___fttol@lval& (0+255),b
  7762  0018D2  5039               	movf	___fttol@f1+1,w,c
  7763  0018D4  0100               	movlb	0	; () banked
  7764  0018D6  6FB7               	movwf	(___fttol@lval+1)& (0+255),b
  7765  0018D8  503A               	movf	___fttol@f1+2,w,c
  7766  0018DA  0100               	movlb	0	; () banked
  7767  0018DC  6FB8               	movwf	(___fttol@lval+2)& (0+255),b
  7768  0018DE  0100               	movlb	0	; () banked
  7769  0018E0  6BB9               	clrf	(___fttol@lval+3)& (0+255),b
  7770                           
  7771                           ; BSR set to: 0
  7772  0018E2  0E8E               	movlw	142
  7773  0018E4  0100               	movlb	0	; () banked
  7774  0018E6  5FBA               	subwf	___fttol@exp1& (0+255),f,b
  7775                           
  7776                           ; BSR set to: 0
  7777  0018E8  0100               	movlb	0	; () banked
  7778  0018EA  AFBA               	btfss	___fttol@exp1& (0+255),7,b
  7779  0018EC  D019               	goto	l4223
  7780                           
  7781                           ; BSR set to: 0
  7782  0018EE  0100               	movlb	0	; () banked
  7783  0018F0  51BA               	movf	___fttol@exp1& (0+255),w,b
  7784  0018F2  0A80               	xorlw	128
  7785  0018F4  0F8F               	addlw	143
  7786  0018F6  B0D8               	btfsc	status,0,c
  7787  0018F8  D009               	goto	l4219
  7788                           
  7789                           ; BSR set to: 0
  7790  0018FA  0E00               	movlw	0
  7791  0018FC  6E38               	movwf	?___fttol,c
  7792  0018FE  0E00               	movlw	0
  7793  001900  6E39               	movwf	?___fttol+1,c
  7794  001902  0E00               	movlw	0
  7795  001904  6E3A               	movwf	?___fttol+2,c
  7796  001906  0E00               	movlw	0
  7797  001908  6E3B               	movwf	?___fttol+3,c
  7798                           
  7799                           ; BSR set to: 0
  7800  00190A  0012               	return	
  7801  00190C                     l4219:
  7802                           
  7803                           ; BSR set to: 0
  7804  00190C  0100               	movlb	0	; () banked
  7805  00190E  90D8               	bcf	status,0,c
  7806  001910  33B9               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7807  001912  33B8               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7808  001914  33B7               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7809  001916  33B6               	rrcf	___fttol@lval& (0+255),f,b
  7810                           
  7811                           ; BSR set to: 0
  7812  001918  0100               	movlb	0	; () banked
  7813  00191A  3FBA               	incfsz	___fttol@exp1& (0+255),f,b
  7814  00191C  D7F7               	goto	l4219
  7815                           
  7816                           ; BSR set to: 0
  7817  00191E  D01A               	goto	l4233
  7818  001920                     l4223:
  7819                           
  7820                           ; BSR set to: 0
  7821  001920  0E17               	movlw	23
  7822  001922  0100               	movlb	0	; () banked
  7823  001924  65BA               	cpfsgt	___fttol@exp1& (0+255),b
  7824  001926  D011               	goto	l4231
  7825                           
  7826                           ; BSR set to: 0
  7827  001928  0E00               	movlw	0
  7828  00192A  6E38               	movwf	?___fttol,c
  7829  00192C  0E00               	movlw	0
  7830  00192E  6E39               	movwf	?___fttol+1,c
  7831  001930  0E00               	movlw	0
  7832  001932  6E3A               	movwf	?___fttol+2,c
  7833  001934  0E00               	movlw	0
  7834  001936  6E3B               	movwf	?___fttol+3,c
  7835                           
  7836                           ; BSR set to: 0
  7837  001938  0012               	return	
  7838  00193A                     l4229:
  7839                           
  7840                           ; BSR set to: 0
  7841  00193A  0100               	movlb	0	; () banked
  7842  00193C  90D8               	bcf	status,0,c
  7843  00193E  37B6               	rlcf	___fttol@lval& (0+255),f,b
  7844  001940  37B7               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7845  001942  37B8               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7846  001944  37B9               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7847  001946  0100               	movlb	0	; () banked
  7848  001948  07BA               	decf	___fttol@exp1& (0+255),f,b
  7849  00194A                     l4231:
  7850                           
  7851                           ; BSR set to: 0
  7852  00194A  0100               	movlb	0	; () banked
  7853  00194C  51BA               	movf	___fttol@exp1& (0+255),w,b
  7854  00194E  0100               	movlb	0	; () banked
  7855  001950  A4D8               	btfss	status,2,c
  7856  001952  D7F3               	goto	l4229
  7857  001954                     l4233:
  7858                           
  7859                           ; BSR set to: 0
  7860  001954  0100               	movlb	0	; () banked
  7861  001956  51B5               	movf	___fttol@sign1& (0+255),w,b
  7862  001958  0100               	movlb	0	; () banked
  7863  00195A  B4D8               	btfsc	status,2,c
  7864  00195C  D009               	goto	l4237
  7865                           
  7866                           ; BSR set to: 0
  7867  00195E  0100               	movlb	0	; () banked
  7868  001960  1FB9               	comf	(___fttol@lval+3)& (0+255),f,b
  7869  001962  1FB8               	comf	(___fttol@lval+2)& (0+255),f,b
  7870  001964  1FB7               	comf	(___fttol@lval+1)& (0+255),f,b
  7871  001966  6DB6               	negf	___fttol@lval& (0+255),b
  7872  001968  0E00               	movlw	0
  7873  00196A  23B7               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7874  00196C  23B8               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7875  00196E  23B9               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7876  001970                     l4237:
  7877                           
  7878                           ; BSR set to: 0
  7879  001970  C0B6  F038         	movff	___fttol@lval,?___fttol
  7880  001974  C0B7  F039         	movff	___fttol@lval+1,?___fttol+1
  7881  001978  C0B8  F03A         	movff	___fttol@lval+2,?___fttol+2
  7882  00197C  C0B9  F03B         	movff	___fttol@lval+3,?___fttol+3
  7883  001980  0012               	return	
  7884  001982                     __end_of___fttol:
  7885                           	opt stack 0
  7886                           tblptru	equ	0xFF8
  7887                           tblptrh	equ	0xFF7
  7888                           tblptrl	equ	0xFF6
  7889                           tablat	equ	0xFF5
  7890                           prodh	equ	0xFF4
  7891                           prodl	equ	0xFF3
  7892                           intcon	equ	0xFF2
  7893                           intcon2	equ	0xFF1
  7894                           postinc0	equ	0xFEE
  7895                           wreg	equ	0xFE8
  7896                           postinc1	equ	0xFE6
  7897                           postdec1	equ	0xFE5
  7898                           fsr1h	equ	0xFE2
  7899                           fsr1l	equ	0xFE1
  7900                           postinc2	equ	0xFDE
  7901                           postdec2	equ	0xFDD
  7902                           fsr2h	equ	0xFDA
  7903                           fsr2l	equ	0xFD9
  7904                           status	equ	0xFD8
  7905                           
  7906 ;; *************** function ___ftneg *****************
  7907 ;; Defined at:
  7908 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/ftneg.c"
  7909 ;; Parameters:    Size  Location     Type
  7910 ;;  f1              3   16[COMRAM] float 
  7911 ;; Auto vars:     Size  Location     Type
  7912 ;;		None
  7913 ;; Return value:  Size  Location     Type
  7914 ;;                  3   16[COMRAM] float 
  7915 ;; Registers used:
  7916 ;;		wreg, status,2, status,0
  7917 ;; Tracked objects:
  7918 ;;		On entry : 0/0
  7919 ;;		On exit  : 0/0
  7920 ;;		Unchanged: 0/0
  7921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7922 ;;      Params:         3       0       0       0       0       0       0       0       0
  7923 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7924 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7925 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7926 ;;Total ram usage:        3 bytes
  7927 ;; Hardware stack levels used:    1
  7928 ;; Hardware stack levels required when called:    1
  7929 ;; This function calls:
  7930 ;;		Nothing
  7931 ;; This function is called by:
  7932 ;;		_main
  7933 ;; This function uses a non-reentrant model
  7934 ;;
  7935                           
  7936                           	psect	text30
  7937  0023C6                     __ptext30:
  7938                           	opt stack 0
  7939  0023C6                     ___ftneg:
  7940                           	opt stack 29
  7941                           
  7942                           ; BSR set to: 0
  7943                           ;incstack = 0
  7944  0023C6  5011               	movf	___ftneg@f1,w,c
  7945  0023C8  1012               	iorwf	___ftneg@f1+1,w,c
  7946  0023CA  1013               	iorwf	___ftneg@f1+2,w,c
  7947  0023CC  B4D8               	btfsc	status,2,c
  7948  0023CE  D006               	goto	l775
  7949  0023D0  0E00               	movlw	0
  7950  0023D2  1A11               	xorwf	___ftneg@f1,f,c
  7951  0023D4  0E00               	movlw	0
  7952  0023D6  1A12               	xorwf	___ftneg@f1+1,f,c
  7953  0023D8  0E80               	movlw	128
  7954  0023DA  1A13               	xorwf	___ftneg@f1+2,f,c
  7955  0023DC                     l775:
  7956  0023DC  C011  F011         	movff	___ftneg@f1,?___ftneg
  7957  0023E0  C012  F012         	movff	___ftneg@f1+1,?___ftneg+1
  7958  0023E4  C013  F013         	movff	___ftneg@f1+2,?___ftneg+2
  7959  0023E8  0012               	return		;funcret
  7960  0023EA                     __end_of___ftneg:
  7961                           	opt stack 0
  7962                           tblptru	equ	0xFF8
  7963                           tblptrh	equ	0xFF7
  7964                           tblptrl	equ	0xFF6
  7965                           tablat	equ	0xFF5
  7966                           prodh	equ	0xFF4
  7967                           prodl	equ	0xFF3
  7968                           intcon	equ	0xFF2
  7969                           intcon2	equ	0xFF1
  7970                           postinc0	equ	0xFEE
  7971                           wreg	equ	0xFE8
  7972                           postinc1	equ	0xFE6
  7973                           postdec1	equ	0xFE5
  7974                           fsr1h	equ	0xFE2
  7975                           fsr1l	equ	0xFE1
  7976                           postinc2	equ	0xFDE
  7977                           postdec2	equ	0xFDD
  7978                           fsr2h	equ	0xFDA
  7979                           fsr2l	equ	0xFD9
  7980                           status	equ	0xFD8
  7981                           
  7982 ;; *************** function ___ftge *****************
  7983 ;; Defined at:
  7984 ;;		line 4 in file "/opt/microchip/xc8/v1.41/sources/common/ftge.c"
  7985 ;; Parameters:    Size  Location     Type
  7986 ;;  ff1             3   16[COMRAM] float 
  7987 ;;  ff2             3   19[COMRAM] float 
  7988 ;; Auto vars:     Size  Location     Type
  7989 ;;		None
  7990 ;; Return value:  Size  Location     Type
  7991 ;;		None               void
  7992 ;; Registers used:
  7993 ;;		wreg, status,2, status,0
  7994 ;; Tracked objects:
  7995 ;;		On entry : 0/0
  7996 ;;		On exit  : 0/0
  7997 ;;		Unchanged: 0/0
  7998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7999 ;;      Params:         6       0       0       0       0       0       0       0       0
  8000 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8001 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8002 ;;      Totals:         9       0       0       0       0       0       0       0       0
  8003 ;;Total ram usage:        9 bytes
  8004 ;; Hardware stack levels used:    1
  8005 ;; Hardware stack levels required when called:    1
  8006 ;; This function calls:
  8007 ;;		Nothing
  8008 ;; This function is called by:
  8009 ;;		_main
  8010 ;; This function uses a non-reentrant model
  8011 ;;
  8012                           
  8013                           	psect	text31
  8014  001EA4                     __ptext31:
  8015                           	opt stack 0
  8016  001EA4                     ___ftge:
  8017                           	opt stack 29
  8018                           
  8019                           ;incstack = 0
  8020  001EA4  AE13               	btfss	___ftge@ff1+2,7,c
  8021  001EA6  D016               	goto	l4177
  8022  001EA8  C011  F017         	movff	___ftge@ff1,??___ftge
  8023  001EAC  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
  8024  001EB0  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
  8025  001EB4  1E17               	comf	??___ftge,f,c
  8026  001EB6  1E18               	comf	??___ftge+1,f,c
  8027  001EB8  1E19               	comf	??___ftge+2,f,c
  8028  001EBA  2A17               	incf	??___ftge,f,c
  8029  001EBC  0E00               	movlw	0
  8030  001EBE  2218               	addwfc	??___ftge+1,f,c
  8031  001EC0  2219               	addwfc	??___ftge+2,f,c
  8032  001EC2  0E00               	movlw	0
  8033  001EC4  2417               	addwf	??___ftge,w,c
  8034  001EC6  6E11               	movwf	___ftge@ff1,c
  8035  001EC8  0E00               	movlw	0
  8036  001ECA  2018               	addwfc	??___ftge+1,w,c
  8037  001ECC  6E12               	movwf	___ftge@ff1+1,c
  8038  001ECE  0E80               	movlw	128
  8039  001ED0  2019               	addwfc	??___ftge+2,w,c
  8040  001ED2  6E13               	movwf	___ftge@ff1+2,c
  8041  001ED4                     l4177:
  8042  001ED4  AE16               	btfss	___ftge@ff2+2,7,c
  8043  001ED6  D016               	goto	l4181
  8044  001ED8  C014  F017         	movff	___ftge@ff2,??___ftge
  8045  001EDC  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
  8046  001EE0  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
  8047  001EE4  1E17               	comf	??___ftge,f,c
  8048  001EE6  1E18               	comf	??___ftge+1,f,c
  8049  001EE8  1E19               	comf	??___ftge+2,f,c
  8050  001EEA  2A17               	incf	??___ftge,f,c
  8051  001EEC  0E00               	movlw	0
  8052  001EEE  2218               	addwfc	??___ftge+1,f,c
  8053  001EF0  2219               	addwfc	??___ftge+2,f,c
  8054  001EF2  0E00               	movlw	0
  8055  001EF4  2417               	addwf	??___ftge,w,c
  8056  001EF6  6E14               	movwf	___ftge@ff2,c
  8057  001EF8  0E00               	movlw	0
  8058  001EFA  2018               	addwfc	??___ftge+1,w,c
  8059  001EFC  6E15               	movwf	___ftge@ff2+1,c
  8060  001EFE  0E80               	movlw	128
  8061  001F00  2019               	addwfc	??___ftge+2,w,c
  8062  001F02  6E16               	movwf	___ftge@ff2+2,c
  8063  001F04                     l4181:
  8064  001F04  0E00               	movlw	0
  8065  001F06  1A11               	xorwf	___ftge@ff1,f,c
  8066  001F08  0E00               	movlw	0
  8067  001F0A  1A12               	xorwf	___ftge@ff1+1,f,c
  8068  001F0C  0E80               	movlw	128
  8069  001F0E  1A13               	xorwf	___ftge@ff1+2,f,c
  8070  001F10  0E00               	movlw	0
  8071  001F12  1A14               	xorwf	___ftge@ff2,f,c
  8072  001F14  0E00               	movlw	0
  8073  001F16  1A15               	xorwf	___ftge@ff2+1,f,c
  8074  001F18  0E80               	movlw	128
  8075  001F1A  1A16               	xorwf	___ftge@ff2+2,f,c
  8076  001F1C  5014               	movf	___ftge@ff2,w,c
  8077  001F1E  5C11               	subwf	___ftge@ff1,w,c
  8078  001F20  5015               	movf	___ftge@ff2+1,w,c
  8079  001F22  5812               	subwfb	___ftge@ff1+1,w,c
  8080  001F24  5016               	movf	___ftge@ff2+2,w,c
  8081  001F26  5813               	subwfb	___ftge@ff1+2,w,c
  8082  001F28  B0D8               	btfsc	status,0,c
  8083  001F2A  D002               	goto	l4187
  8084  001F2C  90D8               	bcf	status,0,c
  8085  001F2E  0012               	return	
  8086  001F30                     l4187:
  8087  001F30  80D8               	bsf	status,0,c
  8088  001F32  0012               	return	
  8089  001F34                     __end_of___ftge:
  8090                           	opt stack 0
  8091                           tblptru	equ	0xFF8
  8092                           tblptrh	equ	0xFF7
  8093                           tblptrl	equ	0xFF6
  8094                           tablat	equ	0xFF5
  8095                           prodh	equ	0xFF4
  8096                           prodl	equ	0xFF3
  8097                           intcon	equ	0xFF2
  8098                           intcon2	equ	0xFF1
  8099                           postinc0	equ	0xFEE
  8100                           wreg	equ	0xFE8
  8101                           postinc1	equ	0xFE6
  8102                           postdec1	equ	0xFE5
  8103                           fsr1h	equ	0xFE2
  8104                           fsr1l	equ	0xFE1
  8105                           postinc2	equ	0xFDE
  8106                           postdec2	equ	0xFDD
  8107                           fsr2h	equ	0xFDA
  8108                           fsr2l	equ	0xFD9
  8109                           status	equ	0xFD8
  8110                           
  8111 ;; *************** function ___awtoft *****************
  8112 ;; Defined at:
  8113 ;;		line 32 in file "/opt/microchip/xc8/v1.41/sources/common/awtoft.c"
  8114 ;; Parameters:    Size  Location     Type
  8115 ;;  c               2   24[COMRAM] int 
  8116 ;; Auto vars:     Size  Location     Type
  8117 ;;  sign            1   27[COMRAM] unsigned char 
  8118 ;; Return value:  Size  Location     Type
  8119 ;;                  3   24[COMRAM] float 
  8120 ;; Registers used:
  8121 ;;		wreg, status,2, status,0, cstack
  8122 ;; Tracked objects:
  8123 ;;		On entry : 0/0
  8124 ;;		On exit  : 0/0
  8125 ;;		Unchanged: 0/0
  8126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8127 ;;      Params:         3       0       0       0       0       0       0       0       0
  8128 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8129 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8130 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8131 ;;Total ram usage:        4 bytes
  8132 ;; Hardware stack levels used:    1
  8133 ;; Hardware stack levels required when called:    2
  8134 ;; This function calls:
  8135 ;;		___ftpack
  8136 ;; This function is called by:
  8137 ;;		_main
  8138 ;; This function uses a non-reentrant model
  8139 ;;
  8140                           
  8141                           	psect	text32
  8142  0022BC                     __ptext32:
  8143                           	opt stack 0
  8144  0022BC                     ___awtoft:
  8145                           	opt stack 28
  8146                           
  8147                           ;incstack = 0
  8148  0022BC  0E00               	movlw	0
  8149  0022BE  6E1C               	movwf	___awtoft@sign,c
  8150  0022C0  AE1A               	btfss	___awtoft@c+1,7,c
  8151  0022C2  D006               	goto	l4169
  8152  0022C4  6C19               	negf	___awtoft@c,c
  8153  0022C6  1E1A               	comf	___awtoft@c+1,f,c
  8154  0022C8  B0D8               	btfsc	status,0,c
  8155  0022CA  2A1A               	incf	___awtoft@c+1,f,c
  8156  0022CC  0E01               	movlw	1
  8157  0022CE  6E1C               	movwf	___awtoft@sign,c
  8158  0022D0                     l4169:
  8159  0022D0  C019  F011         	movff	___awtoft@c,___ftpack@arg
  8160  0022D4  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  8161  0022D8  6A13               	clrf	___ftpack@arg+2,c
  8162  0022DA  0E8E               	movlw	142
  8163  0022DC  6E14               	movwf	___ftpack@exp,c
  8164  0022DE  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  8165  0022E2  EC07  F00E         	call	___ftpack	;wreg free
  8166  0022E6  C011  F019         	movff	?___ftpack,?___awtoft
  8167  0022EA  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  8168  0022EE  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  8169  0022F2  0012               	return	
  8170  0022F4                     __end_of___awtoft:
  8171                           	opt stack 0
  8172                           tblptru	equ	0xFF8
  8173                           tblptrh	equ	0xFF7
  8174                           tblptrl	equ	0xFF6
  8175                           tablat	equ	0xFF5
  8176                           prodh	equ	0xFF4
  8177                           prodl	equ	0xFF3
  8178                           intcon	equ	0xFF2
  8179                           intcon2	equ	0xFF1
  8180                           postinc0	equ	0xFEE
  8181                           wreg	equ	0xFE8
  8182                           postinc1	equ	0xFE6
  8183                           postdec1	equ	0xFE5
  8184                           fsr1h	equ	0xFE2
  8185                           fsr1l	equ	0xFE1
  8186                           postinc2	equ	0xFDE
  8187                           postdec2	equ	0xFDD
  8188                           fsr2h	equ	0xFDA
  8189                           fsr2l	equ	0xFD9
  8190                           status	equ	0xFD8
  8191                           
  8192 ;; *************** function ___ftpack *****************
  8193 ;; Defined at:
  8194 ;;		line 62 in file "/opt/microchip/xc8/v1.41/sources/common/float.c"
  8195 ;; Parameters:    Size  Location     Type
  8196 ;;  arg             3   16[COMRAM] unsigned um
  8197 ;;  exp             1   19[COMRAM] unsigned char 
  8198 ;;  sign            1   20[COMRAM] unsigned char 
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;		None
  8201 ;; Return value:  Size  Location     Type
  8202 ;;                  3   16[COMRAM] float 
  8203 ;; Registers used:
  8204 ;;		wreg, status,2, status,0
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8210 ;;      Params:         5       0       0       0       0       0       0       0       0
  8211 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8212 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8213 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8214 ;;Total ram usage:        8 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; Hardware stack levels required when called:    1
  8217 ;; This function calls:
  8218 ;;		Nothing
  8219 ;; This function is called by:
  8220 ;;		___awtoft
  8221 ;;		___ftadd
  8222 ;;		___ftmul
  8223 ;; This function uses a non-reentrant model
  8224 ;;
  8225                           
  8226                           	psect	text33
  8227  001C0E                     __ptext33:
  8228                           	opt stack 0
  8229  001C0E                     ___ftpack:
  8230                           	opt stack 26
  8231                           
  8232                           ;incstack = 0
  8233  001C0E  5014               	movf	___ftpack@exp,w,c
  8234  001C10  B4D8               	btfsc	status,2,c
  8235  001C12  D005               	goto	l3373
  8236  001C14  5011               	movf	___ftpack@arg,w,c
  8237  001C16  1012               	iorwf	___ftpack@arg+1,w,c
  8238  001C18  1013               	iorwf	___ftpack@arg+2,w,c
  8239  001C1A  A4D8               	btfss	status,2,c
  8240  001C1C  D00C               	goto	l3379
  8241  001C1E                     l3373:
  8242  001C1E  0E00               	movlw	0
  8243  001C20  6E11               	movwf	?___ftpack,c
  8244  001C22  0E00               	movlw	0
  8245  001C24  6E12               	movwf	?___ftpack+1,c
  8246  001C26  0E00               	movlw	0
  8247  001C28  6E13               	movwf	?___ftpack+2,c
  8248  001C2A  0012               	return	
  8249  001C2C                     l3377:
  8250  001C2C  2A14               	incf	___ftpack@exp,f,c
  8251  001C2E  90D8               	bcf	status,0,c
  8252  001C30  3213               	rrcf	___ftpack@arg+2,f,c
  8253  001C32  3212               	rrcf	___ftpack@arg+1,f,c
  8254  001C34  3211               	rrcf	___ftpack@arg,f,c
  8255  001C36                     l3379:
  8256  001C36  0E00               	movlw	0
  8257  001C38  1411               	andwf	___ftpack@arg,w,c
  8258  001C3A  6E16               	movwf	??___ftpack& (0+255),c
  8259  001C3C  0E00               	movlw	0
  8260  001C3E  1412               	andwf	___ftpack@arg+1,w,c
  8261  001C40  6E17               	movwf	(??___ftpack+1)& (0+255),c
  8262  001C42  0EFE               	movlw	254
  8263  001C44  1413               	andwf	___ftpack@arg+2,w,c
  8264  001C46  6E18               	movwf	(??___ftpack+2)& (0+255),c
  8265  001C48  5016               	movf	??___ftpack,w,c
  8266  001C4A  1017               	iorwf	??___ftpack+1,w,c
  8267  001C4C  1018               	iorwf	??___ftpack+2,w,c
  8268  001C4E  B4D8               	btfsc	status,2,c
  8269  001C50  D00C               	goto	l3385
  8270  001C52  D7EC               	goto	l3377
  8271  001C54                     l3381:
  8272  001C54  2A14               	incf	___ftpack@exp,f,c
  8273  001C56  0E01               	movlw	1
  8274  001C58  2611               	addwf	___ftpack@arg,f,c
  8275  001C5A  0E00               	movlw	0
  8276  001C5C  2212               	addwfc	___ftpack@arg+1,f,c
  8277  001C5E  0E00               	movlw	0
  8278  001C60  2213               	addwfc	___ftpack@arg+2,f,c
  8279  001C62  90D8               	bcf	status,0,c
  8280  001C64  3213               	rrcf	___ftpack@arg+2,f,c
  8281  001C66  3212               	rrcf	___ftpack@arg+1,f,c
  8282  001C68  3211               	rrcf	___ftpack@arg,f,c
  8283  001C6A                     l3385:
  8284  001C6A  0E00               	movlw	0
  8285  001C6C  1411               	andwf	___ftpack@arg,w,c
  8286  001C6E  6E16               	movwf	??___ftpack& (0+255),c
  8287  001C70  0E00               	movlw	0
  8288  001C72  1412               	andwf	___ftpack@arg+1,w,c
  8289  001C74  6E17               	movwf	(??___ftpack+1)& (0+255),c
  8290  001C76  0EFF               	movlw	255
  8291  001C78  1413               	andwf	___ftpack@arg+2,w,c
  8292  001C7A  6E18               	movwf	(??___ftpack+2)& (0+255),c
  8293  001C7C  5016               	movf	??___ftpack,w,c
  8294  001C7E  1017               	iorwf	??___ftpack+1,w,c
  8295  001C80  1018               	iorwf	??___ftpack+2,w,c
  8296  001C82  B4D8               	btfsc	status,2,c
  8297  001C84  D006               	goto	l3389
  8298  001C86  D7E6               	goto	l3381
  8299  001C88                     l3387:
  8300  001C88  0614               	decf	___ftpack@exp,f,c
  8301  001C8A  90D8               	bcf	status,0,c
  8302  001C8C  3611               	rlcf	___ftpack@arg,f,c
  8303  001C8E  3612               	rlcf	___ftpack@arg+1,f,c
  8304  001C90  3613               	rlcf	___ftpack@arg+2,f,c
  8305  001C92                     l3389:
  8306  001C92  BE12               	btfsc	___ftpack@arg+1,7,c
  8307  001C94  D003               	goto	l695
  8308  001C96  0E02               	movlw	2
  8309  001C98  6014               	cpfslt	___ftpack@exp,c
  8310  001C9A  D7F6               	goto	l3387
  8311  001C9C                     l695:
  8312  001C9C  A014               	btfss	___ftpack@exp,0,c
  8313  001C9E  9E12               	bcf	___ftpack@arg+1,7,c
  8314  001CA0  90D8               	bcf	status,0,c
  8315  001CA2  3214               	rrcf	___ftpack@exp,f,c
  8316  001CA4  5014               	movf	___ftpack@exp,w,c
  8317  001CA6  1213               	iorwf	___ftpack@arg+2,f,c
  8318  001CA8  5015               	movf	___ftpack@sign,w,c
  8319  001CAA  A4D8               	btfss	status,2,c
  8320  001CAC  8E13               	bsf	___ftpack@arg+2,7,c
  8321  001CAE  C011  F011         	movff	___ftpack@arg,?___ftpack
  8322  001CB2  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
  8323  001CB6  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
  8324  001CBA  0012               	return	
  8325  001CBC                     __end_of___ftpack:
  8326                           	opt stack 0
  8327                           tblptru	equ	0xFF8
  8328                           tblptrh	equ	0xFF7
  8329                           tblptrl	equ	0xFF6
  8330                           tablat	equ	0xFF5
  8331                           prodh	equ	0xFF4
  8332                           prodl	equ	0xFF3
  8333                           intcon	equ	0xFF2
  8334                           intcon2	equ	0xFF1
  8335                           postinc0	equ	0xFEE
  8336                           wreg	equ	0xFE8
  8337                           postinc1	equ	0xFE6
  8338                           postdec1	equ	0xFE5
  8339                           fsr1h	equ	0xFE2
  8340                           fsr1l	equ	0xFE1
  8341                           postinc2	equ	0xFDE
  8342                           postdec2	equ	0xFDD
  8343                           fsr2h	equ	0xFDA
  8344                           fsr2l	equ	0xFD9
  8345                           status	equ	0xFD8
  8346                           
  8347 ;; *************** function ___almod *****************
  8348 ;; Defined at:
  8349 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/almod.c"
  8350 ;; Parameters:    Size  Location     Type
  8351 ;;  dividend        4   16[COMRAM] long 
  8352 ;;  divisor         4   20[COMRAM] long 
  8353 ;; Auto vars:     Size  Location     Type
  8354 ;;  sign            1   25[COMRAM] unsigned char 
  8355 ;;  counter         1   24[COMRAM] unsigned char 
  8356 ;; Return value:  Size  Location     Type
  8357 ;;                  4   16[COMRAM] long 
  8358 ;; Registers used:
  8359 ;;		wreg, status,2, status,0
  8360 ;; Tracked objects:
  8361 ;;		On entry : 0/0
  8362 ;;		On exit  : 0/0
  8363 ;;		Unchanged: 0/0
  8364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8365 ;;      Params:         8       0       0       0       0       0       0       0       0
  8366 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8367 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8368 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8369 ;;Total ram usage:       10 bytes
  8370 ;; Hardware stack levels used:    1
  8371 ;; Hardware stack levels required when called:    1
  8372 ;; This function calls:
  8373 ;;		Nothing
  8374 ;; This function is called by:
  8375 ;;		_main
  8376 ;; This function uses a non-reentrant model
  8377 ;;
  8378                           
  8379                           	psect	text34
  8380  001CBC                     __ptext34:
  8381                           	opt stack 0
  8382  001CBC                     ___almod:
  8383                           	opt stack 29
  8384                           
  8385                           ;incstack = 0
  8386  001CBC  0E00               	movlw	0
  8387  001CBE  6E1A               	movwf	___almod@sign,c
  8388  001CC0  AE14               	btfss	___almod@dividend+3,7,c
  8389  001CC2  D00A               	goto	l4133
  8390  001CC4  1E14               	comf	___almod@dividend+3,f,c
  8391  001CC6  1E13               	comf	___almod@dividend+2,f,c
  8392  001CC8  1E12               	comf	___almod@dividend+1,f,c
  8393  001CCA  6C11               	negf	___almod@dividend,c
  8394  001CCC  0E00               	movlw	0
  8395  001CCE  2212               	addwfc	___almod@dividend+1,f,c
  8396  001CD0  2213               	addwfc	___almod@dividend+2,f,c
  8397  001CD2  2214               	addwfc	___almod@dividend+3,f,c
  8398  001CD4  0E01               	movlw	1
  8399  001CD6  6E1A               	movwf	___almod@sign,c
  8400  001CD8                     l4133:
  8401  001CD8  AE18               	btfss	___almod@divisor+3,7,c
  8402  001CDA  D008               	goto	l4137
  8403  001CDC  1E18               	comf	___almod@divisor+3,f,c
  8404  001CDE  1E17               	comf	___almod@divisor+2,f,c
  8405  001CE0  1E16               	comf	___almod@divisor+1,f,c
  8406  001CE2  6C15               	negf	___almod@divisor,c
  8407  001CE4  0E00               	movlw	0
  8408  001CE6  2216               	addwfc	___almod@divisor+1,f,c
  8409  001CE8  2217               	addwfc	___almod@divisor+2,f,c
  8410  001CEA  2218               	addwfc	___almod@divisor+3,f,c
  8411  001CEC                     l4137:
  8412  001CEC  5015               	movf	___almod@divisor,w,c
  8413  001CEE  1016               	iorwf	___almod@divisor+1,w,c
  8414  001CF0  1017               	iorwf	___almod@divisor+2,w,c
  8415  001CF2  1018               	iorwf	___almod@divisor+3,w,c
  8416  001CF4  B4D8               	btfsc	status,2,c
  8417  001CF6  D024               	goto	l4153
  8418  001CF8  0E01               	movlw	1
  8419  001CFA  6E19               	movwf	___almod@counter,c
  8420  001CFC  D006               	goto	l4143
  8421  001CFE                     l4141:
  8422  001CFE  90D8               	bcf	status,0,c
  8423  001D00  3615               	rlcf	___almod@divisor,f,c
  8424  001D02  3616               	rlcf	___almod@divisor+1,f,c
  8425  001D04  3617               	rlcf	___almod@divisor+2,f,c
  8426  001D06  3618               	rlcf	___almod@divisor+3,f,c
  8427  001D08  2A19               	incf	___almod@counter,f,c
  8428  001D0A                     l4143:
  8429  001D0A  AE18               	btfss	___almod@divisor+3,7,c
  8430  001D0C  D7F8               	goto	l4141
  8431  001D0E                     l4145:
  8432  001D0E  5015               	movf	___almod@divisor,w,c
  8433  001D10  5C11               	subwf	___almod@dividend,w,c
  8434  001D12  5016               	movf	___almod@divisor+1,w,c
  8435  001D14  5812               	subwfb	___almod@dividend+1,w,c
  8436  001D16  5017               	movf	___almod@divisor+2,w,c
  8437  001D18  5813               	subwfb	___almod@dividend+2,w,c
  8438  001D1A  5018               	movf	___almod@divisor+3,w,c
  8439  001D1C  5814               	subwfb	___almod@dividend+3,w,c
  8440  001D1E  A0D8               	btfss	status,0,c
  8441  001D20  D008               	goto	l4149
  8442  001D22  5015               	movf	___almod@divisor,w,c
  8443  001D24  5E11               	subwf	___almod@dividend,f,c
  8444  001D26  5016               	movf	___almod@divisor+1,w,c
  8445  001D28  5A12               	subwfb	___almod@dividend+1,f,c
  8446  001D2A  5017               	movf	___almod@divisor+2,w,c
  8447  001D2C  5A13               	subwfb	___almod@dividend+2,f,c
  8448  001D2E  5018               	movf	___almod@divisor+3,w,c
  8449  001D30  5A14               	subwfb	___almod@dividend+3,f,c
  8450  001D32                     l4149:
  8451  001D32  90D8               	bcf	status,0,c
  8452  001D34  3218               	rrcf	___almod@divisor+3,f,c
  8453  001D36  3217               	rrcf	___almod@divisor+2,f,c
  8454  001D38  3216               	rrcf	___almod@divisor+1,f,c
  8455  001D3A  3215               	rrcf	___almod@divisor,f,c
  8456  001D3C  2E19               	decfsz	___almod@counter,f,c
  8457  001D3E  D7E7               	goto	l4145
  8458  001D40                     l4153:
  8459  001D40  501A               	movf	___almod@sign,w,c
  8460  001D42  B4D8               	btfsc	status,2,c
  8461  001D44  D008               	goto	l4157
  8462  001D46  1E14               	comf	___almod@dividend+3,f,c
  8463  001D48  1E13               	comf	___almod@dividend+2,f,c
  8464  001D4A  1E12               	comf	___almod@dividend+1,f,c
  8465  001D4C  6C11               	negf	___almod@dividend,c
  8466  001D4E  0E00               	movlw	0
  8467  001D50  2212               	addwfc	___almod@dividend+1,f,c
  8468  001D52  2213               	addwfc	___almod@dividend+2,f,c
  8469  001D54  2214               	addwfc	___almod@dividend+3,f,c
  8470  001D56                     l4157:
  8471  001D56  C011  F011         	movff	___almod@dividend,?___almod
  8472  001D5A  C012  F012         	movff	___almod@dividend+1,?___almod+1
  8473  001D5E  C013  F013         	movff	___almod@dividend+2,?___almod+2
  8474  001D62  C014  F014         	movff	___almod@dividend+3,?___almod+3
  8475  001D66  0012               	return	
  8476  001D68                     __end_of___almod:
  8477                           	opt stack 0
  8478                           tblptru	equ	0xFF8
  8479                           tblptrh	equ	0xFF7
  8480                           tblptrl	equ	0xFF6
  8481                           tablat	equ	0xFF5
  8482                           prodh	equ	0xFF4
  8483                           prodl	equ	0xFF3
  8484                           intcon	equ	0xFF2
  8485                           intcon2	equ	0xFF1
  8486                           postinc0	equ	0xFEE
  8487                           wreg	equ	0xFE8
  8488                           postinc1	equ	0xFE6
  8489                           postdec1	equ	0xFE5
  8490                           fsr1h	equ	0xFE2
  8491                           fsr1l	equ	0xFE1
  8492                           postinc2	equ	0xFDE
  8493                           postdec2	equ	0xFDD
  8494                           fsr2h	equ	0xFDA
  8495                           fsr2l	equ	0xFD9
  8496                           status	equ	0xFD8
  8497                           
  8498 ;; *************** function _EnhancedRead *****************
  8499 ;; Defined at:
  8500 ;;		line 29 in file "analog.c"
  8501 ;; Parameters:    Size  Location     Type
  8502 ;;		None
  8503 ;; Auto vars:     Size  Location     Type
  8504 ;;  aux             2   25[COMRAM] unsigned int 
  8505 ;;  i               1   27[COMRAM] unsigned char 
  8506 ;; Return value:  Size  Location     Type
  8507 ;;                  1    wreg      void 
  8508 ;; Registers used:
  8509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8510 ;; Tracked objects:
  8511 ;;		On entry : 0/0
  8512 ;;		On exit  : 0/0
  8513 ;;		Unchanged: 0/0
  8514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8515 ;;      Params:         0       0       0       0       0       0       0       0       0
  8516 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8517 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8518 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8519 ;;Total ram usage:        4 bytes
  8520 ;; Hardware stack levels used:    1
  8521 ;; Hardware stack levels required when called:    2
  8522 ;; This function calls:
  8523 ;;		___awdiv
  8524 ;; This function is called by:
  8525 ;;		_main
  8526 ;; This function uses a non-reentrant model
  8527 ;;
  8528                           
  8529                           	psect	text35
  8530  00209C                     __ptext35:
  8531                           	opt stack 0
  8532  00209C                     _EnhancedRead:
  8533                           	opt stack 28
  8534                           
  8535                           ;analog.c: 30: unsigned char i;
  8536                           ;analog.c: 31: unsigned int aux;
  8537                           ;analog.c: 32: for (i=0;i<9;i++){
  8538                           
  8539                           ;incstack = 0
  8540  00209C  0E00               	movlw	0
  8541  00209E  6E1C               	movwf	EnhancedRead@i,c
  8542  0020A0                     l3809:
  8543  0020A0  0E08               	movlw	8
  8544  0020A2  641C               	cpfsgt	EnhancedRead@i,c
  8545  0020A4  D001               	goto	l3813
  8546  0020A6  0012               	return	
  8547  0020A8                     l3813:
  8548                           
  8549                           ;analog.c: 33: ADCON0bits.CHS=i;
  8550  0020A8  C01C  F019         	movff	EnhancedRead@i,??_EnhancedRead
  8551  0020AC  4619               	rlncf	??_EnhancedRead,f,c
  8552  0020AE  4619               	rlncf	??_EnhancedRead,f,c
  8553  0020B0  50C2               	movf	4034,w,c	;volatile
  8554  0020B2  1819               	xorwf	??_EnhancedRead,w,c
  8555  0020B4  0BC3               	andlw	-61
  8556  0020B6  1819               	xorwf	??_EnhancedRead,w,c
  8557  0020B8  6EC2               	movwf	4034,c	;volatile
  8558                           
  8559                           ;analog.c: 34: ADCON0bits.GODONE=1;
  8560  0020BA  82C2               	bsf	4034,1,c	;volatile
  8561  0020BC                     l136:
  8562  0020BC  B2C2               	btfsc	4034,1,c	;volatile
  8563  0020BE  D7FE               	goto	l136
  8564                           
  8565                           ;analog.c: 36: aux=ADRESH*4;
  8566  0020C0  50C4               	movf	4036,w,c	;volatile
  8567  0020C2  0D04               	mullw	4
  8568  0020C4  CFF3 F01A          	movff	prodl,EnhancedRead@aux
  8569  0020C8  CFF4 F01B          	movff	prodh,EnhancedRead@aux+1
  8570                           
  8571                           ;analog.c: 37: aux=aux+ADRESL/64;
  8572  0020CC  CFC3 F011          	movff	4035,___awdiv@dividend	;volatile
  8573  0020D0  6A12               	clrf	___awdiv@dividend+1,c
  8574  0020D2  0E00               	movlw	0
  8575  0020D4  6E14               	movwf	___awdiv@divisor+1,c
  8576  0020D6  0E40               	movlw	64
  8577  0020D8  6E13               	movwf	___awdiv@divisor,c
  8578  0020DA  EC9A  F00F         	call	___awdiv	;wreg free
  8579  0020DE  501A               	movf	EnhancedRead@aux,w,c
  8580  0020E0  2411               	addwf	?___awdiv,w,c
  8581  0020E2  6E1A               	movwf	EnhancedRead@aux,c
  8582  0020E4  501B               	movf	EnhancedRead@aux+1,w,c
  8583  0020E6  2012               	addwfc	?___awdiv+1,w,c
  8584  0020E8  6E1B               	movwf	EnhancedRead@aux+1,c
  8585                           
  8586                           ;analog.c: 38: an[i]=aux;
  8587  0020EA  501C               	movf	EnhancedRead@i,w,c
  8588  0020EC  0D02               	mullw	2
  8589  0020EE  0E9E               	movlw	low _an
  8590  0020F0  24F3               	addwf	prodl,w,c
  8591  0020F2  6ED9               	movwf	fsr2l,c
  8592  0020F4  0E00               	movlw	high _an
  8593  0020F6  20F4               	addwfc	prodh,w,c
  8594  0020F8  6EDA               	movwf	fsr2h,c
  8595  0020FA  C01A  FFDE         	movff	EnhancedRead@aux,postinc2
  8596  0020FE  C01B  FFDD         	movff	EnhancedRead@aux+1,postdec2
  8597  002102  2A1C               	incf	EnhancedRead@i,f,c
  8598  002104  D7CD               	goto	l3809
  8599  002106                     __end_of_EnhancedRead:
  8600                           	opt stack 0
  8601                           tblptru	equ	0xFF8
  8602                           tblptrh	equ	0xFF7
  8603                           tblptrl	equ	0xFF6
  8604                           tablat	equ	0xFF5
  8605                           prodh	equ	0xFF4
  8606                           prodl	equ	0xFF3
  8607                           intcon	equ	0xFF2
  8608                           intcon2	equ	0xFF1
  8609                           postinc0	equ	0xFEE
  8610                           wreg	equ	0xFE8
  8611                           postinc1	equ	0xFE6
  8612                           postdec1	equ	0xFE5
  8613                           fsr1h	equ	0xFE2
  8614                           fsr1l	equ	0xFE1
  8615                           postinc2	equ	0xFDE
  8616                           postdec2	equ	0xFDD
  8617                           fsr2h	equ	0xFDA
  8618                           fsr2l	equ	0xFD9
  8619                           status	equ	0xFD8
  8620                           
  8621 ;; *************** function ___awdiv *****************
  8622 ;; Defined at:
  8623 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/awdiv.c"
  8624 ;; Parameters:    Size  Location     Type
  8625 ;;  dividend        2   16[COMRAM] int 
  8626 ;;  divisor         2   18[COMRAM] int 
  8627 ;; Auto vars:     Size  Location     Type
  8628 ;;  quotient        2   22[COMRAM] int 
  8629 ;;  sign            1   21[COMRAM] unsigned char 
  8630 ;;  counter         1   20[COMRAM] unsigned char 
  8631 ;; Return value:  Size  Location     Type
  8632 ;;                  2   16[COMRAM] int 
  8633 ;; Registers used:
  8634 ;;		wreg, status,2, status,0
  8635 ;; Tracked objects:
  8636 ;;		On entry : 0/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8640 ;;      Params:         4       0       0       0       0       0       0       0       0
  8641 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8642 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8643 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8644 ;;Total ram usage:        8 bytes
  8645 ;; Hardware stack levels used:    1
  8646 ;; Hardware stack levels required when called:    1
  8647 ;; This function calls:
  8648 ;;		Nothing
  8649 ;; This function is called by:
  8650 ;;		_EnhancedRead
  8651 ;;		_MotorASpeed
  8652 ;;		_MotorBSpeed
  8653 ;; This function uses a non-reentrant model
  8654 ;;
  8655                           
  8656                           	psect	text36
  8657  001F34                     __ptext36:
  8658                           	opt stack 0
  8659  001F34                     ___awdiv:
  8660                           	opt stack 27
  8661                           
  8662                           ;incstack = 0
  8663  001F34  0E00               	movlw	0
  8664  001F36  6E16               	movwf	___awdiv@sign,c
  8665  001F38  AE14               	btfss	___awdiv@divisor+1,7,c
  8666  001F3A  D006               	goto	l3483
  8667  001F3C  6C13               	negf	___awdiv@divisor,c
  8668  001F3E  1E14               	comf	___awdiv@divisor+1,f,c
  8669  001F40  B0D8               	btfsc	status,0,c
  8670  001F42  2A14               	incf	___awdiv@divisor+1,f,c
  8671  001F44  0E01               	movlw	1
  8672  001F46  6E16               	movwf	___awdiv@sign,c
  8673  001F48                     l3483:
  8674  001F48  AE12               	btfss	___awdiv@dividend+1,7,c
  8675  001F4A  D006               	goto	l3489
  8676  001F4C  6C11               	negf	___awdiv@dividend,c
  8677  001F4E  1E12               	comf	___awdiv@dividend+1,f,c
  8678  001F50  B0D8               	btfsc	status,0,c
  8679  001F52  2A12               	incf	___awdiv@dividend+1,f,c
  8680  001F54  0E01               	movlw	1
  8681  001F56  1A16               	xorwf	___awdiv@sign,f,c
  8682  001F58                     l3489:
  8683  001F58  0E00               	movlw	0
  8684  001F5A  6E18               	movwf	___awdiv@quotient+1,c
  8685  001F5C  0E00               	movlw	0
  8686  001F5E  6E17               	movwf	___awdiv@quotient,c
  8687  001F60  5013               	movf	___awdiv@divisor,w,c
  8688  001F62  1014               	iorwf	___awdiv@divisor+1,w,c
  8689  001F64  B4D8               	btfsc	status,2,c
  8690  001F66  D01C               	goto	l3511
  8691  001F68  0E01               	movlw	1
  8692  001F6A  6E15               	movwf	___awdiv@counter,c
  8693  001F6C  D004               	goto	l3497
  8694  001F6E                     l3495:
  8695  001F6E  90D8               	bcf	status,0,c
  8696  001F70  3613               	rlcf	___awdiv@divisor,f,c
  8697  001F72  3614               	rlcf	___awdiv@divisor+1,f,c
  8698  001F74  2A15               	incf	___awdiv@counter,f,c
  8699  001F76                     l3497:
  8700  001F76  AE14               	btfss	___awdiv@divisor+1,7,c
  8701  001F78  D7FA               	goto	l3495
  8702  001F7A                     l3499:
  8703  001F7A  90D8               	bcf	status,0,c
  8704  001F7C  3617               	rlcf	___awdiv@quotient,f,c
  8705  001F7E  3618               	rlcf	___awdiv@quotient+1,f,c
  8706  001F80  5013               	movf	___awdiv@divisor,w,c
  8707  001F82  5C11               	subwf	___awdiv@dividend,w,c
  8708  001F84  5014               	movf	___awdiv@divisor+1,w,c
  8709  001F86  5812               	subwfb	___awdiv@dividend+1,w,c
  8710  001F88  A0D8               	btfss	status,0,c
  8711  001F8A  D005               	goto	l3507
  8712  001F8C  5013               	movf	___awdiv@divisor,w,c
  8713  001F8E  5E11               	subwf	___awdiv@dividend,f,c
  8714  001F90  5014               	movf	___awdiv@divisor+1,w,c
  8715  001F92  5A12               	subwfb	___awdiv@dividend+1,f,c
  8716  001F94  8017               	bsf	___awdiv@quotient,0,c
  8717  001F96                     l3507:
  8718  001F96  90D8               	bcf	status,0,c
  8719  001F98  3214               	rrcf	___awdiv@divisor+1,f,c
  8720  001F9A  3213               	rrcf	___awdiv@divisor,f,c
  8721  001F9C  2E15               	decfsz	___awdiv@counter,f,c
  8722  001F9E  D7ED               	goto	l3499
  8723  001FA0                     l3511:
  8724  001FA0  5016               	movf	___awdiv@sign,w,c
  8725  001FA2  B4D8               	btfsc	status,2,c
  8726  001FA4  D004               	goto	l3515
  8727  001FA6  6C17               	negf	___awdiv@quotient,c
  8728  001FA8  1E18               	comf	___awdiv@quotient+1,f,c
  8729  001FAA  B0D8               	btfsc	status,0,c
  8730  001FAC  2A18               	incf	___awdiv@quotient+1,f,c
  8731  001FAE                     l3515:
  8732  001FAE  C017  F011         	movff	___awdiv@quotient,?___awdiv
  8733  001FB2  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  8734  001FB6  0012               	return	
  8735  001FB8                     __end_of___awdiv:
  8736                           	opt stack 0
  8737                           tblptru	equ	0xFF8
  8738                           tblptrh	equ	0xFF7
  8739                           tblptrl	equ	0xFF6
  8740                           tablat	equ	0xFF5
  8741                           prodh	equ	0xFF4
  8742                           prodl	equ	0xFF3
  8743                           intcon	equ	0xFF2
  8744                           intcon2	equ	0xFF1
  8745                           postinc0	equ	0xFEE
  8746                           wreg	equ	0xFE8
  8747                           postinc1	equ	0xFE6
  8748                           postdec1	equ	0xFE5
  8749                           fsr1h	equ	0xFE2
  8750                           fsr1l	equ	0xFE1
  8751                           postinc2	equ	0xFDE
  8752                           postdec2	equ	0xFDD
  8753                           fsr2h	equ	0xFDA
  8754                           fsr2l	equ	0xFD9
  8755                           status	equ	0xFD8
  8756                           
  8757 ;; *************** function _enc *****************
  8758 ;; Defined at:
  8759 ;;		line 7 in file "timer.c"
  8760 ;; Parameters:    Size  Location     Type
  8761 ;;		None
  8762 ;; Auto vars:     Size  Location     Type
  8763 ;;		None
  8764 ;; Return value:  Size  Location     Type
  8765 ;;                  1    wreg      void 
  8766 ;; Registers used:
  8767 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8768 ;; Tracked objects:
  8769 ;;		On entry : 0/0
  8770 ;;		On exit  : 0/0
  8771 ;;		Unchanged: 0/0
  8772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8773 ;;      Params:         0       0       0       0       0       0       0       0       0
  8774 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8775 ;;      Temps:         16       0       0       0       0       0       0       0       0
  8776 ;;      Totals:        16       0       0       0       0       0       0       0       0
  8777 ;;Total ram usage:       16 bytes
  8778 ;; Hardware stack levels used:    1
  8779 ;; This function calls:
  8780 ;;		Nothing
  8781 ;; This function is called by:
  8782 ;;		Interrupt level 2
  8783 ;; This function uses a non-reentrant model
  8784 ;;
  8785                           
  8786                           	psect	intcode
  8787  000008                     __pintcode:
  8788                           	opt stack 0
  8789  000008                     _enc:
  8790                           	opt stack 26
  8791                           
  8792                           ;incstack = 0
  8793  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8794  00000A  EDA1  F00D         	call	int_func,f	;refresh shadow registers
  8795                           tblptru	equ	0xFF8
  8796                           tblptrh	equ	0xFF7
  8797                           tblptrl	equ	0xFF6
  8798                           tablat	equ	0xFF5
  8799                           prodh	equ	0xFF4
  8800                           prodl	equ	0xFF3
  8801                           intcon	equ	0xFF2
  8802                           intcon2	equ	0xFF1
  8803                           postinc0	equ	0xFEE
  8804                           wreg	equ	0xFE8
  8805                           postinc1	equ	0xFE6
  8806                           postdec1	equ	0xFE5
  8807                           fsr1h	equ	0xFE2
  8808                           fsr1l	equ	0xFE1
  8809                           postinc2	equ	0xFDE
  8810                           postdec2	equ	0xFDD
  8811                           fsr2h	equ	0xFDA
  8812                           fsr2l	equ	0xFD9
  8813                           status	equ	0xFD8
  8814                           
  8815                           	psect	intcode_body
  8816  001B42                     __pintcode_body:
  8817                           	opt stack 26
  8818  001B42                     int_func:
  8819                           	opt stack 26
  8820  001B42  0006               	pop		; remove dummy address from shadow register refresh
  8821  001B44  CFFA F003          	movff	pclath,??_enc+2
  8822  001B48  CFFB F004          	movff	pclatu,??_enc+3
  8823  001B4C  CFE9 F005          	movff	fsr0l,??_enc+4
  8824  001B50  CFEA F006          	movff	fsr0h,??_enc+5
  8825  001B54  CFE1 F007          	movff	fsr1l,??_enc+6
  8826  001B58  CFE2 F008          	movff	fsr1h,??_enc+7
  8827  001B5C  CFD9 F009          	movff	fsr2l,??_enc+8
  8828  001B60  CFDA F00A          	movff	fsr2h,??_enc+9
  8829  001B64  CFF3 F00B          	movff	prodl,??_enc+10
  8830  001B68  CFF4 F00C          	movff	prodh,??_enc+11
  8831  001B6C  CFF6 F00D          	movff	tblptrl,??_enc+12
  8832  001B70  CFF7 F00E          	movff	tblptrh,??_enc+13
  8833  001B74  CFF8 F00F          	movff	tblptru,??_enc+14
  8834  001B78  CFF5 F010          	movff	tablat,??_enc+15
  8835                           
  8836                           ;timer.c: 8: if (TMR0IF){
  8837  001B7C  A4F2               	btfss	intcon,2,c	;volatile
  8838  001B7E  D029               	goto	i2l323
  8839                           
  8840                           ;timer.c: 9: for (i = 0;i < 10;i++) time[i]++;
  8841  001B80  0E00               	movlw	0
  8842  001B82  6E4D               	movwf	_i+1,c
  8843  001B84  0E00               	movlw	0
  8844  001B86  6E4C               	movwf	_i,c
  8845  001B88                     i2l3331:
  8846  001B88  BE4D               	btfsc	_i+1,7,c
  8847  001B8A  D006               	goto	i2l3335
  8848  001B8C  504D               	movf	_i+1,w,c
  8849  001B8E  E11C               	bnz	i2l3341
  8850  001B90  0E0A               	movlw	10
  8851  001B92  5C4C               	subwf	_i,w,c
  8852  001B94  B0D8               	btfsc	status,0,c
  8853  001B96  D018               	goto	i2l3341
  8854  001B98                     i2l3335:
  8855  001B98  0E60               	movlw	low _time
  8856  001B9A  6E01               	movwf	??_enc& (0+255),c
  8857  001B9C  0E00               	movlw	high _time
  8858  001B9E  6E02               	movwf	(??_enc+1)& (0+255),c
  8859  001BA0  90D8               	bcf	status,0,c
  8860  001BA2  344C               	rlcf	_i,w,c
  8861  001BA4  6ED9               	movwf	fsr2l,c
  8862  001BA6  344D               	rlcf	_i+1,w,c
  8863  001BA8  6EDA               	movwf	fsr2h,c
  8864  001BAA  90D8               	bcf	status,0,c
  8865  001BAC  36D9               	rlcf	fsr2l,f,c
  8866  001BAE  36DA               	rlcf	fsr2h,f,c
  8867  001BB0  5001               	movf	??_enc,w,c
  8868  001BB2  26D9               	addwf	fsr2l,f,c
  8869  001BB4  5002               	movf	??_enc+1,w,c
  8870  001BB6  22DA               	addwfc	fsr2h,f,c
  8871  001BB8  2ADE               	incf	postinc2,f,c
  8872  001BBA  0E00               	movlw	0
  8873  001BBC  22DE               	addwfc	postinc2,f,c
  8874  001BBE  22DE               	addwfc	postinc2,f,c
  8875  001BC0  22DE               	addwfc	postinc2,f,c
  8876  001BC2  4A4C               	infsnz	_i,f,c
  8877  001BC4  2A4D               	incf	_i+1,f,c
  8878  001BC6  D7E0               	goto	i2l3331
  8879  001BC8                     i2l3341:
  8880                           
  8881                           ;timer.c: 10: TMR0H = 0xF8;
  8882  001BC8  0EF8               	movlw	248
  8883  001BCA  6ED7               	movwf	4055,c	;volatile
  8884                           
  8885                           ;timer.c: 11: TMR0L = 0x2F;
  8886  001BCC  0E2F               	movlw	47
  8887  001BCE  6ED6               	movwf	4054,c	;volatile
  8888                           
  8889                           ;timer.c: 12: TMR0IF = 0;
  8890  001BD0  94F2               	bcf	intcon,2,c	;volatile
  8891  001BD2                     i2l323:
  8892  001BD2  C010  FFF5         	movff	??_enc+15,tablat
  8893  001BD6  C00F  FFF8         	movff	??_enc+14,tblptru
  8894  001BDA  C00E  FFF7         	movff	??_enc+13,tblptrh
  8895  001BDE  C00D  FFF6         	movff	??_enc+12,tblptrl
  8896  001BE2  C00C  FFF4         	movff	??_enc+11,prodh
  8897  001BE6  C00B  FFF3         	movff	??_enc+10,prodl
  8898  001BEA  C00A  FFDA         	movff	??_enc+9,fsr2h
  8899  001BEE  C009  FFD9         	movff	??_enc+8,fsr2l
  8900  001BF2  C008  FFE2         	movff	??_enc+7,fsr1h
  8901  001BF6  C007  FFE1         	movff	??_enc+6,fsr1l
  8902  001BFA  C006  FFEA         	movff	??_enc+5,fsr0h
  8903  001BFE  C005  FFE9         	movff	??_enc+4,fsr0l
  8904  001C02  C004  FFFB         	movff	??_enc+3,pclatu
  8905  001C06  C003  FFFA         	movff	??_enc+2,pclath
  8906  001C0A  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8907  001C0C  0011               	retfie		f
  8908  001C0E                     __end_of_enc:
  8909                           	opt stack 0
  8910                           pclatu	equ	0xFFB
  8911                           pclath	equ	0xFFA
  8912                           tblptru	equ	0xFF8
  8913                           tblptrh	equ	0xFF7
  8914                           tblptrl	equ	0xFF6
  8915                           tablat	equ	0xFF5
  8916                           prodh	equ	0xFF4
  8917                           prodl	equ	0xFF3
  8918                           intcon	equ	0xFF2
  8919                           intcon2	equ	0xFF1
  8920                           postinc0	equ	0xFEE
  8921                           fsr0h	equ	0xFEA
  8922                           fsr0l	equ	0xFE9
  8923                           wreg	equ	0xFE8
  8924                           postinc1	equ	0xFE6
  8925                           postdec1	equ	0xFE5
  8926                           fsr1h	equ	0xFE2
  8927                           fsr1l	equ	0xFE1
  8928                           postinc2	equ	0xFDE
  8929                           postdec2	equ	0xFDD
  8930                           fsr2h	equ	0xFDA
  8931                           fsr2l	equ	0xFD9
  8932                           status	equ	0xFD8
  8933                           pclatu	equ	0xFFB
  8934                           pclath	equ	0xFFA
  8935                           tblptru	equ	0xFF8
  8936                           tblptrh	equ	0xFF7
  8937                           tblptrl	equ	0xFF6
  8938                           tablat	equ	0xFF5
  8939                           prodh	equ	0xFF4
  8940                           prodl	equ	0xFF3
  8941                           intcon	equ	0xFF2
  8942                           intcon2	equ	0xFF1
  8943                           postinc0	equ	0xFEE
  8944                           fsr0h	equ	0xFEA
  8945                           fsr0l	equ	0xFE9
  8946                           wreg	equ	0xFE8
  8947                           postinc1	equ	0xFE6
  8948                           postdec1	equ	0xFE5
  8949                           fsr1h	equ	0xFE2
  8950                           fsr1l	equ	0xFE1
  8951                           postinc2	equ	0xFDE
  8952                           postdec2	equ	0xFDD
  8953                           fsr2h	equ	0xFDA
  8954                           fsr2l	equ	0xFD9
  8955                           status	equ	0xFD8
  8956                           
  8957                           	psect	rparam
  8958  0000                     pclatu	equ	0xFFB
  8959                           pclath	equ	0xFFA
  8960                           tblptru	equ	0xFF8
  8961                           tblptrh	equ	0xFF7
  8962                           tblptrl	equ	0xFF6
  8963                           tablat	equ	0xFF5
  8964                           prodh	equ	0xFF4
  8965                           prodl	equ	0xFF3
  8966                           intcon	equ	0xFF2
  8967                           intcon2	equ	0xFF1
  8968                           postinc0	equ	0xFEE
  8969                           fsr0h	equ	0xFEA
  8970                           fsr0l	equ	0xFE9
  8971                           wreg	equ	0xFE8
  8972                           postinc1	equ	0xFE6
  8973                           postdec1	equ	0xFE5
  8974                           fsr1h	equ	0xFE2
  8975                           fsr1l	equ	0xFE1
  8976                           postinc2	equ	0xFDE
  8977                           postdec2	equ	0xFDD
  8978                           fsr2h	equ	0xFDA
  8979                           fsr2l	equ	0xFD9
  8980                           status	equ	0xFD8
  8981                           
  8982                           	psect	temp
  8983  00004E                     btemp:
  8984                           	opt stack 0
  8985  00004E                     	ds	1
  8986  0000                     int$flags	set	btemp
  8987                           pclatu	equ	0xFFB
  8988                           pclath	equ	0xFFA
  8989                           tblptru	equ	0xFF8
  8990                           tblptrh	equ	0xFF7
  8991                           tblptrl	equ	0xFF6
  8992                           tablat	equ	0xFF5
  8993                           prodh	equ	0xFF4
  8994                           prodl	equ	0xFF3
  8995                           intcon	equ	0xFF2
  8996                           intcon2	equ	0xFF1
  8997                           postinc0	equ	0xFEE
  8998                           fsr0h	equ	0xFEA
  8999                           fsr0l	equ	0xFE9
  9000                           wreg	equ	0xFE8
  9001                           postinc1	equ	0xFE6
  9002                           postdec1	equ	0xFE5
  9003                           fsr1h	equ	0xFE2
  9004                           fsr1l	equ	0xFE1
  9005                           postinc2	equ	0xFDE
  9006                           postdec2	equ	0xFDD
  9007                           fsr2h	equ	0xFDA
  9008                           fsr2l	equ	0xFD9
  9009                           status	equ	0xFD8


Data Sizes:
    Strings     455
    Constant    10
    Data        32
    BSS         122
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     61      77
    BANK0           160     40     142
    BANK1           256     21      57
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 47
		 -> STR_11(CODE[41]), STR_10(CODE[40]), STR_9(CODE[45]), STR_8(CODE[44]), 
		 -> STR_7(CODE[43]), STR_6(CODE[36]), STR_5(CODE[47]), STR_4(CODE[46]), 
		 -> STR_3(CODE[35]), STR_2(CODE[39]), STR_1(CODE[39]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    read_cal$536	PTR int  size(2) Largest target is 18
		 -> mins(BANK0[18]), an(BANK0[18]), 

    read_cal$534	PTR int  size(2) Largest target is 18
		 -> maxs(BANK1[18]), an(BANK0[18]), 

    read_cal$532	PTR int  size(2) Largest target is 18
		 -> mins(BANK0[18]), an(BANK0[18]), 

    read_cal$530	PTR int  size(2) Largest target is 18
		 -> maxs(BANK1[18]), an(BANK0[18]), 


Critical Paths under _main in COMRAM

    _main->___wmul
    _twiddle_update->___ftsub
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftmul->___awtoft
    _printf->___wmul
    ___wmul->___fttol
    ___lwmod->___lwdiv
    _mspeed->___fttol
    _MotorBSpeed->___awdiv
    _MotorASpeed->___awdiv
    _line_cal->___aldiv
    ___aldiv->___lmul
    ___fttol->___ftadd
    ___awtoft->___ftpack
    _EnhancedRead->___awdiv

Critical Paths under _enc in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___wmul
    ___wmul->___fttol
    _mspeed->___fttol

Critical Paths under _enc in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _enc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _enc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _enc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _enc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _enc in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _enc in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _enc in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0   40415
                                             36 BANK0      4     4      0
                                              0 BANK1     21    21      0
                       _EnhancedRead
                            ___almod
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
                           _init_cal
                           _init_tms
                         _init_wixel
                           _line_cal
                             _mspeed
                             _printf
                           _read_cal
                               _setA
                               _setB
                               _setC
                               _setD
                       _twidde_start
                     _twiddle_update
 ---------------------------------------------------------------------------------
 (1) _twiddle_update                                       7     7      0   13702
                                              0 BANK0      7     7      0
                            ___ftadd
                            ___ftmul
                            ___ftsub
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5031
                                             55 COMRAM     6     0      6
                            ___ftadd
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4667
                                             43 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3930
                                             28 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _twidde_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setD                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setC                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setB                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setA                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_cal                                            19    19      0    1040
                                             16 COMRAM    19    19      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              30    22      8    3541
                                             15 BANK0     21    13      8
                            ___fttol (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     694
                                             59 COMRAM     2     2      0
                                             11 BANK0      4     0      4
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     395
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _mspeed                                               4     0      4    3748
                                             11 BANK0      4     0      4
                        _MotorASpeed
                        _MotorBSpeed
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) _MotorBSpeed                                          3     1      2    1210
                                             24 COMRAM     3     1      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _MotorASpeed                                          3     1      2    1244
                                             24 COMRAM     3     1      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _line_cal                                            28    28      0    2254
                                             42 COMRAM     4     4      0
                                              0 BANK0     24    24      0
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     712
                                             16 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     753
                                             28 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _init_wixel                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_tms                                             0     0      0       0
                          _MotorsPWM
                            _an_init
                            _init_io
 ---------------------------------------------------------------------------------
 (2) _init_io                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _an_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorsPWM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_cal                                             2     2      0     198
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     679
                                             55 COMRAM     4     0      4
                                              0 BANK0     11    11      0
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftneg                                              3     0      3     142
                                             16 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     352
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2845
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2404
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     587
                                             16 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (1) _EnhancedRead                                         4     4      0    1105
                                             24 COMRAM     4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     907
                                             16 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _enc                                                 16    16      0       0
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EnhancedRead
     ___awdiv
   ___almod
   ___awtoft
     ___ftpack
   ___ftadd
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
   ___ftge
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___ftneg
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
   ___wmul
     ___fttol (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
   _init_cal
   _init_tms
     _MotorsPWM
     _an_init
     _init_io
   _init_wixel
   _line_cal
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _mspeed
     _MotorASpeed
       ___awdiv
     _MotorBSpeed
       ___awdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
     ___fttol (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
   _printf
     ___fttol (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
     ___wmul (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
     _isdigit (ARG)
     _putch (ARG)
   _read_cal
   _setA
   _setB
   _setC
   _setD
   _twidde_start
   _twiddle_update
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)

 _enc (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     15      39       7       22.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     28      8E       5       88.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3D      4D       1       81.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     114      20        0.0%
DATA                 0      0     114       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Feb  9 14:36:41 2017

                      _i 004C                       l64 008C                       l66 00AE  
                     l93 0716                       l95 0734             ___awdiv@sign 0016  
                     _an 009E                       _cs 00E2                       _kd 00E9  
                     _es 003E                       _kp 0045                       _lp 008A  
                     _ls 00D8      ___wmul@multiplicand 00BD              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000             ___ftadd@exp1 0037             ___ftadd@exp2 0036  
           ___ftadd@sign 0035                      l136 20BC                      l400 14DE  
                    l146 209A                      l173 0DAC                      l413 1624  
                    l409 15E0                      l363 243A                      l722 1716  
                    l396 149A                      l733 17C6                      l742 17E2  
                    l718 16EC                      l695 1C9C                      l775 23DC  
                    l878 21A4                      l888 2234             __CFG_CPB$OFF 000000  
                    _PR2 000FCB             __CFG_CPD$OFF 000000             __CFG_BOR$OFF 000000  
                    _ckd 00E6                      _ckp 0042                      _enc 0008  
                    prod 000FF3                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     l4003 0C0E                     l4011 0C84  
                   l4021 0D36                     l4103 1518                     l4201 188A  
                   l4041 0E88                     l4017 0CA0                     l4121 162C  
                   l4113 15A4                     l4035 0E00                     l4123 1656  
                   l4115 15E8                     l4107 1566                     ?_enc 0001  
                   l4141 1CFE                     l4133 1CD8                     l4045 0ED4  
                   l3413 16FA                     l3511 1FA0                     l4143 1D0A  
                   l4231 194A                     l4223 1920                     l4071 1104  
                   l4055 1008                     l4119 1608                     l4311 0212  
                   l4303 01CC                     l4145 1D0E                     l4153 1D40  
                   l4137 1CEC                     l4233 1954                     l4073 1110  
                   l4065 10AE                     l3441 1776                     l4321 0276  
                   l4313 0230                     l3515 1FAE                     l3507 1F96  
                   l4219 190C                     l3603 212A                     l3443 1780  
                   l3435 1754                     l3419 1724                     l4091 145E  
                   l4403 0596                     l4411 0606                     l4331 02F6  
                   l4315 0234                     l4157 1D56                     l4149 1D32  
                   l3381 1C54                     l3373 1C1E                     l4181 1F04  
                   l4237 1970                     l4229 193A                     l3621 1AAA  
                   l4069 10F0                     l3461 17FE                     l3453 17B4  
                   l3445 178A                     l4093 14A2                     l4085 1422  
                   l4333 02FA                     l4325 02B4                     l4253 005A  
                   l3631 1ADC                     l3615 1A92                     l3551 1DA0  
                   l3471 182E                     l3455 17BE                     l3447 1792  
                   l3703 2254                     l4431 06F6                     l4327 02B8  
                   l4319 0272                     l4255 0062                     l3385 1C6A  
                   l3377 1C2C                     l4169 22D0                     l4177 1ED4  
                   l3553 1DCE                     l3713 2172                     l4097 14C2  
                   l4433 070C                     l4409 05F4                     l4337 032C  
                   l3483 1F48                     l3387 1C88                     l3379 1C36  
                   l4187 1F30                     l3627 1ACC                     l3643 1B1A  
                   l3555 1DDA                     l3547 1D88                     l3571 1E76  
                   l3563 1E22                     l3715 217A                     l4099 14E6  
                   l4443 07B4                     l4419 062C                     l4371 04C4  
                   l4347 0362                     l4275 00BC                     l3813 20A8  
                   l3389 1C92                     l3629 1AD8                     l3725 219A  
                   l3717 217E                     l3741 222A                     l3733 220A  
                   l4381 051A                     l4373 04E2                     l4365 041A  
                   l4293 0172                     l4285 011C                     l3495 1F6E  
                   l3647 1B30                     l3639 1B0C                     l3567 1E3A  
                   l3735 2212                     l3911 1356                     l3663 19D2  
                   l4447 0806                     l4439 0738                     l4295 017E  
                   l4463 08D0                     l3497 1F76                     l3489 1F58  
                   l3809 20A0                     l3569 1E6A                     l3737 2216  
                   l3921 13BE                     l3905 1330                     l3833 113E  
                   l3681 1A14                     l3657 19AA                     l4369 0430  
                   l3499 1F7A                     l3587 2400                     l3907 133C  
                   l3915 136A                     l3835 1150                     l3923 13CA  
                   l3691 1A3C                     l4379 04FC                     l3917 1370  
                   l3845 118A                     l3829 112A                     l3677 1A04  
                   l3951 207A                     l3935 2032                     l3599 2116  
                   l3855 1200                     l3839 115A                     l3687 1A2C  
                   l4399 0580                     l3945 2062                     l3881 1296  
                   l3857 122A                     l3947 206A                     l3939 2042  
                   l3891 12F0                     l3867 125A                     l3963 0928  
                   l3893 12FA                     l3869 1260                     l3981 0A50  
                   l3887 12B8                     l3967 09BE                     l3975 0A34  
                   l3985 0AE6                     l3993 0B5C                     l3899 1314  
                   l3999 0B78                     STR_1 7F69                     STR_2 7F90  
                   STR_3 7FDB                     STR_4 7E66                     STR_5 7E37  
                   STR_6 7FB7                     STR_7 7EED                     STR_8 7EC1  
                   STR_9 7E94                     u4100 1DB4                     u4101 1DAE  
                   u4118 1DB6                     u4150 1E4E                     u4151 1E48  
                   u4311 19BA                     u5131 1868                     u5300 01F8  
                   u5150 18B0                     u5230 00EE                     u4168 1E50  
                   u5400 03BC                     u5320 0254                     u5401 03B4  
                   u5155 18A6                     u4291 1992                     u3811 16B8  
                   u5340 0296                     u5260 0148                     u3821 16CC  
                   u4710 0A4E                     u4800 0DFE                     u5520 072E  
                   u5360 02D8                     u5280 01C2                     u5418 03C0  
                   u4740 0B76                     u5460 055E                     u5380 031A  
                   u4830 0FFE                     u4910 1490                     u5550 082E  
                   u4680 0926                     u4920 1492                     u4770 0C9E  
                   u4960 1590                     u4890 144A                     u4980 15D6  
                   u4990 15D8                     _TXIF 007CF4                     _main 0012  
           ___ftpack@arg 0011                     _maxs 0112                     _setA 246C  
                   _setB 2462                     _setC 2458                     _setD 244E  
                   _mins 008C             ___ftpack@exp 0014                     _time 0060  
                   fsr0h 000FEA                     fsr1h 000FE2                     fsr2h 000FDA  
                   fsr0l 000FE9                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 004E                     prodh 000FF4                     prodl 000FF3  
                   start 000E            __CFG_IESO$OFF 000000    __size_of_twidde_start 0024  
           ___ftmul@cntr 002A             ___param_bank 000000             ___ftmul@sign 002B  
           ___fttol@exp1 00BA                    ??_enc 0001             ___fttol@lval 00B6  
          __CFG_PLLDIV$5 000000          __end_of___aldiv 1B42          __end_of___almod 1D68  
                  ?_main 0001                    ?_setA 0001                    ?_setB 0001  
                  ?_setC 0001                    ?_setD 0001          __end_of___awdiv 1FB8  
        __end_of___ftadd 1854                    STR_10 7F41                    STR_11 7F18  
                  _CMCON 000FB4          __end_of___ftneg 23EA          __end_of___ftmul 1A76  
        ___awdiv@divisor 0013          __end_of___ftsub 227E          __end_of___fttol 1982  
         __CFG_DEBUG$OFF 000000          __end_of___lwdiv 21AE          __end_of___lwmod 223E  
                  i2l323 1BD2          ___awdiv@counter 0015                    _TMR0H 000FD7  
                  _TMR1H 000FCF                    _TMR0L 000FD6                    _TMR1L 000FCE  
                  _SPBRG 000FAF            __CFG_USBDIV$2 000000                    _TXREG 000FAD  
        __end_of_an_init 237E            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000      ___lmul@multiplicand 0015  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000            ___awtoft@sign 001C          __end_of_dpowers 7E37  
        __end_of_init_io 2354          __end_of_isdigit 2408            ___ftpack@sign 0015  
                  _putch 2438                    main@a 0126                    main@b 0128  
                  main@i 0137                    pclath 000FFA                    tablat 000FF5  
           _twidde_start 237E                    status 000FD8           __CFG_ICPRT$OFF 000000  
   __end_of_EnhancedRead 2106           __CFG_MCLRE$OFF 000000          __initialization 1FB8  
           __end_of_main 090C             __end_of_setA 2476             __end_of_setB 246C  
           __end_of_setC 2462             __end_of_setD 2458                   ??_main 00D4  
          ___fttol@sign1 00B5                   ??_setA 0011                   ??_setB 0011  
                 ??_setC 0011                   ??_setD 0011            __activetblptr 000002  
        __CFG_CCP2MX$OFF 000000                   _ADRESH 000FC4                   _ADRESL 000FC3  
                 _CCPR1L 000FBE                   _CCPR2L 000FBB         ___awdiv@dividend 0011  
       __end_of___awtoft 22F4                   ?_putch 0001         __end_of___ftpack 1CBC  
                 i2l3331 1B88                   i2l3341 1BC8                   i2l3335 1B98  
                 _TMR0IF 007F92                   _SPBRGH 000FB0                   _TMR2ON 007E52  
          ??_MotorASpeed 001B            ??_MotorBSpeed 001B           __CFG_XINST$OFF 000000  
            line_cal@aux 00C2                   ___ftge 1EA4                   ___lmul 2106  
              ??___aldiv 0025                ??___almod 0019                   ___wmul 22F4  
              ??___awdiv 0015                ??___ftadd 0032           __CFG_STVREN$ON 000000  
                 _calval 0100                ??___ftneg 0014                ??___ftmul 0023  
              ??___ftsub 003E                ??___fttol 00B0                ??___lwdiv 0015  
              ??___lwmod 001C         __end_of_line_cal 111C         __end_of_init_cal 209C  
       __end_of_read_cal 0DAE                   _old_lp 0088                   _intern 0048  
       __end_of_init_tms 21FC                   clear_0 1FFE                   clear_1 200A  
              ??_an_init 0011         ___awdiv@quotient 0017                   _mspeed 2408  
                 _printf 111C                   _status 00EC                   main@fs 012C  
     __size_of_MotorsPWM 003E    ___ftmul@f3_as_product 0027                ??_init_io 0011  
           __pdataCOMRAM 003E                ??_isdigit 0011             __mediumconst 7E2C  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
          _line_cal$2289 00B0               __accesstop 0060  __end_of__initialization 201C  
        __CFG_PBADEN$OFF 000000               ___ftadd@f1 002C               ___ftadd@f2 002F  
             ___ftge@ff1 0011               ___ftge@ff2 0014            ___rparam_used 000001  
             ___ftneg@f1 0011               ___awtoft@c 0019               ___ftmul@f1 001D  
             ___ftmul@f2 0020               ___ftsub@f1 0038               ___ftsub@f2 003B  
             ___fttol@f1 0038           __pcstackCOMRAM 0001             __pidataBANK0 2422  
    __end_of_MotorASpeed 1E0A      __end_of_MotorBSpeed 1EA4            __end_of_putch 2444  
__size_of_twiddle_update 02C0                  ??_putch 0011               __pbssBANK0 0060  
             __pbssBANK1 0100    __size_of_EnhancedRead 006A      _twiddle_update$1718 00B3  
    _twiddle_update$1719 00B5        __end_of_MotorsPWM 22BC                  ?___ftge 0011  
                ?___lmul 0011                  ?___wmul 00BB           ___lmul@product 0019  
              ?___awtoft 0019                ?___ftpack 0011                  ?_mspeed 00BB  
                ?_printf 00BF                  _T2CKPS0 007E50                  _T2CKPS1 007E51  
           _EnhancedRead 209C          __CFG_VREGEN$OFF 000000                ?_line_cal 0001  
              ?_init_cal 0001                ?_read_cal 0001                ?_init_tms 0001  
            _MotorASpeed 1D68              _MotorBSpeed 1E0A                  __Hparam 0000  
                __Lparam 0000                  ___aldiv 1A76                  ___almod 1CBC  
        __size_of___ftge 0090                  ___awdiv 1F34          __size_of___lmul 0056  
                ___ftadd 16A8                  ___ftneg 23C6          __size_of___wmul 0032  
                ___ftmul 1982                  ___ftsub 223E                  ___fttol 1854  
                ___lwdiv 215C                  ___lwmod 21FC                  __pcinit 1FB8  
                _an_init 2354               ??___awtoft 001C               ??___ftpack 0016  
                __ramtop 0800               _init_wixel 23A2                  __ptext0 0012  
                __ptext1 13E8                  __ptext2 223E          __size_of_mspeed 001A  
                __ptext3 16A8                  __ptext4 1982                  __ptext5 237E  
                __ptext6 244E                  __ptext7 2458                  __ptext8 2462  
                __ptext9 246C          __size_of_printf 02CC                _T0CONbits 000FD5  
              _T1CONbits 000FCD                  _dpowers 7E2D                _T2CONbits 000FCA  
           __size_of_enc 1C06                  _init_io 2326                  _isdigit 23EA  
       ___aldiv@dividend 001D                  main@dif 0130                  main@der 0124  
         __pintcode_body 1B42     end_of_initialization 201C               ??_line_cal 002B  
             ??_init_cal 0011            __Lmediumconst 7E2C                  int_func 1B42  
             ??_read_cal 0011               ??_init_tms 0011                  mspeed@a 00BB  
                mspeed@b 00BD                _RCSTAbits 000FAB                  printf@c 00D3  
                printf@f 00BF         ___aldiv@quotient 0027                  postdec1 000FE5  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE           _twiddle_update 13E8                _PORTAbits 000F80  
              _PORTBbits 000F81                _PORTCbits 000F82                _PORTDbits 000F83  
              _PORTEbits 000F84                _TRISAbits 000F92                _TRISBbits 000F93  
              _TRISCbits 000F94                _TRISDbits 000F95                _TRISEbits 000F96  
            _CCP1CONbits 000FBD              printf@width 00D1              _CCP2CONbits 000FBA  
              _TXSTAbits 000FAC              ___ftmul@exp 0026   __end_of_twiddle_update 16A8  
         __end_of___ftge 1F34           __end_of___lmul 215C           __end_of___wmul 2326  
            _BAUDCONbits 000FB8            __pidataCOMRAM 2444              ?_init_wixel 0001  
         __end_of_mspeed 2422           __end_of_printf 13E8      start_initialization 1FB8  
            __end_of_enc 1C0E               line_cal@ok 00BC                _MotorsPWM 227E  
               ??___ftge 0017                 ??___lmul 0019          ?_twiddle_update 0001  
               ??___wmul 003C              __pdataBANK0 00D8         __CFG_LPT1OSC$OFF 000000  
               ??_mspeed 003C                 ??_printf 00C7        __size_of___awtoft 0038  
      __size_of___ftpack 00AE              __pbssCOMRAM 0048            __pcstackBANK0 00B0  
          __pcstackBANK1 0124             _isdigit$1966 0012             _read_cal$530 001A  
           _read_cal$532 001C             _read_cal$534 001E             _read_cal$536 0020  
          ?_twidde_start 0001      __size_of_init_wixel 0024             ?_MotorASpeed 0019  
           ?_MotorBSpeed 0019        __size_of_line_cal 036E        __size_of_init_cal 0072  
      __size_of_read_cal 04A2        __size_of_init_tms 004E                _main$2288 012A  
       ___lwdiv@dividend 0011               ?_MotorsPWM 0001                __pintcode 0008  
          __pmediumconst 7E2C                 ?___aldiv 001D                 ?___almod 0011  
               ?___awdiv 0011                 ?___ftadd 002C                 ?___ftneg 0011  
               ?___ftmul 001D                 ?___ftsub 0038                 ?___fttol 0038  
               ?___lwdiv 0011                 ?___lwmod 0018                 ?_an_init 0001  
       ___almod@dividend 0011                 ?_init_io 0001             MotorASpeed@S 0019  
               ?_isdigit 0001             MotorBSpeed@S 0019         ___lwdiv@quotient 0016  
         ??_twidde_start 0011           __size_of_putch 000C          ___aldiv@divisor 0021  
               _T2OUTPS0 007E53                 _T2OUTPS1 007E54                 _T2OUTPS2 007E55  
               _T2OUTPS3 007E56          ___aldiv@counter 0025            EnhancedRead@i 001C  
         ___wmul@product 003C                 _UCFGbits 000F6F                 _RCONbits 000FD0  
       __CFG_WDTPS$32768 000000                 _UCONbits 000F6D               _ADCON0bits 000FC2  
             _ADCON1bits 000FC1               _ADCON2bits 000FC0                main@i_362 0135  
      ___wmul@multiplier 00BB               printf@flag 00D0               printf@prec 00CD  
              main@speed 0133        ___lmul@multiplier 0011              _INTCON2bits 000FF1  
              copy_data0 1FCC                copy_data1 1FEC                 __Hrparam 0000  
              line_cal@a 00B4                line_cal@b 00B8                line_cal@i 00C4  
              line_cal@j 00C6                 __Lrparam 0000                init_cal@i 0011  
            ??_MotorsPWM 0011            line_cal@value 00BE                read_cal@i 0022  
       __size_of___aldiv 00CC         __size_of___almod 00AC         __size_of___awdiv 0084  
       __size_of___ftadd 01AC         __size_of___ftneg 0024         __size_of___ftmul 00F4  
       __size_of___ftsub 0040         __size_of___fttol 012E         __size_of___lwdiv 0052  
       __size_of___lwmod 0042                 ___awtoft 22BC                 ___ftpack 1C0E  
           ??_init_wixel 0011         __size_of_an_init 002A         __size_of_init_io 002E  
       __size_of_isdigit 001E          ___lwdiv@divisor 0013                 _best_err 004A  
        ___lwdiv@counter 0015                 __ptext10 090C                 __ptext11 111C  
               __ptext20 0DAE                 __ptext12 2438                 __ptext21 2106  
               __ptext13 23EA                 __ptext30 23C6                 __ptext22 1A76  
               __ptext14 22F4                 __ptext31 1EA4                 __ptext23 23A2  
               __ptext15 21FC                 __ptext32 22BC                 __ptext24 21AE  
               __ptext16 215C                 __ptext33 1C0E                 __ptext25 2326  
               __ptext17 2408                 __ptext34 1CBC                 __ptext26 2354  
               __ptext18 1E0A                 __ptext35 209C                 __ptext27 227E  
               __ptext19 1D68                 __ptext36 1F34                 __ptext28 202A  
               __ptext29 1854          ___almod@divisor 0015          ___almod@counter 0019  
               _line_cal 0DAE                 _init_cal 202A            __size_of_main 08FA  
               _read_cal 090C            __size_of_setA 000A            __size_of_setB 000A  
          __size_of_setC 000A                 _init_tms 21AE            __size_of_setD 000A  
       ??_twiddle_update 00B0       __end_of_init_wixel 23C6     __size_of_MotorASpeed 00A2  
   __size_of_MotorBSpeed 009A                 int$flags 004E          EnhancedRead@aux 001A  
   __end_of_twidde_start 23A2                 main@faux 012E                printf@val 00CE  
  __CFG_CPUDIV$OSC1_PLL2 000000                putch@data 0011            ?_EnhancedRead 0001  
             _INTCONbits 000FF2                 isdigit@c 0013                 intlevel2 0000  
       ___lwmod@dividend 0018               _OSCCONbits 000FD3                 printf@ap 00CB  
         ??_EnhancedRead 0019          ___lwmod@divisor 001A          ___lwmod@counter 001C  
           ___aldiv@sign 0026       __CFG_FOSC$HSPLL_HS 000000             ___almod@sign 001A  
